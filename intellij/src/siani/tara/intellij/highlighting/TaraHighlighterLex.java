/* The following code was generated by JFlex 1.4.3 on 29/07/14 10:51 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import siani.tara.intellij.project.module.ModuleProvider;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.lang.Model;

import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/07/14 10:51 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\52\1\56\1\54\3\0\16\52\4\0\1\56\2\0\1\53\1\36"+
    "\1\40\1\51\1\45\1\32\1\33\1\41\1\50\1\42\1\46\1\34"+
    "\1\0\12\55\1\43\1\35\1\0\1\44\3\0\2\47\1\1\5\47"+
    "\1\10\21\47\4\0\1\47\1\0\1\13\1\21\1\4\1\14\1\5"+
    "\1\23\1\27\1\17\1\11\2\47\1\15\1\12\1\3\1\2\1\6"+
    "\1\30\1\25\1\16\1\7\1\20\1\26\1\24\1\22\1\31\1\47"+
    "\1\35\1\0\1\35\1\0\41\52\2\0\4\47\4\0\1\47\2\0"+
    "\1\52\7\0\1\47\4\0\1\47\5\0\27\47\1\0\37\47\1\0"+
    "\u01ca\47\4\0\14\47\16\0\5\47\7\0\1\47\1\0\1\47\21\0"+
    "\160\52\5\47\1\0\2\47\2\0\4\47\10\0\1\47\1\0\3\47"+
    "\1\0\1\47\1\0\24\47\1\0\123\47\1\0\213\47\1\0\5\52"+
    "\2\0\236\47\11\0\46\47\2\0\1\47\7\0\47\47\11\0\55\52"+
    "\1\0\1\52\1\0\2\52\1\0\2\52\1\0\1\52\10\0\33\47"+
    "\5\0\3\47\15\0\4\52\7\0\1\47\4\0\13\52\5\0\53\47"+
    "\25\52\12\55\4\0\2\47\1\52\143\47\1\0\1\47\10\52\1\0"+
    "\6\52\2\47\2\52\1\0\4\52\2\47\12\55\3\47\2\0\1\47"+
    "\17\0\1\52\1\47\1\52\36\47\33\52\2\0\131\47\13\52\1\47"+
    "\16\0\12\55\41\47\11\52\2\47\4\0\1\47\5\0\26\47\4\52"+
    "\1\47\11\52\1\47\3\52\1\47\5\52\22\0\31\47\3\52\244\0"+
    "\4\52\66\47\3\52\1\47\22\52\1\47\7\52\12\47\2\52\2\0"+
    "\12\55\1\0\7\47\1\0\7\47\1\0\3\52\1\0\10\47\2\0"+
    "\2\47\2\0\26\47\1\0\7\47\1\0\1\47\3\0\4\47\2\0"+
    "\1\52\1\47\7\52\2\0\2\52\2\0\3\52\1\47\10\0\1\52"+
    "\4\0\2\47\1\0\3\47\2\52\2\0\12\55\4\47\7\0\1\47"+
    "\5\0\3\52\1\0\6\47\4\0\2\47\2\0\26\47\1\0\7\47"+
    "\1\0\2\47\1\0\2\47\1\0\2\47\2\0\1\52\1\0\5\52"+
    "\4\0\2\52\2\0\3\52\3\0\1\52\7\0\4\47\1\0\1\47"+
    "\7\0\12\55\2\52\3\47\1\52\13\0\3\52\1\0\11\47\1\0"+
    "\3\47\1\0\26\47\1\0\7\47\1\0\2\47\1\0\5\47\2\0"+
    "\1\52\1\47\10\52\1\0\3\52\1\0\3\52\2\0\1\47\17\0"+
    "\2\47\2\52\2\0\12\55\1\0\1\47\17\0\3\52\1\0\10\47"+
    "\2\0\2\47\2\0\26\47\1\0\7\47\1\0\2\47\1\0\5\47"+
    "\2\0\1\52\1\47\7\52\2\0\2\52\2\0\3\52\10\0\2\52"+
    "\4\0\2\47\1\0\3\47\2\52\2\0\12\55\1\0\1\47\20\0"+
    "\1\52\1\47\1\0\6\47\3\0\3\47\1\0\4\47\3\0\2\47"+
    "\1\0\1\47\1\0\2\47\3\0\2\47\3\0\3\47\3\0\14\47"+
    "\4\0\5\52\3\0\3\52\1\0\4\52\2\0\1\47\6\0\1\52"+
    "\16\0\12\55\11\0\1\47\7\0\3\52\1\0\10\47\1\0\3\47"+
    "\1\0\27\47\1\0\12\47\1\0\5\47\3\0\1\47\7\52\1\0"+
    "\3\52\1\0\4\52\7\0\2\52\1\0\2\47\6\0\2\47\2\52"+
    "\2\0\12\55\22\0\2\52\1\0\10\47\1\0\3\47\1\0\27\47"+
    "\1\0\12\47\1\0\5\47\2\0\1\52\1\47\7\52\1\0\3\52"+
    "\1\0\4\52\7\0\2\52\7\0\1\47\1\0\2\47\2\52\2\0"+
    "\12\55\1\0\2\47\17\0\2\52\1\0\10\47\1\0\3\47\1\0"+
    "\51\47\2\0\1\47\7\52\1\0\3\52\1\0\4\52\1\47\10\0"+
    "\1\52\10\0\2\47\2\52\2\0\12\55\12\0\6\47\2\0\2\52"+
    "\1\0\22\47\3\0\30\47\1\0\11\47\1\0\1\47\2\0\7\47"+
    "\3\0\1\52\4\0\6\52\1\0\1\52\1\0\10\52\22\0\2\52"+
    "\15\0\60\47\1\52\2\47\7\52\4\0\10\47\10\52\1\0\12\55"+
    "\47\0\2\47\1\0\1\47\2\0\2\47\1\0\1\47\2\0\1\47"+
    "\6\0\4\47\1\0\7\47\1\0\3\47\1\0\1\47\1\0\1\47"+
    "\2\0\2\47\1\0\4\47\1\52\2\47\6\52\1\0\2\52\1\47"+
    "\2\0\5\47\1\0\1\47\1\0\6\52\2\0\12\55\2\0\2\47"+
    "\42\0\1\47\27\0\2\52\6\0\12\55\13\0\1\52\1\0\1\52"+
    "\1\0\1\52\4\0\2\52\10\47\1\0\44\47\4\0\24\52\1\0"+
    "\2\52\5\47\13\52\1\0\44\52\11\0\1\52\71\0\53\47\24\52"+
    "\1\47\12\55\6\0\6\47\4\52\4\47\3\52\1\47\3\52\2\47"+
    "\7\52\3\47\4\52\15\47\14\52\1\47\1\52\12\55\4\52\2\0"+
    "\46\47\12\0\53\47\1\0\1\47\3\0\u0149\47\1\0\4\47\2\0"+
    "\7\47\1\0\1\47\1\0\4\47\2\0\51\47\1\0\4\47\2\0"+
    "\41\47\1\0\4\47\2\0\7\47\1\0\1\47\1\0\4\47\2\0"+
    "\17\47\1\0\71\47\1\0\4\47\2\0\103\47\2\0\3\52\40\0"+
    "\20\47\20\0\125\47\14\0\u026c\47\2\0\21\47\1\0\32\47\5\0"+
    "\113\47\3\0\3\47\17\0\15\47\1\0\4\47\3\52\13\0\22\47"+
    "\3\52\13\0\22\47\2\52\14\0\15\47\1\0\3\47\1\0\2\52"+
    "\14\0\64\47\40\52\3\0\1\47\3\0\2\47\1\52\2\0\12\55"+
    "\41\0\3\52\2\0\12\55\6\0\130\47\10\0\51\47\1\52\1\47"+
    "\5\0\106\47\12\0\35\47\3\0\14\52\4\0\14\52\12\0\12\55"+
    "\36\47\2\0\5\47\13\0\54\47\4\0\21\52\7\47\2\52\6\0"+
    "\12\55\46\0\27\47\5\52\4\0\65\47\12\52\1\0\35\52\2\0"+
    "\1\52\12\55\6\0\12\55\15\0\1\47\130\0\5\52\57\47\21\52"+
    "\7\47\4\0\12\55\21\0\11\52\14\0\3\52\36\47\12\52\3\0"+
    "\2\47\12\55\6\0\46\47\16\52\14\0\44\47\24\52\10\0\12\55"+
    "\3\0\3\47\12\55\44\47\122\0\3\52\1\0\25\52\4\47\1\52"+
    "\4\47\1\52\15\0\300\47\47\52\25\0\4\52\u0116\47\2\0\6\47"+
    "\2\0\46\47\2\0\6\47\2\0\10\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\37\47\2\0\65\47\1\0\7\47\1\0\1\47"+
    "\3\0\3\47\1\0\7\47\3\0\4\47\2\0\6\47\4\0\15\47"+
    "\5\0\3\47\1\0\7\47\16\0\5\52\32\0\5\52\20\0\2\47"+
    "\23\0\1\47\13\0\5\52\5\0\6\52\1\0\1\47\15\0\1\47"+
    "\20\0\15\47\3\0\14\47\1\37\15\47\26\0\15\52\4\0\1\52"+
    "\3\0\14\52\21\0\1\47\4\0\1\47\2\0\12\47\1\0\1\47"+
    "\3\0\5\47\6\0\1\47\1\0\1\47\1\0\1\47\1\0\4\47"+
    "\1\0\13\47\2\0\4\47\5\0\5\47\4\0\1\47\21\0\51\47"+
    "\u0a77\0\57\47\1\0\57\47\1\0\205\47\6\0\4\47\3\52\16\0"+
    "\46\47\12\0\66\47\11\0\1\47\17\0\1\52\27\47\11\0\7\47"+
    "\1\0\7\47\1\0\7\47\1\0\7\47\1\0\7\47\1\0\7\47"+
    "\1\0\7\47\1\0\7\47\1\0\40\52\57\0\1\47\u01d5\0\3\47"+
    "\31\0\11\47\6\52\1\0\5\47\2\0\5\47\4\0\126\47\2\0"+
    "\2\52\2\0\3\47\1\0\132\47\1\0\4\47\5\0\51\47\3\0"+
    "\136\47\21\0\33\47\65\0\20\47\u0200\0\u19b6\47\112\0\u51cc\47\64\0"+
    "\u048d\47\103\0\56\47\2\0\u010d\47\3\0\20\47\12\55\2\47\24\0"+
    "\57\47\1\52\14\0\2\52\1\0\31\47\10\0\120\47\2\52\45\0"+
    "\11\47\2\0\147\47\2\0\4\47\1\0\2\47\16\0\12\47\120\0"+
    "\10\47\1\52\3\47\1\52\4\47\1\52\27\47\5\52\20\0\1\47"+
    "\7\0\64\47\14\0\2\52\62\47\21\52\13\0\12\55\6\0\22\52"+
    "\6\47\3\0\1\47\4\0\12\55\34\47\10\52\2\0\27\47\15\52"+
    "\14\0\35\47\3\0\4\52\57\47\16\52\16\0\1\47\12\55\46\0"+
    "\51\47\16\52\11\0\3\47\1\52\10\47\2\52\2\0\12\55\6\0"+
    "\27\47\3\0\1\47\1\52\4\0\60\47\1\52\1\47\3\52\2\47"+
    "\2\52\5\47\2\52\1\47\1\52\1\47\30\0\3\47\43\0\6\47"+
    "\2\0\6\47\2\0\6\47\11\0\7\47\1\0\7\47\221\0\43\47"+
    "\10\52\1\0\2\52\2\0\12\55\6\0\u2ba4\47\14\0\27\47\4\0"+
    "\61\47\u2104\0\u012e\47\2\0\76\47\2\0\152\47\46\0\7\47\14\0"+
    "\5\47\5\0\1\47\1\52\12\47\1\0\15\47\1\0\5\47\1\0"+
    "\1\47\1\0\2\47\1\0\2\47\1\0\154\47\41\0\u016b\47\22\0"+
    "\100\47\2\0\66\47\50\0\15\47\3\0\20\52\20\0\7\52\14\0"+
    "\2\47\30\0\3\47\31\0\1\47\6\0\5\47\1\0\207\47\2\0"+
    "\1\52\4\0\1\47\13\0\12\55\7\0\32\47\4\0\1\47\1\0"+
    "\32\47\13\0\131\47\3\0\6\47\2\0\6\47\2\0\6\47\2\0"+
    "\3\47\3\0\2\47\3\0\2\47\22\0\3\52\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\25\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\5\1\1\15\1\16"+
    "\1\15\1\2\1\17\11\2\1\20\1\21\1\2\1\22"+
    "\15\2\2\0\1\23\1\0\1\24\1\25\1\0\1\26"+
    "\2\0\21\2\1\27\1\30\1\2\1\31\7\2\1\32"+
    "\1\33\2\0\1\34\1\0\1\35\4\2\1\36\4\2"+
    "\1\37\4\2\1\40\3\2\1\41\1\42\1\43\3\2"+
    "\1\0\1\44\1\0\2\2\1\45\1\2\1\46\15\2"+
    "\1\44\2\0\11\2\1\47\1\50\1\51\4\2\1\0"+
    "\1\52\1\53\2\2\1\54\2\2\1\55\1\2\1\56"+
    "\3\2\1\57\1\2\1\60\1\61\2\2\1\62\1\2"+
    "\1\63\1\2\1\64\1\65\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\57"+
    "\0\57\0\u0439\0\57\0\u0292\0\u0292\0\57\0\57\0\57"+
    "\0\57\0\57\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u0292\0\u060f\0\u063e\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u0292\0\u0292\0\u07b6"+
    "\0\u0292\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0468"+
    "\0\57\0\u0a77\0\u0aa6\0\u04f5\0\u0524\0\57\0\u0ad5\0\u0b04"+
    "\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4"+
    "\0\u0e23\0\u0292\0\u0292\0\u0e52\0\u0292\0\u0e81\0\u0eb0\0\u0edf"+
    "\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0292\0\57\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u0292"+
    "\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u0292\0\u122d\0\u125c\0\u128b"+
    "\0\u12ba\0\u0292\0\u12e9\0\u1318\0\u1347\0\u0292\0\u0292\0\u0292"+
    "\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u0ff9\0\u1432\0\u1461\0\u1490"+
    "\0\u0292\0\u14bf\0\u0292\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722"+
    "\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a"+
    "\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u0292\0\u0292\0\u0292\0\u1985"+
    "\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u0292\0\u0292\0\u1a70\0\u1a9f"+
    "\0\u0292\0\u1ace\0\u1afd\0\u0292\0\u1b2c\0\u0292\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u0292\0\u0292\0\u1c46\0\u1c75\0\u0292"+
    "\0\u1ca4\0\u0292\0\u1cd3\0\u0292\0\u0292\0\u0292\0\u0292";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\17\1\24\1\25\1\26\1\27\3\17"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\17\1\45\1\46"+
    "\1\2\1\47\1\50\1\51\1\52\60\0\1\17\1\53"+
    "\27\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\2\17\1\54\26\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\12\17\1\55"+
    "\16\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\1\17\1\56\10\17\1\57\16\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\11\17\1\60\17\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\24\17\1\61\4\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\4\17\1\62\17\17\1\63\4\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\2\17\1\64"+
    "\26\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\2\17\1\65\12\17\1\66\4\17\1\67"+
    "\6\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\4\17\1\70\24\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\15\17\1\71"+
    "\13\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\1\17\1\72\10\17\1\73\16\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\31\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\6\17\1\74\1\17\1\75\20\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\12\17\1\76\16\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\15\17\1\77\13\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\1\17\1\100\27\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\12\17\1\101\16\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\1\17\1\102\6\17\1\103\20\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\1\17\1\104"+
    "\2\17\1\105\24\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\12\17\1\106\16\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\35\0"+
    "\1\107\22\0\45\110\1\111\11\110\46\0\1\112\6\0"+
    "\1\113\56\0\1\51\2\0\31\114\4\0\2\114\7\0"+
    "\1\114\2\0\1\114\2\0\1\114\1\0\54\115\1\116"+
    "\2\115\54\0\1\50\36\0\1\117\11\0\1\120\6\0"+
    "\1\51\57\0\1\52\1\0\2\17\1\121\26\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\6\17\1\122\2\17\1\123\17\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\1\17\1\124"+
    "\27\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\15\17\1\125\13\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\5\17\1\126"+
    "\23\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\1\17\1\127\6\17\1\130\20\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\24\17\1\131\4\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\17\17\1\132\11\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\6\17\1\133\22\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\6\17\1\134\22\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\6\17\1\135\22\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\17\17\1\136\11\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\6\17\1\137\22\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\24\17\1\140\4\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\2\17\1\141\26\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\15\17\1\142\13\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\4\17\1\143\24\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\1\17\1\144\17\17\1\145"+
    "\7\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\14\17\1\146\14\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\24\17\1\147"+
    "\4\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\6\17\1\150\22\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\1\17\1\151"+
    "\27\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\15\17\1\152\4\17\1\153\4\17\1\154"+
    "\1\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\24\17\1\155\4\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\35\0\1\156\22\0"+
    "\46\157\1\160\10\157\34\0\1\117\20\0\1\113\56\0"+
    "\1\161\51\0\1\162\4\0\1\163\2\0\3\17\1\164"+
    "\25\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\17\17\1\165\11\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\4\17\1\166"+
    "\24\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\24\17\1\167\4\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\4\17\1\170"+
    "\24\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\6\17\1\171\22\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\5\17\1\172"+
    "\23\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\25\17\1\173\3\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\11\17\1\174"+
    "\17\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\4\17\1\175\24\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\4\17\1\176"+
    "\24\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\4\17\1\177\24\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\12\17\1\200"+
    "\16\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\20\17\1\201\10\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\4\17\1\202"+
    "\24\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\10\17\1\203\20\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\26\17\1\204"+
    "\2\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\14\17\1\205\14\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\15\17\1\132"+
    "\13\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\13\17\1\206\15\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\16\17\1\207"+
    "\12\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\6\17\1\210\22\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\1\17\1\211"+
    "\27\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\4\17\1\212\24\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\17\17\1\213"+
    "\11\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\1\0\46\157\1\214\56\157\1\215\10\157\46\0"+
    "\1\216\6\0\1\161\56\0\1\163\47\0\1\120\6\0"+
    "\1\163\2\0\4\17\1\217\24\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\24\17\1\220"+
    "\4\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\13\17\1\221\15\17\4\0\2\17\6\0"+
    "\2\17\2\0\1\17\2\0\1\17\2\0\13\17\1\222"+
    "\15\17\4\0\2\17\6\0\2\17\2\0\1\17\2\0"+
    "\1\17\2\0\30\17\1\223\4\0\2\17\6\0\2\17"+
    "\2\0\1\17\2\0\1\17\2\0\4\17\1\224\24\17"+
    "\4\0\2\17\6\0\2\17\2\0\1\17\2\0\1\17"+
    "\2\0\12\17\1\225\16\17\4\0\2\17\6\0\2\17"+
    "\2\0\1\17\2\0\1\17\2\0\10\17\1\226\20\17"+
    "\4\0\2\17\6\0\2\17\2\0\1\17\2\0\1\17"+
    "\2\0\2\17\1\227\26\17\4\0\2\17\6\0\2\17"+
    "\2\0\1\17\2\0\1\17\2\0\26\17\1\230\2\17"+
    "\4\0\2\17\6\0\2\17\2\0\1\17\2\0\1\17"+
    "\2\0\11\17\1\231\17\17\4\0\2\17\6\0\2\17"+
    "\2\0\1\17\2\0\1\17\2\0\14\17\1\232\14\17"+
    "\4\0\2\17\6\0\2\17\2\0\1\17\2\0\1\17"+
    "\2\0\2\17\1\233\26\17\4\0\2\17\6\0\2\17"+
    "\2\0\1\17\2\0\1\17\2\0\14\17\1\234\14\17"+
    "\4\0\2\17\6\0\2\17\2\0\1\17\2\0\1\17"+
    "\2\0\4\17\1\235\24\17\4\0\2\17\6\0\2\17"+
    "\2\0\1\17\2\0\1\17\2\0\17\17\1\236\11\17"+
    "\4\0\2\17\6\0\2\17\2\0\1\17\2\0\1\17"+
    "\2\0\24\17\1\237\4\17\4\0\2\17\6\0\2\17"+
    "\2\0\1\17\2\0\1\17\2\0\10\17\1\240\20\17"+
    "\4\0\2\17\6\0\2\17\2\0\1\17\2\0\1\17"+
    "\1\0\46\157\1\241\10\157\46\0\1\242\1\0\1\242"+
    "\4\0\1\243\2\0\5\17\1\244\23\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\12\17"+
    "\1\245\16\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\10\17\1\246\20\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\24\17"+
    "\1\247\4\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\6\17\1\250\22\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\2\17"+
    "\1\251\26\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\6\17\1\252\22\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\4\17"+
    "\1\253\24\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\1\17\1\254\27\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\4\17"+
    "\1\255\24\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\26\17\1\256\2\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\4\17"+
    "\1\257\24\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\12\17\1\260\16\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\24\17"+
    "\1\261\4\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\4\17\1\262\24\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\24\17"+
    "\1\263\4\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\47\0\1\241\65\0\1\243\35\0\1\264"+
    "\20\0\1\243\2\0\6\17\1\265\22\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\14\17"+
    "\1\266\14\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\2\17\1\267\26\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\6\17"+
    "\1\270\22\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\4\17\1\271\24\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\12\17"+
    "\1\272\16\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\10\17\1\273\20\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\24\17"+
    "\1\274\4\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\13\17\1\275\15\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\2\17"+
    "\1\276\26\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\3\17\1\277\25\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\2\0\2\17"+
    "\1\300\26\17\4\0\2\17\6\0\2\17\2\0\1\17"+
    "\2\0\1\17\2\0\4\17\1\301\24\17\4\0\2\17"+
    "\6\0\2\17\2\0\1\17\2\0\1\17\56\0\1\302"+
    "\2\0\12\17\1\303\16\17\4\0\2\17\6\0\2\17"+
    "\2\0\1\17\2\0\1\17\2\0\30\17\1\304\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\14\17\1\305\14\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\1\17\1\306\27\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\4\17\1\307\24\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\4\17\1\310\24\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\3\17\1\311\25\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\13\17\1\312\15\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\47\0"+
    "\1\216\6\0\1\302\2\0\6\17\1\313\22\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\2\17\1\314\26\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\14\17\1\315\14\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\2\0"+
    "\4\17\1\316\24\17\4\0\2\17\6\0\2\17\2\0"+
    "\1\17\2\0\1\17\2\0\4\17\1\317\24\17\4\0"+
    "\2\17\6\0\2\17\2\0\1\17\2\0\1\17\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7426];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\2\11\1\1\1\11\2\1\5\11"+
    "\44\1\2\0\1\11\1\0\2\1\1\0\1\11\2\0"+
    "\35\1\1\11\2\0\1\1\1\0\31\1\1\0\1\1"+
    "\1\0\23\1\2\0\20\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private Set<String> identifiers;


	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		String[] uses = zzBuffer.toString().split("use");
        String destiny = null;
        for (String use : uses)
            if (use.contains("as metamodel")) {
                destiny = use.split("as metamodel")[0].trim();
                break;
            }
        Model heritage = TaraLanguage.getMetaModel(destiny);
        if (heritage != null)
            identifiers = heritage.getIdentifiers();
}


  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 56: break;
        case 17: 
          { return TaraTypes.IF;
          }
        case 57: break;
        case 34: 
          { return TaraTypes.WITH;
          }
        case 58: break;
        case 26: 
          { return TaraTypes.VAR;
          }
        case 59: break;
        case 11: 
          { return TaraTypes.COLON;
          }
        case 60: break;
        case 8: 
          { return TaraTypes.PERCENTAGE;
          }
        case 61: break;
        case 41: 
          { return TaraTypes.SINGLE;
          }
        case 62: break;
        case 21: 
          { return TaraTypes.CODE_VALUE_KEY;
          }
        case 63: break;
        case 28: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 64: break;
        case 13: 
          { return TokenType.WHITE_SPACE;
          }
        case 65: break;
        case 43: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 66: break;
        case 4: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 67: break;
        case 27: 
          { return TaraTypes.LIST;
          }
        case 68: break;
        case 12: 
          { return TaraTypes.EQUALS;
          }
        case 69: break;
        case 5: 
          { return TaraTypes.DOT;
          }
        case 70: break;
        case 52: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 71: break;
        case 40: 
          { return TaraTypes.STRING_TYPE;
          }
        case 72: break;
        case 37: 
          { return TaraTypes.NAMED;
          }
        case 73: break;
        case 49: 
          { return TaraTypes.TERMINAL;
          }
        case 74: break;
        case 32: 
          { return TaraTypes.DATE_TYPE;
          }
        case 75: break;
        case 53: 
          { return TaraTypes.METAMODEL;
          }
        case 76: break;
        case 38: 
          { return TaraTypes.EMPTY_REF;
          }
        case 77: break;
        case 3: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 78: break;
        case 51: 
          { return TaraTypes.REQUIRED;
          }
        case 79: break;
        case 44: 
          { return TaraTypes.PRIVATE;
          }
        case 80: break;
        case 54: 
          { return TaraTypes.REFERENCE_TYPE;
          }
        case 81: break;
        case 20: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 82: break;
        case 35: 
          { return TaraTypes.ROOT;
          }
        case 83: break;
        case 22: 
          { return TaraTypes.DOC_LINE;
          }
        case 84: break;
        case 19: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 85: break;
        case 48: 
          { return TaraTypes.PROPERTY;
          }
        case 86: break;
        case 2: 
          { return evaluateIdentifier();
          }
        case 87: break;
        case 9: 
          { return TaraTypes.STAR;
          }
        case 88: break;
        case 39: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 89: break;
        case 14: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 90: break;
        case 47: 
          { return TaraTypes.COORDINATE_VALUE_KEY;
          }
        case 91: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 92: break;
        case 50: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 93: break;
        case 24: 
          { return TaraTypes.USE_KEY;
          }
        case 94: break;
        case 31: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 95: break;
        case 18: 
          { return TaraTypes.AS;
          }
        case 96: break;
        case 15: 
          { return TaraTypes.ON;
          }
        case 97: break;
        case 46: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 98: break;
        case 30: 
          { return TaraTypes.CASE_KEY;
          }
        case 99: break;
        case 16: 
          { return TaraTypes.IS;
          }
        case 100: break;
        case 45: 
          { return TaraTypes.INT_TYPE;
          }
        case 101: break;
        case 42: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 102: break;
        case 29: 
          { return TaraTypes.DATE_VALUE_KEY;
          }
        case 103: break;
        case 55: 
          { return TaraTypes.COORDINATE_TYPE;
          }
        case 104: break;
        case 7: 
          { return TaraTypes.EURO;
          }
        case 105: break;
        case 25: 
          { loadHeritage();
										return TaraTypes.BOX_KEY;
          }
        case 106: break;
        case 33: 
          { return TaraTypes.WORD_KEY;
          }
        case 107: break;
        case 6: 
          { return TaraTypes.DOLLAR;
          }
        case 108: break;
        case 10: 
          { return TaraTypes.COMMA;
          }
        case 109: break;
        case 23: 
          { return TaraTypes.HAS;
          }
        case 110: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
