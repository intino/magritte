/* The following code was generated by JFlex 1.4.3 on 20/06/14 12:15 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import siani.tara.intellij.project.module.ModuleProvider;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.lang.TreeWrapper;

import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/06/14 12:15 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\57\1\60\1\54\3\0\16\57\4\0\1\60\2\0\1\53\1\56"+
    "\2\0\1\40\1\33\1\34\1\0\1\43\1\36\1\25\1\35\1\0"+
    "\12\55\1\37\1\31\1\41\1\0\1\42\2\0\1\44\1\51\1\1"+
    "\1\47\4\56\1\45\4\56\1\46\3\56\1\27\1\50\3\56\1\26"+
    "\3\56\1\31\1\0\1\32\1\0\1\56\1\0\1\13\1\17\1\4"+
    "\1\23\1\5\1\52\1\15\1\24\1\10\1\56\1\14\1\21\1\11"+
    "\1\3\1\2\1\6\1\22\1\12\1\16\1\7\1\20\1\30\4\56"+
    "\1\31\1\0\1\31\1\0\41\57\2\0\4\56\4\0\1\56\2\0"+
    "\1\57\7\0\1\56\4\0\1\56\5\0\27\56\1\0\37\56\1\0"+
    "\u01ca\56\4\0\14\56\16\0\5\56\7\0\1\56\1\0\1\56\21\0"+
    "\160\57\5\56\1\0\2\56\2\0\4\56\10\0\1\56\1\0\3\56"+
    "\1\0\1\56\1\0\24\56\1\0\123\56\1\0\213\56\1\0\5\57"+
    "\2\0\236\56\11\0\46\56\2\0\1\56\7\0\47\56\11\0\55\57"+
    "\1\0\1\57\1\0\2\57\1\0\2\57\1\0\1\57\10\0\33\56"+
    "\5\0\3\56\15\0\4\57\7\0\1\56\4\0\13\57\5\0\53\56"+
    "\25\57\12\55\4\0\2\56\1\57\143\56\1\0\1\56\10\57\1\0"+
    "\6\57\2\56\2\57\1\0\4\57\2\56\12\55\3\56\2\0\1\56"+
    "\17\0\1\57\1\56\1\57\36\56\33\57\2\0\131\56\13\57\1\56"+
    "\16\0\12\55\41\56\11\57\2\56\4\0\1\56\5\0\26\56\4\57"+
    "\1\56\11\57\1\56\3\57\1\56\5\57\22\0\31\56\3\57\244\0"+
    "\4\57\66\56\3\57\1\56\22\57\1\56\7\57\12\56\2\57\2\0"+
    "\12\55\1\0\7\56\1\0\7\56\1\0\3\57\1\0\10\56\2\0"+
    "\2\56\2\0\26\56\1\0\7\56\1\0\1\56\3\0\4\56\2\0"+
    "\1\57\1\56\7\57\2\0\2\57\2\0\3\57\1\56\10\0\1\57"+
    "\4\0\2\56\1\0\3\56\2\57\2\0\12\55\4\56\7\0\1\56"+
    "\5\0\3\57\1\0\6\56\4\0\2\56\2\0\26\56\1\0\7\56"+
    "\1\0\2\56\1\0\2\56\1\0\2\56\2\0\1\57\1\0\5\57"+
    "\4\0\2\57\2\0\3\57\3\0\1\57\7\0\4\56\1\0\1\56"+
    "\7\0\12\55\2\57\3\56\1\57\13\0\3\57\1\0\11\56\1\0"+
    "\3\56\1\0\26\56\1\0\7\56\1\0\2\56\1\0\5\56\2\0"+
    "\1\57\1\56\10\57\1\0\3\57\1\0\3\57\2\0\1\56\17\0"+
    "\2\56\2\57\2\0\12\55\1\0\1\56\17\0\3\57\1\0\10\56"+
    "\2\0\2\56\2\0\26\56\1\0\7\56\1\0\2\56\1\0\5\56"+
    "\2\0\1\57\1\56\7\57\2\0\2\57\2\0\3\57\10\0\2\57"+
    "\4\0\2\56\1\0\3\56\2\57\2\0\12\55\1\0\1\56\20\0"+
    "\1\57\1\56\1\0\6\56\3\0\3\56\1\0\4\56\3\0\2\56"+
    "\1\0\1\56\1\0\2\56\3\0\2\56\3\0\3\56\3\0\14\56"+
    "\4\0\5\57\3\0\3\57\1\0\4\57\2\0\1\56\6\0\1\57"+
    "\16\0\12\55\11\0\1\56\7\0\3\57\1\0\10\56\1\0\3\56"+
    "\1\0\27\56\1\0\12\56\1\0\5\56\3\0\1\56\7\57\1\0"+
    "\3\57\1\0\4\57\7\0\2\57\1\0\2\56\6\0\2\56\2\57"+
    "\2\0\12\55\22\0\2\57\1\0\10\56\1\0\3\56\1\0\27\56"+
    "\1\0\12\56\1\0\5\56\2\0\1\57\1\56\7\57\1\0\3\57"+
    "\1\0\4\57\7\0\2\57\7\0\1\56\1\0\2\56\2\57\2\0"+
    "\12\55\1\0\2\56\17\0\2\57\1\0\10\56\1\0\3\56\1\0"+
    "\51\56\2\0\1\56\7\57\1\0\3\57\1\0\4\57\1\56\10\0"+
    "\1\57\10\0\2\56\2\57\2\0\12\55\12\0\6\56\2\0\2\57"+
    "\1\0\22\56\3\0\30\56\1\0\11\56\1\0\1\56\2\0\7\56"+
    "\3\0\1\57\4\0\6\57\1\0\1\57\1\0\10\57\22\0\2\57"+
    "\15\0\60\56\1\57\2\56\7\57\4\0\10\56\10\57\1\0\12\55"+
    "\47\0\2\56\1\0\1\56\2\0\2\56\1\0\1\56\2\0\1\56"+
    "\6\0\4\56\1\0\7\56\1\0\3\56\1\0\1\56\1\0\1\56"+
    "\2\0\2\56\1\0\4\56\1\57\2\56\6\57\1\0\2\57\1\56"+
    "\2\0\5\56\1\0\1\56\1\0\6\57\2\0\12\55\2\0\2\56"+
    "\42\0\1\56\27\0\2\57\6\0\12\55\13\0\1\57\1\0\1\57"+
    "\1\0\1\57\4\0\2\57\10\56\1\0\44\56\4\0\24\57\1\0"+
    "\2\57\5\56\13\57\1\0\44\57\11\0\1\57\71\0\53\56\24\57"+
    "\1\56\12\55\6\0\6\56\4\57\4\56\3\57\1\56\3\57\2\56"+
    "\7\57\3\56\4\57\15\56\14\57\1\56\1\57\12\55\4\57\2\0"+
    "\46\56\12\0\53\56\1\0\1\56\3\0\u0149\56\1\0\4\56\2\0"+
    "\7\56\1\0\1\56\1\0\4\56\2\0\51\56\1\0\4\56\2\0"+
    "\41\56\1\0\4\56\2\0\7\56\1\0\1\56\1\0\4\56\2\0"+
    "\17\56\1\0\71\56\1\0\4\56\2\0\103\56\2\0\3\57\40\0"+
    "\20\56\20\0\125\56\14\0\u026c\56\2\0\21\56\1\0\32\56\5\0"+
    "\113\56\3\0\3\56\17\0\15\56\1\0\4\56\3\57\13\0\22\56"+
    "\3\57\13\0\22\56\2\57\14\0\15\56\1\0\3\56\1\0\2\57"+
    "\14\0\64\56\40\57\3\0\1\56\3\0\2\56\1\57\2\0\12\55"+
    "\41\0\3\57\2\0\12\55\6\0\130\56\10\0\51\56\1\57\1\56"+
    "\5\0\106\56\12\0\35\56\3\0\14\57\4\0\14\57\12\0\12\55"+
    "\36\56\2\0\5\56\13\0\54\56\4\0\21\57\7\56\2\57\6\0"+
    "\12\55\46\0\27\56\5\57\4\0\65\56\12\57\1\0\35\57\2\0"+
    "\1\57\12\55\6\0\12\55\15\0\1\56\130\0\5\57\57\56\21\57"+
    "\7\56\4\0\12\55\21\0\11\57\14\0\3\57\36\56\12\57\3\0"+
    "\2\56\12\55\6\0\46\56\16\57\14\0\44\56\24\57\10\0\12\55"+
    "\3\0\3\56\12\55\44\56\122\0\3\57\1\0\25\57\4\56\1\57"+
    "\4\56\1\57\15\0\300\56\47\57\25\0\4\57\u0116\56\2\0\6\56"+
    "\2\0\46\56\2\0\6\56\2\0\10\56\1\0\1\56\1\0\1\56"+
    "\1\0\1\56\1\0\37\56\2\0\65\56\1\0\7\56\1\0\1\56"+
    "\3\0\3\56\1\0\7\56\3\0\4\56\2\0\6\56\4\0\15\56"+
    "\5\0\3\56\1\0\7\56\16\0\5\57\32\0\5\57\20\0\2\56"+
    "\23\0\1\56\13\0\5\57\5\0\6\57\1\0\1\56\15\0\1\56"+
    "\20\0\15\56\3\0\32\56\26\0\15\57\4\0\1\57\3\0\14\57"+
    "\21\0\1\56\4\0\1\56\2\0\12\56\1\0\1\56\3\0\5\56"+
    "\6\0\1\56\1\0\1\56\1\0\1\56\1\0\4\56\1\0\13\56"+
    "\2\0\4\56\5\0\5\56\4\0\1\56\21\0\51\56\u0a77\0\57\56"+
    "\1\0\57\56\1\0\205\56\6\0\4\56\3\57\16\0\46\56\12\0"+
    "\66\56\11\0\1\56\17\0\1\57\27\56\11\0\7\56\1\0\7\56"+
    "\1\0\7\56\1\0\7\56\1\0\7\56\1\0\7\56\1\0\7\56"+
    "\1\0\7\56\1\0\40\57\57\0\1\56\u01d5\0\3\56\31\0\11\56"+
    "\6\57\1\0\5\56\2\0\5\56\4\0\126\56\2\0\2\57\2\0"+
    "\3\56\1\0\132\56\1\0\4\56\5\0\51\56\3\0\136\56\21\0"+
    "\33\56\65\0\20\56\u0200\0\u19b6\56\112\0\u51cc\56\64\0\u048d\56\103\0"+
    "\56\56\2\0\u010d\56\3\0\20\56\12\55\2\56\24\0\57\56\1\57"+
    "\14\0\2\57\1\0\31\56\10\0\120\56\2\57\45\0\11\56\2\0"+
    "\147\56\2\0\4\56\1\0\2\56\16\0\12\56\120\0\10\56\1\57"+
    "\3\56\1\57\4\56\1\57\27\56\5\57\20\0\1\56\7\0\64\56"+
    "\14\0\2\57\62\56\21\57\13\0\12\55\6\0\22\57\6\56\3\0"+
    "\1\56\4\0\12\55\34\56\10\57\2\0\27\56\15\57\14\0\35\56"+
    "\3\0\4\57\57\56\16\57\16\0\1\56\12\55\46\0\51\56\16\57"+
    "\11\0\3\56\1\57\10\56\2\57\2\0\12\55\6\0\27\56\3\0"+
    "\1\56\1\57\4\0\60\56\1\57\1\56\3\57\2\56\2\57\5\56"+
    "\2\57\1\56\1\57\1\56\30\0\3\56\43\0\6\56\2\0\6\56"+
    "\2\0\6\56\11\0\7\56\1\0\7\56\221\0\43\56\10\57\1\0"+
    "\2\57\2\0\12\55\6\0\u2ba4\56\14\0\27\56\4\0\61\56\u2104\0"+
    "\u012e\56\2\0\76\56\2\0\152\56\46\0\7\56\14\0\5\56\5\0"+
    "\1\56\1\57\12\56\1\0\15\56\1\0\5\56\1\0\1\56\1\0"+
    "\2\56\1\0\2\56\1\0\154\56\41\0\u016b\56\22\0\100\56\2\0"+
    "\66\56\50\0\15\56\3\0\20\57\20\0\7\57\14\0\2\56\30\0"+
    "\3\56\31\0\1\56\6\0\5\56\1\0\207\56\2\0\1\57\4\0"+
    "\1\56\13\0\12\55\7\0\32\56\4\0\1\56\1\0\32\56\13\0"+
    "\131\56\3\0\6\56\2\0\6\56\2\0\6\56\2\0\3\56\3\0"+
    "\2\56\3\0\2\56\22\0\3\57\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\2\1\1\3\2\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\1"+
    "\7\2\1\1\1\14\1\15\1\14\16\2\1\0\1\16"+
    "\3\2\1\0\1\17\7\2\1\0\1\20\1\0\16\2"+
    "\2\0\2\2\1\21\7\2\1\22\2\2\1\23\2\2"+
    "\1\24\3\2\1\25\2\2\1\26\2\0\1\27\1\30"+
    "\20\2\1\0\1\27\1\2\1\31\12\2\1\32\3\2"+
    "\1\0\3\2\1\33\1\34\1\2\1\35\1\2\1\36"+
    "\5\2\1\0\1\2\1\37\1\40\1\41\1\2\1\42"+
    "\1\2\1\43\1\44\1\45\1\46\1\47\1\50\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\u0372\0\61\0\61\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0372\0\61\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u052b\0\61\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\223\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0ae9\0\u0fe3\0\u1014\0\223\0\u1045\0\u1076\0\223"+
    "\0\u10a7\0\u10d8\0\u1109\0\223\0\u113a\0\u116b\0\223\0\u119c"+
    "\0\u11cd\0\u0df9\0\223\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\223\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729"+
    "\0\u175a\0\223\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\223\0\223\0\u18e2\0\223\0\u1913\0\223\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\223\0\223"+
    "\0\223\0\u1a9b\0\223\0\u1acc\0\223\0\223\0\223\0\61"+
    "\0\223\0\223\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\3\4\1\15\4\4\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\4\1\2\1\50\62\0\1\4\1\51\22\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\24\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\12\4"+
    "\1\52\11\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\12\4\1\53\11\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\12\4\1\54\11\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\4\4\1\55\4\4"+
    "\1\56\12\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\2\4\1\57\5\4\1\60\13\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\17\4\1\61\4\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\1\4"+
    "\1\62\2\4\1\63\17\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\16\4\1\64\5\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\12\4\1\65\11\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\12\4"+
    "\1\66\11\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\26\0\1\67\27\0\1\70\4\0\1\4\1\71\22\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\4\4"+
    "\1\72\17\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\12\4\1\73\11\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\1\0\40\74\1\75\20\74\55\0\1\47"+
    "\4\0\20\4\1\76\3\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\2\4\1\77\21\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\12\4\1\100\11\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\1\4"+
    "\1\101\22\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\6\4\1\102\15\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\1\4\1\103\22\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\12\4\1\104\11\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\1\0\54\105"+
    "\1\106\4\105\54\0\1\46\41\0\1\107\17\0\1\47"+
    "\63\0\1\50\1\0\2\4\1\110\21\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\10\4\1\111\13\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\15\4"+
    "\1\112\6\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\3\4\1\113\20\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\11\4\1\114\12\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\17\4\1\115\4\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\6\4"+
    "\1\116\15\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\5\4\1\117\16\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\20\4\1\120\3\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\1\4\1\121\22\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\21\4"+
    "\1\122\2\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\15\4\1\123\6\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\15\4\1\124\6\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\15\4\1\125\6\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\1\0\25\126"+
    "\1\127\33\126\35\0\1\107\17\0\1\70\4\0\11\4"+
    "\1\130\12\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\15\4\1\131\6\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\11\4\1\132\12\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\7\4\1\133\14\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\6\4"+
    "\1\134\15\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\6\4\1\135\15\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\17\4\1\136\4\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\11\4\1\137\12\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\1\4"+
    "\1\140\22\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\20\4\1\141\3\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\56\0\1\142\4\0\3\4\1\143\20\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\4\4"+
    "\1\144\17\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\4\4\1\145\17\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\13\4\1\146\10\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\10\4\1\147\13\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\4\4"+
    "\1\150\17\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\4\4\1\151\17\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\1\4\1\152\22\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\6\4\1\153\15\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\6\4"+
    "\1\154\15\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\17\4\1\155\4\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\6\4\1\156\15\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\4\4\1\157\17\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\24\4"+
    "\1\160\3\4\13\0\7\4\2\0\3\4\1\0\25\126"+
    "\1\161\60\126\1\162\33\126\1\0\22\4\1\163\1\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\1\4"+
    "\1\164\22\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\12\4\1\165\11\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\4\4\1\166\17\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\17\4\1\167\4\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\16\4"+
    "\1\170\5\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\7\4\1\171\14\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\20\4\1\172\3\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\15\4\1\115\6\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\4\4"+
    "\1\173\17\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\15\4\1\174\6\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\12\4\1\175\11\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\7\4\1\176\14\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\2\4"+
    "\1\177\21\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\11\4\1\200\12\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\7\4\1\201\14\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\7\4\1\202\14\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\11\4"+
    "\1\203\12\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\4\0\1\204\55\0\25\126\1\205\33\126\1\0\17\4"+
    "\1\206\4\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\15\4\1\207\6\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\14\4\1\210\7\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\11\4\1\211\12\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\20\4"+
    "\1\212\3\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\2\4\1\213\21\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\4\4\1\214\17\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\5\4\1\215\16\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\5\4"+
    "\1\216\16\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\14\4\1\217\7\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\2\4\1\220\21\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\6\4\1\221\15\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\6\4"+
    "\1\222\15\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\5\4\1\223\16\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\11\4\1\224\12\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\12\4\1\225\11\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\14\0\1\226"+
    "\72\0\1\205\34\0\11\4\1\227\12\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\4\4\1\230\17\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\12\4"+
    "\1\231\11\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\4\4\1\232\17\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\14\4\1\233\7\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\12\4\1\234\11\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\6\4"+
    "\1\235\15\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\12\4\1\236\11\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\4\4\1\237\17\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\12\4\1\240\11\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\7\4"+
    "\1\241\14\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\20\4\1\242\3\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\4\4\1\243\17\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\3\4\1\244\20\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\12\0\1\245"+
    "\50\0\3\4\1\246\20\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\11\4\1\247\12\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\20\4\1\250\3\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\2\4"+
    "\1\251\21\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\3\4\1\252\20\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\20\4\1\253\3\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\2\0\1\4\1\254\22\4"+
    "\1\0\3\4\13\0\7\4\2\0\3\4\2\0\4\4"+
    "\1\255\17\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\22\4\1\256\1\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\6\4\1\257\15\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\6\0\1\260\54\0\4\4"+
    "\1\261\17\4\1\0\3\4\13\0\7\4\2\0\3\4"+
    "\2\0\4\4\1\262\17\4\1\0\3\4\13\0\7\4"+
    "\2\0\3\4\2\0\2\4\1\263\21\4\1\0\3\4"+
    "\13\0\7\4\2\0\3\4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6909];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\7\11\1\1\2\11\32\1\1\0"+
    "\4\1\1\0\1\11\7\1\1\0\1\11\1\0\16\1"+
    "\2\0\30\1\2\0\22\1\1\0\21\1\1\0\16\1"+
    "\1\0\12\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private Project project;
	private Set<String> identifiers;

	public TaraHighlighterLex(java.io.Reader o, Project project) {
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		Module module = ModuleProvider.getNamespaceOfDocument(project, zzBuffer.toString());
		TreeWrapper heritage = TaraLanguage.getHeritage(module);
		if (heritage != null)
			identifiers = heritage.getIdentifiers();
	}


  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 42: break;
        case 3: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 43: break;
        case 17: 
          { return TaraTypes.VAR;
          }
        case 44: break;
        case 9: 
          { return TaraTypes.COLON;
          }
        case 45: break;
        case 37: 
          { return TaraTypes.ABSTRACT;
          }
        case 46: break;
        case 10: 
          { return TaraTypes.OPEN_AN;
          }
        case 47: break;
        case 35: 
          { return TaraTypes.MULTIPLE;
          }
        case 48: break;
        case 18: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 49: break;
        case 12: 
          { return TokenType.WHITE_SPACE;
          }
        case 50: break;
        case 32: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 51: break;
        case 6: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 52: break;
        case 11: 
          { return TaraTypes.CLOSE_AN;
          }
        case 53: break;
        case 22: 
          { return TaraTypes.BASE_KEY;
          }
        case 54: break;
        case 7: 
          { return TaraTypes.DOT;
          }
        case 55: break;
        case 40: 
          { loadHeritage();
										return TaraTypes.NAMESPACE_KEY;
          }
        case 56: break;
        case 41: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 57: break;
        case 28: 
          { return TaraTypes.STRING_TYPE;
          }
        case 58: break;
        case 34: 
          { return TaraTypes.TERMINAL;
          }
        case 59: break;
        case 2: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 60: break;
        case 38: 
          { return TaraTypes.HAS_NAME;
          }
        case 61: break;
        case 5: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 62: break;
        case 36: 
          { return TaraTypes.REQUIRED;
          }
        case 63: break;
        case 14: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 64: break;
        case 21: 
          { return TaraTypes.ROOT;
          }
        case 65: break;
        case 16: 
          { return TaraTypes.DOC_LINE;
          }
        case 66: break;
        case 15: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 67: break;
        case 27: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 68: break;
        case 4: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 69: break;
        case 13: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 70: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 71: break;
        case 39: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 72: break;
        case 25: 
          { return TaraTypes.ALIAS_TYPE;
          }
        case 73: break;
        case 20: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 74: break;
        case 26: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 75: break;
        case 19: 
          { return TaraTypes.CASE_KEY;
          }
        case 76: break;
        case 33: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 77: break;
        case 29: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 78: break;
        case 31: 
          { return TaraTypes.INT_TYPE;
          }
        case 79: break;
        case 30: 
          { return TaraTypes.PACKAGE;
          }
        case 80: break;
        case 24: 
          { return TaraTypes.WORD_KEY;
          }
        case 81: break;
        case 8: 
          { return TaraTypes.COMMA;
          }
        case 82: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
