/* The following code was generated by JFlex 1.4.3 on 5/01/15 12:20 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import siani.tara.intellij.project.module.ModuleProvider;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.lang.Model;

import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/01/15 12:20 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\52\1\55\1\53\3\0\16\52\4\0\1\55\1\0\1\45\1\0"+
    "\1\36\1\37\1\50\1\0\1\31\1\32\1\40\1\47\1\41\1\46"+
    "\1\33\1\37\12\54\1\42\1\44\1\0\1\43\1\55\2\0\2\36"+
    "\1\1\1\36\1\51\25\36\1\34\1\0\1\35\1\0\1\36\1\0"+
    "\1\14\1\12\1\4\1\16\1\5\1\30\1\26\1\13\1\17\2\36"+
    "\1\23\1\22\1\3\1\2\1\6\1\27\1\21\1\10\1\7\1\11"+
    "\1\20\1\24\1\15\1\25\1\36\4\0\41\52\2\0\4\36\4\0"+
    "\1\36\2\0\1\52\2\0\1\37\4\0\1\36\1\0\1\37\2\0"+
    "\1\36\5\0\27\36\1\0\37\36\1\0\u01ca\36\4\0\14\36\16\0"+
    "\5\36\7\0\1\36\1\0\1\36\21\0\160\52\5\36\1\0\2\36"+
    "\2\0\4\36\10\0\1\36\1\0\3\36\1\0\1\36\1\0\24\36"+
    "\1\0\123\36\1\0\213\36\1\0\5\52\2\0\236\36\11\0\46\36"+
    "\2\0\1\36\7\0\47\36\11\0\55\52\1\0\1\52\1\0\2\52"+
    "\1\0\2\52\1\0\1\52\10\0\33\36\5\0\3\36\15\0\4\52"+
    "\7\0\1\36\4\0\13\52\5\0\53\36\25\52\12\54\4\0\2\36"+
    "\1\52\143\36\1\0\1\36\10\52\1\0\6\52\2\36\2\52\1\0"+
    "\4\52\2\36\12\54\3\36\2\0\1\36\17\0\1\52\1\36\1\52"+
    "\36\36\33\52\2\0\131\36\13\52\1\36\16\0\12\54\41\36\11\52"+
    "\2\36\4\0\1\36\5\0\26\36\4\52\1\36\11\52\1\36\3\52"+
    "\1\36\5\52\22\0\31\36\3\52\244\0\4\52\66\36\3\52\1\36"+
    "\22\52\1\36\7\52\12\36\2\52\2\0\12\54\1\0\7\36\1\0"+
    "\7\36\1\0\3\52\1\0\10\36\2\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\1\36\3\0\4\36\2\0\1\52\1\36\7\52\2\0"+
    "\2\52\2\0\3\52\1\36\10\0\1\52\4\0\2\36\1\0\3\36"+
    "\2\52\2\0\12\54\4\36\7\0\1\36\5\0\3\52\1\0\6\36"+
    "\4\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\2\36"+
    "\1\0\2\36\2\0\1\52\1\0\5\52\4\0\2\52\2\0\3\52"+
    "\3\0\1\52\7\0\4\36\1\0\1\36\7\0\12\54\2\52\3\36"+
    "\1\52\13\0\3\52\1\0\11\36\1\0\3\36\1\0\26\36\1\0"+
    "\7\36\1\0\2\36\1\0\5\36\2\0\1\52\1\36\10\52\1\0"+
    "\3\52\1\0\3\52\2\0\1\36\17\0\2\36\2\52\2\0\12\54"+
    "\1\0\1\36\17\0\3\52\1\0\10\36\2\0\2\36\2\0\26\36"+
    "\1\0\7\36\1\0\2\36\1\0\5\36\2\0\1\52\1\36\7\52"+
    "\2\0\2\52\2\0\3\52\10\0\2\52\4\0\2\36\1\0\3\36"+
    "\2\52\2\0\12\54\1\0\1\36\20\0\1\52\1\36\1\0\6\36"+
    "\3\0\3\36\1\0\4\36\3\0\2\36\1\0\1\36\1\0\2\36"+
    "\3\0\2\36\3\0\3\36\3\0\14\36\4\0\5\52\3\0\3\52"+
    "\1\0\4\52\2\0\1\36\6\0\1\52\16\0\12\54\11\0\1\36"+
    "\7\0\3\52\1\0\10\36\1\0\3\36\1\0\27\36\1\0\12\36"+
    "\1\0\5\36\3\0\1\36\7\52\1\0\3\52\1\0\4\52\7\0"+
    "\2\52\1\0\2\36\6\0\2\36\2\52\2\0\12\54\22\0\2\52"+
    "\1\0\10\36\1\0\3\36\1\0\27\36\1\0\12\36\1\0\5\36"+
    "\2\0\1\52\1\36\7\52\1\0\3\52\1\0\4\52\7\0\2\52"+
    "\7\0\1\36\1\0\2\36\2\52\2\0\12\54\1\0\2\36\17\0"+
    "\2\52\1\0\10\36\1\0\3\36\1\0\51\36\2\0\1\36\7\52"+
    "\1\0\3\52\1\0\4\52\1\36\10\0\1\52\10\0\2\36\2\52"+
    "\2\0\12\54\12\0\6\36\2\0\2\52\1\0\22\36\3\0\30\36"+
    "\1\0\11\36\1\0\1\36\2\0\7\36\3\0\1\52\4\0\6\52"+
    "\1\0\1\52\1\0\10\52\22\0\2\52\15\0\60\36\1\52\2\36"+
    "\7\52\4\0\10\36\10\52\1\0\12\54\47\0\2\36\1\0\1\36"+
    "\2\0\2\36\1\0\1\36\2\0\1\36\6\0\4\36\1\0\7\36"+
    "\1\0\3\36\1\0\1\36\1\0\1\36\2\0\2\36\1\0\4\36"+
    "\1\52\2\36\6\52\1\0\2\52\1\36\2\0\5\36\1\0\1\36"+
    "\1\0\6\52\2\0\12\54\2\0\2\36\42\0\1\36\27\0\2\52"+
    "\6\0\12\54\13\0\1\52\1\0\1\52\1\0\1\52\4\0\2\52"+
    "\10\36\1\0\44\36\4\0\24\52\1\0\2\52\5\36\13\52\1\0"+
    "\44\52\11\0\1\52\71\0\53\36\24\52\1\36\12\54\6\0\6\36"+
    "\4\52\4\36\3\52\1\36\3\52\2\36\7\52\3\36\4\52\15\36"+
    "\14\52\1\36\1\52\12\54\4\52\2\0\46\36\12\0\53\36\1\0"+
    "\1\36\3\0\u0149\36\1\0\4\36\2\0\7\36\1\0\1\36\1\0"+
    "\4\36\2\0\51\36\1\0\4\36\2\0\41\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\17\36\1\0\71\36\1\0"+
    "\4\36\2\0\103\36\2\0\3\52\40\0\20\36\20\0\125\36\14\0"+
    "\u026c\36\2\0\21\36\1\0\32\36\5\0\113\36\3\0\3\36\17\0"+
    "\15\36\1\0\4\36\3\52\13\0\22\36\3\52\13\0\22\36\2\52"+
    "\14\0\15\36\1\0\3\36\1\0\2\52\14\0\64\36\40\52\3\0"+
    "\1\36\3\0\2\36\1\52\2\0\12\54\41\0\3\52\2\0\12\54"+
    "\6\0\130\36\10\0\51\36\1\52\1\36\5\0\106\36\12\0\35\36"+
    "\3\0\14\52\4\0\14\52\12\0\12\54\36\36\2\0\5\36\13\0"+
    "\54\36\4\0\21\52\7\36\2\52\6\0\12\54\46\0\27\36\5\52"+
    "\4\0\65\36\12\52\1\0\35\52\2\0\1\52\12\54\6\0\12\54"+
    "\15\0\1\36\130\0\5\52\57\36\21\52\7\36\4\0\12\54\21\0"+
    "\11\52\14\0\3\52\36\36\12\52\3\0\2\36\12\54\6\0\46\36"+
    "\16\52\14\0\44\36\24\52\10\0\12\54\3\0\3\36\12\54\44\36"+
    "\122\0\3\52\1\0\25\52\4\36\1\52\4\36\1\52\15\0\300\36"+
    "\47\52\25\0\4\52\u0116\36\2\0\6\36\2\0\46\36\2\0\6\36"+
    "\2\0\10\36\1\0\1\36\1\0\1\36\1\0\1\36\1\0\37\36"+
    "\2\0\65\36\1\0\7\36\1\0\1\36\3\0\3\36\1\0\7\36"+
    "\3\0\4\36\2\0\6\36\4\0\15\36\5\0\3\36\1\0\7\36"+
    "\16\0\5\52\32\0\5\52\20\0\2\36\23\0\1\36\13\0\5\52"+
    "\5\0\6\52\1\0\1\36\15\0\1\36\20\0\15\36\3\0\14\36"+
    "\1\36\15\36\26\0\15\52\4\0\1\52\3\0\14\52\21\0\1\36"+
    "\4\0\1\36\2\0\12\36\1\0\1\36\3\0\5\36\6\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\4\36\1\0\13\36\2\0\4\36"+
    "\5\0\5\36\4\0\1\36\21\0\51\36\u0a77\0\57\36\1\0\57\36"+
    "\1\0\205\36\6\0\4\36\3\52\16\0\46\36\12\0\66\36\11\0"+
    "\1\36\17\0\1\52\27\36\11\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\40\52\57\0\1\36\u01d5\0\3\36\31\0\11\36\6\52\1\0"+
    "\5\36\2\0\5\36\4\0\126\36\2\0\2\52\2\0\3\36\1\0"+
    "\132\36\1\0\4\36\5\0\51\36\3\0\136\36\21\0\33\36\65\0"+
    "\20\36\u0200\0\u19b6\36\112\0\u51cc\36\64\0\u048d\36\103\0\56\36\2\0"+
    "\u010d\36\3\0\20\36\12\54\2\36\24\0\57\36\1\52\14\0\2\52"+
    "\1\0\31\36\10\0\120\36\2\52\45\0\11\36\2\0\147\36\2\0"+
    "\4\36\1\0\2\36\16\0\12\36\120\0\10\36\1\52\3\36\1\52"+
    "\4\36\1\52\27\36\5\52\20\0\1\36\7\0\64\36\14\0\2\52"+
    "\62\36\21\52\13\0\12\54\6\0\22\52\6\36\3\0\1\36\4\0"+
    "\12\54\34\36\10\52\2\0\27\36\15\52\14\0\35\36\3\0\4\52"+
    "\57\36\16\52\16\0\1\36\12\54\46\0\51\36\16\52\11\0\3\36"+
    "\1\52\10\36\2\52\2\0\12\54\6\0\27\36\3\0\1\36\1\52"+
    "\4\0\60\36\1\52\1\36\3\52\2\36\2\52\5\36\2\52\1\36"+
    "\1\52\1\36\30\0\3\36\43\0\6\36\2\0\6\36\2\0\6\36"+
    "\11\0\7\36\1\0\7\36\221\0\43\36\10\52\1\0\2\52\2\0"+
    "\12\54\6\0\u2ba4\36\14\0\27\36\4\0\61\36\u2104\0\u012e\36\2\0"+
    "\76\36\2\0\152\36\46\0\7\36\14\0\5\36\5\0\1\36\1\52"+
    "\12\36\1\0\15\36\1\0\5\36\1\0\1\36\1\0\2\36\1\0"+
    "\2\36\1\0\154\36\41\0\u016b\36\22\0\100\36\2\0\66\36\50\0"+
    "\15\36\3\0\20\52\20\0\7\52\14\0\2\36\30\0\3\36\31\0"+
    "\1\36\6\0\5\36\1\0\207\36\2\0\1\52\4\0\1\36\13\0"+
    "\12\54\7\0\32\36\4\0\1\36\1\0\32\36\13\0\131\36\3\0"+
    "\6\36\2\0\6\36\2\0\6\36\2\0\3\36\3\0\2\36\3\0"+
    "\2\36\22\0\3\52\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\25\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\1\1\11\1\12\1\13\1\14\1\15\1\2\1\1"+
    "\1\16\1\2\1\17\1\20\1\17\1\3\1\21\15\3"+
    "\1\22\10\3\1\23\12\3\2\0\1\24\1\1\1\25"+
    "\1\20\2\0\1\1\12\3\1\26\1\3\1\15\1\3"+
    "\1\27\10\3\1\30\14\3\1\31\1\0\2\1\2\0"+
    "\1\32\1\0\1\33\10\3\1\34\10\3\1\0\1\1"+
    "\1\35\1\36\1\3\1\37\6\3\1\40\1\41\1\3"+
    "\1\42\1\0\1\1\1\43\1\33\2\0\2\3\1\44"+
    "\2\3\1\45\16\3\1\46\2\3\1\47\1\50\2\43"+
    "\2\0\1\32\6\3\1\51\1\52\3\3\1\53\1\3"+
    "\1\54\6\3\1\0\1\55\1\56\1\3\1\57\2\3"+
    "\1\60\4\3\1\61\3\3\1\62\1\0\1\3\1\63"+
    "\1\64\1\65\3\3\1\66\1\67\1\3\1\70\1\71"+
    "\1\72\1\3\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\56"+
    "\0\56\0\u0422\0\56\0\56\0\u0450\0\56\0\56\0\56"+
    "\0\56\0\56\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u0284\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0284\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0986\0\u0284\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u047e\0\56\0\u0bae"+
    "\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e"+
    "\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0284"+
    "\0\u0e8e\0\u0284\0\u0ebc\0\u0284\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u0284\0\u105a\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\56\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368"+
    "\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8"+
    "\0\u1506\0\u1534\0\u0284\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\56\0\u0284\0\u172e"+
    "\0\u0284\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u0284"+
    "\0\u0284\0\u1870\0\u0284\0\u189e\0\u18cc\0\u12de\0\u18fa\0\u1928"+
    "\0\u1956\0\u1984\0\u19b2\0\u0284\0\u19e0\0\u1a0e\0\u0284\0\u1a3c"+
    "\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac"+
    "\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u0284\0\u1cc0\0\u1cee"+
    "\0\u0284\0\u0284\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1da6\0\u1dd4"+
    "\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u0284\0\u0284\0\u1ee8"+
    "\0\u1f16\0\u1f44\0\u0284\0\u1f72\0\u0284\0\u1fa0\0\u1fce\0\u1ffc"+
    "\0\u202a\0\u2058\0\u2086\0\u20b4\0\u0284\0\u0284\0\u20e2\0\u0284"+
    "\0\u2110\0\u213e\0\u0284\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u0284"+
    "\0\u2224\0\u2252\0\u2280\0\u0284\0\u22ae\0\u22dc\0\u0284\0\u0284"+
    "\0\u0284\0\u230a\0\u2338\0\u2366\0\u0284\0\u0284\0\u2394\0\u1928"+
    "\0\u0284\0\u0284\0\u23c2\0\u0284\0\u0284\0\u0284";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\3\17\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\17\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\17"+
    "\1\35\1\47\1\50\1\51\57\0\1\17\1\52\26\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\2\17\1\53\25\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\13\17"+
    "\1\54\14\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\55\26\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\14\17\1\56\4\17\1\57\6\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\20\17\1\60\7\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\61\13\17"+
    "\1\62\7\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\6\17\1\63\1\17\1\64"+
    "\5\17\1\65\11\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\7\17\1\66\20\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\1\17\1\67\26\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\13\17"+
    "\1\70\14\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\7\17\1\71\1\17\1\72"+
    "\3\17\1\73\4\17\1\74\2\17\1\75\2\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\30\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\76\2\17\1\77"+
    "\6\17\1\100\14\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\2\17\1\101\4\17"+
    "\1\102\20\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\13\17\1\103\14\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\1\17\1\104\2\17\1\105\6\17\1\106\14\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\4\17\1\107\23\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\1\17"+
    "\1\110\26\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\111\14\17\1\112"+
    "\11\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\13\17\1\113\2\17\1\114\11\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\34\0\1\115\23\0\30\35\5\0\2\35\6\0"+
    "\1\35\2\0\2\35\1\0\1\35\1\0\45\116\1\117"+
    "\10\116\1\0\30\35\5\0\2\35\6\0\1\120\2\0"+
    "\2\35\1\0\1\121\55\0\1\122\55\0\1\123\54\0"+
    "\1\47\3\0\30\35\2\0\1\124\2\0\2\35\6\0"+
    "\1\125\2\0\2\35\1\0\1\50\56\0\1\51\1\0"+
    "\2\17\1\126\25\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\6\17\1\127\12\17"+
    "\1\130\6\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\21\17\1\131\6\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\6\17\1\132\21\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\5\17\1\133"+
    "\22\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\1\17\1\134\26\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\20\17\1\135\7\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\10\17\1\136\17\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\20\17\1\137\7\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\11\17"+
    "\1\140\16\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\2\17\1\141\25\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\4\17\1\142\23\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\1\17\1\143"+
    "\26\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\7\17\1\144\20\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\7\17\1\145\20\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\15\17\1\146\12\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\23\17\1\147\4\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\25\17"+
    "\1\150\2\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\10\17\1\151\17\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\27\17\1\152\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\6\17\1\153\21\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\6\17\1\154\21\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17"+
    "\1\155\7\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\156\26\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\13\17\1\157\12\17\1\160\1\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\6\17\1\161\21\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\6\17\1\162\4\17"+
    "\1\163\14\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\3\17\1\164\24\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\20\17\1\165\7\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\6\17\1\166"+
    "\21\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\3\17\1\167\16\17\1\170\5\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\22\17\1\171\5\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\34\0\1\172"+
    "\22\0\1\173\30\174\5\173\2\174\6\173\1\175\2\173"+
    "\2\174\1\173\1\174\1\173\1\0\30\35\2\0\1\124"+
    "\2\0\2\35\6\0\1\35\2\0\2\35\1\0\1\121"+
    "\34\0\1\124\12\0\1\176\5\0\1\122\55\0\1\177"+
    "\55\0\1\200\2\0\30\35\5\0\2\35\6\0\1\35"+
    "\1\201\1\0\2\35\1\0\1\202\2\0\3\17\1\203"+
    "\24\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\10\17\1\204\17\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\4\17\1\205\23\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\5\17\1\206\22\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\4\17\1\207\23\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\6\17"+
    "\1\210\21\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\5\17\1\211\22\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\21\17\1\212\6\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\4\17\1\213"+
    "\23\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\16\17\1\214\11\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\25\17\1\215\2\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\22\17\1\216\5\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\6\17\1\217\21\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17"+
    "\1\220\7\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\13\17\1\221\14\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\20\17\1\222\7\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\11\17\1\223"+
    "\16\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\1\0\1\224\30\152\5\224\1\152\1\225"+
    "\6\224\1\152\2\224\2\152\1\226\1\152\1\224\1\0"+
    "\4\17\1\227\23\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\230\23\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\6\17\1\231\21\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\15\17"+
    "\1\232\12\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\10\17\1\233\17\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\16\17\1\234\11\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\13\17\1\235"+
    "\14\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\7\17\1\236\20\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\13\17\1\237\14\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\15\17\1\240\12\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\12\17\1\241\15\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\242\23\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\7\17\1\136\20\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\4\17\1\243\23\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\1\0\46\173\1\244"+
    "\10\173\30\174\5\173\2\174\6\173\1\245\2\173\2\174"+
    "\1\173\1\174\2\173\30\174\5\173\2\174\6\173\1\246"+
    "\2\173\2\174\1\173\1\174\1\173\47\0\1\201\4\0"+
    "\1\247\55\0\1\250\52\0\1\251\2\0\1\200\55\0"+
    "\1\247\2\0\30\35\5\0\2\35\6\0\1\125\2\0"+
    "\2\35\1\0\1\202\2\0\4\17\1\252\23\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\20\17\1\253\7\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\15\17\1\254"+
    "\12\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\1\17\1\255\26\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\2\17\1\256\25\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\24\17\1\257\3\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\4\17\1\260\23\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\16\17"+
    "\1\261\11\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\2\17\1\262\25\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\22\17\1\263\5\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\4\17\1\264"+
    "\23\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\20\17\1\265\7\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\4\17\1\266\23\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\24\17\1\267\3\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\4\17\1\270\23\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\22\17"+
    "\1\271\5\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\1\0\53\224\1\226\3\224\30\225"+
    "\5\224\2\225\6\224\1\225\2\224\2\225\1\226\1\225"+
    "\1\224\1\0\2\17\1\272\22\17\1\273\2\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\1\17\1\274\26\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\16\17\1\275"+
    "\11\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\1\17\1\276\26\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\21\17\1\277\6\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\10\17\1\300\17\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\22\17\1\301\5\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\6\17"+
    "\1\302\21\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\1\0\46\173\1\303\10\173\30\174"+
    "\5\173\2\174\6\173\1\304\2\173\2\174\1\173\1\174"+
    "\1\173\46\0\1\176\5\0\1\247\34\0\1\305\70\0"+
    "\2\306\4\0\1\307\2\0\5\17\1\310\22\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\13\17\1\311\14\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\2\17\1\312"+
    "\25\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\15\17\1\313\12\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\20\17\1\314\7\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\2\17\1\315\25\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\25\17\1\316\2\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\317\23\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\13\17\1\320\14\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\13\17\1\321\14\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\7\17\1\322"+
    "\20\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\7\17\1\323\20\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\25\17\1\324\2\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\325\23\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\6\17\1\326\21\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\327\23\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\2\17\1\330\25\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\20\17\1\331\7\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\1\17\1\332"+
    "\26\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\20\17\1\333\7\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\47\0"+
    "\1\303\10\0\30\35\5\0\2\35\6\0\1\304\2\0"+
    "\2\35\1\0\1\35\55\0\1\334\55\0\1\307\2\0"+
    "\6\17\1\335\21\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\22\17\1\336\5\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\4\17\1\337\23\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\7\17"+
    "\1\340\20\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\6\17\1\341\21\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\13\17\1\342\14\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\2\17\1\343"+
    "\25\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\3\17\1\344\24\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\7\17\1\345\20\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\13\17\1\346\14\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\16\17\1\347\11\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17"+
    "\1\350\7\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\22\17\1\351\5\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\4\17\1\352\23\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\15\17\1\353"+
    "\12\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\4\17\1\354\23\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\55\0"+
    "\1\355\2\0\2\17\1\356\25\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\24\17"+
    "\1\357\3\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\22\17\1\360\5\17\5\0"+
    "\1\17\1\35\6\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\6\17\1\361\21\17\5\0\1\17\1\35\6\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\4\17\1\362"+
    "\23\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\6\17\1\363\21\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\1\17\1\364\26\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\24\17\1\365\3\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\15\17\1\366\12\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\367\23\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\55\0\1\370\2\0\6\17\1\371"+
    "\21\17\5\0\1\17\1\35\6\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\15\17\1\372\12\17\5\0\1\17"+
    "\1\35\6\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\4\17\1\373\23\17\5\0\1\17\1\35\6\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\2\17\1\374\25\17"+
    "\5\0\1\17\1\35\6\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\22\17\1\375\5\17\5\0\1\17\1\35"+
    "\6\0\1\17\2\0\2\17\1\0\1\17\2\0\15\17"+
    "\1\376\12\17\5\0\1\17\1\35\6\0\1\17\2\0"+
    "\2\17\1\0\1\17\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\25\1\2\11\1\1\2\11\1\1\5\11"+
    "\52\1\2\0\1\11\3\1\2\0\45\1\1\11\1\0"+
    "\2\1\2\0\1\1\1\0\22\1\1\0\1\1\1\11"+
    "\15\1\1\0\3\1\2\0\33\1\2\0\25\1\1\0"+
    "\20\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private Set<String> identifiers;
	private Project project;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		String[] uses = zzBuffer.toString().split("use");
        String destiny = null;
        for (String use : uses)
            if (use.contains("as metamodel")) {
                destiny = use.split("as metamodel")[0].trim();
                break;
            }
        Model heritage = TaraLanguage.getMetaModel(destiny, project);
        if (heritage != null)
            identifiers = heritage.getIdentifiers();
}


  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 62: break;
        case 7: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 63: break;
        case 33: 
          { return TaraTypes.WITH;
          }
        case 64: break;
        case 24: 
          { return TaraTypes.VAR;
          }
        case 65: break;
        case 11: 
          { return TaraTypes.COLON;
          }
        case 66: break;
        case 53: 
          { return TaraTypes.ABSTRACT;
          }
        case 67: break;
        case 38: 
          { return TaraTypes.RATIO_TYPE;
          }
        case 68: break;
        case 42: 
          { return TaraTypes.SINGLE;
          }
        case 69: break;
        case 57: 
          { return TaraTypes.COMPONENT;
          }
        case 70: break;
        case 26: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 71: break;
        case 15: 
          { return TokenType.WHITE_SPACE;
          }
        case 72: break;
        case 46: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 73: break;
        case 5: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 74: break;
        case 25: 
          { return TaraTypes.LIST;
          }
        case 75: break;
        case 39: 
          { return TaraTypes.LOCAL;
          }
        case 76: break;
        case 12: 
          { return TaraTypes.EQUALS;
          }
        case 77: break;
        case 6: 
          { return TaraTypes.DOT;
          }
        case 78: break;
        case 41: 
          { return TaraTypes.STRING_TYPE;
          }
        case 79: break;
        case 36: 
          { return TaraTypes.NAMED;
          }
        case 80: break;
        case 60: 
          { loadHeritage(); return TaraTypes.METAMODEL;
          }
        case 81: break;
        case 52: 
          { return TaraTypes.TERMINAL;
          }
        case 82: break;
        case 61: 
          { return TaraTypes.AGGREGATED;
          }
        case 83: break;
        case 30: 
          { return TaraTypes.DATE_TYPE;
          }
        case 84: break;
        case 37: 
          { return TaraTypes.EMPTY_REF;
          }
        case 85: break;
        case 4: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 86: break;
        case 55: 
          { return TaraTypes.REQUIRED;
          }
        case 87: break;
        case 14: 
          { return TaraTypes.PLUS;
          }
        case 88: break;
        case 21: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 89: break;
        case 31: 
          { return TaraTypes.ROOT;
          }
        case 90: break;
        case 56: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 91: break;
        case 47: 
          { return TaraTypes.EXTENDS;
          }
        case 92: break;
        case 20: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 93: break;
        case 51: 
          { return TaraTypes.PROPERTY;
          }
        case 94: break;
        case 3: 
          { return evaluateIdentifier();
          }
        case 95: break;
        case 9: 
          { return TaraTypes.STAR;
          }
        case 96: break;
        case 44: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 97: break;
        case 8: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 98: break;
        case 16: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 99: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 100: break;
        case 1: 
          { return TaraTypes.MEASURE_VALUE;
          }
        case 101: break;
        case 13: 
          { return TaraTypes.USE_KEY;
          }
        case 102: break;
        case 29: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 103: break;
        case 34: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 104: break;
        case 43: 
          { return TaraTypes.ALWAYS;
          }
        case 105: break;
        case 28: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 106: break;
        case 18: 
          { return TaraTypes.AS;
          }
        case 107: break;
        case 17: 
          { return TaraTypes.ON;
          }
        case 108: break;
        case 22: 
          { return TaraTypes.SUB;
          }
        case 109: break;
        case 54: 
          { return TaraTypes.READONLY;
          }
        case 110: break;
        case 48: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 111: break;
        case 19: 
          { return TaraTypes.IS;
          }
        case 112: break;
        case 50: 
          { return TaraTypes.MEASURE_TYPE_KEY;
          }
        case 113: break;
        case 49: 
          { return TaraTypes.INT_TYPE;
          }
        case 114: break;
        case 45: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 115: break;
        case 27: 
          { return TaraTypes.DATE_VALUE_KEY;
          }
        case 116: break;
        case 32: 
          { return TaraTypes.WORD_KEY;
          }
        case 117: break;
        case 59: 
          { return TaraTypes.INTENTION;
          }
        case 118: break;
        case 58: 
          { return TaraTypes.ADDRESSED;
          }
        case 119: break;
        case 40: 
          { return TaraTypes.FACET;
          }
        case 120: break;
        case 10: 
          { return TaraTypes.COMMA;
          }
        case 121: break;
        case 23: 
          { return TaraTypes.HAS;
          }
        case 122: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
