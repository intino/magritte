/* The following code was generated by JFlex 1.4.3 on 19/01/15 7:18 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import siani.tara.intellij.project.module.ModuleProvider;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.lang.Model;

import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/01/15 7:18 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\53\1\56\1\54\3\0\16\53\4\0\1\56\1\0\1\46\1\0"+
    "\1\36\1\37\1\51\1\0\1\31\1\32\1\40\1\50\1\42\1\47"+
    "\1\33\1\41\12\55\1\43\1\45\1\0\1\44\1\56\2\0\2\36"+
    "\1\1\1\36\1\52\25\36\1\34\1\0\1\35\1\0\1\36\1\0"+
    "\1\14\1\12\1\4\1\16\1\5\1\30\1\26\1\13\1\17\2\36"+
    "\1\23\1\22\1\3\1\2\1\6\1\27\1\21\1\10\1\7\1\11"+
    "\1\20\1\24\1\15\1\25\1\36\4\0\41\53\2\0\4\36\4\0"+
    "\1\36\2\0\1\53\2\0\1\37\4\0\1\36\1\0\1\41\2\0"+
    "\1\36\5\0\27\36\1\0\37\36\1\0\u01ca\36\4\0\14\36\16\0"+
    "\5\36\7\0\1\36\1\0\1\36\21\0\160\53\5\36\1\0\2\36"+
    "\2\0\4\36\10\0\1\36\1\0\3\36\1\0\1\36\1\0\24\36"+
    "\1\0\123\36\1\0\213\36\1\0\5\53\2\0\236\36\11\0\46\36"+
    "\2\0\1\36\7\0\47\36\11\0\55\53\1\0\1\53\1\0\2\53"+
    "\1\0\2\53\1\0\1\53\10\0\33\36\5\0\3\36\15\0\4\53"+
    "\7\0\1\36\4\0\13\53\5\0\53\36\25\53\12\55\4\0\2\36"+
    "\1\53\143\36\1\0\1\36\10\53\1\0\6\53\2\36\2\53\1\0"+
    "\4\53\2\36\12\55\3\36\2\0\1\36\17\0\1\53\1\36\1\53"+
    "\36\36\33\53\2\0\131\36\13\53\1\36\16\0\12\55\41\36\11\53"+
    "\2\36\4\0\1\36\5\0\26\36\4\53\1\36\11\53\1\36\3\53"+
    "\1\36\5\53\22\0\31\36\3\53\244\0\4\53\66\36\3\53\1\36"+
    "\22\53\1\36\7\53\12\36\2\53\2\0\12\55\1\0\7\36\1\0"+
    "\7\36\1\0\3\53\1\0\10\36\2\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\1\36\3\0\4\36\2\0\1\53\1\36\7\53\2\0"+
    "\2\53\2\0\3\53\1\36\10\0\1\53\4\0\2\36\1\0\3\36"+
    "\2\53\2\0\12\55\4\36\7\0\1\36\5\0\3\53\1\0\6\36"+
    "\4\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\2\36"+
    "\1\0\2\36\2\0\1\53\1\0\5\53\4\0\2\53\2\0\3\53"+
    "\3\0\1\53\7\0\4\36\1\0\1\36\7\0\12\55\2\53\3\36"+
    "\1\53\13\0\3\53\1\0\11\36\1\0\3\36\1\0\26\36\1\0"+
    "\7\36\1\0\2\36\1\0\5\36\2\0\1\53\1\36\10\53\1\0"+
    "\3\53\1\0\3\53\2\0\1\36\17\0\2\36\2\53\2\0\12\55"+
    "\1\0\1\36\17\0\3\53\1\0\10\36\2\0\2\36\2\0\26\36"+
    "\1\0\7\36\1\0\2\36\1\0\5\36\2\0\1\53\1\36\7\53"+
    "\2\0\2\53\2\0\3\53\10\0\2\53\4\0\2\36\1\0\3\36"+
    "\2\53\2\0\12\55\1\0\1\36\20\0\1\53\1\36\1\0\6\36"+
    "\3\0\3\36\1\0\4\36\3\0\2\36\1\0\1\36\1\0\2\36"+
    "\3\0\2\36\3\0\3\36\3\0\14\36\4\0\5\53\3\0\3\53"+
    "\1\0\4\53\2\0\1\36\6\0\1\53\16\0\12\55\11\0\1\36"+
    "\7\0\3\53\1\0\10\36\1\0\3\36\1\0\27\36\1\0\12\36"+
    "\1\0\5\36\3\0\1\36\7\53\1\0\3\53\1\0\4\53\7\0"+
    "\2\53\1\0\2\36\6\0\2\36\2\53\2\0\12\55\22\0\2\53"+
    "\1\0\10\36\1\0\3\36\1\0\27\36\1\0\12\36\1\0\5\36"+
    "\2\0\1\53\1\36\7\53\1\0\3\53\1\0\4\53\7\0\2\53"+
    "\7\0\1\36\1\0\2\36\2\53\2\0\12\55\1\0\2\36\17\0"+
    "\2\53\1\0\10\36\1\0\3\36\1\0\51\36\2\0\1\36\7\53"+
    "\1\0\3\53\1\0\4\53\1\36\10\0\1\53\10\0\2\36\2\53"+
    "\2\0\12\55\12\0\6\36\2\0\2\53\1\0\22\36\3\0\30\36"+
    "\1\0\11\36\1\0\1\36\2\0\7\36\3\0\1\53\4\0\6\53"+
    "\1\0\1\53\1\0\10\53\22\0\2\53\15\0\60\36\1\53\2\36"+
    "\7\53\4\0\10\36\10\53\1\0\12\55\47\0\2\36\1\0\1\36"+
    "\2\0\2\36\1\0\1\36\2\0\1\36\6\0\4\36\1\0\7\36"+
    "\1\0\3\36\1\0\1\36\1\0\1\36\2\0\2\36\1\0\4\36"+
    "\1\53\2\36\6\53\1\0\2\53\1\36\2\0\5\36\1\0\1\36"+
    "\1\0\6\53\2\0\12\55\2\0\2\36\42\0\1\36\27\0\2\53"+
    "\6\0\12\55\13\0\1\53\1\0\1\53\1\0\1\53\4\0\2\53"+
    "\10\36\1\0\44\36\4\0\24\53\1\0\2\53\5\36\13\53\1\0"+
    "\44\53\11\0\1\53\71\0\53\36\24\53\1\36\12\55\6\0\6\36"+
    "\4\53\4\36\3\53\1\36\3\53\2\36\7\53\3\36\4\53\15\36"+
    "\14\53\1\36\1\53\12\55\4\53\2\0\46\36\12\0\53\36\1\0"+
    "\1\36\3\0\u0149\36\1\0\4\36\2\0\7\36\1\0\1\36\1\0"+
    "\4\36\2\0\51\36\1\0\4\36\2\0\41\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\17\36\1\0\71\36\1\0"+
    "\4\36\2\0\103\36\2\0\3\53\40\0\20\36\20\0\125\36\14\0"+
    "\u026c\36\2\0\21\36\1\0\32\36\5\0\113\36\3\0\3\36\17\0"+
    "\15\36\1\0\4\36\3\53\13\0\22\36\3\53\13\0\22\36\2\53"+
    "\14\0\15\36\1\0\3\36\1\0\2\53\14\0\64\36\40\53\3\0"+
    "\1\36\3\0\2\36\1\53\2\0\12\55\41\0\3\53\2\0\12\55"+
    "\6\0\130\36\10\0\51\36\1\53\1\36\5\0\106\36\12\0\35\36"+
    "\3\0\14\53\4\0\14\53\12\0\12\55\36\36\2\0\5\36\13\0"+
    "\54\36\4\0\21\53\7\36\2\53\6\0\12\55\46\0\27\36\5\53"+
    "\4\0\65\36\12\53\1\0\35\53\2\0\1\53\12\55\6\0\12\55"+
    "\15\0\1\36\130\0\5\53\57\36\21\53\7\36\4\0\12\55\21\0"+
    "\11\53\14\0\3\53\36\36\12\53\3\0\2\36\12\55\6\0\46\36"+
    "\16\53\14\0\44\36\24\53\10\0\12\55\3\0\3\36\12\55\44\36"+
    "\122\0\3\53\1\0\25\53\4\36\1\53\4\36\1\53\15\0\300\36"+
    "\47\53\25\0\4\53\u0116\36\2\0\6\36\2\0\46\36\2\0\6\36"+
    "\2\0\10\36\1\0\1\36\1\0\1\36\1\0\1\36\1\0\37\36"+
    "\2\0\65\36\1\0\7\36\1\0\1\36\3\0\3\36\1\0\7\36"+
    "\3\0\4\36\2\0\6\36\4\0\15\36\5\0\3\36\1\0\7\36"+
    "\16\0\5\53\32\0\5\53\20\0\2\36\23\0\1\36\13\0\5\53"+
    "\5\0\6\53\1\0\1\36\15\0\1\36\20\0\15\36\3\0\14\36"+
    "\1\36\15\36\26\0\15\53\4\0\1\53\3\0\14\53\21\0\1\36"+
    "\4\0\1\36\2\0\12\36\1\0\1\36\3\0\5\36\6\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\4\36\1\0\13\36\2\0\4\36"+
    "\5\0\5\36\4\0\1\36\21\0\51\36\u0a77\0\57\36\1\0\57\36"+
    "\1\0\205\36\6\0\4\36\3\53\16\0\46\36\12\0\66\36\11\0"+
    "\1\36\17\0\1\53\27\36\11\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\40\53\57\0\1\36\u01d5\0\3\36\31\0\11\36\6\53\1\0"+
    "\5\36\2\0\5\36\4\0\126\36\2\0\2\53\2\0\3\36\1\0"+
    "\132\36\1\0\4\36\5\0\51\36\3\0\136\36\21\0\33\36\65\0"+
    "\20\36\u0200\0\u19b6\36\112\0\u51cc\36\64\0\u048d\36\103\0\56\36\2\0"+
    "\u010d\36\3\0\20\36\12\55\2\36\24\0\57\36\1\53\14\0\2\53"+
    "\1\0\31\36\10\0\120\36\2\53\45\0\11\36\2\0\147\36\2\0"+
    "\4\36\1\0\2\36\16\0\12\36\120\0\10\36\1\53\3\36\1\53"+
    "\4\36\1\53\27\36\5\53\20\0\1\36\7\0\64\36\14\0\2\53"+
    "\62\36\21\53\13\0\12\55\6\0\22\53\6\36\3\0\1\36\4\0"+
    "\12\55\34\36\10\53\2\0\27\36\15\53\14\0\35\36\3\0\4\53"+
    "\57\36\16\53\16\0\1\36\12\55\46\0\51\36\16\53\11\0\3\36"+
    "\1\53\10\36\2\53\2\0\12\55\6\0\27\36\3\0\1\36\1\53"+
    "\4\0\60\36\1\53\1\36\3\53\2\36\2\53\5\36\2\53\1\36"+
    "\1\53\1\36\30\0\3\36\43\0\6\36\2\0\6\36\2\0\6\36"+
    "\11\0\7\36\1\0\7\36\221\0\43\36\10\53\1\0\2\53\2\0"+
    "\12\55\6\0\u2ba4\36\14\0\27\36\4\0\61\36\u2104\0\u012e\36\2\0"+
    "\76\36\2\0\152\36\46\0\7\36\14\0\5\36\5\0\1\36\1\53"+
    "\12\36\1\0\15\36\1\0\5\36\1\0\1\36\1\0\2\36\1\0"+
    "\2\36\1\0\154\36\41\0\u016b\36\22\0\100\36\2\0\66\36\50\0"+
    "\15\36\3\0\20\53\20\0\7\53\14\0\2\36\30\0\3\36\31\0"+
    "\1\36\6\0\5\36\1\0\207\36\2\0\1\53\4\0\1\36\13\0"+
    "\12\55\7\0\32\36\4\0\1\36\1\0\32\36\13\0\131\36\3\0"+
    "\6\36\2\0\6\36\2\0\6\36\2\0\3\36\3\0\2\36\3\0"+
    "\2\36\22\0\3\53\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\25\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\1\1\16"+
    "\1\1\1\17\1\20\1\17\1\2\1\21\16\2\1\22"+
    "\10\2\1\23\12\2\2\0\1\24\1\0\1\25\2\0"+
    "\13\2\1\26\1\2\1\15\1\2\1\27\10\2\1\30"+
    "\14\2\1\31\3\0\1\32\4\2\1\33\4\2\1\34"+
    "\10\2\1\0\1\10\1\35\1\36\1\2\1\37\6\2"+
    "\1\40\1\41\1\2\1\42\1\0\1\43\2\0\2\2"+
    "\1\44\2\2\1\45\16\2\1\46\2\2\1\47\1\50"+
    "\1\43\2\0\1\32\6\2\1\51\1\52\3\2\1\53"+
    "\1\2\1\54\6\2\1\0\1\55\1\56\1\2\1\57"+
    "\2\2\1\60\4\2\1\61\3\2\1\62\1\0\1\2"+
    "\1\63\1\64\1\65\3\2\1\66\1\67\1\2\1\70"+
    "\1\71\1\72\1\2\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\57"+
    "\0\57\0\u0439\0\57\0\57\0\u0468\0\57\0\57\0\57"+
    "\0\57\0\57\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u0292\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u0292\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0292\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0497\0\57"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0292"+
    "\0\u0edf\0\u0292\0\u0f0e\0\u0292\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca"+
    "\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u0292\0\u10b5\0\u10e4\0\u1113"+
    "\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b"+
    "\0\u12ba\0\57\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\u1432\0\u0292\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u0292"+
    "\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666"+
    "\0\u1695\0\u16c4\0\57\0\u0292\0\u16f3\0\u0292\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u17de\0\u180d\0\u0292\0\u0292\0\u183c\0\u0292"+
    "\0\u186b\0\u1318\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u0292\0\u1956"+
    "\0\u1985\0\u0292\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17"+
    "\0\u0292\0\u1c46\0\u1c75\0\u0292\0\u0292\0\u1ca4\0\u1cd3\0\u1d02"+
    "\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u0292"+
    "\0\u0292\0\u1e4b\0\u1e7a\0\u1ea9\0\u0292\0\u1ed8\0\u0292\0\u1f07"+
    "\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u0292\0\u0292"+
    "\0\u2050\0\u0292\0\u207f\0\u20ae\0\u0292\0\u20dd\0\u210c\0\u213b"+
    "\0\u216a\0\u0292\0\u2199\0\u21c8\0\u21f7\0\u0292\0\u2226\0\u2255"+
    "\0\u0292\0\u0292\0\u0292\0\u2284\0\u22b3\0\u22e2\0\u0292\0\u0292"+
    "\0\u2311\0\u189a\0\u0292\0\u0292\0\u2340\0\u0292\0\u0292\0\u0292";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\3\17\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\17\1\35\1\36\1\2"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\17\1\2\1\47\1\50\1\51\60\0\1\17\1\52"+
    "\26\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\2\17\1\53\25\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\13\17\1\54\14\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\1\17\1\55\11\17\1\56\14\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\14\17\1\57\4\17\1\60\6\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\20\17\1\61\7\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\4\17\1\62"+
    "\13\17\1\63\7\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\6\17\1\64"+
    "\1\17\1\65\5\17\1\66\11\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\7\17\1\67\20\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\1\17\1\70"+
    "\26\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\13\17\1\71\14\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\7\17\1\72\1\17\1\73\3\17\1\74"+
    "\4\17\1\75\2\17\1\76\2\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\30\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\77\2\17\1\100"+
    "\6\17\1\101\14\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\2\17\1\102"+
    "\4\17\1\103\20\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\13\17\1\104"+
    "\14\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\105\2\17\1\106"+
    "\6\17\1\107\14\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\4\17\1\110"+
    "\23\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\111\26\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\1\17\1\112\14\17\1\113\11\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\13\17\1\114\2\17\1\115\11\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\34\0\1\116\24\0\30\35\5\0\1\35\2\0"+
    "\1\35\5\0\1\35\2\0\2\35\1\0\1\35\1\0"+
    "\46\117\1\120\10\117\47\0\1\121\5\0\1\122\56\0"+
    "\1\50\56\0\1\123\55\0\1\47\35\0\1\124\21\0"+
    "\1\50\57\0\1\51\1\0\2\17\1\125\25\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\6\17\1\126\12\17\1\127\6\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\21\17\1\130\6\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\7\17\1\131\20\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\6\17\1\132"+
    "\21\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\5\17\1\133\22\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\1\17\1\134\26\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\20\17\1\135\7\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\10\17\1\136"+
    "\17\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\20\17\1\137\7\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\11\17\1\140\16\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\2\17\1\141\25\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\4\17\1\142"+
    "\23\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\143\26\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\7\17\1\144\20\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\7\17\1\145\20\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\15\17\1\146"+
    "\12\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\23\17\1\147\4\17\5\0"+
    "\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\25\17\1\150\2\17\5\0\1\17\2\0"+
    "\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\10\17\1\151\17\17\5\0\1\17\2\0\1\35\5\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\27\17\1\152"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\6\17\1\153\21\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\6\17\1\154\21\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17"+
    "\1\155\7\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\1\17\1\156\26\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\13\17\1\157\12\17\1\160\1\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\6\17\1\161\21\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\6\17\1\162\4\17\1\163\14\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\3\17\1\164\24\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17"+
    "\1\165\7\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\6\17\1\166\21\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\3\17\1\167\16\17\1\170\5\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\22\17\1\171\5\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\34\0\1\172\23\0\47\173\1\174\7\173\33\0\1\124"+
    "\21\0\1\122\56\0\1\175\56\0\1\176\2\0\3\17"+
    "\1\177\24\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\10\17\1\200\17\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\4\17\1\201\23\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\5\17\1\202\22\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\203\23\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\204\23\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\6\17\1\205\21\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\5\17\1\206\22\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\21\17"+
    "\1\207\6\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\210\23\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\16\17\1\211\11\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\25\17\1\212\2\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\22\17"+
    "\1\213\5\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\6\17\1\214\21\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\20\17\1\215\7\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\13\17\1\216\14\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17"+
    "\1\217\7\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\11\17\1\220\16\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\1\0\1\221\30\152\5\221\1\152\2\221"+
    "\1\222\5\221\1\152\2\221\2\152\1\223\1\152\1\221"+
    "\1\0\4\17\1\224\23\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\225\23\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\6\17\1\226\21\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\15\17\1\227\12\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\10\17\1\230\17\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\16\17"+
    "\1\231\11\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\13\17\1\232\14\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\7\17\1\233\20\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\13\17\1\234\14\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\15\17"+
    "\1\235\12\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\12\17\1\236\15\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\4\17\1\237\23\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\7\17\1\136\20\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\240\23\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\1\0\47\173\1\241\56\173"+
    "\1\242\7\173\55\0\1\243\53\0\1\244\2\0\1\176"+
    "\2\0\4\17\1\245\23\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17"+
    "\1\246\7\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\15\17\1\247\12\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\1\17\1\250\26\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\2\17\1\251\25\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\24\17"+
    "\1\252\3\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\253\23\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\16\17\1\254\11\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\2\17\1\255\25\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\22\17"+
    "\1\256\5\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\257\23\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\20\17\1\260\7\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\4\17\1\261\23\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\24\17"+
    "\1\262\3\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\263\23\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\22\17\1\264\5\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\1\0\54\221\1\223\3\221\30\222\5\221\1\222\2\221"+
    "\1\222\5\221\1\222\2\221\2\222\1\223\1\222\1\221"+
    "\1\0\2\17\1\265\22\17\1\266\2\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\1\17\1\267\26\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\16\17"+
    "\1\270\11\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\1\17\1\271\26\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\21\17\1\272\6\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\10\17\1\273\17\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\22\17"+
    "\1\274\5\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\6\17\1\275\21\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\1\0\47\173\1\276\7\173\33\0\1\277"+
    "\72\0\2\300\4\0\1\301\2\0\5\17\1\302\22\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\13\17\1\303\14\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\2\17\1\304\25\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\15\17"+
    "\1\305\12\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\20\17\1\306\7\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\2\17\1\307\25\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\25\17\1\310\2\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\311\23\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\13\17\1\312\14\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\13\17\1\313\14\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\7\17\1\314\20\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\7\17"+
    "\1\315\20\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\25\17\1\316\2\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\4\17\1\317\23\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\6\17\1\320\21\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\321\23\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\2\17\1\322\25\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\20\17\1\323\7\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\1\17\1\324\26\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17"+
    "\1\325\7\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\50\0\1\276\64\0\1\326"+
    "\56\0\1\301\2\0\6\17\1\327\21\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\22\17\1\330\5\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\331\23\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\7\17\1\332\20\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\6\17\1\333\21\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\13\17\1\334\14\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\2\17"+
    "\1\335\25\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\3\17\1\336\24\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\7\17\1\337\20\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\13\17\1\340\14\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\16\17"+
    "\1\341\11\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\20\17\1\342\7\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\22\17\1\343\5\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\4\17\1\344\23\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\15\17"+
    "\1\345\12\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\346\23\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\56\0\1\347\2\0\2\17\1\350\25\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\24\17\1\351\3\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\22\17\1\352\5\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\6\17"+
    "\1\353\21\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\4\17\1\354\23\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\6\17\1\355\21\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\1\17\1\356\26\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\24\17"+
    "\1\357\3\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\15\17\1\360\12\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\4\17\1\361\23\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\56\0\1\362\2\0\6\17\1\363\21\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\15\17\1\364\12\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\365\23\17\5\0\1\17\2\0\1\35\5\0\1\17"+
    "\2\0\2\17\1\0\1\17\2\0\2\17\1\366\25\17"+
    "\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17"+
    "\1\0\1\17\2\0\22\17\1\367\5\17\5\0\1\17"+
    "\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\15\17\1\370\12\17\5\0\1\17\2\0\1\35"+
    "\5\0\1\17\2\0\2\17\1\0\1\17\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9071];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\2\11\1\1\2\11\1\1\5\11"+
    "\53\1\2\0\1\11\1\0\1\1\2\0\45\1\1\11"+
    "\3\0\23\1\1\0\1\1\1\11\15\1\1\0\1\1"+
    "\2\0\32\1\2\0\25\1\1\0\20\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private Set<String> identifiers;
	private Project project;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		String[] uses = zzBuffer.toString().split("use");
        String destiny = null;
        for (String use : uses)
            if (use.contains("as metamodel")) {
                destiny = use.split("as metamodel")[0].trim();
                break;
            }
        Model heritage = TaraLanguage.getMetaModel(destiny, project);
        if (heritage != null)
            identifiers = heritage.getIdentifiers();
}


  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 62: break;
        case 6: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 63: break;
        case 33: 
          { return TaraTypes.WITH;
          }
        case 64: break;
        case 24: 
          { return TaraTypes.VAR;
          }
        case 65: break;
        case 11: 
          { return TaraTypes.COLON;
          }
        case 66: break;
        case 53: 
          { return TaraTypes.ABSTRACT;
          }
        case 67: break;
        case 38: 
          { return TaraTypes.RATIO_TYPE;
          }
        case 68: break;
        case 42: 
          { return TaraTypes.SINGLE;
          }
        case 69: break;
        case 57: 
          { return TaraTypes.COMPONENT;
          }
        case 70: break;
        case 26: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 71: break;
        case 15: 
          { return TokenType.WHITE_SPACE;
          }
        case 72: break;
        case 46: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 73: break;
        case 4: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 74: break;
        case 25: 
          { return TaraTypes.LIST;
          }
        case 75: break;
        case 39: 
          { return TaraTypes.LOCAL;
          }
        case 76: break;
        case 27: 
          { return TaraTypes.CASE;
          }
        case 77: break;
        case 12: 
          { return TaraTypes.EQUALS;
          }
        case 78: break;
        case 5: 
          { return TaraTypes.DOT;
          }
        case 79: break;
        case 41: 
          { return TaraTypes.STRING_TYPE;
          }
        case 80: break;
        case 36: 
          { return TaraTypes.NAMED;
          }
        case 81: break;
        case 60: 
          { loadHeritage(); return TaraTypes.METAMODEL;
          }
        case 82: break;
        case 52: 
          { return TaraTypes.TERMINAL;
          }
        case 83: break;
        case 61: 
          { return TaraTypes.AGGREGATED;
          }
        case 84: break;
        case 30: 
          { return TaraTypes.DATE_TYPE;
          }
        case 85: break;
        case 37: 
          { return TaraTypes.EMPTY_REF;
          }
        case 86: break;
        case 3: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 87: break;
        case 55: 
          { return TaraTypes.REQUIRED;
          }
        case 88: break;
        case 14: 
          { return TaraTypes.PLUS;
          }
        case 89: break;
        case 21: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 90: break;
        case 31: 
          { return TaraTypes.ROOT;
          }
        case 91: break;
        case 56: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 92: break;
        case 47: 
          { return TaraTypes.EXTENDS;
          }
        case 93: break;
        case 20: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 94: break;
        case 51: 
          { return TaraTypes.PROPERTY;
          }
        case 95: break;
        case 2: 
          { return evaluateIdentifier();
          }
        case 96: break;
        case 9: 
          { return TaraTypes.STAR;
          }
        case 97: break;
        case 44: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 98: break;
        case 7: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 99: break;
        case 16: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 100: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 101: break;
        case 8: 
          { return TaraTypes.MEASURE_VALUE;
          }
        case 102: break;
        case 13: 
          { return TaraTypes.USE_KEY;
          }
        case 103: break;
        case 29: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 104: break;
        case 34: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 105: break;
        case 43: 
          { return TaraTypes.ALWAYS;
          }
        case 106: break;
        case 28: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 107: break;
        case 18: 
          { return TaraTypes.AS;
          }
        case 108: break;
        case 17: 
          { return TaraTypes.ON;
          }
        case 109: break;
        case 22: 
          { return TaraTypes.SUB;
          }
        case 110: break;
        case 54: 
          { return TaraTypes.READONLY;
          }
        case 111: break;
        case 48: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 112: break;
        case 19: 
          { return TaraTypes.IS;
          }
        case 113: break;
        case 50: 
          { return TaraTypes.MEASURE_TYPE_KEY;
          }
        case 114: break;
        case 49: 
          { return TaraTypes.INT_TYPE;
          }
        case 115: break;
        case 45: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 116: break;
        case 32: 
          { return TaraTypes.WORD_KEY;
          }
        case 117: break;
        case 59: 
          { return TaraTypes.INTENTION;
          }
        case 118: break;
        case 58: 
          { return TaraTypes.ADDRESSED;
          }
        case 119: break;
        case 40: 
          { return TaraTypes.FACET;
          }
        case 120: break;
        case 10: 
          { return TaraTypes.COMMA;
          }
        case 121: break;
        case 23: 
          { return TaraTypes.HAS;
          }
        case 122: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
