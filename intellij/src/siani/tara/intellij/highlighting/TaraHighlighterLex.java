/* The following code was generated by JFlex 1.4.3 on 23/06/14 14:51 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import siani.tara.intellij.project.module.ModuleProvider;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.lang.TreeWrapper;

import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/06/14 14:51 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\61\1\62\1\56\3\0\16\61\4\0\1\62\2\0\1\55\1\60"+
    "\2\0\1\41\1\33\1\34\1\36\1\44\1\37\1\25\1\35\1\0"+
    "\12\57\1\40\1\31\1\42\1\0\1\43\2\0\1\45\1\53\1\1"+
    "\1\50\4\60\1\46\4\60\1\47\3\60\1\30\1\52\3\60\1\27"+
    "\3\60\1\31\1\0\1\32\1\0\1\60\1\0\1\13\1\51\1\4"+
    "\1\23\1\5\1\54\1\15\1\24\1\10\1\60\1\14\1\21\1\11"+
    "\1\3\1\2\1\6\1\22\1\12\1\16\1\7\1\20\1\17\2\60"+
    "\1\26\1\60\1\31\1\0\1\31\1\0\41\61\2\0\4\60\4\0"+
    "\1\60\2\0\1\61\7\0\1\60\4\0\1\60\5\0\27\60\1\0"+
    "\37\60\1\0\u01ca\60\4\0\14\60\16\0\5\60\7\0\1\60\1\0"+
    "\1\60\21\0\160\61\5\60\1\0\2\60\2\0\4\60\10\0\1\60"+
    "\1\0\3\60\1\0\1\60\1\0\24\60\1\0\123\60\1\0\213\60"+
    "\1\0\5\61\2\0\236\60\11\0\46\60\2\0\1\60\7\0\47\60"+
    "\11\0\55\61\1\0\1\61\1\0\2\61\1\0\2\61\1\0\1\61"+
    "\10\0\33\60\5\0\3\60\15\0\4\61\7\0\1\60\4\0\13\61"+
    "\5\0\53\60\25\61\12\57\4\0\2\60\1\61\143\60\1\0\1\60"+
    "\10\61\1\0\6\61\2\60\2\61\1\0\4\61\2\60\12\57\3\60"+
    "\2\0\1\60\17\0\1\61\1\60\1\61\36\60\33\61\2\0\131\60"+
    "\13\61\1\60\16\0\12\57\41\60\11\61\2\60\4\0\1\60\5\0"+
    "\26\60\4\61\1\60\11\61\1\60\3\61\1\60\5\61\22\0\31\60"+
    "\3\61\244\0\4\61\66\60\3\61\1\60\22\61\1\60\7\61\12\60"+
    "\2\61\2\0\12\57\1\0\7\60\1\0\7\60\1\0\3\61\1\0"+
    "\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0\1\60\3\0"+
    "\4\60\2\0\1\61\1\60\7\61\2\0\2\61\2\0\3\61\1\60"+
    "\10\0\1\61\4\0\2\60\1\0\3\60\2\61\2\0\12\57\4\60"+
    "\7\0\1\60\5\0\3\61\1\0\6\60\4\0\2\60\2\0\26\60"+
    "\1\0\7\60\1\0\2\60\1\0\2\60\1\0\2\60\2\0\1\61"+
    "\1\0\5\61\4\0\2\61\2\0\3\61\3\0\1\61\7\0\4\60"+
    "\1\0\1\60\7\0\12\57\2\61\3\60\1\61\13\0\3\61\1\0"+
    "\11\60\1\0\3\60\1\0\26\60\1\0\7\60\1\0\2\60\1\0"+
    "\5\60\2\0\1\61\1\60\10\61\1\0\3\61\1\0\3\61\2\0"+
    "\1\60\17\0\2\60\2\61\2\0\12\57\1\0\1\60\17\0\3\61"+
    "\1\0\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0\2\60"+
    "\1\0\5\60\2\0\1\61\1\60\7\61\2\0\2\61\2\0\3\61"+
    "\10\0\2\61\4\0\2\60\1\0\3\60\2\61\2\0\12\57\1\0"+
    "\1\60\20\0\1\61\1\60\1\0\6\60\3\0\3\60\1\0\4\60"+
    "\3\0\2\60\1\0\1\60\1\0\2\60\3\0\2\60\3\0\3\60"+
    "\3\0\14\60\4\0\5\61\3\0\3\61\1\0\4\61\2\0\1\60"+
    "\6\0\1\61\16\0\12\57\11\0\1\60\7\0\3\61\1\0\10\60"+
    "\1\0\3\60\1\0\27\60\1\0\12\60\1\0\5\60\3\0\1\60"+
    "\7\61\1\0\3\61\1\0\4\61\7\0\2\61\1\0\2\60\6\0"+
    "\2\60\2\61\2\0\12\57\22\0\2\61\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\2\0\1\61\1\60\7\61"+
    "\1\0\3\61\1\0\4\61\7\0\2\61\7\0\1\60\1\0\2\60"+
    "\2\61\2\0\12\57\1\0\2\60\17\0\2\61\1\0\10\60\1\0"+
    "\3\60\1\0\51\60\2\0\1\60\7\61\1\0\3\61\1\0\4\61"+
    "\1\60\10\0\1\61\10\0\2\60\2\61\2\0\12\57\12\0\6\60"+
    "\2\0\2\61\1\0\22\60\3\0\30\60\1\0\11\60\1\0\1\60"+
    "\2\0\7\60\3\0\1\61\4\0\6\61\1\0\1\61\1\0\10\61"+
    "\22\0\2\61\15\0\60\60\1\61\2\60\7\61\4\0\10\60\10\61"+
    "\1\0\12\57\47\0\2\60\1\0\1\60\2\0\2\60\1\0\1\60"+
    "\2\0\1\60\6\0\4\60\1\0\7\60\1\0\3\60\1\0\1\60"+
    "\1\0\1\60\2\0\2\60\1\0\4\60\1\61\2\60\6\61\1\0"+
    "\2\61\1\60\2\0\5\60\1\0\1\60\1\0\6\61\2\0\12\57"+
    "\2\0\2\60\42\0\1\60\27\0\2\61\6\0\12\57\13\0\1\61"+
    "\1\0\1\61\1\0\1\61\4\0\2\61\10\60\1\0\44\60\4\0"+
    "\24\61\1\0\2\61\5\60\13\61\1\0\44\61\11\0\1\61\71\0"+
    "\53\60\24\61\1\60\12\57\6\0\6\60\4\61\4\60\3\61\1\60"+
    "\3\61\2\60\7\61\3\60\4\61\15\60\14\61\1\60\1\61\12\57"+
    "\4\61\2\0\46\60\12\0\53\60\1\0\1\60\3\0\u0149\60\1\0"+
    "\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0\51\60\1\0"+
    "\4\60\2\0\41\60\1\0\4\60\2\0\7\60\1\0\1\60\1\0"+
    "\4\60\2\0\17\60\1\0\71\60\1\0\4\60\2\0\103\60\2\0"+
    "\3\61\40\0\20\60\20\0\125\60\14\0\u026c\60\2\0\21\60\1\0"+
    "\32\60\5\0\113\60\3\0\3\60\17\0\15\60\1\0\4\60\3\61"+
    "\13\0\22\60\3\61\13\0\22\60\2\61\14\0\15\60\1\0\3\60"+
    "\1\0\2\61\14\0\64\60\40\61\3\0\1\60\3\0\2\60\1\61"+
    "\2\0\12\57\41\0\3\61\2\0\12\57\6\0\130\60\10\0\51\60"+
    "\1\61\1\60\5\0\106\60\12\0\35\60\3\0\14\61\4\0\14\61"+
    "\12\0\12\57\36\60\2\0\5\60\13\0\54\60\4\0\21\61\7\60"+
    "\2\61\6\0\12\57\46\0\27\60\5\61\4\0\65\60\12\61\1\0"+
    "\35\61\2\0\1\61\12\57\6\0\12\57\15\0\1\60\130\0\5\61"+
    "\57\60\21\61\7\60\4\0\12\57\21\0\11\61\14\0\3\61\36\60"+
    "\12\61\3\0\2\60\12\57\6\0\46\60\16\61\14\0\44\60\24\61"+
    "\10\0\12\57\3\0\3\60\12\57\44\60\122\0\3\61\1\0\25\61"+
    "\4\60\1\61\4\60\1\61\15\0\300\60\47\61\25\0\4\61\u0116\60"+
    "\2\0\6\60\2\0\46\60\2\0\6\60\2\0\10\60\1\0\1\60"+
    "\1\0\1\60\1\0\1\60\1\0\37\60\2\0\65\60\1\0\7\60"+
    "\1\0\1\60\3\0\3\60\1\0\7\60\3\0\4\60\2\0\6\60"+
    "\4\0\15\60\5\0\3\60\1\0\7\60\16\0\5\61\32\0\5\61"+
    "\20\0\2\60\23\0\1\60\13\0\5\61\5\0\6\61\1\0\1\60"+
    "\15\0\1\60\20\0\15\60\3\0\32\60\26\0\15\61\4\0\1\61"+
    "\3\0\14\61\21\0\1\60\4\0\1\60\2\0\12\60\1\0\1\60"+
    "\3\0\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0\4\60"+
    "\1\0\13\60\2\0\4\60\5\0\5\60\4\0\1\60\21\0\51\60"+
    "\u0a77\0\57\60\1\0\57\60\1\0\205\60\6\0\4\60\3\61\16\0"+
    "\46\60\12\0\66\60\11\0\1\60\17\0\1\61\27\60\11\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\40\61\57\0\1\60\u01d5\0\3\60"+
    "\31\0\11\60\6\61\1\0\5\60\2\0\5\60\4\0\126\60\2\0"+
    "\2\61\2\0\3\60\1\0\132\60\1\0\4\60\5\0\51\60\3\0"+
    "\136\60\21\0\33\60\65\0\20\60\u0200\0\u19b6\60\112\0\u51cc\60\64\0"+
    "\u048d\60\103\0\56\60\2\0\u010d\60\3\0\20\60\12\57\2\60\24\0"+
    "\57\60\1\61\14\0\2\61\1\0\31\60\10\0\120\60\2\61\45\0"+
    "\11\60\2\0\147\60\2\0\4\60\1\0\2\60\16\0\12\60\120\0"+
    "\10\60\1\61\3\60\1\61\4\60\1\61\27\60\5\61\20\0\1\60"+
    "\7\0\64\60\14\0\2\61\62\60\21\61\13\0\12\57\6\0\22\61"+
    "\6\60\3\0\1\60\4\0\12\57\34\60\10\61\2\0\27\60\15\61"+
    "\14\0\35\60\3\0\4\61\57\60\16\61\16\0\1\60\12\57\46\0"+
    "\51\60\16\61\11\0\3\60\1\61\10\60\2\61\2\0\12\57\6\0"+
    "\27\60\3\0\1\60\1\61\4\0\60\60\1\61\1\60\3\61\2\60"+
    "\2\61\5\60\2\61\1\60\1\61\1\60\30\0\3\60\43\0\6\60"+
    "\2\0\6\60\2\0\6\60\11\0\7\60\1\0\7\60\221\0\43\60"+
    "\10\61\1\0\2\61\2\0\12\57\6\0\u2ba4\60\14\0\27\60\4\0"+
    "\61\60\u2104\0\u012e\60\2\0\76\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\1\60\1\61\12\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0\u016b\60\22\0"+
    "\100\60\2\0\66\60\50\0\15\60\3\0\20\61\20\0\7\61\14\0"+
    "\2\60\30\0\3\60\31\0\1\60\6\0\5\60\1\0\207\60\2\0"+
    "\1\61\4\0\1\60\13\0\12\57\7\0\32\60\4\0\1\60\1\0"+
    "\32\60\13\0\131\60\3\0\6\60\2\0\6\60\2\0\6\60\2\0"+
    "\3\60\3\0\2\60\3\0\2\60\22\0\3\61\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\13\2\1\1\2\2\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\1\1\7\2\1\1\1\15\1\16\1\15\16\2\1\0"+
    "\1\17\2\2\1\0\1\20\7\2\1\0\1\21\1\0"+
    "\15\2\1\22\1\2\2\0\11\2\1\23\1\2\1\24"+
    "\5\2\1\25\3\2\1\26\1\2\2\0\1\27\1\30"+
    "\10\2\1\31\10\2\1\0\1\27\1\2\1\32\13\2"+
    "\1\33\2\2\1\0\3\2\1\34\1\35\1\2\1\36"+
    "\1\2\1\37\1\40\4\2\1\0\1\2\1\41\1\42"+
    "\1\43\1\44\1\45\1\2\1\46\1\47\1\50\1\51"+
    "\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\u0330\0\63\0\63\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u0330\0\63\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u04fb\0\63\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3"+
    "\0\u0d26\0\u0d59\0\231\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ac2"+
    "\0\u0ff0\0\231\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\231"+
    "\0\u1122\0\u1155\0\u1188\0\231\0\u11bb\0\u11ee\0\u1221\0\u0df2"+
    "\0\231\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\231\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\231\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8"+
    "\0\u181b\0\231\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d"+
    "\0\231\0\231\0\u1980\0\231\0\u19b3\0\231\0\231\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\231\0\231\0\231"+
    "\0\231\0\231\0\u1b18\0\231\0\231\0\63\0\231\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\4\4\1\14\4\4\1\15\1\16\1\4"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\4\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\4\1\2\1\47\64\0\1\4\1\50\22\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\24\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\12\4"+
    "\1\51\11\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\10\4\1\52\13\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\11\4\1\53\1\54\11\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\4\4\1\55"+
    "\4\4\1\56\12\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\2\4\1\57\5\4\1\60\13\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\17\4\1\61"+
    "\4\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\1\4\1\62\2\4\1\63\17\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\12\4\1\64\11\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\12\4\1\65"+
    "\11\4\1\0\3\4\14\0\10\4\2\0\3\4\26\0"+
    "\1\66\31\0\1\67\4\0\1\4\1\70\22\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\4\4\1\71"+
    "\17\4\1\0\3\4\14\0\10\4\2\0\3\4\1\0"+
    "\41\72\1\73\21\72\57\0\1\46\4\0\20\4\1\74"+
    "\3\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\2\4\1\75\21\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\12\4\1\76\11\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\1\4\1\77\22\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\6\4\1\100"+
    "\15\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\1\4\1\101\22\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\12\4\1\102\11\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\1\0\56\103\1\104\4\103\56\0"+
    "\1\45\41\0\1\105\21\0\1\46\65\0\1\47\1\0"+
    "\2\4\1\106\21\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\15\4\1\107\6\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\5\4\1\110\16\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\1\4\1\111"+
    "\5\4\1\112\14\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\3\4\1\113\20\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\11\4\1\114\12\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\17\4\1\115"+
    "\4\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\6\4\1\116\15\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\5\4\1\117\16\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\20\4\1\120\3\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\1\4\1\121"+
    "\22\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\21\4\1\122\2\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\11\4\1\123\12\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\15\4\1\124\6\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\1\0\25\125\1\126"+
    "\35\125\35\0\1\105\21\0\1\67\4\0\11\4\1\127"+
    "\12\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\15\4\1\130\6\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\7\4\1\131\14\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\6\4\1\132\15\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\6\4\1\133"+
    "\15\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\17\4\1\134\4\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\11\4\1\135\12\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\1\4\1\136\22\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\20\4\1\137"+
    "\3\4\1\0\3\4\14\0\10\4\2\0\3\4\60\0"+
    "\1\140\4\0\3\4\1\141\20\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\4\4\1\142\17\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\6\4\1\143"+
    "\15\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\5\4\1\144\16\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\16\4\1\145\5\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\13\4\1\146\10\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\10\4\1\147"+
    "\13\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\4\4\1\150\17\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\4\4\1\151\17\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\1\4\1\152\22\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\6\4\1\153"+
    "\15\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\6\4\1\154\15\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\17\4\1\155\4\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\24\4\1\156\3\4\14\0"+
    "\10\4\2\0\3\4\1\0\25\125\1\157\62\125\1\160"+
    "\35\125\1\0\22\4\1\161\1\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\1\4\1\162\22\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\12\4\1\163"+
    "\11\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\4\4\1\164\17\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\17\4\1\165\4\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\24\4\1\0\3\4\14\0"+
    "\4\4\1\166\3\4\2\0\3\4\2\0\7\4\1\167"+
    "\14\4\1\0\3\4\14\0\10\4\2\0\3\4\2\0"+
    "\20\4\1\170\3\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\15\4\1\115\6\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\4\4\1\171\17\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\24\4\1\0"+
    "\1\172\2\4\14\0\10\4\2\0\3\4\2\0\4\4"+
    "\1\173\17\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\12\4\1\174\11\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\12\4\1\175\11\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\7\4\1\176\14\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\2\4"+
    "\1\177\21\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\11\4\1\200\12\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\7\4\1\201\14\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\7\4\1\202\14\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\4\0\1\203"+
    "\57\0\25\125\1\204\35\125\1\0\17\4\1\205\4\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\15\4"+
    "\1\206\6\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\14\4\1\207\7\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\11\4\1\210\12\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\20\4\1\211\3\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\2\4"+
    "\1\212\21\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\4\4\1\213\17\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\5\4\1\214\16\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\11\4\1\215\12\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\6\4"+
    "\1\216\15\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\14\4\1\217\7\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\2\4\1\220\21\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\6\4\1\221\15\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\6\4"+
    "\1\222\15\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\5\4\1\223\16\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\11\4\1\224\12\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\14\0\1\225\74\0\1\204"+
    "\36\0\11\4\1\226\12\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\4\4\1\227\17\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\12\4\1\230\11\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\4\4"+
    "\1\231\17\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\14\4\1\232\7\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\12\4\1\233\11\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\6\4\1\234\15\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\6\4"+
    "\1\235\15\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\4\4\1\236\17\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\4\4\1\237\17\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\12\4\1\240\11\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\7\4"+
    "\1\241\14\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\20\4\1\242\3\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\4\4\1\243\17\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\12\0\1\244\52\0\3\4"+
    "\1\245\20\4\1\0\3\4\14\0\10\4\2\0\3\4"+
    "\2\0\11\4\1\246\12\4\1\0\3\4\14\0\10\4"+
    "\2\0\3\4\2\0\20\4\1\247\3\4\1\0\3\4"+
    "\14\0\10\4\2\0\3\4\2\0\2\4\1\250\21\4"+
    "\1\0\3\4\14\0\10\4\2\0\3\4\2\0\24\4"+
    "\1\0\1\251\2\4\14\0\10\4\2\0\3\4\2\0"+
    "\20\4\1\252\3\4\1\0\3\4\14\0\10\4\2\0"+
    "\3\4\2\0\1\4\1\253\22\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\4\4\1\254\17\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\2\0\22\4\1\255"+
    "\1\4\1\0\3\4\14\0\10\4\2\0\3\4\6\0"+
    "\1\256\56\0\4\4\1\257\17\4\1\0\3\4\14\0"+
    "\10\4\2\0\3\4\2\0\2\4\1\260\21\4\1\0"+
    "\3\4\14\0\10\4\2\0\3\4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6987];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\10\11\1\1\2\11\32\1\1\0"+
    "\3\1\1\0\1\11\7\1\1\0\1\11\1\0\17\1"+
    "\2\0\27\1\2\0\23\1\1\0\21\1\1\0\16\1"+
    "\1\0\11\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private Project project;
	private Set<String> identifiers;

	public TaraHighlighterLex(java.io.Reader o, Project project) {
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		Module module = ModuleProvider.getNamespaceOfDocument(project, zzBuffer.toString());
		TreeWrapper heritage = TaraLanguage.getHeritage(module);
		if (heritage != null)
			identifiers = heritage.getIdentifiers();
	}


  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 43: break;
        case 3: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 44: break;
        case 18: 
          { return TaraTypes.VAR;
          }
        case 45: break;
        case 10: 
          { return TaraTypes.COLON;
          }
        case 46: break;
        case 11: 
          { return TaraTypes.OPEN_AN;
          }
        case 47: break;
        case 38: 
          { return TaraTypes.MULTIPLE;
          }
        case 48: break;
        case 32: 
          { loadHeritage();return TaraTypes.BOX_KEY;
          }
        case 49: break;
        case 19: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 50: break;
        case 13: 
          { return TokenType.WHITE_SPACE;
          }
        case 51: break;
        case 34: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 52: break;
        case 6: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 53: break;
        case 12: 
          { return TaraTypes.CLOSE_AN;
          }
        case 54: break;
        case 7: 
          { return TaraTypes.DOT;
          }
        case 55: break;
        case 42: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 56: break;
        case 29: 
          { return TaraTypes.STRING_TYPE;
          }
        case 57: break;
        case 37: 
          { return TaraTypes.TERMINAL;
          }
        case 58: break;
        case 40: 
          { return TaraTypes.HAS_NAME;
          }
        case 59: break;
        case 25: 
          { return TaraTypes.EMPTY_REF;
          }
        case 60: break;
        case 5: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 61: break;
        case 39: 
          { return TaraTypes.REQUIRED;
          }
        case 62: break;
        case 31: 
          { return TaraTypes.PRIVATE;
          }
        case 63: break;
        case 15: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 64: break;
        case 22: 
          { return TaraTypes.ROOT;
          }
        case 65: break;
        case 17: 
          { return TaraTypes.DOC_LINE;
          }
        case 66: break;
        case 16: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 67: break;
        case 36: 
          { return TaraTypes.PROPERTY;
          }
        case 68: break;
        case 2: 
          { return evaluateIdentifier();
          }
        case 69: break;
        case 8: 
          { return TaraTypes.STAR;
          }
        case 70: break;
        case 28: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 71: break;
        case 4: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 72: break;
        case 14: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 73: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 74: break;
        case 41: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 75: break;
        case 26: 
          { return TaraTypes.ALIAS_TYPE;
          }
        case 76: break;
        case 21: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 77: break;
        case 27: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 78: break;
        case 20: 
          { return TaraTypes.CASE_KEY;
          }
        case 79: break;
        case 35: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 80: break;
        case 30: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 81: break;
        case 33: 
          { return TaraTypes.INT_TYPE;
          }
        case 82: break;
        case 24: 
          { return TaraTypes.WORD_KEY;
          }
        case 83: break;
        case 9: 
          { return TaraTypes.COMMA;
          }
        case 84: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
