/* The following code was generated by JFlex 1.4.3 on 21/04/15 10:21 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.Language;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.intellij.lang.psi.TaraTypes;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/04/15 10:21 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int QUOTED = 2;
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\55\1\61\1\56\2\0\1\57\16\55\4\0\1\61\1\0\1\50" +
			"\1\0\1\37\1\40\1\53\1\0\1\32\1\33\1\41\1\52\1\44" +
			"\1\51\1\34\1\43\12\60\1\45\1\47\1\0\1\46\1\61\2\0" +
			"\2\37\1\1\1\37\1\54\12\37\1\20\12\37\1\35\1\62\1\36" +
			"\1\0\1\37\1\0\1\14\1\12\1\4\1\16\1\5\1\31\1\25" +
			"\1\13\1\22\2\37\1\17\1\26\1\3\1\2\1\6\1\27\1\21" +
			"\1\10\1\7\1\11\1\23\1\24\1\15\1\30\1\37\4\0\41\55" +
			"\2\0\4\37\4\0\1\37\2\0\1\55\2\0\1\40\4\0\1\37" +
			"\1\0\1\42\2\0\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37" +
			"\4\0\14\37\16\0\5\37\7\0\1\37\1\0\1\37\21\0\160\55" +
			"\5\37\1\0\2\37\2\0\4\37\10\0\1\37\1\0\3\37\1\0" +
			"\1\37\1\0\24\37\1\0\123\37\1\0\213\37\1\0\5\55\2\0" +
			"\236\37\11\0\46\37\2\0\1\37\7\0\47\37\7\0\1\37\1\0" +
			"\55\55\1\0\1\55\1\0\2\55\1\0\2\55\1\0\1\55\10\0" +
			"\33\37\5\0\3\37\15\0\5\55\6\0\1\37\4\0\13\55\5\0" +
			"\53\37\25\55\12\60\4\0\2\37\1\55\143\37\1\0\1\37\10\55" +
			"\1\0\6\55\2\37\2\55\1\0\4\55\2\37\12\60\3\37\2\0" +
			"\1\37\17\0\1\55\1\37\1\55\36\37\33\55\2\0\131\37\13\55" +
			"\1\37\16\0\12\60\41\37\11\55\2\37\4\0\1\37\5\0\26\37" +
			"\4\55\1\37\11\55\1\37\3\55\1\37\5\55\22\0\31\37\3\55" +
			"\104\0\1\37\1\0\13\37\67\0\33\55\1\0\4\55\66\37\3\55" +
			"\1\37\22\55\1\37\7\55\12\37\2\55\2\0\12\60\1\0\7\37" +
			"\1\0\7\37\1\0\3\55\1\0\10\37\2\0\2\37\2\0\26\37" +
			"\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\55\1\37\7\55" +
			"\2\0\2\55\2\0\3\55\1\37\10\0\1\55\4\0\2\37\1\0" +
			"\3\37\2\55\2\0\12\60\4\37\7\0\1\37\5\0\3\55\1\0" +
			"\6\37\4\0\2\37\2\0\26\37\1\0\7\37\1\0\2\37\1\0" +
			"\2\37\1\0\2\37\2\0\1\55\1\0\5\55\4\0\2\55\2\0" +
			"\3\55\3\0\1\55\7\0\4\37\1\0\1\37\7\0\12\60\2\55" +
			"\3\37\1\55\13\0\3\55\1\0\11\37\1\0\3\37\1\0\26\37" +
			"\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\55\1\37\10\55" +
			"\1\0\3\55\1\0\3\55\2\0\1\37\17\0\2\37\2\55\2\0" +
			"\12\60\1\0\1\37\17\0\3\55\1\0\10\37\2\0\2\37\2\0" +
			"\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\55\1\37" +
			"\7\55\2\0\2\55\2\0\3\55\10\0\2\55\4\0\2\37\1\0" +
			"\3\37\2\55\2\0\12\60\1\0\1\37\20\0\1\55\1\37\1\0" +
			"\6\37\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1\37\1\0" +
			"\2\37\3\0\2\37\3\0\3\37\3\0\14\37\4\0\5\55\3\0" +
			"\3\55\1\0\4\55\2\0\1\37\6\0\1\55\16\0\12\60\11\0" +
			"\1\37\7\0\3\55\1\0\10\37\1\0\3\37\1\0\27\37\1\0" +
			"\12\37\1\0\5\37\3\0\1\37\7\55\1\0\3\55\1\0\4\55" +
			"\7\0\2\55\1\0\2\37\6\0\2\37\2\55\2\0\12\60\22\0" +
			"\2\55\1\0\10\37\1\0\3\37\1\0\27\37\1\0\12\37\1\0" +
			"\5\37\2\0\1\55\1\37\7\55\1\0\3\55\1\0\4\55\7\0" +
			"\2\55\7\0\1\37\1\0\2\37\2\55\2\0\12\60\1\0\2\37" +
			"\17\0\2\55\1\0\10\37\1\0\3\37\1\0\51\37\2\0\1\37" +
			"\7\55\1\0\3\55\1\0\4\55\1\37\10\0\1\55\10\0\2\37" +
			"\2\55\2\0\12\60\12\0\6\37\2\0\2\55\1\0\22\37\3\0" +
			"\30\37\1\0\11\37\1\0\1\37\2\0\7\37\3\0\1\55\4\0" +
			"\6\55\1\0\1\55\1\0\10\55\22\0\2\55\15\0\60\37\1\55" +
			"\2\37\7\55\4\0\10\37\10\55\1\0\12\60\47\0\2\37\1\0" +
			"\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37\1\0" +
			"\7\37\1\0\3\37\1\0\1\37\1\0\1\37\2\0\2\37\1\0" +
			"\4\37\1\55\2\37\6\55\1\0\2\55\1\37\2\0\5\37\1\0" +
			"\1\37\1\0\6\55\2\0\12\60\2\0\4\37\40\0\1\37\27\0" +
			"\2\55\6\0\12\60\13\0\1\55\1\0\1\55\1\0\1\55\4\0" +
			"\2\55\10\37\1\0\44\37\4\0\24\55\1\0\2\55\5\37\13\55" +
			"\1\0\44\55\11\0\1\55\71\0\53\37\24\55\1\37\12\60\6\0" +
			"\6\37\4\55\4\37\3\55\1\37\3\55\2\37\7\55\3\37\4\55" +
			"\15\37\14\55\1\37\1\55\12\60\4\55\2\0\46\37\1\0\1\37" +
			"\5\0\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37\2\0\7\37" +
			"\1\0\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37" +
			"\1\0\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37" +
			"\1\0\71\37\1\0\4\37\2\0\103\37\2\0\3\55\40\0\20\37" +
			"\20\0\125\37\14\0\u026c\37\2\0\21\37\1\0\32\37\5\0\113\37" +
			"\3\0\3\37\17\0\15\37\1\0\4\37\3\55\13\0\22\37\3\55" +
			"\13\0\22\37\2\55\14\0\15\37\1\0\3\37\1\0\2\55\14\0" +
			"\64\37\40\55\3\0\1\37\3\0\2\37\1\55\2\0\12\60\41\0" +
			"\3\55\2\0\12\60\6\0\130\37\10\0\51\37\1\55\1\37\5\0" +
			"\106\37\12\0\35\37\3\0\14\55\4\0\14\55\12\0\12\60\36\37" +
			"\2\0\5\37\13\0\54\37\4\0\21\55\7\37\2\55\6\0\12\60" +
			"\46\0\27\37\5\55\4\0\65\37\12\55\1\0\35\55\2\0\1\55" +
			"\12\60\6\0\12\60\15\0\1\37\130\0\5\55\57\37\21\55\7\37" +
			"\4\0\12\60\21\0\11\55\14\0\3\55\36\37\15\55\2\37\12\60" +
			"\54\37\16\55\14\0\44\37\24\55\10\0\12\60\3\0\3\37\12\60" +
			"\44\37\122\0\3\55\1\0\25\55\4\37\1\55\4\37\3\55\2\37" +
			"\11\0\300\37\47\55\25\0\4\55\u0116\37\2\0\6\37\2\0\46\37" +
			"\2\0\6\37\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37" +
			"\1\0\37\37\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37" +
			"\1\0\7\37\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37" +
			"\1\0\7\37\16\0\5\55\32\0\5\55\20\0\2\37\23\0\1\37" +
			"\13\0\5\55\5\0\6\55\1\0\1\37\15\0\1\37\20\0\15\37" +
			"\3\0\14\37\1\37\16\37\25\0\15\55\4\0\1\55\3\0\14\55" +
			"\21\0\1\37\4\0\1\37\2\0\12\37\1\0\1\37\3\0\5\37" +
			"\6\0\1\37\1\0\1\37\1\0\1\37\1\0\4\37\1\0\13\37" +
			"\2\0\4\37\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0\57\37" +
			"\1\0\57\37\1\0\205\37\6\0\4\37\3\55\2\37\14\0\46\37" +
			"\1\0\1\37\5\0\1\37\2\0\70\37\7\0\1\37\17\0\1\55" +
			"\27\37\11\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0" +
			"\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\40\55\57\0" +
			"\1\37\u01d5\0\3\37\31\0\11\37\6\55\1\0\5\37\2\0\5\37" +
			"\4\0\126\37\2\0\2\55\2\0\3\37\1\0\132\37\1\0\4\37" +
			"\5\0\51\37\3\0\136\37\21\0\33\37\65\0\20\37\u0200\0\u19b6\37" +
			"\112\0\u51cd\37\63\0\u048d\37\103\0\56\37\2\0\u010d\37\3\0\20\37" +
			"\12\60\2\37\24\0\57\37\1\55\4\0\12\55\1\0\31\37\7\0" +
			"\1\55\120\37\2\55\45\0\11\37\2\0\147\37\2\0\4\37\1\0" +
			"\4\37\14\0\13\37\115\0\12\37\1\55\3\37\1\55\4\37\1\55" +
			"\27\37\5\55\20\0\1\37\7\0\64\37\14\0\2\55\62\37\21\55" +
			"\13\0\12\60\6\0\22\55\6\37\3\0\1\37\4\0\12\60\34\37" +
			"\10\55\2\0\27\37\15\55\14\0\35\37\3\0\4\55\57\37\16\55" +
			"\16\0\1\37\12\60\46\0\51\37\16\55\11\0\3\37\1\55\10\37" +
			"\2\55\2\0\12\60\6\0\27\37\3\0\1\37\1\55\4\0\60\37" +
			"\1\55\1\37\3\55\2\37\2\55\5\37\2\55\1\37\1\55\1\37" +
			"\30\0\3\37\2\0\13\37\5\55\2\0\3\37\2\55\12\0\6\37" +
			"\2\0\6\37\2\0\6\37\11\0\7\37\1\0\7\37\221\0\43\37" +
			"\10\55\1\0\2\55\2\0\12\60\6\0\u2ba4\37\14\0\27\37\4\0" +
			"\61\37\u2104\0\u016e\37\2\0\152\37\46\0\7\37\14\0\5\37\5\0" +
			"\1\37\1\55\12\37\1\0\15\37\1\0\5\37\1\0\1\37\1\0" +
			"\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37\2\0" +
			"\66\37\50\0\15\37\3\0\20\55\20\0\7\55\14\0\2\37\30\0" +
			"\3\37\31\0\1\37\6\0\5\37\1\0\207\37\2\0\1\55\4\0" +
			"\1\37\13\0\12\60\7\0\32\37\4\0\1\37\1\0\32\37\13\0" +
			"\131\37\3\0\6\37\2\0\6\37\2\0\6\37\2\0\3\37\3\0" +
			"\2\37\3\0\2\37\22\0\3\55\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\2\0\1\1\25\2\1\3\1\4\1\5\1\6\1\7" +
			"\1\10\1\11\1\1\1\12\1\13\1\14\1\15\1\16" +
			"\3\1\1\17\1\20\1\17\1\21\1\22\1\21\1\2" +
			"\1\23\17\2\1\24\12\2\1\25\10\2\4\0\1\26" +
			"\2\0\13\2\1\27\1\2\1\30\1\2\1\31\6\2" +
			"\1\32\6\2\1\33\10\2\1\34\2\0\2\35\3\0" +
			"\1\36\12\2\1\37\7\2\1\0\1\10\1\40\1\2" +
			"\1\41\4\2\1\42\1\2\1\43\1\44\4\2\1\45" +
			"\1\0\1\35\1\0\1\46\2\0\7\2\1\47\15\2" +
			"\1\50\4\2\1\51\1\46\2\0\1\36\3\2\1\52" +
			"\5\2\1\53\1\54\5\2\1\55\1\56\6\2\1\0" +
			"\1\57\1\2\1\60\2\2\1\61\2\2\1\62\6\2" +
			"\1\63\1\64\1\2\1\65\1\0\1\66\1\2\1\67" +
			"\1\70\1\71\1\2\1\72\2\2\1\73\1\74\1\75" +
			"\1\76\1\77\1\2\1\100\1\2\1\101\1\102";

	private static int[] zzUnpackAction() {
		int[] result = new int[274];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165" +
			"\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd" +
			"\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495" +
			"\0\146\0\146\0\u04c8\0\146\0\146\0\u04fb\0\146\0\u052e" +
			"\0\146\0\146\0\146\0\146\0\146\0\u0561\0\u0594\0\u05c7" +
			"\0\u05fa\0\u062d\0\u0660\0\146\0\146\0\u0693\0\u06c6\0\u02fd" +
			"\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e" +
			"\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6" +
			"\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e" +
			"\0\u0bc1\0\u0bf4\0\u02fd\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3" +
			"\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b" +
			"\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023" +
			"\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u02fd\0\u1155\0\u02fd" +
			"\0\u1188\0\u02fd\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba" +
			"\0\u02fd\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u02fd" +
			"\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584" +
			"\0\146\0\u15b7\0\u15ea\0\146\0\u0e25\0\u161d\0\u1650\0\u1683" +
			"\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b" +
			"\0\u184e\0\u1881\0\u18b4\0\u02fd\0\u18e7\0\u191a\0\u194d\0\u1980" +
			"\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\146\0\u1ab2\0\u02fd" +
			"\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u02fd\0\u1bb1\0\u02fd\0\u02fd" +
			"\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u02fd\0\u1cb0\0\u15b7\0\u1ce3" +
			"\0\u1650\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48" +
			"\0\u1e7b\0\u1eae\0\u02fd\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad" +
			"\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145" +
			"\0\u02fd\0\u2178\0\u21ab\0\u21de\0\u2211\0\u02fd\0\u2244\0\u2277" +
			"\0\u22aa\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u02fd\0\u2376\0\u23a9" +
			"\0\u23dc\0\u240f\0\u2442\0\u02fd\0\u02fd\0\u2475\0\u24a8\0\u24db" +
			"\0\u250e\0\u2541\0\u02fd\0\u02fd\0\u2574\0\u25a7\0\u25da\0\u260d" +
			"\0\u2640\0\u2673\0\u26a6\0\u02fd\0\u26d9\0\u02fd\0\u270c\0\u273f" +
			"\0\u02fd\0\u2772\0\u27a5\0\u02fd\0\u27d8\0\u280b\0\u283e\0\u2871" +
			"\0\u28a4\0\u28d7\0\u02fd\0\u02fd\0\u290a\0\u02fd\0\u293d\0\u02fd" +
			"\0\u2970\0\u02fd\0\u02fd\0\u02fd\0\u29a3\0\u02fd\0\u29d6\0\u2a09" +
			"\0\u02fd\0\u02fd\0\u02fd\0\u1d16\0\u02fd\0\u2a3c\0\u02fd\0\u2a6f" +
			"\0\u02fd\0\u02fd";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[274];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12" +
			"\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\20" +
			"\1\22\1\23\1\24\1\25\1\26\1\20\1\27\2\20" +
			"\1\30\1\31\1\32\1\33\1\34\1\35\1\20\1\36" +
			"\1\37\1\3\1\40\1\41\1\42\1\43\1\44\1\45" +
			"\1\46\1\47\1\50\1\20\1\3\1\51\1\3\1\52" +
			"\1\53\1\3\50\54\1\55\5\54\2\3\2\54\1\56" +
			"\64\0\1\20\1\57\27\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\2\20" +
			"\1\60\2\20\1\61\23\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\13\20" +
			"\1\62\15\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\1\20\1\63\27\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\2\20\1\64\11\20\1\65\10\20" +
			"\1\66\3\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\20\20\1\67\10\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\4\20\1\70\13\20\1\71\10\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\6\20\1\72\1\20\1\73\10\20" +
			"\1\74\7\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\7\20\1\75\21\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\1\20\1\76\27\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\13\20\1\77\15\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\7\20" +
			"\1\100\1\20\1\101\3\20\1\102\6\20\1\103\4\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\31\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\1\20" +
			"\1\104\5\20\1\105\3\20\1\106\15\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\20\20\1\107\10\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\4\20" +
			"\1\110\6\20\1\111\15\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\2\20" +
			"\1\112\4\20\1\113\21\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\13\20" +
			"\1\114\15\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\1\20\1\115\17\20" +
			"\1\116\7\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\4\20\1\117\3\20" +
			"\1\120\20\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\4\20\1\121\6\20" +
			"\1\122\5\20\1\123\7\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\36\0\1\124" +
			"\27\0\31\36\5\0\1\36\2\0\2\36\5\0\1\36" +
			"\2\0\2\36\2\0\1\36\43\0\1\125\1\0\1\126" +
			"\70\0\1\127\6\0\1\130\62\0\1\52\62\0\1\131" +
			"\60\0\1\51\40\0\1\132\23\0\1\52\63\0\1\53" +
			"\4\0\1\54\3\0\1\54\11\0\1\54\26\0\1\54" +
			"\13\0\2\20\1\133\26\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\6\20" +
			"\1\134\22\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\6\20\1\135\22\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\25\20\1\136\3\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\3\20\1\137\25\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\6\20" +
			"\1\140\22\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\5\20\1\141\23\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\1\20\1\142\27\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\20\20\1\143\10\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\10\20" +
			"\1\144\20\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\20\20\1\145\10\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\11\20\1\146\17\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\2\20\1\147\26\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\4\20" +
			"\1\150\24\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\1\20\1\151\27\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\7\20\1\152\21\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\7\20\1\153\21\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\7\20" +
			"\1\154\21\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\15\20\1\155\13\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\24\20\1\156\4\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\3\20\1\157\4\20\1\160\20\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\16\20\1\161\12\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\6\20" +
			"\1\162\22\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\1\20\1\163\27\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\13\20\1\164\12\20\1\165\2\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\6\20\1\166\22\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\6\20\1\167\22\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\20\20" +
			"\1\170\10\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\20\20\1\171\10\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\6\20\1\172\22\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\13\20\1\173\15\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\16\20" +
			"\1\174\12\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\13\20\1\175\15\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\3\20\1\176\12\20\1\177\12\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\16\20\1\200\12\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\36\0\1\201\26\0\41\202\1\203\21\202\56\126\1\204" +
			"\1\205\3\126\51\206\1\207\11\206\34\0\1\132\23\0" +
			"\1\130\62\0\1\210\62\0\1\211\3\0\3\20\1\212" +
			"\25\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\21\20\1\213\7\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\10\20\1\214\10\20\1\215\7\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\5\20\1\216\23\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\16\20\1\217\12\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\4\20\1\220" +
			"\24\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\6\20\1\221\22\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\5\20\1\222\23\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\25\20\1\223\3\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\4\20\1\224" +
			"\24\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\21\20\1\225\7\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\24\20\1\226\4\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\16\20\1\227\12\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\1\20\1\230" +
			"\27\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\6\20\1\231\22\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\20\20\1\232\10\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\20\20\1\233\10\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\2\0\1\234\31\157" +
			"\5\234\1\157\2\234\2\235\5\234\1\157\2\234\2\157" +
			"\1\236\1\234\1\157\2\234\1\0\11\20\1\237\17\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\4\20\1\240\24\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\6\20\1\241\22\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\15\20" +
			"\1\242\13\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\10\20\1\243\20\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\21\20\1\244\7\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\1\20\1\245\2\20\1\246\24\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\15\20\1\247\13\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\12\20" +
			"\1\250\16\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\7\20\1\251\21\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\6\20\1\252\22\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\6\20\1\253\22\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\4\20" +
			"\1\254\24\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\7\20\1\144\21\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\4\20\1\255\24\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\2\0\41\202\1\256\62\202\1\256\1\202\1\257\17\202" +
			"\51\206\1\260\62\206\1\261\11\206\60\0\1\262\56\0" +
			"\1\263\3\0\1\211\3\0\4\20\1\264\24\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\1\20\1\265\27\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\20\20\1\266\10\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\22\20\1\267" +
			"\6\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\1\20\1\270\27\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\1\20\1\271\27\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\2\20\1\272\26\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\27\20\1\273" +
			"\1\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\4\20\1\274\24\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\21\20\1\275\7\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\2\20\1\276\26\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\16\20\1\277" +
			"\12\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\4\20\1\300\24\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\3\20\1\301\25\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\20\20\1\302\10\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\4\20\1\303" +
			"\24\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\4\20\1\304\24\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\2\0\56\234\1\236\5\234\31\235\5\234\1\235" +
			"\2\234\2\235\5\234\1\235\2\234\2\235\1\236\1\234" +
			"\1\235\2\234\1\0\16\20\1\305\12\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\4\20\1\306\24\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\1\20" +
			"\1\307\27\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\21\20\1\310\7\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\1\20\1\311\27\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\24\20\1\312\4\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\3\0\10\20" +
			"\1\313\20\20\5\0\1\20\2\0\2\36\5\0\1\20" +
			"\2\0\2\20\2\0\1\20\3\0\21\20\1\314\7\20" +
			"\5\0\1\20\2\0\2\36\5\0\1\20\2\0\2\20" +
			"\2\0\1\20\3\0\10\20\1\315\20\20\5\0\1\20" +
			"\2\0\2\36\5\0\1\20\2\0\2\20\2\0\1\20" +
			"\3\0\6\20\1\316\22\20\5\0\1\20\2\0\2\36" +
			"\5\0\1\20\2\0\2\20\2\0\1\20\2\0\41\202" +
			"\1\256\1\202\1\204\17\202\51\206\1\317\11\206\34\0" +
			"\1\320\77\0\2\321\5\0\1\322\3\0\5\20\1\323" +
			"\23\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\2\20\1\324\26\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\13\20\1\325\15\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\4\20\1\326\24\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\2\20\1\327" +
			"\26\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\7\20\1\330\21\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\15\20\1\331\13\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\20\20\1\332\10\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\2\20\1\333" +
			"\26\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\24\20\1\334\4\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\4\20\1\335\24\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\13\20\1\336\15\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\21\20\1\337" +
			"\7\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\13\20\1\340\15\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\7\20\1\341\21\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\24\20\1\342\4\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\4\20\1\343" +
			"\24\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\1\20\1\344\27\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\2\20\1\345\26\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\20\20\1\346\10\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\4\20\1\347" +
			"\24\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\20\20\1\350\10\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\5\20\1\351\23\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\20\20\1\352\10\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\53\0\1\317\71\0" +
			"\1\353\62\0\1\322\3\0\6\20\1\354\22\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\13\20\1\355\15\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\16\20\1\356\12\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\4\20\1\357" +
			"\24\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\4\20\1\360\24\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\7\20\1\361\21\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\6\20\1\362\22\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\13\20\1\363" +
			"\15\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\2\20\1\364\26\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\13\20\1\365\15\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\3\20\1\366\25\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\7\20\1\367" +
			"\21\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\13\20\1\370\15\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\16\20\1\371\12\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\4\20\1\372\24\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\20\20\1\373" +
			"\10\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\4\20\1\374\24\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\16\20\1\375\12\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\4\20\1\376\24\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\62\0\1\377\3\0" +
			"\16\20\1\u0100\12\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\2\20\1\u0101" +
			"\26\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\15\20\1\u0102\13\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\27\20\1\u0103\1\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\16\20\1\u0104\12\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\6\20\1\u0105" +
			"\22\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\6\20\1\u0106\22\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\4\20\1\u0107\24\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\6\20\1\u0108\22\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\27\20\1\u0109" +
			"\1\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\15\20\1\u010a\13\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\4\20\1\u010b\24\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\62\0" +
			"\1\u010c\3\0\6\20\1\u010d\22\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\4\20\1\u010e\24\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\3\0\15\20\1\u010f" +
			"\13\20\5\0\1\20\2\0\2\36\5\0\1\20\2\0" +
			"\2\20\2\0\1\20\3\0\4\20\1\u0110\24\20\5\0" +
			"\1\20\2\0\2\36\5\0\1\20\2\0\2\20\2\0" +
			"\1\20\3\0\15\20\1\u0111\13\20\5\0\1\20\2\0" +
			"\2\36\5\0\1\20\2\0\2\20\2\0\1\20\3\0" +
			"\15\20\1\u0112\13\20\5\0\1\20\2\0\2\36\5\0" +
			"\1\20\2\0\2\20\2\0\1\20\2\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[10914];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	private static java.io.Reader zzReader = null; // Fake

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\2\0\1\11\25\1\2\11\1\1\2\11\1\1\1\11" +
			"\1\1\5\11\6\1\2\11\46\1\4\0\1\1\2\0" +
			"\46\1\1\11\2\0\1\11\1\1\3\0\23\1\1\0" +
			"\1\1\1\11\17\1\1\0\1\1\1\0\1\1\2\0" +
			"\34\1\2\0\31\1\1\0\23\1\1\0\23\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[274];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (identifiers != null) return;
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
			String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		identifiers = new HashSet();
		Language heritage = TaraLanguage.getLanguage(dsl, project);
		if (heritage != null) Collections.addAll(identifiers, heritage.lexicon());
	}


	TaraHighlighterLex(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	TaraHighlighterLex(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 2272) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p/>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p/>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p/>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p/>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 38: {
					return TaraTypes.STRING_MULTILINE_VALUE_KEY;
				}
				case 67:
					break;
				case 6: {
					return TaraTypes.LEFT_SQUARE;
				}
				case 68:
					break;
				case 36: {
					return TaraTypes.WITH;
				}
				case 69:
					break;
				case 27: {
					return TaraTypes.VAR;
				}
				case 70:
					break;
				case 11: {
					return TaraTypes.COLON;
				}
				case 71:
					break;
				case 58: {
					return TaraTypes.ABSTRACT;
				}
				case 72:
					break;
				case 40: {
					return TaraTypes.RATIO_TYPE;
				}
				case 73:
					break;
				case 61: {
					return TaraTypes.MULTIPLE;
				}
				case 74:
					break;
				case 18: {
					yybegin(YYINITIAL);
					return TaraTypes.QUOTE_END;
				}
				case 75:
					break;
				case 44: {
					return TaraTypes.SINGLE;
				}
				case 76:
					break;
				case 63: {
					return TaraTypes.COMPONENT;
				}
				case 77:
					break;
				case 30: {
					return TaraTypes.DOUBLE_VALUE_KEY;
				}
				case 78:
					break;
				case 15: {
					return TokenType.WHITE_SPACE;
				}
				case 79:
					break;
				case 48: {
					return TaraTypes.NATURAL_TYPE;
				}
				case 80:
					break;
				case 4: {
					return TaraTypes.RIGHT_PARENTHESIS;
				}
				case 81:
					break;
				case 28: {
					return TaraTypes.LIST;
				}
				case 82:
					break;
				case 12: {
					return TaraTypes.EQUALS;
				}
				case 83:
					break;
				case 5: {
					return TaraTypes.DOT;
				}
				case 84:
					break;
				case 43: {
					return TaraTypes.STRING_TYPE;
				}
				case 85:
					break;
				case 57: {
					return TaraTypes.TERMINAL;
				}
				case 86:
					break;
				case 29: {
					return TaraTypes.COMMENT;
				}
				case 87:
					break;
				case 66: {
					return TaraTypes.AGGREGATED;
				}
				case 88:
					break;
				case 46: {
					return TaraTypes.PROTEO;
				}
				case 89:
					break;
				case 42: {
					return TaraTypes.NATIVE_TYPE;
				}
				case 90:
					break;
				case 33: {
					return TaraTypes.DATE_TYPE;
				}
				case 91:
					break;
				case 54: {
					return TaraTypes.OPTIONAL;
				}
				case 92:
					break;
				case 39: {
					return TaraTypes.EMPTY_REF;
				}
				case 93:
					break;
				case 3: {
					return TaraTypes.LEFT_PARENTHESIS;
				}
				case 94:
					break;
				case 60: {
					return TaraTypes.REQUIRED;
				}
				case 95:
					break;
				case 53: {
					return TaraTypes.FEATURE;
				}
				case 96:
					break;
				case 22: {
					return TaraTypes.NEGATIVE_VALUE_KEY;
				}
				case 97:
					break;
				case 13: {
					return TaraTypes.DSL;
				}
				case 98:
					break;
				case 62: {
					return TaraTypes.ADDRESS_VALUE;
				}
				case 99:
					break;
				case 49: {
					return TaraTypes.EXTENDS;
				}
				case 100:
					break;
				case 56: {
					return TaraTypes.PROPERTY;
				}
				case 101:
					break;
				case 2: {
					return evaluateIdentifier();
				}
				case 102:
					break;
				case 9: {
					return TaraTypes.STAR;
				}
				case 103:
					break;
				case 45: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 104:
					break;
				case 7: {
					return TaraTypes.RIGHT_SQUARE;
				}
				case 105:
					break;
				case 16: {
					return TaraTypes.NATURAL_VALUE_KEY;
				}
				case 106:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 107:
					break;
				case 34: {
					return TaraTypes.INTO;
				}
				case 108:
					break;
				case 8: {
					return TaraTypes.MEASURE_VALUE;
				}
				case 109:
					break;
				case 37: {
					return TaraTypes.RESOURCE_KEY;
				}
				case 110:
					break;
				case 32: {
					yypushback(1);
					return TaraTypes.DOC_LINE;
				}
				case 111:
					break;
				case 31: {
					return TaraTypes.BOOLEAN_VALUE_KEY;
				}
				case 112:
					break;
				case 20: {
					return TaraTypes.AS;
				}
				case 113:
					break;
				case 19: {
					return TaraTypes.ON;
				}
				case 114:
					break;
				case 23: {
					return TaraTypes.SUB;
				}
				case 115:
					break;
				case 59: {
					return TaraTypes.READONLY;
				}
				case 116:
					break;
				case 55: {
					return TaraTypes.ENCLOSED;
				}
				case 117:
					break;
				case 14: {
					yybegin(QUOTED);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 118:
					break;
				case 50: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 119:
					break;
				case 26: {
					loadHeritage();
					return TaraTypes.DSL;
				}
				case 120:
					break;
				case 21: {
					return TaraTypes.IS;
				}
				case 121:
					break;
				case 52: {
					return TaraTypes.MEASURE_TYPE_KEY;
				}
				case 122:
					break;
				case 24: {
					return TaraTypes.USE;
				}
				case 123:
					break;
				case 51: {
					return TaraTypes.INT_TYPE;
				}
				case 124:
					break;
				case 47: {
					return TaraTypes.METAIDENTIFIER_KEY;
				}
				case 125:
					break;
				case 65: {
					return TaraTypes.ASSOCIATED;
				}
				case 126:
					break;
				case 35: {
					return TaraTypes.WORD_KEY;
				}
				case 127:
					break;
				case 64: {
					return TaraTypes.ADDRESSED;
				}
				case 128:
					break;
				case 17: {
					return TaraTypes.CHARACTER;
				}
				case 129:
					break;
				case 41: {
					return TaraTypes.FACET;
				}
				case 130:
					break;
				case 10: {
					return TaraTypes.COMMA;
				}
				case 131:
					break;
				case 25: {
					return TaraTypes.HAS;
				}
				case 132:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						return null;
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
