/* The following code was generated by JFlex 1.4.3 on 10/02/15 14:01 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.intellij.lang.psi.TaraTypes;
import siani.tara.lang.Model;

import java.util.Set;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/02/15 14:01 from the specification file
 * <tt>/Users/octavio/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\54\1\57\1\55\3\0\16\54\4\0\1\57\1\0\1\47\1\0" +
			"\1\37\1\40\1\52\1\0\1\32\1\33\1\41\1\51\1\43\1\50" +
			"\1\34\1\42\12\56\1\44\1\46\1\0\1\45\1\57\2\0\2\37" +
			"\1\1\1\37\1\53\12\37\1\20\12\37\1\35\1\0\1\36\1\0" +
			"\1\37\1\0\1\14\1\12\1\4\1\16\1\5\1\31\1\26\1\13" +
			"\1\22\2\37\1\17\1\30\1\3\1\2\1\6\1\27\1\21\1\10" +
			"\1\7\1\11\1\23\1\24\1\15\1\25\1\37\4\0\41\54\2\0" +
			"\4\37\4\0\1\37\2\0\1\54\2\0\1\40\4\0\1\37\1\0" +
			"\1\42\2\0\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37\4\0" +
			"\14\37\16\0\5\37\7\0\1\37\1\0\1\37\21\0\160\54\5\37" +
			"\1\0\2\37\2\0\4\37\10\0\1\37\1\0\3\37\1\0\1\37" +
			"\1\0\24\37\1\0\123\37\1\0\213\37\1\0\5\54\2\0\236\37" +
			"\11\0\46\37\2\0\1\37\7\0\47\37\11\0\55\54\1\0\1\54" +
			"\1\0\2\54\1\0\2\54\1\0\1\54\10\0\33\37\5\0\3\37" +
			"\15\0\4\54\7\0\1\37\4\0\13\54\5\0\53\37\25\54\12\56" +
			"\4\0\2\37\1\54\143\37\1\0\1\37\10\54\1\0\6\54\2\37" +
			"\2\54\1\0\4\54\2\37\12\56\3\37\2\0\1\37\17\0\1\54" +
			"\1\37\1\54\36\37\33\54\2\0\131\37\13\54\1\37\16\0\12\56" +
			"\41\37\11\54\2\37\4\0\1\37\5\0\26\37\4\54\1\37\11\54" +
			"\1\37\3\54\1\37\5\54\22\0\31\37\3\54\244\0\4\54\66\37" +
			"\3\54\1\37\22\54\1\37\7\54\12\37\2\54\2\0\12\56\1\0" +
			"\7\37\1\0\7\37\1\0\3\54\1\0\10\37\2\0\2\37\2\0" +
			"\26\37\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\54\1\37" +
			"\7\54\2\0\2\54\2\0\3\54\1\37\10\0\1\54\4\0\2\37" +
			"\1\0\3\37\2\54\2\0\12\56\4\37\7\0\1\37\5\0\3\54" +
			"\1\0\6\37\4\0\2\37\2\0\26\37\1\0\7\37\1\0\2\37" +
			"\1\0\2\37\1\0\2\37\2\0\1\54\1\0\5\54\4\0\2\54" +
			"\2\0\3\54\3\0\1\54\7\0\4\37\1\0\1\37\7\0\12\56" +
			"\2\54\3\37\1\54\13\0\3\54\1\0\11\37\1\0\3\37\1\0" +
			"\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\54\1\37" +
			"\10\54\1\0\3\54\1\0\3\54\2\0\1\37\17\0\2\37\2\54" +
			"\2\0\12\56\1\0\1\37\17\0\3\54\1\0\10\37\2\0\2\37" +
			"\2\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\54" +
			"\1\37\7\54\2\0\2\54\2\0\3\54\10\0\2\54\4\0\2\37" +
			"\1\0\3\37\2\54\2\0\12\56\1\0\1\37\20\0\1\54\1\37" +
			"\1\0\6\37\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1\37" +
			"\1\0\2\37\3\0\2\37\3\0\3\37\3\0\14\37\4\0\5\54" +
			"\3\0\3\54\1\0\4\54\2\0\1\37\6\0\1\54\16\0\12\56" +
			"\11\0\1\37\7\0\3\54\1\0\10\37\1\0\3\37\1\0\27\37" +
			"\1\0\12\37\1\0\5\37\3\0\1\37\7\54\1\0\3\54\1\0" +
			"\4\54\7\0\2\54\1\0\2\37\6\0\2\37\2\54\2\0\12\56" +
			"\22\0\2\54\1\0\10\37\1\0\3\37\1\0\27\37\1\0\12\37" +
			"\1\0\5\37\2\0\1\54\1\37\7\54\1\0\3\54\1\0\4\54" +
			"\7\0\2\54\7\0\1\37\1\0\2\37\2\54\2\0\12\56\1\0" +
			"\2\37\17\0\2\54\1\0\10\37\1\0\3\37\1\0\51\37\2\0" +
			"\1\37\7\54\1\0\3\54\1\0\4\54\1\37\10\0\1\54\10\0" +
			"\2\37\2\54\2\0\12\56\12\0\6\37\2\0\2\54\1\0\22\37" +
			"\3\0\30\37\1\0\11\37\1\0\1\37\2\0\7\37\3\0\1\54" +
			"\4\0\6\54\1\0\1\54\1\0\10\54\22\0\2\54\15\0\60\37" +
			"\1\54\2\37\7\54\4\0\10\37\10\54\1\0\12\56\47\0\2\37" +
			"\1\0\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37" +
			"\1\0\7\37\1\0\3\37\1\0\1\37\1\0\1\37\2\0\2\37" +
			"\1\0\4\37\1\54\2\37\6\54\1\0\2\54\1\37\2\0\5\37" +
			"\1\0\1\37\1\0\6\54\2\0\12\56\2\0\2\37\42\0\1\37" +
			"\27\0\2\54\6\0\12\56\13\0\1\54\1\0\1\54\1\0\1\54" +
			"\4\0\2\54\10\37\1\0\44\37\4\0\24\54\1\0\2\54\5\37" +
			"\13\54\1\0\44\54\11\0\1\54\71\0\53\37\24\54\1\37\12\56" +
			"\6\0\6\37\4\54\4\37\3\54\1\37\3\54\2\37\7\54\3\37" +
			"\4\54\15\37\14\54\1\37\1\54\12\56\4\54\2\0\46\37\12\0" +
			"\53\37\1\0\1\37\3\0\u0149\37\1\0\4\37\2\0\7\37\1\0" +
			"\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37\1\0" +
			"\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37\1\0" +
			"\71\37\1\0\4\37\2\0\103\37\2\0\3\54\40\0\20\37\20\0" +
			"\125\37\14\0\u026c\37\2\0\21\37\1\0\32\37\5\0\113\37\3\0" +
			"\3\37\17\0\15\37\1\0\4\37\3\54\13\0\22\37\3\54\13\0" +
			"\22\37\2\54\14\0\15\37\1\0\3\37\1\0\2\54\14\0\64\37" +
			"\40\54\3\0\1\37\3\0\2\37\1\54\2\0\12\56\41\0\3\54" +
			"\2\0\12\56\6\0\130\37\10\0\51\37\1\54\1\37\5\0\106\37" +
			"\12\0\35\37\3\0\14\54\4\0\14\54\12\0\12\56\36\37\2\0" +
			"\5\37\13\0\54\37\4\0\21\54\7\37\2\54\6\0\12\56\46\0" +
			"\27\37\5\54\4\0\65\37\12\54\1\0\35\54\2\0\1\54\12\56" +
			"\6\0\12\56\15\0\1\37\130\0\5\54\57\37\21\54\7\37\4\0" +
			"\12\56\21\0\11\54\14\0\3\54\36\37\12\54\3\0\2\37\12\56" +
			"\6\0\46\37\16\54\14\0\44\37\24\54\10\0\12\56\3\0\3\37" +
			"\12\56\44\37\122\0\3\54\1\0\25\54\4\37\1\54\4\37\1\54" +
			"\15\0\300\37\47\54\25\0\4\54\u0116\37\2\0\6\37\2\0\46\37" +
			"\2\0\6\37\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37" +
			"\1\0\37\37\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37" +
			"\1\0\7\37\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37" +
			"\1\0\7\37\16\0\5\54\32\0\5\54\20\0\2\37\23\0\1\37" +
			"\13\0\5\54\5\0\6\54\1\0\1\37\15\0\1\37\20\0\15\37" +
			"\3\0\14\37\1\37\15\37\26\0\15\54\4\0\1\54\3\0\14\54" +
			"\21\0\1\37\4\0\1\37\2\0\12\37\1\0\1\37\3\0\5\37" +
			"\6\0\1\37\1\0\1\37\1\0\1\37\1\0\4\37\1\0\13\37" +
			"\2\0\4\37\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0\57\37" +
			"\1\0\57\37\1\0\205\37\6\0\4\37\3\54\16\0\46\37\12\0" +
			"\66\37\11\0\1\37\17\0\1\54\27\37\11\0\7\37\1\0\7\37" +
			"\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37" +
			"\1\0\7\37\1\0\40\54\57\0\1\37\u01d5\0\3\37\31\0\11\37" +
			"\6\54\1\0\5\37\2\0\5\37\4\0\126\37\2\0\2\54\2\0" +
			"\3\37\1\0\132\37\1\0\4\37\5\0\51\37\3\0\136\37\21\0" +
			"\33\37\65\0\20\37\u0200\0\u19b6\37\112\0\u51cc\37\64\0\u048d\37\103\0" +
			"\56\37\2\0\u010d\37\3\0\20\37\12\56\2\37\24\0\57\37\1\54" +
			"\14\0\2\54\1\0\31\37\10\0\120\37\2\54\45\0\11\37\2\0" +
			"\147\37\2\0\4\37\1\0\2\37\16\0\12\37\120\0\10\37\1\54" +
			"\3\37\1\54\4\37\1\54\27\37\5\54\20\0\1\37\7\0\64\37" +
			"\14\0\2\54\62\37\21\54\13\0\12\56\6\0\22\54\6\37\3\0" +
			"\1\37\4\0\12\56\34\37\10\54\2\0\27\37\15\54\14\0\35\37" +
			"\3\0\4\54\57\37\16\54\16\0\1\37\12\56\46\0\51\37\16\54" +
			"\11\0\3\37\1\54\10\37\2\54\2\0\12\56\6\0\27\37\3\0" +
			"\1\37\1\54\4\0\60\37\1\54\1\37\3\54\2\37\2\54\5\37" +
			"\2\54\1\37\1\54\1\37\30\0\3\37\43\0\6\37\2\0\6\37" +
			"\2\0\6\37\11\0\7\37\1\0\7\37\221\0\43\37\10\54\1\0" +
			"\2\54\2\0\12\56\6\0\u2ba4\37\14\0\27\37\4\0\61\37\u2104\0" +
			"\u012e\37\2\0\76\37\2\0\152\37\46\0\7\37\14\0\5\37\5\0" +
			"\1\37\1\54\12\37\1\0\15\37\1\0\5\37\1\0\1\37\1\0" +
			"\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37\2\0" +
			"\66\37\50\0\15\37\3\0\20\54\20\0\7\54\14\0\2\37\30\0" +
			"\3\37\31\0\1\37\6\0\5\37\1\0\207\37\2\0\1\54\4\0" +
			"\1\37\13\0\12\56\7\0\32\37\4\0\1\37\1\0\32\37\13\0" +
			"\131\37\3\0\6\37\2\0\6\37\2\0\6\37\2\0\3\37\3\0" +
			"\2\37\3\0\2\37\22\0\3\54\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\1\0\1\1\25\2\1\3\1\4\1\5\1\6\1\7" +
			"\1\10\1\11\1\12\1\13\1\14\1\15\2\1\1\16" +
			"\1\1\1\17\1\20\1\17\1\2\1\21\17\2\1\22" +
			"\15\2\1\23\6\2\2\0\1\24\1\0\1\25\2\0" +
			"\14\2\1\26\1\2\1\27\1\2\1\30\7\2\1\31" +
			"\7\2\1\32\6\2\1\33\3\0\1\34\4\2\1\35" +
			"\5\2\1\36\11\2\1\0\1\10\1\37\1\40\1\2" +
			"\1\41\4\2\1\42\1\43\2\2\1\44\1\0\1\45" +
			"\2\0\2\2\1\46\3\2\1\47\16\2\1\50\3\2" +
			"\1\51\1\45\2\0\1\34\7\2\1\52\1\53\4\2" +
			"\1\54\1\2\1\55\1\56\5\2\1\0\1\57\1\60" +
			"\2\2\1\61\2\2\1\62\7\2\1\63\1\64\1\0" +
			"\1\2\1\65\1\66\1\67\1\2\1\70\2\2\1\71" +
			"\1\72\1\2\1\73\1\74\1\2\1\75\1\2\1\76" +
			"\1\77\1\100";

	private static int[] zzUnpackAction() {
		int[] result = new int[259];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150" +
			"\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0" +
			"\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\60" +
			"\0\60\0\u0450\0\60\0\60\0\u0480\0\60\0\60\0\60" +
			"\0\60\0\60\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0" +
			"\0\u05d0\0\u0600\0\u02a0\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0" +
			"\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870" +
			"\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0" +
			"\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70" +
			"\0\u02a0\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0" +
			"\0\u04b0\0\60\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0" +
			"\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60" +
			"\0\u0f90\0\u0fc0\0\u02a0\0\u0ff0\0\u02a0\0\u1020\0\u02a0\0\u1050" +
			"\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u02a0\0\u11a0" +
			"\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u02a0\0\u12f0" +
			"\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\60\0\u1410\0\u1440" +
			"\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u02a0\0\u1590" +
			"\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u02a0\0\u1680\0\u16b0\0\u16e0" +
			"\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860" +
			"\0\60\0\u02a0\0\u1890\0\u02a0\0\u18c0\0\u18f0\0\u1920\0\u1950" +
			"\0\u02a0\0\u02a0\0\u1980\0\u19b0\0\u02a0\0\u19e0\0\u1440\0\u1a10" +
			"\0\u1a40\0\u1a70\0\u1aa0\0\u02a0\0\u1ad0\0\u1b00\0\u1b30\0\u02a0" +
			"\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0" +
			"\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u02a0\0\u1e00" +
			"\0\u1e30\0\u1e60\0\u02a0\0\u1e90\0\u1ec0\0\u1ef0\0\u1ef0\0\u1f20" +
			"\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u02a0\0\u02a0" +
			"\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u02a0\0\u2130\0\u02a0\0\u02a0" +
			"\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u02a0\0\u02a0" +
			"\0\u2280\0\u22b0\0\u02a0\0\u22e0\0\u2310\0\u02a0\0\u2340\0\u2370" +
			"\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460\0\u02a0\0\u02a0\0\u2490" +
			"\0\u24c0\0\u02a0\0\u02a0\0\u02a0\0\u24f0\0\u02a0\0\u2520\0\u2550" +
			"\0\u02a0\0\u02a0\0\u2580\0\u1a10\0\u02a0\0\u25b0\0\u02a0\0\u25e0" +
			"\0\u02a0\0\u02a0\0\u02a0";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[259];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11" +
			"\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\17" +
			"\1\21\1\22\1\23\1\24\1\25\3\17\1\26\1\27" +
			"\1\30\1\31\1\32\1\33\1\34\1\17\1\35\1\36" +
			"\1\2\1\37\1\40\1\41\1\42\1\43\1\44\1\45" +
			"\1\46\1\17\1\2\1\47\1\50\1\51\61\0\1\17" +
			"\1\52\27\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\2\17\1\53\26\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\13\17\1\54\15\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\1\17\1\55\11\17\1\56\15\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\2\17\1\57\11\17\1\60\12\17\1\61\1\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\20\17\1\62\10\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\4\17\1\63\13\17\1\64\10\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\6\17\1\65\1\17\1\66\10\17\1\67\7\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\7\17\1\70\21\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\1\17\1\71\27\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\13\17" +
			"\1\72\15\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\7\17\1\73\1\17" +
			"\1\74\3\17\1\75\1\76\6\17\1\77\3\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\31\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\1\17\1\100" +
			"\2\17\1\101\2\17\1\102\3\17\1\103\15\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\20\17\1\104\10\17\5\0\1\17\2\0" +
			"\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0" +
			"\1\17\1\105\2\17\1\106\6\17\1\107\15\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\2\17\1\110\4\17\1\111\21\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\13\17\1\112\15\17\5\0\1\17\2\0" +
			"\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0" +
			"\1\17\1\113\17\17\1\114\7\17\5\0\1\17\2\0" +
			"\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0" +
			"\4\17\1\115\24\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\13\17\1\116" +
			"\5\17\1\117\7\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\35\0\1\120\24\0" +
			"\31\35\5\0\1\35\2\0\1\35\5\0\1\35\2\0" +
			"\2\35\1\0\1\35\1\0\47\121\1\122\10\121\50\0" +
			"\1\123\5\0\1\124\57\0\1\50\57\0\1\125\56\0" +
			"\1\47\36\0\1\126\21\0\1\50\60\0\1\51\1\0" +
			"\2\17\1\127\26\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\6\17\1\130" +
			"\20\17\1\131\1\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\27\17\1\132" +
			"\1\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0" +
			"\2\17\1\0\1\17\2\0\7\17\1\133\21\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\3\17\1\134\25\17\5\0\1\17\2\0" +
			"\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0" +
			"\6\17\1\135\22\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\5\17\1\136" +
			"\23\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0" +
			"\2\17\1\0\1\17\2\0\1\17\1\137\27\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\20\17\1\140\10\17\5\0\1\17\2\0" +
			"\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0" +
			"\10\17\1\141\20\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\20\17\1\142" +
			"\10\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0" +
			"\2\17\1\0\1\17\2\0\11\17\1\143\17\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\2\17\1\144\26\17\5\0\1\17\2\0" +
			"\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0" +
			"\4\17\1\145\24\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\1\17\1\146" +
			"\27\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0" +
			"\2\17\1\0\1\17\2\0\7\17\1\147\21\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\7\17\1\150\21\17\5\0\1\17\2\0" +
			"\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0" +
			"\7\17\1\151\21\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\15\17\1\152" +
			"\13\17\5\0\1\17\2\0\1\35\5\0\1\17\2\0" +
			"\2\17\1\0\1\17\2\0\23\17\1\153\5\17\5\0" +
			"\1\17\2\0\1\35\5\0\1\17\2\0\2\17\1\0" +
			"\1\17\2\0\25\17\1\154\3\17\5\0\1\17\2\0" +
			"\1\35\5\0\1\17\2\0\2\17\1\0\1\17\2\0" +
			"\10\17\1\155\20\17\5\0\1\17\2\0\1\35\5\0" +
			"\1\17\2\0\2\17\1\0\1\17\2\0\30\17\1\156" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\16\17\1\157\12\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\6\17\1\160\22\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\1\17" +
			"\1\161\27\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\1\17\1\162\27\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\13\17\1\163\12\17\1\164\2\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\6\17\1\165\22\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\6\17\1\166\22\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17" +
			"\1\167\10\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\20\17\1\170\10\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\6\17\1\171\22\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\13\17\1\172\15\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\3\17" +
			"\1\173\12\17\1\174\12\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\16\17" +
			"\1\175\12\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\35\0\1\176\23\0\50\177" +
			"\1\200\7\177\34\0\1\126\21\0\1\124\57\0\1\201" +
			"\57\0\1\202\2\0\3\17\1\203\25\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\10\17\1\204\20\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17" +
			"\1\205\24\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\5\17\1\206\23\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\4\17\1\207\24\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\16\17\1\210\12\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17" +
			"\1\211\24\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\6\17\1\212\22\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\5\17\1\213\23\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\27\17\1\214\1\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17" +
			"\1\215\24\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\21\17\1\216\7\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\25\17\1\217\3\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\16\17\1\220\12\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\1\17" +
			"\1\221\27\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\6\17\1\222\22\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\20\17\1\223\10\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\13\17\1\224\15\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\20\17" +
			"\1\225\10\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\11\17\1\226\17\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\1\0\1\227\31\156\5\227\1\156\2\227" +
			"\1\230\5\227\1\156\2\227\2\156\1\231\1\156\1\227" +
			"\1\0\4\17\1\232\24\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\6\17" +
			"\1\233\22\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\6\17\1\234\22\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\15\17\1\235\13\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\10\17\1\236\20\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\21\17" +
			"\1\237\7\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\4\17\1\240\24\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\15\17\1\241\13\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\12\17\1\242\16\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\7\17" +
			"\1\243\21\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\4\17\1\244\24\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\7\17\1\141\21\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\4\17\1\245\24\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\1\0\50\177" +
			"\1\246\57\177\1\247\7\177\56\0\1\250\54\0\1\251" +
			"\2\0\1\202\2\0\4\17\1\252\24\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\20\17\1\253\10\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\15\17" +
			"\1\254\13\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\1\17\1\255\27\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\1\17\1\256\27\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\2\17\1\257\26\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\24\17" +
			"\1\260\4\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\4\17\1\261\24\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\21\17\1\262\7\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\2\17\1\263\26\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\16\17" +
			"\1\264\12\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\4\17\1\265\24\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\3\17\1\266\25\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\20\17\1\267\10\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17" +
			"\1\270\24\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\24\17\1\271\4\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\4\17\1\272\24\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\16\17\1\273\12\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\1\0\55\227" +
			"\1\231\3\227\31\230\5\227\1\230\2\227\1\230\5\227" +
			"\1\230\2\227\2\230\1\231\1\230\1\227\1\0\4\17" +
			"\1\274\24\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\1\17\1\275\27\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\21\17\1\276\7\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\1\17\1\277\27\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\2\17" +
			"\1\300\22\17\1\301\3\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\10\17" +
			"\1\302\20\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\6\17\1\303\22\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\1\0\50\177\1\304\7\177\34\0\1\305" +
			"\73\0\2\306\4\0\1\307\2\0\5\17\1\310\23\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\13\17\1\311\15\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\2\17\1\312\26\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\7\17" +
			"\1\313\21\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\15\17\1\314\13\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\20\17\1\315\10\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\2\17\1\316\26\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\25\17" +
			"\1\317\3\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\4\17\1\320\24\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\13\17\1\321\15\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\21\17\1\322\7\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\13\17" +
			"\1\323\15\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\7\17\1\324\21\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\7\17\1\325\21\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\25\17\1\326\3\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17" +
			"\1\327\24\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\1\17\1\330\27\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\2\17\1\331\26\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\20\17\1\332\10\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\6\17" +
			"\1\333\22\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\4\17\1\334\24\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\20\17\1\335\10\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\51\0\1\304\65\0\1\336\57\0\1\307\2\0\6\17" +
			"\1\337\22\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\16\17\1\340\12\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\4\17\1\341\24\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\4\17\1\342\24\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\7\17" +
			"\1\343\21\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\6\17\1\344\22\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\13\17\1\345\15\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\2\17\1\346\26\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\13\17" +
			"\1\347\15\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\3\17\1\350\25\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\7\17\1\351\21\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\13\17\1\352\15\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\16\17" +
			"\1\353\12\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\4\17\1\354\24\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\21\17\1\355\7\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\20\17\1\356\10\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\4\17" +
			"\1\357\24\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\57\0\1\360\2\0\2\17" +
			"\1\361\26\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\15\17\1\362\13\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\24\17\1\363\4\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\16\17\1\364\12\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\6\17" +
			"\1\365\22\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\6\17\1\366\22\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\4\17\1\367\24\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\6\17\1\370\22\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\24\17" +
			"\1\371\4\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\15\17\1\372\13\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\1\17\1\373\27\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\57\0\1\374\2\0\6\17\1\375\22\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\4\17\1\376\24\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\15\17" +
			"\1\377\13\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\2\0\4\17\1\u0100\24\17" +
			"\5\0\1\17\2\0\1\35\5\0\1\17\2\0\2\17" +
			"\1\0\1\17\2\0\2\17\1\u0101\26\17\5\0\1\17" +
			"\2\0\1\35\5\0\1\17\2\0\2\17\1\0\1\17" +
			"\2\0\15\17\1\u0102\13\17\5\0\1\17\2\0\1\35" +
			"\5\0\1\17\2\0\2\17\1\0\1\17\2\0\15\17" +
			"\1\u0103\13\17\5\0\1\17\2\0\1\35\5\0\1\17" +
			"\2\0\2\17\1\0\1\17\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[9744];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	private static java.io.Reader zzReader = null; // Fake

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\1\0\1\11\25\1\2\11\1\1\2\11\1\1\5\11" +
			"\55\1\2\0\1\11\1\0\1\1\2\0\47\1\1\11" +
			"\3\0\25\1\1\0\1\1\1\11\14\1\1\0\1\1" +
			"\2\0\33\1\2\0\27\1\1\0\21\1\1\0\23\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[259];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
			String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL)) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		Model heritage = TaraLanguage.getMetaModel(dsl, project);
		if (heritage != null) identifiers = heritage.getIdentifiers();
	}


	TaraHighlighterLex(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	TaraHighlighterLex(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 2232) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p/>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p/>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p/>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p/>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 37: {
					return TaraTypes.STRING_MULTILINE_VALUE_KEY;
				}
				case 65:
					break;
				case 6: {
					return TaraTypes.LEFT_SQUARE;
				}
				case 66:
					break;
				case 35: {
					return TaraTypes.WITH;
				}
				case 67:
					break;
				case 26: {
					return TaraTypes.VAR;
				}
				case 68:
					break;
				case 11: {
					return TaraTypes.COLON;
				}
				case 69:
					break;
				case 56: {
					return TaraTypes.ABSTRACT;
				}
				case 70:
					break;
				case 40: {
					return TaraTypes.RATIO_TYPE;
				}
				case 71:
					break;
				case 43: {
					return TaraTypes.SINGLE;
				}
				case 72:
					break;
				case 60: {
					return TaraTypes.COMPONENT;
				}
				case 73:
					break;
				case 28: {
					return TaraTypes.DOUBLE_VALUE_KEY;
				}
				case 74:
					break;
				case 15: {
					return TokenType.WHITE_SPACE;
				}
				case 75:
					break;
				case 48: {
					return TaraTypes.NATURAL_TYPE;
				}
				case 76:
					break;
				case 4: {
					return TaraTypes.RIGHT_PARENTHESIS;
				}
				case 77:
					break;
				case 27: {
					return TaraTypes.LIST;
				}
				case 78:
					break;
				case 29: {
					return TaraTypes.CASE;
				}
				case 79:
					break;
				case 12: {
					return TaraTypes.EQUALS;
				}
				case 80:
					break;
				case 5: {
					return TaraTypes.DOT;
				}
				case 81:
					break;
				case 42: {
					return TaraTypes.STRING_TYPE;
				}
				case 82:
					break;
				case 38: {
					return TaraTypes.NAMED;
				}
				case 83:
					break;
				case 55: {
					return TaraTypes.TERMINAL;
				}
				case 84:
					break;
				case 64: {
					return TaraTypes.AGGREGATED;
				}
				case 85:
					break;
				case 46: {
					return TaraTypes.PROTEO;
				}
				case 86:
					break;
				case 32: {
					return TaraTypes.DATE_TYPE;
				}
				case 87:
					break;
				case 39: {
					return TaraTypes.EMPTY_REF;
				}
				case 88:
					break;
				case 3: {
					return TaraTypes.LEFT_PARENTHESIS;
				}
				case 89:
					break;
				case 58: {
					return TaraTypes.REQUIRED;
				}
				case 90:
					break;
				case 14: {
					return TaraTypes.PLUS;
				}
				case 91:
					break;
				case 21: {
					return TaraTypes.NEGATIVE_VALUE_KEY;
				}
				case 92:
					break;
				case 13: {
					return TaraTypes.DSL;
				}
				case 93:
					break;
				case 33: {
					return TaraTypes.ROOT;
				}
				case 94:
					break;
				case 59: {
					return TaraTypes.ADDRESS_VALUE;
				}
				case 95:
					break;
				case 49: {
					return TaraTypes.EXTENDS;
				}
				case 96:
					break;
				case 20: {
					return TaraTypes.STRING_VALUE_KEY;
				}
				case 97:
					break;
				case 54: {
					return TaraTypes.PROPERTY;
				}
				case 98:
					break;
				case 2: {
					return evaluateIdentifier();
				}
				case 99:
					break;
				case 9: {
					return TaraTypes.STAR;
				}
				case 100:
					break;
				case 45: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 101:
					break;
				case 7: {
					return TaraTypes.RIGHT_SQUARE;
				}
				case 102:
					break;
				case 16: {
					return TaraTypes.NATURAL_VALUE_KEY;
				}
				case 103:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 104:
					break;
				case 8: {
					return TaraTypes.MEASURE_VALUE;
				}
				case 105:
					break;
				case 36: {
					return TaraTypes.RESOURCE_KEY;
				}
				case 106:
					break;
				case 31: {
					yypushback(1);
					return TaraTypes.DOC_LINE;
				}
				case 107:
					break;
				case 44: {
					return TaraTypes.ALWAYS;
				}
				case 108:
					break;
				case 30: {
					return TaraTypes.BOOLEAN_VALUE_KEY;
				}
				case 109:
					break;
				case 18: {
					return TaraTypes.AS;
				}
				case 110:
					break;
				case 17: {
					return TaraTypes.ON;
				}
				case 111:
					break;
				case 22: {
					return TaraTypes.SUB;
				}
				case 112:
					break;
				case 57: {
					return TaraTypes.READONLY;
				}
				case 113:
					break;
				case 53: {
					return TaraTypes.ENCLOSED;
				}
				case 114:
					break;
				case 50: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 115:
					break;
				case 25: {
					loadHeritage();
					return TaraTypes.DSL;
				}
				case 116:
					break;
				case 19: {
					return TaraTypes.IS;
				}
				case 117:
					break;
				case 52: {
					return TaraTypes.MEASURE_TYPE_KEY;
				}
				case 118:
					break;
				case 23: {
					return TaraTypes.USE;
				}
				case 119:
					break;
				case 51: {
					return TaraTypes.INT_TYPE;
				}
				case 120:
					break;
				case 47: {
					return TaraTypes.METAIDENTIFIER_KEY;
				}
				case 121:
					break;
				case 63: {
					return TaraTypes.ASSOCIATED;
				}
				case 122:
					break;
				case 34: {
					return TaraTypes.WORD_KEY;
				}
				case 123:
					break;
				case 62: {
					return TaraTypes.INTENTION;
				}
				case 124:
					break;
				case 61: {
					return TaraTypes.ADDRESSED;
				}
				case 125:
					break;
				case 41: {
					return TaraTypes.FACET;
				}
				case 126:
					break;
				case 10: {
					return TaraTypes.COMMA;
				}
				case 127:
					break;
				case 24: {
					return TaraTypes.HAS;
				}
				case 128:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						return null;
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
