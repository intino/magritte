/* The following code was generated by JFlex 1.4.3 on 20/02/15 7:56 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.intellij.lang.psi.TaraTypes;
import siani.tara.lang.Model;

import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/02/15 7:56 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\54\1\57\1\55\2\0\1\60\16\54\4\0\1\57\1\0\1\47"+
    "\1\0\1\37\1\40\1\52\1\0\1\32\1\33\1\41\1\51\1\43"+
    "\1\50\1\34\1\42\12\56\1\44\1\46\1\0\1\45\1\57\2\0"+
    "\2\37\1\1\1\37\1\53\12\37\1\20\12\37\1\35\1\61\1\36"+
    "\1\0\1\37\1\0\1\14\1\12\1\4\1\16\1\5\1\31\1\26"+
    "\1\13\1\22\2\37\1\17\1\30\1\3\1\2\1\6\1\27\1\21"+
    "\1\10\1\7\1\11\1\23\1\24\1\15\1\25\1\37\4\0\41\54"+
    "\2\0\4\37\4\0\1\37\2\0\1\54\2\0\1\40\4\0\1\37"+
    "\1\0\1\42\2\0\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37"+
    "\4\0\14\37\16\0\5\37\7\0\1\37\1\0\1\37\21\0\160\54"+
    "\5\37\1\0\2\37\2\0\4\37\10\0\1\37\1\0\3\37\1\0"+
    "\1\37\1\0\24\37\1\0\123\37\1\0\213\37\1\0\5\54\2\0"+
    "\236\37\11\0\46\37\2\0\1\37\7\0\47\37\11\0\55\54\1\0"+
    "\1\54\1\0\2\54\1\0\2\54\1\0\1\54\10\0\33\37\5\0"+
    "\3\37\15\0\4\54\7\0\1\37\4\0\13\54\5\0\53\37\25\54"+
    "\12\56\4\0\2\37\1\54\143\37\1\0\1\37\10\54\1\0\6\54"+
    "\2\37\2\54\1\0\4\54\2\37\12\56\3\37\2\0\1\37\17\0"+
    "\1\54\1\37\1\54\36\37\33\54\2\0\131\37\13\54\1\37\16\0"+
    "\12\56\41\37\11\54\2\37\4\0\1\37\5\0\26\37\4\54\1\37"+
    "\11\54\1\37\3\54\1\37\5\54\22\0\31\37\3\54\244\0\4\54"+
    "\66\37\3\54\1\37\22\54\1\37\7\54\12\37\2\54\2\0\12\56"+
    "\1\0\7\37\1\0\7\37\1\0\3\54\1\0\10\37\2\0\2\37"+
    "\2\0\26\37\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\54"+
    "\1\37\7\54\2\0\2\54\2\0\3\54\1\37\10\0\1\54\4\0"+
    "\2\37\1\0\3\37\2\54\2\0\12\56\4\37\7\0\1\37\5\0"+
    "\3\54\1\0\6\37\4\0\2\37\2\0\26\37\1\0\7\37\1\0"+
    "\2\37\1\0\2\37\1\0\2\37\2\0\1\54\1\0\5\54\4\0"+
    "\2\54\2\0\3\54\3\0\1\54\7\0\4\37\1\0\1\37\7\0"+
    "\12\56\2\54\3\37\1\54\13\0\3\54\1\0\11\37\1\0\3\37"+
    "\1\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\54"+
    "\1\37\10\54\1\0\3\54\1\0\3\54\2\0\1\37\17\0\2\37"+
    "\2\54\2\0\12\56\1\0\1\37\17\0\3\54\1\0\10\37\2\0"+
    "\2\37\2\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0"+
    "\1\54\1\37\7\54\2\0\2\54\2\0\3\54\10\0\2\54\4\0"+
    "\2\37\1\0\3\37\2\54\2\0\12\56\1\0\1\37\20\0\1\54"+
    "\1\37\1\0\6\37\3\0\3\37\1\0\4\37\3\0\2\37\1\0"+
    "\1\37\1\0\2\37\3\0\2\37\3\0\3\37\3\0\14\37\4\0"+
    "\5\54\3\0\3\54\1\0\4\54\2\0\1\37\6\0\1\54\16\0"+
    "\12\56\11\0\1\37\7\0\3\54\1\0\10\37\1\0\3\37\1\0"+
    "\27\37\1\0\12\37\1\0\5\37\3\0\1\37\7\54\1\0\3\54"+
    "\1\0\4\54\7\0\2\54\1\0\2\37\6\0\2\37\2\54\2\0"+
    "\12\56\22\0\2\54\1\0\10\37\1\0\3\37\1\0\27\37\1\0"+
    "\12\37\1\0\5\37\2\0\1\54\1\37\7\54\1\0\3\54\1\0"+
    "\4\54\7\0\2\54\7\0\1\37\1\0\2\37\2\54\2\0\12\56"+
    "\1\0\2\37\17\0\2\54\1\0\10\37\1\0\3\37\1\0\51\37"+
    "\2\0\1\37\7\54\1\0\3\54\1\0\4\54\1\37\10\0\1\54"+
    "\10\0\2\37\2\54\2\0\12\56\12\0\6\37\2\0\2\54\1\0"+
    "\22\37\3\0\30\37\1\0\11\37\1\0\1\37\2\0\7\37\3\0"+
    "\1\54\4\0\6\54\1\0\1\54\1\0\10\54\22\0\2\54\15\0"+
    "\60\37\1\54\2\37\7\54\4\0\10\37\10\54\1\0\12\56\47\0"+
    "\2\37\1\0\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0"+
    "\4\37\1\0\7\37\1\0\3\37\1\0\1\37\1\0\1\37\2\0"+
    "\2\37\1\0\4\37\1\54\2\37\6\54\1\0\2\54\1\37\2\0"+
    "\5\37\1\0\1\37\1\0\6\54\2\0\12\56\2\0\2\37\42\0"+
    "\1\37\27\0\2\54\6\0\12\56\13\0\1\54\1\0\1\54\1\0"+
    "\1\54\4\0\2\54\10\37\1\0\44\37\4\0\24\54\1\0\2\54"+
    "\5\37\13\54\1\0\44\54\11\0\1\54\71\0\53\37\24\54\1\37"+
    "\12\56\6\0\6\37\4\54\4\37\3\54\1\37\3\54\2\37\7\54"+
    "\3\37\4\54\15\37\14\54\1\37\1\54\12\56\4\54\2\0\46\37"+
    "\12\0\53\37\1\0\1\37\3\0\u0149\37\1\0\4\37\2\0\7\37"+
    "\1\0\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37"+
    "\1\0\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37"+
    "\1\0\71\37\1\0\4\37\2\0\103\37\2\0\3\54\40\0\20\37"+
    "\20\0\125\37\14\0\u026c\37\2\0\21\37\1\0\32\37\5\0\113\37"+
    "\3\0\3\37\17\0\15\37\1\0\4\37\3\54\13\0\22\37\3\54"+
    "\13\0\22\37\2\54\14\0\15\37\1\0\3\37\1\0\2\54\14\0"+
    "\64\37\40\54\3\0\1\37\3\0\2\37\1\54\2\0\12\56\41\0"+
    "\3\54\2\0\12\56\6\0\130\37\10\0\51\37\1\54\1\37\5\0"+
    "\106\37\12\0\35\37\3\0\14\54\4\0\14\54\12\0\12\56\36\37"+
    "\2\0\5\37\13\0\54\37\4\0\21\54\7\37\2\54\6\0\12\56"+
    "\46\0\27\37\5\54\4\0\65\37\12\54\1\0\35\54\2\0\1\54"+
    "\12\56\6\0\12\56\15\0\1\37\130\0\5\54\57\37\21\54\7\37"+
    "\4\0\12\56\21\0\11\54\14\0\3\54\36\37\12\54\3\0\2\37"+
    "\12\56\6\0\46\37\16\54\14\0\44\37\24\54\10\0\12\56\3\0"+
    "\3\37\12\56\44\37\122\0\3\54\1\0\25\54\4\37\1\54\4\37"+
    "\1\54\15\0\300\37\47\54\25\0\4\54\u0116\37\2\0\6\37\2\0"+
    "\46\37\2\0\6\37\2\0\10\37\1\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\37\37\2\0\65\37\1\0\7\37\1\0\1\37\3\0"+
    "\3\37\1\0\7\37\3\0\4\37\2\0\6\37\4\0\15\37\5\0"+
    "\3\37\1\0\7\37\16\0\5\54\32\0\5\54\20\0\2\37\23\0"+
    "\1\37\13\0\5\54\5\0\6\54\1\0\1\37\15\0\1\37\20\0"+
    "\15\37\3\0\14\37\1\37\15\37\26\0\15\54\4\0\1\54\3\0"+
    "\14\54\21\0\1\37\4\0\1\37\2\0\12\37\1\0\1\37\3\0"+
    "\5\37\6\0\1\37\1\0\1\37\1\0\1\37\1\0\4\37\1\0"+
    "\13\37\2\0\4\37\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0"+
    "\57\37\1\0\57\37\1\0\205\37\6\0\4\37\3\54\16\0\46\37"+
    "\12\0\66\37\11\0\1\37\17\0\1\54\27\37\11\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\40\54\57\0\1\37\u01d5\0\3\37\31\0"+
    "\11\37\6\54\1\0\5\37\2\0\5\37\4\0\126\37\2\0\2\54"+
    "\2\0\3\37\1\0\132\37\1\0\4\37\5\0\51\37\3\0\136\37"+
    "\21\0\33\37\65\0\20\37\u0200\0\u19b6\37\112\0\u51cc\37\64\0\u048d\37"+
    "\103\0\56\37\2\0\u010d\37\3\0\20\37\12\56\2\37\24\0\57\37"+
    "\1\54\14\0\2\54\1\0\31\37\10\0\120\37\2\54\45\0\11\37"+
    "\2\0\147\37\2\0\4\37\1\0\2\37\16\0\12\37\120\0\10\37"+
    "\1\54\3\37\1\54\4\37\1\54\27\37\5\54\20\0\1\37\7\0"+
    "\64\37\14\0\2\54\62\37\21\54\13\0\12\56\6\0\22\54\6\37"+
    "\3\0\1\37\4\0\12\56\34\37\10\54\2\0\27\37\15\54\14\0"+
    "\35\37\3\0\4\54\57\37\16\54\16\0\1\37\12\56\46\0\51\37"+
    "\16\54\11\0\3\37\1\54\10\37\2\54\2\0\12\56\6\0\27\37"+
    "\3\0\1\37\1\54\4\0\60\37\1\54\1\37\3\54\2\37\2\54"+
    "\5\37\2\54\1\37\1\54\1\37\30\0\3\37\43\0\6\37\2\0"+
    "\6\37\2\0\6\37\11\0\7\37\1\0\7\37\221\0\43\37\10\54"+
    "\1\0\2\54\2\0\12\56\6\0\u2ba4\37\14\0\27\37\4\0\61\37"+
    "\u2104\0\u012e\37\2\0\76\37\2\0\152\37\46\0\7\37\14\0\5\37"+
    "\5\0\1\37\1\54\12\37\1\0\15\37\1\0\5\37\1\0\1\37"+
    "\1\0\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37"+
    "\2\0\66\37\50\0\15\37\3\0\20\54\20\0\7\54\14\0\2\37"+
    "\30\0\3\37\31\0\1\37\6\0\5\37\1\0\207\37\2\0\1\54"+
    "\4\0\1\37\13\0\12\56\7\0\32\37\4\0\1\37\1\0\32\37"+
    "\13\0\131\37\3\0\6\37\2\0\6\37\2\0\6\37\2\0\3\37"+
    "\3\0\2\37\3\0\2\37\22\0\3\54\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\25\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\1"+
    "\1\17\1\1\1\20\1\21\1\20\1\22\1\23\1\22"+
    "\1\2\1\24\20\2\1\25\15\2\1\26\6\2\2\0"+
    "\1\27\2\0\15\2\1\30\1\2\1\31\1\2\1\32"+
    "\7\2\1\33\7\2\1\34\6\2\1\35\3\0\1\36"+
    "\4\2\1\37\6\2\1\40\11\2\1\0\1\10\1\41"+
    "\1\42\1\2\1\43\4\2\1\44\1\45\2\2\1\46"+
    "\1\0\1\47\2\0\2\2\1\50\3\2\1\51\2\2"+
    "\1\52\14\2\1\53\3\2\1\54\1\47\2\0\1\36"+
    "\7\2\1\55\1\56\4\2\1\57\1\2\1\60\1\61"+
    "\5\2\1\0\1\62\1\63\2\2\1\64\2\2\1\65"+
    "\7\2\1\66\1\67\1\0\1\2\1\70\1\71\1\72"+
    "\1\2\1\73\2\2\1\74\1\75\1\2\1\76\1\77"+
    "\1\2\1\100\1\2\1\101\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\144\0\144\0\u04b0\0\144\0\144\0\u04e2\0\144\0\144"+
    "\0\144\0\144\0\144\0\144\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\144\0\144\0\u0640\0\u0672\0\u02ee\0\u06a4"+
    "\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u02ee\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u02ee\0\u1130"+
    "\0\u02ee\0\u1162\0\u02ee\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u02ee\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u02ee\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\144\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u02ee\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u02ee\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932"+
    "\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\144\0\u02ee\0\u1a5e"+
    "\0\u02ee\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u02ee\0\u02ee\0\u1b58"+
    "\0\u1b8a\0\u02ee\0\u1bbc\0\u15ae\0\u1bee\0\u1c20\0\u1c52\0\u1c84"+
    "\0\u02ee\0\u1cb6\0\u1ce8\0\u1d1a\0\u02ee\0\u1d4c\0\u1d7e\0\u02ee"+
    "\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u02ee\0\u2008\0\u203a\0\u206c"+
    "\0\u02ee\0\u209e\0\u20d0\0\u2102\0\u2102\0\u2134\0\u2166\0\u2198"+
    "\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u02ee\0\u02ee\0\u2292\0\u22c4"+
    "\0\u22f6\0\u2328\0\u02ee\0\u235a\0\u02ee\0\u02ee\0\u238c\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u02ee\0\u02ee\0\u24b8\0\u24ea"+
    "\0\u02ee\0\u251c\0\u254e\0\u02ee\0\u2580\0\u25b2\0\u25e4\0\u2616"+
    "\0\u2648\0\u267a\0\u26ac\0\u02ee\0\u02ee\0\u26de\0\u2710\0\u02ee"+
    "\0\u02ee\0\u02ee\0\u2742\0\u02ee\0\u2774\0\u27a6\0\u02ee\0\u02ee"+
    "\0\u27d8\0\u1bee\0\u02ee\0\u280a\0\u02ee\0\u283c\0\u02ee\0\u02ee"+
    "\0\u02ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\20"+
    "\1\22\1\23\1\24\1\25\1\26\3\20\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\20\1\36\1\37"+
    "\1\3\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\20\1\3\1\50\1\51\1\52\2\3\47\53"+
    "\1\54\5\53\1\0\2\53\1\0\1\55\63\0\1\20"+
    "\1\56\27\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\2\20\1\57\26\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\13\20\1\60\15\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\1\20\1\61\11\20\1\62\15\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\2\20\1\63\11\20\1\64\12\20\1\65\1\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\20\20\1\66\10\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\4\20\1\67\6\20\1\70\4\20\1\71\10\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\6\20\1\72\1\20\1\73\10\20"+
    "\1\74\7\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\7\20\1\75\21\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\1\20\1\76\27\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\13\20\1\77\15\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\7\20"+
    "\1\100\1\20\1\101\3\20\1\102\1\103\6\20\1\104"+
    "\3\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\31\20\5\0\1\20\2\0"+
    "\1\36\5\0\1\20\2\0\2\20\1\0\1\20\4\0"+
    "\1\20\1\105\2\20\1\106\2\20\1\107\3\20\1\110"+
    "\15\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\20\20\1\111\10\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\1\20\1\112\2\20\1\113\6\20\1\114"+
    "\15\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\2\20\1\115\4\20\1\116"+
    "\21\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\13\20\1\117\15\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\1\20\1\120\17\20\1\121\7\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\4\20\1\122\24\20\5\0\1\20\2\0"+
    "\1\36\5\0\1\20\2\0\2\20\1\0\1\20\4\0"+
    "\13\20\1\123\5\20\1\124\7\20\5\0\1\20\2\0"+
    "\1\36\5\0\1\20\2\0\2\20\1\0\1\20\37\0"+
    "\1\125\26\0\31\36\5\0\1\36\2\0\1\36\5\0"+
    "\1\36\2\0\2\36\1\0\1\36\53\0\1\126\5\0"+
    "\1\127\61\0\1\51\61\0\1\130\60\0\1\50\40\0"+
    "\1\131\21\0\1\51\62\0\1\52\5\0\1\53\3\0"+
    "\1\53\11\0\1\53\25\0\1\53\13\0\2\20\1\132"+
    "\26\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\6\20\1\133\20\20\1\134"+
    "\1\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\27\20\1\135\1\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\7\20\1\136\21\20\5\0\1\20\2\0"+
    "\1\36\5\0\1\20\2\0\2\20\1\0\1\20\4\0"+
    "\3\20\1\137\25\20\5\0\1\20\2\0\1\36\5\0"+
    "\1\20\2\0\2\20\1\0\1\20\4\0\6\20\1\140"+
    "\22\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\5\20\1\141\23\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\1\20\1\142\27\20\5\0\1\20\2\0"+
    "\1\36\5\0\1\20\2\0\2\20\1\0\1\20\4\0"+
    "\20\20\1\143\10\20\5\0\1\20\2\0\1\36\5\0"+
    "\1\20\2\0\2\20\1\0\1\20\4\0\3\20\1\144"+
    "\25\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\10\20\1\145\20\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\20\20\1\146\10\20\5\0\1\20\2\0"+
    "\1\36\5\0\1\20\2\0\2\20\1\0\1\20\4\0"+
    "\11\20\1\147\17\20\5\0\1\20\2\0\1\36\5\0"+
    "\1\20\2\0\2\20\1\0\1\20\4\0\2\20\1\150"+
    "\26\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\4\20\1\151\24\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\1\20\1\152\27\20\5\0\1\20\2\0"+
    "\1\36\5\0\1\20\2\0\2\20\1\0\1\20\4\0"+
    "\7\20\1\153\21\20\5\0\1\20\2\0\1\36\5\0"+
    "\1\20\2\0\2\20\1\0\1\20\4\0\7\20\1\154"+
    "\21\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\7\20\1\155\21\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\15\20\1\156\13\20\5\0\1\20\2\0"+
    "\1\36\5\0\1\20\2\0\2\20\1\0\1\20\4\0"+
    "\23\20\1\157\5\20\5\0\1\20\2\0\1\36\5\0"+
    "\1\20\2\0\2\20\1\0\1\20\4\0\25\20\1\160"+
    "\3\20\5\0\1\20\2\0\1\36\5\0\1\20\2\0"+
    "\2\20\1\0\1\20\4\0\10\20\1\161\20\20\5\0"+
    "\1\20\2\0\1\36\5\0\1\20\2\0\2\20\1\0"+
    "\1\20\4\0\30\20\1\162\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\16\20"+
    "\1\163\12\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\6\20\1\164\22\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\1\20\1\165\27\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\1\20\1\166\27\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\13\20"+
    "\1\167\12\20\1\170\2\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\6\20"+
    "\1\171\22\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\6\20\1\172\22\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\20\20\1\173\10\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\20\20\1\174\10\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\6\20"+
    "\1\175\22\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\13\20\1\176\15\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\3\20\1\177\12\20\1\200\12\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\16\20\1\201\12\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\37\0\1\202\25\0\50\203\1\204\11\203\34\0\1\131"+
    "\21\0\1\127\61\0\1\205\61\0\1\206\4\0\3\20"+
    "\1\207\25\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\10\20\1\210\20\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\4\20\1\211\24\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\5\20\1\212\23\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\4\20"+
    "\1\213\24\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\16\20\1\214\12\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\4\20\1\215\24\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\6\20\1\216\22\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\5\20"+
    "\1\217\23\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\27\20\1\220\1\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\21\20\1\221\7\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\4\20\1\222\24\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\21\20"+
    "\1\223\7\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\25\20\1\224\3\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\16\20\1\225\12\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\1\20\1\226\27\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\6\20"+
    "\1\227\22\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\20\20\1\230\10\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\13\20\1\231\15\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\20\20\1\232\10\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\11\20"+
    "\1\233\17\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\3\0\1\234\31\162\5\234"+
    "\1\162\2\234\1\235\5\234\1\162\2\234\2\162\1\236"+
    "\1\162\3\234\1\0\4\20\1\237\24\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\6\20\1\240\22\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\6\20"+
    "\1\241\22\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\15\20\1\242\13\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\10\20\1\243\20\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\21\20\1\244\7\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\4\20"+
    "\1\245\24\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\15\20\1\246\13\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\12\20\1\247\16\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\7\20\1\250\21\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\4\20"+
    "\1\251\24\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\7\20\1\145\21\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\4\20\1\252\24\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\3\0\50\203\1\253\61\203\1\254\11\203\56\0\1\255"+
    "\56\0\1\256\2\0\1\206\4\0\4\20\1\257\24\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\20\20\1\260\10\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\15\20\1\261\13\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\1\20"+
    "\1\262\27\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\1\20\1\263\27\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\2\20\1\264\26\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\24\20\1\265\4\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\4\20"+
    "\1\266\24\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\21\20\1\267\7\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\6\20\1\270\22\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\2\20\1\271\26\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\16\20"+
    "\1\272\12\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\4\20\1\273\24\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\3\20\1\274\25\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\20\20\1\275\10\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\4\20"+
    "\1\276\24\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\24\20\1\277\4\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\4\20\1\300\24\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\16\20\1\301\12\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\3\0\55\234"+
    "\1\236\5\234\31\235\5\234\1\235\2\234\1\235\5\234"+
    "\1\235\2\234\2\235\1\236\1\235\3\234\1\0\4\20"+
    "\1\302\24\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\1\20\1\303\27\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\21\20\1\304\7\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\1\20\1\305\27\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\2\20"+
    "\1\306\22\20\1\307\3\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\10\20"+
    "\1\310\20\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\6\20\1\311\22\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\3\0\50\203\1\312\11\203\34\0\1\313"+
    "\75\0\2\314\4\0\1\315\4\0\5\20\1\316\23\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\13\20\1\317\15\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\2\20\1\320\26\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\7\20"+
    "\1\321\21\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\15\20\1\322\13\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\20\20\1\323\10\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\2\20\1\324\26\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\25\20"+
    "\1\325\3\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\4\20\1\326\24\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\13\20\1\327\15\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\21\20\1\330\7\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\13\20"+
    "\1\331\15\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\7\20\1\332\21\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\7\20\1\333\21\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\25\20\1\334\3\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\4\20"+
    "\1\335\24\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\1\20\1\336\27\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\2\20\1\337\26\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\20\20\1\340\10\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\6\20"+
    "\1\341\22\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\4\20\1\342\24\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\20\20\1\343\10\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\53\0\1\312\67\0\1\344\61\0\1\315\4\0\6\20"+
    "\1\345\22\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\16\20\1\346\12\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\4\20\1\347\24\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\4\20\1\350\24\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\7\20"+
    "\1\351\21\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\6\20\1\352\22\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\13\20\1\353\15\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\2\20\1\354\26\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\13\20"+
    "\1\355\15\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\3\20\1\356\25\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\7\20\1\357\21\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\13\20\1\360\15\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\16\20"+
    "\1\361\12\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\4\20\1\362\24\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\21\20\1\363\7\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\20\20\1\364\10\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\4\20"+
    "\1\365\24\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\61\0\1\366\4\0\2\20"+
    "\1\367\26\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\15\20\1\370\13\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\24\20\1\371\4\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\16\20\1\372\12\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\6\20"+
    "\1\373\22\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\6\20\1\374\22\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\4\20\1\375\24\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\6\20\1\376\22\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\24\20"+
    "\1\377\4\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\15\20\1\u0100\13\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\1\20\1\u0101\27\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\61\0\1\u0102\4\0\6\20\1\u0103\22\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\4\20\1\u0104\24\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\15\20"+
    "\1\u0105\13\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\4\0\4\20\1\u0106\24\20"+
    "\5\0\1\20\2\0\1\36\5\0\1\20\2\0\2\20"+
    "\1\0\1\20\4\0\2\20\1\u0107\26\20\5\0\1\20"+
    "\2\0\1\36\5\0\1\20\2\0\2\20\1\0\1\20"+
    "\4\0\15\20\1\u0108\13\20\5\0\1\20\2\0\1\36"+
    "\5\0\1\20\2\0\2\20\1\0\1\20\4\0\15\20"+
    "\1\u0109\13\20\5\0\1\20\2\0\1\36\5\0\1\20"+
    "\2\0\2\20\1\0\1\20\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\25\1\2\11\1\1\2\11\1\1\6\11"+
    "\6\1\2\11\50\1\2\0\1\1\2\0\50\1\1\11"+
    "\3\0\26\1\1\0\1\1\1\11\14\1\1\0\1\1"+
    "\2\0\34\1\2\0\27\1\1\0\21\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
            String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		Model heritage = TaraLanguage.getMetaModel(dsl, project);
		if (heritage != null) identifiers = heritage.getIdentifiers();
	}


  TaraHighlighterLex(java.io.Reader in) {
    zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 68: break;
        case 6: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 69: break;
        case 37: 
          { return TaraTypes.WITH;
          }
        case 70: break;
        case 28: 
          { return TaraTypes.VAR;
          }
        case 71: break;
        case 11: 
          { return TaraTypes.COLON;
          }
        case 72: break;
        case 59: 
          { return TaraTypes.ABSTRACT;
          }
        case 73: break;
        case 43: 
          { return TaraTypes.RATIO_TYPE;
          }
        case 74: break;
        case 19: 
          { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
          }
        case 75: break;
        case 46: 
          { return TaraTypes.SINGLE;
          }
        case 76: break;
        case 63: 
          { return TaraTypes.COMPONENT;
          }
        case 77: break;
        case 30: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 78: break;
        case 16: 
          { return TokenType.WHITE_SPACE;
          }
        case 79: break;
        case 51: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 80: break;
        case 4: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 81: break;
        case 29: 
          { return TaraTypes.LIST;
          }
        case 82: break;
        case 31: 
          { return TaraTypes.CASE;
          }
        case 83: break;
        case 12: 
          { return TaraTypes.EQUALS;
          }
        case 84: break;
        case 5: 
          { return TaraTypes.DOT;
          }
        case 85: break;
        case 45: 
          { return TaraTypes.STRING_TYPE;
          }
        case 86: break;
        case 40: 
          { return TaraTypes.NAMED;
          }
        case 87: break;
        case 58: 
          { return TaraTypes.TERMINAL;
          }
        case 88: break;
        case 67: 
          { return TaraTypes.AGGREGATED;
          }
        case 89: break;
        case 49: 
          { return TaraTypes.PROTEO;
          }
        case 90: break;
        case 34: 
          { return TaraTypes.DATE_TYPE;
          }
        case 91: break;
        case 41: 
          { return TaraTypes.EMPTY_REF;
          }
        case 92: break;
        case 3: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 93: break;
        case 61: 
          { return TaraTypes.REQUIRED;
          }
        case 94: break;
        case 15: 
          { return TaraTypes.PLUS;
          }
        case 95: break;
        case 23: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 96: break;
        case 13: 
          { return TaraTypes.DSL;
          }
        case 97: break;
        case 35: 
          { return TaraTypes.ROOT;
          }
        case 98: break;
        case 62: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 99: break;
        case 52: 
          { return TaraTypes.EXTENDS;
          }
        case 100: break;
        case 57: 
          { return TaraTypes.PROPERTY;
          }
        case 101: break;
        case 2: 
          { return evaluateIdentifier();
          }
        case 102: break;
        case 9: 
          { return TaraTypes.STAR;
          }
        case 103: break;
        case 48: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 104: break;
        case 7: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 105: break;
        case 17: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 106: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 107: break;
        case 8: 
          { return TaraTypes.MEASURE_VALUE;
          }
        case 108: break;
        case 38: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 109: break;
        case 33: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 110: break;
        case 47: 
          { return TaraTypes.ALWAYS;
          }
        case 111: break;
        case 32: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 112: break;
        case 42: 
          { return TaraTypes.TACIT;
          }
        case 113: break;
        case 21: 
          { return TaraTypes.AS;
          }
        case 114: break;
        case 20: 
          { return TaraTypes.ON;
          }
        case 115: break;
        case 24: 
          { return TaraTypes.SUB;
          }
        case 116: break;
        case 60: 
          { return TaraTypes.READONLY;
          }
        case 117: break;
        case 56: 
          { return TaraTypes.ENCLOSED;
          }
        case 118: break;
        case 14: 
          { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
          }
        case 119: break;
        case 53: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 120: break;
        case 27: 
          { loadHeritage();  return TaraTypes.DSL;
          }
        case 121: break;
        case 22: 
          { return TaraTypes.IS;
          }
        case 122: break;
        case 55: 
          { return TaraTypes.MEASURE_TYPE_KEY;
          }
        case 123: break;
        case 25: 
          { return TaraTypes.USE;
          }
        case 124: break;
        case 54: 
          { return TaraTypes.INT_TYPE;
          }
        case 125: break;
        case 50: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 126: break;
        case 66: 
          { return TaraTypes.ASSOCIATED;
          }
        case 127: break;
        case 36: 
          { return TaraTypes.WORD_KEY;
          }
        case 128: break;
        case 65: 
          { return TaraTypes.INTENTION;
          }
        case 129: break;
        case 64: 
          { return TaraTypes.ADDRESSED;
          }
        case 130: break;
        case 18: 
          { return TaraTypes.CHARACTER;
          }
        case 131: break;
        case 44: 
          { return TaraTypes.FACET;
          }
        case 132: break;
        case 10: 
          { return TaraTypes.COMMA;
          }
        case 133: break;
        case 26: 
          { return TaraTypes.HAS;
          }
        case 134: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
