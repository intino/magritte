/* The following code was generated by JFlex 1.4.3 on 14/07/14 12:13 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.intellij.lang.psi.TaraTypes;
import siani.tara.lang.Model;

import java.util.Set;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/07/14 12:13 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;
	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0
	};
	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\51\1\56\1\53\3\0\16\51\4\0\1\56\2\0\1\52\1\35" +
			"\1\37\1\47\1\44\1\31\1\32\1\40\1\46\1\41\1\45\1\33" +
			"\1\0\12\54\1\42\1\34\1\0\1\43\3\0\2\55\1\1\5\55" +
			"\1\10\21\55\4\0\1\55\1\0\1\13\1\20\1\4\1\14\1\5" +
			"\1\50\1\26\1\23\1\11\2\55\1\15\1\12\1\3\1\2\1\6" +
			"\1\27\1\24\1\16\1\7\1\17\1\25\1\22\1\21\1\30\1\55" +
			"\1\34\1\0\1\34\1\0\41\51\2\0\4\55\4\0\1\55\2\0" +
			"\1\51\7\0\1\55\4\0\1\55\5\0\27\55\1\0\37\55\1\0" +
			"\u01ca\55\4\0\14\55\16\0\5\55\7\0\1\55\1\0\1\55\21\0" +
			"\160\51\5\55\1\0\2\55\2\0\4\55\10\0\1\55\1\0\3\55" +
			"\1\0\1\55\1\0\24\55\1\0\123\55\1\0\213\55\1\0\5\51" +
			"\2\0\236\55\11\0\46\55\2\0\1\55\7\0\47\55\11\0\55\51" +
			"\1\0\1\51\1\0\2\51\1\0\2\51\1\0\1\51\10\0\33\55" +
			"\5\0\3\55\15\0\4\51\7\0\1\55\4\0\13\51\5\0\53\55" +
			"\25\51\12\54\4\0\2\55\1\51\143\55\1\0\1\55\10\51\1\0" +
			"\6\51\2\55\2\51\1\0\4\51\2\55\12\54\3\55\2\0\1\55" +
			"\17\0\1\51\1\55\1\51\36\55\33\51\2\0\131\55\13\51\1\55" +
			"\16\0\12\54\41\55\11\51\2\55\4\0\1\55\5\0\26\55\4\51" +
			"\1\55\11\51\1\55\3\51\1\55\5\51\22\0\31\55\3\51\244\0" +
			"\4\51\66\55\3\51\1\55\22\51\1\55\7\51\12\55\2\51\2\0" +
			"\12\54\1\0\7\55\1\0\7\55\1\0\3\51\1\0\10\55\2\0" +
			"\2\55\2\0\26\55\1\0\7\55\1\0\1\55\3\0\4\55\2\0" +
			"\1\51\1\55\7\51\2\0\2\51\2\0\3\51\1\55\10\0\1\51" +
			"\4\0\2\55\1\0\3\55\2\51\2\0\12\54\4\55\7\0\1\55" +
			"\5\0\3\51\1\0\6\55\4\0\2\55\2\0\26\55\1\0\7\55" +
			"\1\0\2\55\1\0\2\55\1\0\2\55\2\0\1\51\1\0\5\51" +
			"\4\0\2\51\2\0\3\51\3\0\1\51\7\0\4\55\1\0\1\55" +
			"\7\0\12\54\2\51\3\55\1\51\13\0\3\51\1\0\11\55\1\0" +
			"\3\55\1\0\26\55\1\0\7\55\1\0\2\55\1\0\5\55\2\0" +
			"\1\51\1\55\10\51\1\0\3\51\1\0\3\51\2\0\1\55\17\0" +
			"\2\55\2\51\2\0\12\54\1\0\1\55\17\0\3\51\1\0\10\55" +
			"\2\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55\1\0\5\55" +
			"\2\0\1\51\1\55\7\51\2\0\2\51\2\0\3\51\10\0\2\51" +
			"\4\0\2\55\1\0\3\55\2\51\2\0\12\54\1\0\1\55\20\0" +
			"\1\51\1\55\1\0\6\55\3\0\3\55\1\0\4\55\3\0\2\55" +
			"\1\0\1\55\1\0\2\55\3\0\2\55\3\0\3\55\3\0\14\55" +
			"\4\0\5\51\3\0\3\51\1\0\4\51\2\0\1\55\6\0\1\51" +
			"\16\0\12\54\11\0\1\55\7\0\3\51\1\0\10\55\1\0\3\55" +
			"\1\0\27\55\1\0\12\55\1\0\5\55\3\0\1\55\7\51\1\0" +
			"\3\51\1\0\4\51\7\0\2\51\1\0\2\55\6\0\2\55\2\51" +
			"\2\0\12\54\22\0\2\51\1\0\10\55\1\0\3\55\1\0\27\55" +
			"\1\0\12\55\1\0\5\55\2\0\1\51\1\55\7\51\1\0\3\51" +
			"\1\0\4\51\7\0\2\51\7\0\1\55\1\0\2\55\2\51\2\0" +
			"\12\54\1\0\2\55\17\0\2\51\1\0\10\55\1\0\3\55\1\0" +
			"\51\55\2\0\1\55\7\51\1\0\3\51\1\0\4\51\1\55\10\0" +
			"\1\51\10\0\2\55\2\51\2\0\12\54\12\0\6\55\2\0\2\51" +
			"\1\0\22\55\3\0\30\55\1\0\11\55\1\0\1\55\2\0\7\55" +
			"\3\0\1\51\4\0\6\51\1\0\1\51\1\0\10\51\22\0\2\51" +
			"\15\0\60\55\1\51\2\55\7\51\4\0\10\55\10\51\1\0\12\54" +
			"\47\0\2\55\1\0\1\55\2\0\2\55\1\0\1\55\2\0\1\55" +
			"\6\0\4\55\1\0\7\55\1\0\3\55\1\0\1\55\1\0\1\55" +
			"\2\0\2\55\1\0\4\55\1\51\2\55\6\51\1\0\2\51\1\55" +
			"\2\0\5\55\1\0\1\55\1\0\6\51\2\0\12\54\2\0\2\55" +
			"\42\0\1\55\27\0\2\51\6\0\12\54\13\0\1\51\1\0\1\51" +
			"\1\0\1\51\4\0\2\51\10\55\1\0\44\55\4\0\24\51\1\0" +
			"\2\51\5\55\13\51\1\0\44\51\11\0\1\51\71\0\53\55\24\51" +
			"\1\55\12\54\6\0\6\55\4\51\4\55\3\51\1\55\3\51\2\55" +
			"\7\51\3\55\4\51\15\55\14\51\1\55\1\51\12\54\4\51\2\0" +
			"\46\55\12\0\53\55\1\0\1\55\3\0\u0149\55\1\0\4\55\2\0" +
			"\7\55\1\0\1\55\1\0\4\55\2\0\51\55\1\0\4\55\2\0" +
			"\41\55\1\0\4\55\2\0\7\55\1\0\1\55\1\0\4\55\2\0" +
			"\17\55\1\0\71\55\1\0\4\55\2\0\103\55\2\0\3\51\40\0" +
			"\20\55\20\0\125\55\14\0\u026c\55\2\0\21\55\1\0\32\55\5\0" +
			"\113\55\3\0\3\55\17\0\15\55\1\0\4\55\3\51\13\0\22\55" +
			"\3\51\13\0\22\55\2\51\14\0\15\55\1\0\3\55\1\0\2\51" +
			"\14\0\64\55\40\51\3\0\1\55\3\0\2\55\1\51\2\0\12\54" +
			"\41\0\3\51\2\0\12\54\6\0\130\55\10\0\51\55\1\51\1\55" +
			"\5\0\106\55\12\0\35\55\3\0\14\51\4\0\14\51\12\0\12\54" +
			"\36\55\2\0\5\55\13\0\54\55\4\0\21\51\7\55\2\51\6\0" +
			"\12\54\46\0\27\55\5\51\4\0\65\55\12\51\1\0\35\51\2\0" +
			"\1\51\12\54\6\0\12\54\15\0\1\55\130\0\5\51\57\55\21\51" +
			"\7\55\4\0\12\54\21\0\11\51\14\0\3\51\36\55\12\51\3\0" +
			"\2\55\12\54\6\0\46\55\16\51\14\0\44\55\24\51\10\0\12\54" +
			"\3\0\3\55\12\54\44\55\122\0\3\51\1\0\25\51\4\55\1\51" +
			"\4\55\1\51\15\0\300\55\47\51\25\0\4\51\u0116\55\2\0\6\55" +
			"\2\0\46\55\2\0\6\55\2\0\10\55\1\0\1\55\1\0\1\55" +
			"\1\0\1\55\1\0\37\55\2\0\65\55\1\0\7\55\1\0\1\55" +
			"\3\0\3\55\1\0\7\55\3\0\4\55\2\0\6\55\4\0\15\55" +
			"\5\0\3\55\1\0\7\55\16\0\5\51\32\0\5\51\20\0\2\55" +
			"\23\0\1\55\13\0\5\51\5\0\6\51\1\0\1\55\15\0\1\55" +
			"\20\0\15\55\3\0\14\55\1\36\15\55\26\0\15\51\4\0\1\51" +
			"\3\0\14\51\21\0\1\55\4\0\1\55\2\0\12\55\1\0\1\55" +
			"\3\0\5\55\6\0\1\55\1\0\1\55\1\0\1\55\1\0\4\55" +
			"\1\0\13\55\2\0\4\55\5\0\5\55\4\0\1\55\21\0\51\55" +
			"\u0a77\0\57\55\1\0\57\55\1\0\205\55\6\0\4\55\3\51\16\0" +
			"\46\55\12\0\66\55\11\0\1\55\17\0\1\51\27\55\11\0\7\55" +
			"\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55" +
			"\1\0\7\55\1\0\7\55\1\0\40\51\57\0\1\55\u01d5\0\3\55" +
			"\31\0\11\55\6\51\1\0\5\55\2\0\5\55\4\0\126\55\2\0" +
			"\2\51\2\0\3\55\1\0\132\55\1\0\4\55\5\0\51\55\3\0" +
			"\136\55\21\0\33\55\65\0\20\55\u0200\0\u19b6\55\112\0\u51cc\55\64\0" +
			"\u048d\55\103\0\56\55\2\0\u010d\55\3\0\20\55\12\54\2\55\24\0" +
			"\57\55\1\51\14\0\2\51\1\0\31\55\10\0\120\55\2\51\45\0" +
			"\11\55\2\0\147\55\2\0\4\55\1\0\2\55\16\0\12\55\120\0" +
			"\10\55\1\51\3\55\1\51\4\55\1\51\27\55\5\51\20\0\1\55" +
			"\7\0\64\55\14\0\2\51\62\55\21\51\13\0\12\54\6\0\22\51" +
			"\6\55\3\0\1\55\4\0\12\54\34\55\10\51\2\0\27\55\15\51" +
			"\14\0\35\55\3\0\4\51\57\55\16\51\16\0\1\55\12\54\46\0" +
			"\51\55\16\51\11\0\3\55\1\51\10\55\2\51\2\0\12\54\6\0" +
			"\27\55\3\0\1\55\1\51\4\0\60\55\1\51\1\55\3\51\2\55" +
			"\2\51\5\55\2\51\1\55\1\51\1\55\30\0\3\55\43\0\6\55" +
			"\2\0\6\55\2\0\6\55\11\0\7\55\1\0\7\55\221\0\43\55" +
			"\10\51\1\0\2\51\2\0\12\54\6\0\u2ba4\55\14\0\27\55\4\0" +
			"\61\55\u2104\0\u012e\55\2\0\76\55\2\0\152\55\46\0\7\55\14\0" +
			"\5\55\5\0\1\55\1\51\12\55\1\0\15\55\1\0\5\55\1\0" +
			"\1\55\1\0\2\55\1\0\2\55\1\0\154\55\41\0\u016b\55\22\0" +
			"\100\55\2\0\66\55\50\0\15\55\3\0\20\51\20\0\7\51\14\0" +
			"\2\55\30\0\3\55\31\0\1\55\6\0\5\55\1\0\207\55\2\0" +
			"\1\51\4\0\1\55\13\0\12\54\7\0\32\55\4\0\1\55\1\0" +
			"\32\55\13\0\131\55\3\0\6\55\2\0\6\55\2\0\6\55\2\0" +
			"\3\55\3\0\2\55\3\0\2\55\22\0\3\51\4\0";
	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();
	private static final String ZZ_ACTION_PACKED_0 =
		"\1\0\1\1\23\2\1\3\1\4\2\5\1\6\1\7" +
			"\1\10\1\11\1\12\1\13\1\14\4\1\1\2\1\1" +
			"\1\15\1\16\1\15\1\2\1\17\11\2\1\20\1\2" +
			"\1\21\13\2\2\0\1\22\1\0\1\23\1\24\1\2" +
			"\1\0\1\25\2\0\21\2\1\26\1\2\1\27\6\2" +
			"\1\30\1\31\2\0\1\2\1\32\1\0\1\33\4\2" +
			"\1\34\4\2\1\35\4\2\1\36\3\2\1\37\1\40" +
			"\1\41\3\2\1\0\1\42\1\0\2\2\1\43\1\2" +
			"\1\44\15\2\1\42\2\0\11\2\1\45\1\46\1\47" +
			"\4\2\1\0\1\50\1\51\2\2\1\52\2\2\1\53" +
			"\1\2\1\54\3\2\1\55\1\2\1\56\1\57\2\2" +
			"\1\60\1\61\2\2\1\62\1\63\1\64\1\65";
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149" +
			"\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1" +
			"\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\57\0\57\0\u03db" +
			"\0\57\0\u0292\0\u0292\0\57\0\57\0\57\0\57\0\57" +
			"\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553" +
			"\0\u0582\0\u05b1\0\u0292\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c" +
			"\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0292\0\u0787\0\u0292\0\u07b6" +
			"\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e" +
			"\0\u095d\0\u098c\0\u09bb\0\u040a\0\57\0\u09ea\0\u0a19\0\u0497" +
			"\0\u0a48\0\u04f5\0\57\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33" +
			"\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab" +
			"\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0292\0\u0df4" +
			"\0\u0292\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0292" +
			"\0\57\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057" +
			"\0\u1086\0\u10b5\0\u10e4\0\u0292\0\u1113\0\u1142\0\u1171\0\u11a0" +
			"\0\u0292\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u0292\0\u128b\0\u12ba" +
			"\0\u12e9\0\u0292\0\u0292\0\u0292\0\u1318\0\u1347\0\u1376\0\u13a5" +
			"\0\u0f6c\0\u13d4\0\u1403\0\u1432\0\u0292\0\u1461\0\u0292\0\u1490" +
			"\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608" +
			"\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780" +
			"\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8" +
			"\0\u0292\0\u0292\0\u0292\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3" +
			"\0\u0292\0\u0292\0\u1a12\0\u1a41\0\u0292\0\u1a70\0\u1a9f\0\u0292" +
			"\0\u1ace\0\u0292\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u0292" +
			"\0\u0292\0\u1be8\0\u1c17\0\u0292\0\u0292\0\u1c46\0\u1c75\0\u0292" +
			"\0\u0292\0\u0292\0\u0292";
	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();
	private static final String ZZ_TRANS_PACKED_0 =
		"\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11" +
			"\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
			"\1\22\1\17\1\23\1\17\1\24\1\25\3\17\1\26" +
			"\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36" +
			"\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\2" +
			"\1\46\1\47\1\50\1\17\1\51\60\0\1\17\1\52" +
			"\26\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\2\17\1\53\25\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\12\17\1\54\15\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\1\17\1\55\10\17\1\56" +
			"\15\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\11\17\1\57\16\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\23\17\1\60\4\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\4\17\1\61\16\17\1\62" +
			"\4\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\2\17\1\63\25\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\2\17\1\64\12\17\1\65\12\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\4\17\1\66" +
			"\23\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\15\17\1\67\12\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\1\17\1\70\10\17\1\71\15\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\30\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\6\17\1\72" +
			"\1\17\1\73\17\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\15\17\1\74\12\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\1\17\1\75\26\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\1\17\1\76" +
			"\6\17\1\77\17\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\1\17\1\100\2\17\1\101\23\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\12\17\1\102" +
			"\15\17\4\0\2\17\11\0\2\17\2\0\2\17\34\0" +
			"\1\103\23\0\44\104\1\105\12\104\45\0\1\106\6\0" +
			"\1\107\56\0\1\50\3\0\30\110\4\0\2\110\11\0" +
			"\2\110\2\0\2\110\2\0\12\17\1\111\15\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\1\0\53\112\1\113" +
			"\3\112\53\0\1\47\36\0\1\114\11\0\1\115\6\0" +
			"\1\50\60\0\1\51\1\0\2\17\1\116\25\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\6\17\1\117" +
			"\2\17\1\120\16\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\1\17\1\121\26\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\15\17\1\122\12\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\5\17\1\123" +
			"\22\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\1\17\1\124\6\17\1\125\17\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\23\17\1\126\4\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\16\17\1\127" +
			"\11\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\6\17\1\130\21\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\6\17\1\131\21\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\6\17\1\132\21\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\16\17\1\133" +
			"\11\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\6\17\1\134\21\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\23\17\1\135\4\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\2\17\1\136\25\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\4\17\1\137" +
			"\23\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\1\17\1\140\16\17\1\141\7\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\23\17\1\142\4\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\6\17\1\143" +
			"\21\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\1\17\1\144\26\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\15\17\1\145\10\17\1\146\1\17\4\0" +
			"\2\17\11\0\1\147\1\17\2\0\2\17\2\0\23\17" +
			"\1\150\4\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\34\0\1\151\23\0\45\152\1\153\11\152\33\0\1\114" +
			"\20\0\1\107\3\0\14\17\1\154\13\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\55\0\1\155\50\0\1\156" +
			"\5\0\1\157\3\0\3\17\1\160\24\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\16\17\1\161\11\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\4\17" +
			"\1\162\23\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\23\17\1\163\4\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\2\0\4\17\1\164\23\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\6\17\1\165\21\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\5\17" +
			"\1\166\22\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\24\17\1\167\3\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\2\0\11\17\1\170\16\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\4\17\1\171\23\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\4\17" +
			"\1\172\23\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\4\17\1\173\23\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\2\0\12\17\1\174\15\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\17\17\1\175\10\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\4\17" +
			"\1\176\23\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\10\17\1\177\17\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\2\0\25\17\1\200\2\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\14\17\1\201\13\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\13\17" +
			"\1\202\14\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\22\17\1\203\5\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\2\0\6\17\1\204\21\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\1\17\1\205\26\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\16\17" +
			"\1\206\11\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\4\17\1\207\23\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\1\0\45\152\1\210\56\152\1\211\11\152" +
			"\1\0\15\17\1\127\12\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\46\0\1\212\6\0\1\155\56\0\1\157" +
			"\47\0\1\115\6\0\1\157\3\0\4\17\1\213\23\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\23\17" +
			"\1\214\4\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\13\17\1\215\14\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\2\0\13\17\1\216\14\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\27\17\1\217\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\4\17\1\220" +
			"\23\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\12\17\1\221\15\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\10\17\1\222\17\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\2\17\1\223\25\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\25\17\1\224" +
			"\2\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\11\17\1\225\16\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\14\17\1\226\13\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\2\17\1\227\25\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\14\17\1\230" +
			"\13\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\4\17\1\231\23\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\16\17\1\232\11\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\10\17\1\233\17\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\23\17\1\234" +
			"\4\17\4\0\2\17\11\0\2\17\2\0\2\17\1\0" +
			"\45\152\1\235\11\152\45\0\2\236\5\0\1\237\3\0" +
			"\5\17\1\240\22\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\12\17\1\241\15\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\10\17\1\242\17\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\23\17\1\243" +
			"\4\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\6\17\1\244\21\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\2\17\1\245\25\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\6\17\1\246\21\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\4\17\1\247" +
			"\23\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\1\17\1\250\26\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\4\17\1\251\23\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\25\17\1\252\2\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\4\17\1\253" +
			"\23\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\12\17\1\254\15\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\23\17\1\255\4\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\23\17\1\256\4\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\4\17\1\257" +
			"\23\17\4\0\2\17\11\0\2\17\2\0\2\17\46\0" +
			"\1\235\65\0\1\237\35\0\1\260\20\0\1\237\3\0" +
			"\6\17\1\261\21\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\14\17\1\262\13\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\2\17\1\263\25\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\6\17\1\264" +
			"\21\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\4\17\1\265\23\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\12\17\1\266\15\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\10\17\1\267\17\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\23\17\1\270" +
			"\4\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\13\17\1\271\14\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\2\0\2\17\1\272\25\17\4\0\2\17\11\0" +
			"\2\17\2\0\2\17\2\0\3\17\1\273\24\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\4\17\1\274" +
			"\23\17\4\0\2\17\11\0\2\17\2\0\2\17\2\0" +
			"\2\17\1\275\25\17\4\0\2\17\11\0\2\17\2\0" +
			"\2\17\55\0\1\276\3\0\12\17\1\277\15\17\4\0" +
			"\2\17\11\0\2\17\2\0\2\17\2\0\27\17\1\300" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\14\17" +
			"\1\301\13\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\1\17\1\302\26\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\2\0\4\17\1\303\23\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\4\17\1\304\23\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\13\17" +
			"\1\305\14\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\3\17\1\306\24\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\46\0\1\212\6\0\1\276\3\0\6\17" +
			"\1\307\21\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\2\0\2\17\1\310\25\17\4\0\2\17\11\0\2\17" +
			"\2\0\2\17\2\0\14\17\1\311\13\17\4\0\2\17" +
			"\11\0\2\17\2\0\2\17\2\0\4\17\1\312\23\17" +
			"\4\0\2\17\11\0\2\17\2\0\2\17\2\0\4\17" +
			"\1\313\23\17\4\0\2\17\11\0\2\17\2\0\2\17" +
			"\1\0";
	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};
	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\1\0\1\11\23\1\2\11\1\1\1\11\2\1\5\11" +
			"\42\1\2\0\1\11\1\0\3\1\1\0\1\11\2\0" +
			"\33\1\1\11\2\0\2\1\1\0\31\1\1\0\1\1" +
			"\1\0\23\1\2\0\20\1\1\0\33\1";
	private static java.io.Reader zzReader = null; // Fake
	/**
	 * the current state of the DFA
	 */
	private int zzState;
	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";
	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;
	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;
	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;
	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;
	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;
	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;
	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;
	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;
	/* user code: */
	private Set<String> identifiers;

	TaraHighlighterLex(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	TaraHighlighterLex(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	private static int[] zzUnpackAction() {
		int[] result = new int[203];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackRowMap() {
		int[] result = new int[203];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static int[] zzUnpackTrans() {
		int[] result = new int[7332];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackAttribute() {
		int[] result = new int[203];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 2216) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		String[] uses = zzBuffer.toString().split("use");
		String destiny = null;
		for (String use : uses)
			if (use.contains("as metamodel")) {
				destiny = use.split("as metamodel")[0].trim();
				break;
			}
		Model heritage = TaraLanguage.getHeritage(destiny);
		if (heritage != null)
			identifiers = heritage.getIdentifiers();
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p/>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p/>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p/>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p/>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 34: {
					return TaraTypes.STRING_MULTILINE_VALUE_KEY;
				}
				case 54:
					break;
				case 32: {
					return TaraTypes.WITH;
				}
				case 55:
					break;
				case 24: {
					return TaraTypes.VAR;
				}
				case 56:
					break;
				case 11: {
					return TaraTypes.COLON;
				}
				case 57:
					break;
				case 8: {
					return TaraTypes.PERCENTAGE;
				}
				case 58:
					break;
				case 39: {
					return TaraTypes.SINGLE;
				}
				case 59:
					break;
				case 20: {
					return TaraTypes.CODE_VALUE_KEY;
				}
				case 60:
					break;
				case 26: {
					return TaraTypes.DOUBLE_VALUE_KEY;
				}
				case 61:
					break;
				case 13: {
					return TokenType.WHITE_SPACE;
				}
				case 62:
					break;
				case 41: {
					return TaraTypes.NATURAL_TYPE;
				}
				case 63:
					break;
				case 4: {
					return TaraTypes.RIGHT_PARENTHESIS;
				}
				case 64:
					break;
				case 25: {
					return TaraTypes.LIST;
				}
				case 65:
					break;
				case 12: {
					return TaraTypes.EQUALS;
				}
				case 66:
					break;
				case 5: {
					return TaraTypes.DOT;
				}
				case 67:
					break;
				case 50: {
					return TaraTypes.INTENTION_KEY;
				}
				case 68:
					break;
				case 38: {
					return TaraTypes.STRING_TYPE;
				}
				case 69:
					break;
				case 35: {
					return TaraTypes.NAMED;
				}
				case 70:
					break;
				case 47: {
					return TaraTypes.TERMINAL;
				}
				case 71:
					break;
				case 30: {
					return TaraTypes.DATE_TYPE;
				}
				case 72:
					break;
				case 51: {
					return TaraTypes.METAMODEL;
				}
				case 73:
					break;
				case 36: {
					return TaraTypes.EMPTY_REF;
				}
				case 74:
					break;
				case 3: {
					return TaraTypes.LEFT_PARENTHESIS;
				}
				case 75:
					break;
				case 49: {
					return TaraTypes.REQUIRED;
				}
				case 76:
					break;
				case 42: {
					return TaraTypes.PRIVATE;
				}
				case 77:
					break;
				case 52: {
					return TaraTypes.REFERENCE_TYPE;
				}
				case 78:
					break;
				case 19: {
					return TaraTypes.NEGATIVE_VALUE_KEY;
				}
				case 79:
					break;
				case 33: {
					return TaraTypes.ROOT;
				}
				case 80:
					break;
				case 21: {
					return TaraTypes.DOC_LINE;
				}
				case 81:
					break;
				case 18: {
					return TaraTypes.STRING_VALUE_KEY;
				}
				case 82:
					break;
				case 46: {
					return TaraTypes.PROPERTY;
				}
				case 83:
					break;
				case 2: {
					return evaluateIdentifier();
				}
				case 84:
					break;
				case 9: {
					return TaraTypes.STAR;
				}
				case 85:
					break;
				case 37: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 86:
					break;
				case 14: {
					return TaraTypes.NATURAL_VALUE_KEY;
				}
				case 87:
					break;
				case 45: {
					return TaraTypes.COORDINATE_VALUE_KEY;
				}
				case 88:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 89:
					break;
				case 48: {
					return TaraTypes.RESOURCE_KEY;
				}
				case 90:
					break;
				case 22: {
					return TaraTypes.USE_KEY;
				}
				case 91:
					break;
				case 29: {
					return TaraTypes.BOOLEAN_VALUE_KEY;
				}
				case 92:
					break;
				case 17: {
					return TaraTypes.AS;
				}
				case 93:
					break;
				case 15: {
					return TaraTypes.ON;
				}
				case 94:
					break;
				case 44: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 95:
					break;
				case 28: {
					return TaraTypes.CASE_KEY;
				}
				case 96:
					break;
				case 16: {
					return TaraTypes.IS;
				}
				case 97:
					break;
				case 43: {
					return TaraTypes.INT_TYPE;
				}
				case 98:
					break;
				case 40: {
					return TaraTypes.METAIDENTIFIER_KEY;
				}
				case 99:
					break;
				case 27: {
					return TaraTypes.DATE_VALUE_KEY;
				}
				case 100:
					break;
				case 53: {
					return TaraTypes.COORDINATE_TYPE;
				}
				case 101:
					break;
				case 7: {
					return TaraTypes.EURO;
				}
				case 102:
					break;
				case 23: {
					loadHeritage();
					return TaraTypes.BOX_KEY;
				}
				case 103:
					break;
				case 31: {
					return TaraTypes.WORD_KEY;
				}
				case 104:
					break;
				case 6: {
					return TaraTypes.DOLLAR;
				}
				case 105:
					break;
				case 10: {
					return TaraTypes.COMMA;
				}
				case 106:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						return null;
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
