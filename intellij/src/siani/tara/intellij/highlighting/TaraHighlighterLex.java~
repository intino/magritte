/* The following code was generated by JFlex 1.4.3 on 19/05/15 7:59 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import siani.tara.intellij.project.module.ModuleProvider;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.Language;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/05/15 7:59 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int MULTILINE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\54\1\61\1\55\2\0\1\57\16\54\4\0\1\61\1\0\1\47"+
    "\1\52\1\37\1\40\2\0\1\32\1\33\1\56\1\51\1\43\1\50"+
    "\1\34\1\42\12\60\1\44\1\46\1\0\1\45\1\61\2\0\2\37"+
    "\1\1\1\37\1\53\12\37\1\20\12\37\1\35\1\62\1\36\1\0"+
    "\1\37\1\0\1\14\1\12\1\4\1\16\1\5\1\31\1\25\1\13"+
    "\1\22\2\37\1\17\1\26\1\3\1\2\1\6\1\27\1\21\1\10"+
    "\1\7\1\11\1\23\1\24\1\15\1\30\1\37\4\0\41\54\2\0"+
    "\4\37\4\0\1\37\2\0\1\54\2\0\1\40\4\0\1\37\1\0"+
    "\1\41\2\0\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37\4\0"+
    "\14\37\16\0\5\37\7\0\1\37\1\0\1\37\21\0\160\54\5\37"+
    "\1\0\2\37\2\0\4\37\10\0\1\37\1\0\3\37\1\0\1\37"+
    "\1\0\24\37\1\0\123\37\1\0\213\37\1\0\5\54\2\0\236\37"+
    "\11\0\46\37\2\0\1\37\7\0\47\37\7\0\1\37\1\0\55\54"+
    "\1\0\1\54\1\0\2\54\1\0\2\54\1\0\1\54\10\0\33\37"+
    "\5\0\3\37\15\0\5\54\6\0\1\37\4\0\13\54\5\0\53\37"+
    "\25\54\12\60\4\0\2\37\1\54\143\37\1\0\1\37\10\54\1\0"+
    "\6\54\2\37\2\54\1\0\4\54\2\37\12\60\3\37\2\0\1\37"+
    "\17\0\1\54\1\37\1\54\36\37\33\54\2\0\131\37\13\54\1\37"+
    "\16\0\12\60\41\37\11\54\2\37\4\0\1\37\5\0\26\37\4\54"+
    "\1\37\11\54\1\37\3\54\1\37\5\54\22\0\31\37\3\54\104\0"+
    "\1\37\1\0\13\37\67\0\33\54\1\0\4\54\66\37\3\54\1\37"+
    "\22\54\1\37\7\54\12\37\2\54\2\0\12\60\1\0\7\37\1\0"+
    "\7\37\1\0\3\54\1\0\10\37\2\0\2\37\2\0\26\37\1\0"+
    "\7\37\1\0\1\37\3\0\4\37\2\0\1\54\1\37\7\54\2\0"+
    "\2\54\2\0\3\54\1\37\10\0\1\54\4\0\2\37\1\0\3\37"+
    "\2\54\2\0\12\60\4\37\7\0\1\37\5\0\3\54\1\0\6\37"+
    "\4\0\2\37\2\0\26\37\1\0\7\37\1\0\2\37\1\0\2\37"+
    "\1\0\2\37\2\0\1\54\1\0\5\54\4\0\2\54\2\0\3\54"+
    "\3\0\1\54\7\0\4\37\1\0\1\37\7\0\12\60\2\54\3\37"+
    "\1\54\13\0\3\54\1\0\11\37\1\0\3\37\1\0\26\37\1\0"+
    "\7\37\1\0\2\37\1\0\5\37\2\0\1\54\1\37\10\54\1\0"+
    "\3\54\1\0\3\54\2\0\1\37\17\0\2\37\2\54\2\0\12\60"+
    "\1\0\1\37\17\0\3\54\1\0\10\37\2\0\2\37\2\0\26\37"+
    "\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\54\1\37\7\54"+
    "\2\0\2\54\2\0\3\54\10\0\2\54\4\0\2\37\1\0\3\37"+
    "\2\54\2\0\12\60\1\0\1\37\20\0\1\54\1\37\1\0\6\37"+
    "\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1\37\1\0\2\37"+
    "\3\0\2\37\3\0\3\37\3\0\14\37\4\0\5\54\3\0\3\54"+
    "\1\0\4\54\2\0\1\37\6\0\1\54\16\0\12\60\11\0\1\37"+
    "\7\0\3\54\1\0\10\37\1\0\3\37\1\0\27\37\1\0\12\37"+
    "\1\0\5\37\3\0\1\37\7\54\1\0\3\54\1\0\4\54\7\0"+
    "\2\54\1\0\2\37\6\0\2\37\2\54\2\0\12\60\22\0\2\54"+
    "\1\0\10\37\1\0\3\37\1\0\27\37\1\0\12\37\1\0\5\37"+
    "\2\0\1\54\1\37\7\54\1\0\3\54\1\0\4\54\7\0\2\54"+
    "\7\0\1\37\1\0\2\37\2\54\2\0\12\60\1\0\2\37\17\0"+
    "\2\54\1\0\10\37\1\0\3\37\1\0\51\37\2\0\1\37\7\54"+
    "\1\0\3\54\1\0\4\54\1\37\10\0\1\54\10\0\2\37\2\54"+
    "\2\0\12\60\12\0\6\37\2\0\2\54\1\0\22\37\3\0\30\37"+
    "\1\0\11\37\1\0\1\37\2\0\7\37\3\0\1\54\4\0\6\54"+
    "\1\0\1\54\1\0\10\54\22\0\2\54\15\0\60\37\1\54\2\37"+
    "\7\54\4\0\10\37\10\54\1\0\12\60\47\0\2\37\1\0\1\37"+
    "\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37\1\0\7\37"+
    "\1\0\3\37\1\0\1\37\1\0\1\37\2\0\2\37\1\0\4\37"+
    "\1\54\2\37\6\54\1\0\2\54\1\37\2\0\5\37\1\0\1\37"+
    "\1\0\6\54\2\0\12\60\2\0\4\37\40\0\1\37\27\0\2\54"+
    "\6\0\12\60\13\0\1\54\1\0\1\54\1\0\1\54\4\0\2\54"+
    "\10\37\1\0\44\37\4\0\24\54\1\0\2\54\5\37\13\54\1\0"+
    "\44\54\11\0\1\54\71\0\53\37\24\54\1\37\12\60\6\0\6\37"+
    "\4\54\4\37\3\54\1\37\3\54\2\37\7\54\3\37\4\54\15\37"+
    "\14\54\1\37\1\54\12\60\4\54\2\0\46\37\1\0\1\37\5\0"+
    "\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37\2\0\7\37\1\0"+
    "\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37\1\0"+
    "\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37\1\0"+
    "\71\37\1\0\4\37\2\0\103\37\2\0\3\54\40\0\20\37\20\0"+
    "\125\37\14\0\u026c\37\2\0\21\37\1\0\32\37\5\0\113\37\3\0"+
    "\3\37\17\0\15\37\1\0\4\37\3\54\13\0\22\37\3\54\13\0"+
    "\22\37\2\54\14\0\15\37\1\0\3\37\1\0\2\54\14\0\64\37"+
    "\40\54\3\0\1\37\3\0\2\37\1\54\2\0\12\60\41\0\3\54"+
    "\2\0\12\60\6\0\130\37\10\0\51\37\1\54\1\37\5\0\106\37"+
    "\12\0\35\37\3\0\14\54\4\0\14\54\12\0\12\60\36\37\2\0"+
    "\5\37\13\0\54\37\4\0\21\54\7\37\2\54\6\0\12\60\46\0"+
    "\27\37\5\54\4\0\65\37\12\54\1\0\35\54\2\0\1\54\12\60"+
    "\6\0\12\60\15\0\1\37\130\0\5\54\57\37\21\54\7\37\4\0"+
    "\12\60\21\0\11\54\14\0\3\54\36\37\15\54\2\37\12\60\54\37"+
    "\16\54\14\0\44\37\24\54\10\0\12\60\3\0\3\37\12\60\44\37"+
    "\122\0\3\54\1\0\25\54\4\37\1\54\4\37\3\54\2\37\11\0"+
    "\300\37\47\54\25\0\4\54\u0116\37\2\0\6\37\2\0\46\37\2\0"+
    "\6\37\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0"+
    "\37\37\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37\1\0"+
    "\7\37\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37\1\0"+
    "\7\37\16\0\5\54\32\0\5\54\20\0\2\37\23\0\1\37\13\0"+
    "\5\54\5\0\6\54\1\0\1\37\15\0\1\37\20\0\15\37\3\0"+
    "\14\37\1\37\16\37\25\0\15\54\4\0\1\54\3\0\14\54\21\0"+
    "\1\37\4\0\1\37\2\0\12\37\1\0\1\37\3\0\5\37\6\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\4\37\1\0\13\37\2\0"+
    "\4\37\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0\57\37\1\0"+
    "\57\37\1\0\205\37\6\0\4\37\3\54\2\37\14\0\46\37\1\0"+
    "\1\37\5\0\1\37\2\0\70\37\7\0\1\37\17\0\1\54\27\37"+
    "\11\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37"+
    "\1\0\7\37\1\0\7\37\1\0\7\37\1\0\40\54\57\0\1\37"+
    "\u01d5\0\3\37\31\0\11\37\6\54\1\0\5\37\2\0\5\37\4\0"+
    "\126\37\2\0\2\54\2\0\3\37\1\0\132\37\1\0\4\37\5\0"+
    "\51\37\3\0\136\37\21\0\33\37\65\0\20\37\u0200\0\u19b6\37\112\0"+
    "\u51cd\37\63\0\u048d\37\103\0\56\37\2\0\u010d\37\3\0\20\37\12\60"+
    "\2\37\24\0\57\37\1\54\4\0\12\54\1\0\31\37\7\0\1\54"+
    "\120\37\2\54\45\0\11\37\2\0\147\37\2\0\4\37\1\0\4\37"+
    "\14\0\13\37\115\0\12\37\1\54\3\37\1\54\4\37\1\54\27\37"+
    "\5\54\20\0\1\37\7\0\64\37\14\0\2\54\62\37\21\54\13\0"+
    "\12\60\6\0\22\54\6\37\3\0\1\37\4\0\12\60\34\37\10\54"+
    "\2\0\27\37\15\54\14\0\35\37\3\0\4\54\57\37\16\54\16\0"+
    "\1\37\12\60\46\0\51\37\16\54\11\0\3\37\1\54\10\37\2\54"+
    "\2\0\12\60\6\0\27\37\3\0\1\37\1\54\4\0\60\37\1\54"+
    "\1\37\3\54\2\37\2\54\5\37\2\54\1\37\1\54\1\37\30\0"+
    "\3\37\2\0\13\37\5\54\2\0\3\37\2\54\12\0\6\37\2\0"+
    "\6\37\2\0\6\37\11\0\7\37\1\0\7\37\221\0\43\37\10\54"+
    "\1\0\2\54\2\0\12\60\6\0\u2ba4\37\14\0\27\37\4\0\61\37"+
    "\u2104\0\u016e\37\2\0\152\37\46\0\7\37\14\0\5\37\5\0\1\37"+
    "\1\54\12\37\1\0\15\37\1\0\5\37\1\0\1\37\1\0\2\37"+
    "\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37\2\0\66\37"+
    "\50\0\15\37\3\0\20\54\20\0\7\54\14\0\2\37\30\0\3\37"+
    "\31\0\1\37\6\0\5\37\1\0\207\37\2\0\1\54\4\0\1\37"+
    "\13\0\12\60\7\0\32\37\4\0\1\37\1\0\32\37\13\0\131\37"+
    "\3\0\6\37\2\0\6\37\2\0\6\37\2\0\3\37\3\0\2\37"+
    "\3\0\2\37\22\0\3\54\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\24\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\12\1\13\1\14\1\15\3\1"+
    "\1\16\1\17\1\16\1\20\1\21\2\20\1\2\1\22"+
    "\15\2\1\23\11\2\1\24\10\2\3\0\1\25\1\26"+
    "\1\27\1\0\1\21\11\2\1\30\1\2\1\31\1\2"+
    "\1\32\3\2\1\33\7\2\1\34\10\2\1\35\2\36"+
    "\2\0\1\37\10\2\1\40\4\2\1\0\1\10\1\41"+
    "\1\2\1\42\1\2\1\43\3\2\1\44\1\2\1\45"+
    "\1\46\4\2\1\47\1\0\1\36\1\0\5\2\1\50"+
    "\12\2\1\51\4\2\1\52\1\0\1\37\2\2\1\53"+
    "\4\2\1\54\1\55\2\2\1\56\1\57\6\2\1\60"+
    "\1\61\1\2\1\62\2\2\1\63\3\2\1\64\1\65"+
    "\1\2\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\231\0\231\0\u04c8\0\231\0\231\0\u04fb\0\u052e\0\231"+
    "\0\231\0\231\0\231\0\231\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\231\0\231\0\u0693\0\u06c6\0\u06f9\0\u0165"+
    "\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u0165\0\u09c3\0\u09f6"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0165"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3"+
    "\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u05c7\0\u0e25\0\u06c6"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\u0165\0\u1023\0\u0165\0\u1056\0\u0165\0\u1089\0\u10bc"+
    "\0\u10ef\0\u0165\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u0165\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\231\0\231\0\u0d59\0\u141f\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d"+
    "\0\u0165\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\231"+
    "\0\u1782\0\u0165\0\u17b5\0\u0165\0\u17e8\0\u181b\0\u184e\0\u0165"+
    "\0\u1881\0\u0165\0\u0165\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u0165"+
    "\0\u1980\0\u141f\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2"+
    "\0\u0165\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17"+
    "\0\u1c4a\0\u1c7d\0\u1cb0\0\u0165\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c"+
    "\0\u0165\0\u1daf\0\u1daf\0\u1de2\0\u1e15\0\u0165\0\u1e48\0\u1e7b"+
    "\0\u1eae\0\u1ee1\0\u0165\0\u0165\0\u1f14\0\u1f47\0\u0165\0\u0165"+
    "\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u0165\0\u0165"+
    "\0\u20ac\0\u0165\0\u20df\0\u2112\0\u0165\0\u2145\0\u2178\0\u21ab"+
    "\0\u0165\0\u0165\0\u21de\0\u0165\0\u0165\0\u0165\0\u0165\0\u0165"+
    "\0\u0165\0\u0165\0\u0165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\10\1\21\1\10"+
    "\1\22\1\23\1\24\1\25\1\26\1\10\1\27\2\10"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\10\1\36"+
    "\1\4\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\10\1\4\1\50\2\4\1\51\1\52"+
    "\1\4\47\53\1\54\5\53\1\4\1\53\1\4\2\53"+
    "\1\55\50\53\1\56\11\53\1\55\64\0\1\10\1\57"+
    "\27\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\2\10\1\60\26\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\13\10\1\61\15\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\31\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\2\10\1\62\11\10\1\63"+
    "\10\10\1\64\3\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\20\10\1\65"+
    "\10\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\4\10\1\66\13\10\1\67"+
    "\10\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\6\10\1\70\1\10\1\71"+
    "\10\10\1\72\7\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\7\10\1\73"+
    "\21\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\1\10\1\74\27\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\13\10\1\75\15\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\7\10\1\76\1\10\1\77\17\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\1\10\1\100\5\10\1\101\3\10\1\102\15\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\20\10\1\103\10\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\1\10\1\104\2\10\1\105\6\10\1\106\15\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\2\10\1\107\4\10\1\110\21\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\13\10\1\111\15\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\1\10\1\112\17\10\1\113\7\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\4\10\1\114\3\10\1\115\20\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\4\10\1\116\6\10\1\117\5\10\1\120\7\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\36\0\1\121\27\0\31\36\5\0\1\36\1\0"+
    "\2\36\5\0\1\36\2\0\2\36\3\0\1\36\44\0"+
    "\1\122\13\0\1\123\54\0\1\124\7\0\1\125\62\0"+
    "\1\51\3\0\31\126\5\0\1\126\13\0\1\126\64\0"+
    "\1\50\41\0\1\127\23\0\1\51\63\0\1\52\4\0"+
    "\1\53\3\0\1\53\11\0\1\53\25\0\1\53\63\0"+
    "\1\130\13\0\2\10\1\131\26\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\6\10\1\132\22\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\3\10\1\133"+
    "\25\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\6\10\1\134\22\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\5\10\1\135\23\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\1\10\1\136\27\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\20\10\1\137"+
    "\10\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\10\10\1\140\20\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\20\10\1\141\10\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\11\10\1\142\17\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\2\10\1\143"+
    "\26\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\4\10\1\144\24\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\1\10\1\145\27\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\7\10\1\146\21\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\7\10\1\147"+
    "\21\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\3\10\1\150\4\10\1\151"+
    "\20\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\16\10\1\152\12\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\6\10\1\153\22\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\1\10\1\154\27\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\1\10\1\155"+
    "\27\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\13\10\1\156\12\10\1\157"+
    "\2\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\6\10\1\160\22\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\6\10\1\161\22\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\20\10\1\162\10\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\20\10\1\163"+
    "\10\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\6\10\1\164\22\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\13\10\1\165\15\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\16\10\1\166\12\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\13\10\1\167"+
    "\15\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\3\10\1\170\12\10\1\171"+
    "\12\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\16\10\1\172\12\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\36\0\1\173\26\0\55\122\1\174\1\122\1\175"+
    "\3\122\56\176\1\177\4\176\50\0\1\124\46\0\1\127"+
    "\23\0\1\125\62\0\1\200\3\0\3\10\1\201\25\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\10\10\1\202\10\10\1\203\7\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\16\10\1\204\12\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\4\10\1\205\24\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\6\10"+
    "\1\206\22\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\5\10\1\207\23\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\25\10\1\210\3\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\4\10\1\211\24\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\21\10"+
    "\1\212\7\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\24\10\1\213\4\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\16\10\1\214\12\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\6\10\1\215\22\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\2\0\1\216"+
    "\31\150\5\216\1\150\1\216\2\217\5\216\1\150\2\216"+
    "\2\150\1\220\2\216\1\150\2\216\1\0\11\10\1\221"+
    "\17\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\4\10\1\222\24\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\6\10\1\223\22\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\6\10\1\224\22\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\15\10\1\225"+
    "\13\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\10\10\1\226\20\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\21\10\1\227\7\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\1\10\1\230\2\10\1\231\24\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\15\10\1\232\13\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\12\10\1\233"+
    "\16\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\7\10\1\234\21\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\6\10\1\235\22\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\6\10\1\236\22\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\4\10\1\237"+
    "\24\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\7\10\1\140\21\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\4\10\1\240\24\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\2\0"+
    "\56\176\1\241\46\176\1\242\13\176\1\241\4\176\53\0"+
    "\1\243\4\0\1\200\3\0\4\10\1\244\24\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\20\10\1\245\10\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\22\10\1\246\6\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\1\10\1\247"+
    "\27\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\2\10\1\250\26\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\27\10\1\251\1\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\4\10\1\252\24\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\21\10\1\253"+
    "\7\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\3\0\2\10\1\254\26\10\5\0"+
    "\1\10\1\0\2\36\5\0\1\10\2\0\2\10\3\0"+
    "\1\10\3\0\16\10\1\255\12\10\5\0\1\10\1\0"+
    "\2\36\5\0\1\10\2\0\2\10\3\0\1\10\3\0"+
    "\4\10\1\256\24\10\5\0\1\10\1\0\2\36\5\0"+
    "\1\10\2\0\2\10\3\0\1\10\3\0\20\10\1\257"+
    "\10\10\5\0\1\10\1\0\2\36\5\0\1\10\2\0"+
    "\2\10\3\0\1\10\2\0\55\216\1\220\6\216\31\217"+
    "\5\216\1\217\1\216\2\217\5\216\1\217\2\216\2\217"+
    "\1\220\2\216\1\217\2\216\1\0\16\10\1\260\12\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\4\10\1\261\24\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\1\10\1\262\27\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\21\10"+
    "\1\263\7\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\1\10\1\264\27\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\24\10\1\265\4\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\10\10\1\266\20\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\21\10"+
    "\1\267\7\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\10\10\1\270\20\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\6\10\1\271\22\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\2\0\42\176\1\174\13\176\1\241\4\176\50\0\2\272"+
    "\6\0\1\273\3\0\5\10\1\274\23\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\13\10\1\275\15\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\4\10"+
    "\1\276\24\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\7\10\1\277\21\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\15\10\1\300\13\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\20\10\1\301\10\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\2\10"+
    "\1\302\26\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\24\10\1\303\4\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\4\10\1\304\24\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\13\10\1\305\15\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\13\10"+
    "\1\306\15\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\4\10\1\307\24\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\1\10\1\310\27\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\2\10\1\311\26\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\20\10"+
    "\1\312\10\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\4\10\1\313\24\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\20\10\1\314\10\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\5\10\1\315\23\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\20\10"+
    "\1\316\10\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\62\0\1\273\3\0\6\10"+
    "\1\317\22\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\16\10\1\320\12\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\4\10\1\321\24\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\7\10\1\322\21\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\6\10"+
    "\1\323\22\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\13\10\1\324\15\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\2\10\1\325\26\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\3\10\1\326\25\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\16\10"+
    "\1\327\12\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\4\10\1\330\24\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\20\10\1\331\10\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\4\10\1\332\24\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\16\10"+
    "\1\333\12\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\4\10\1\334\24\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\15\10\1\335\13\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\27\10\1\336\1\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\16\10"+
    "\1\337\12\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\3\0\6\10\1\340\22\10"+
    "\5\0\1\10\1\0\2\36\5\0\1\10\2\0\2\10"+
    "\3\0\1\10\3\0\27\10\1\341\1\10\5\0\1\10"+
    "\1\0\2\36\5\0\1\10\2\0\2\10\3\0\1\10"+
    "\3\0\15\10\1\342\13\10\5\0\1\10\1\0\2\36"+
    "\5\0\1\10\2\0\2\10\3\0\1\10\3\0\4\10"+
    "\1\343\24\10\5\0\1\10\1\0\2\36\5\0\1\10"+
    "\2\0\2\10\3\0\1\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8721];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\24\1\2\11\1\1\2\11\2\1\5\11"+
    "\6\1\2\11\44\1\3\0\3\1\1\0\43\1\2\11"+
    "\1\1\2\0\16\1\1\0\1\1\1\11\20\1\1\0"+
    "\1\1\1\0\26\1\1\0\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (identifiers != null) return;
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
            String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		identifiers = new HashSet();
		Language heritage = TaraLanguage.getLanguage(dsl);
        if (heritage != null) Collections.addAll(identifiers, heritage.lexicon());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 62: break;
        case 38: 
          { return TaraTypes.WITH;
          }
        case 63: break;
        case 28: 
          { return TaraTypes.VAR;
          }
        case 64: break;
        case 10: 
          { return TaraTypes.COLON;
          }
        case 65: break;
        case 58: 
          { return TaraTypes.ABSTRACT;
          }
        case 66: break;
        case 41: 
          { return TaraTypes.RATIO_TYPE;
          }
        case 67: break;
        case 61: 
          { return TaraTypes.MULTIPLE;
          }
        case 68: break;
        case 17: 
          { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
          }
        case 69: break;
        case 45: 
          { return TaraTypes.SINGLE;
          }
        case 70: break;
        case 31: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 71: break;
        case 14: 
          { return TokenType.WHITE_SPACE;
          }
        case 72: break;
        case 49: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 73: break;
        case 4: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 74: break;
        case 29: 
          { return TaraTypes.LIST;
          }
        case 75: break;
        case 11: 
          { return TaraTypes.EQUALS;
          }
        case 76: break;
        case 5: 
          { return TaraTypes.DOT;
          }
        case 77: break;
        case 44: 
          { return TaraTypes.STRING_TYPE;
          }
        case 78: break;
        case 57: 
          { return TaraTypes.TERMINAL;
          }
        case 79: break;
        case 30: 
          { return TaraTypes.COMMENT;
          }
        case 80: break;
        case 47: 
          { return TaraTypes.PROTEO;
          }
        case 81: break;
        case 43: 
          { return TaraTypes.NATIVE_TYPE;
          }
        case 82: break;
        case 34: 
          { return TaraTypes.DATE_TYPE;
          }
        case 83: break;
        case 40: 
          { return TaraTypes.EMPTY_REF;
          }
        case 84: break;
        case 3: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 85: break;
        case 60: 
          { return TaraTypes.REQUIRED;
          }
        case 86: break;
        case 54: 
          { return TaraTypes.FEATURE;
          }
        case 87: break;
        case 22: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 88: break;
        case 12: 
          { return TaraTypes.DSL;
          }
        case 89: break;
        case 35: 
          { return TaraTypes.ROOT;
          }
        case 90: break;
        case 23: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 91: break;
        case 50: 
          { return TaraTypes.EXTENDS;
          }
        case 92: break;
        case 21: 
          { yybegin(MULTILINE); return TaraTypes.QUOTE_BEGIN;
          }
        case 93: break;
        case 56: 
          { return TaraTypes.PROPERTY;
          }
        case 94: break;
        case 2: 
          { return evaluateIdentifier();
          }
        case 95: break;
        case 46: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 96: break;
        case 7: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 97: break;
        case 15: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 98: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 99: break;
        case 36: 
          { return TaraTypes.INTO;
          }
        case 100: break;
        case 8: 
          { return TaraTypes.MEASURE_VALUE;
          }
        case 101: break;
        case 39: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 102: break;
        case 33: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 103: break;
        case 32: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 104: break;
        case 19: 
          { return TaraTypes.AS;
          }
        case 105: break;
        case 18: 
          { return TaraTypes.ON;
          }
        case 106: break;
        case 24: 
          { return TaraTypes.SUB;
          }
        case 107: break;
        case 59: 
          { return TaraTypes.READONLY;
          }
        case 108: break;
        case 55: 
          { return TaraTypes.ENCLOSED;
          }
        case 109: break;
        case 13: 
          { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
          }
        case 110: break;
        case 51: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 111: break;
        case 27: 
          { loadHeritage();  return TaraTypes.DSL;
          }
        case 112: break;
        case 20: 
          { return TaraTypes.IS;
          }
        case 113: break;
        case 53: 
          { return TaraTypes.MEASURE_TYPE_KEY;
          }
        case 114: break;
        case 25: 
          { return TaraTypes.USE;
          }
        case 115: break;
        case 52: 
          { return TaraTypes.INT_TYPE;
          }
        case 116: break;
        case 48: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 117: break;
        case 37: 
          { return TaraTypes.WORD_KEY;
          }
        case 118: break;
        case 16: 
          { return TaraTypes.CHARACTER;
          }
        case 119: break;
        case 42: 
          { return TaraTypes.FACET;
          }
        case 120: break;
        case 9: 
          { return TaraTypes.COMMA;
          }
        case 121: break;
        case 26: 
          { return TaraTypes.HAS;
          }
        case 122: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
