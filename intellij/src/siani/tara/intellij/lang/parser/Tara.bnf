{
	parserClass='siani.tara.intellij.lang.parser.TaraParser'
	parserUtilClass="siani.tara.intellij.lang.parser.TaraParserUtil"
	psiVisitorName="TaraVisitor"
	extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
	implements='siani.tara.intellij.lang.psi.TaraPsiElement'
	psiClassPrefix='Tara'
	psiImplClassSuffix='Impl'
	psiPackage='siani.tara.intellij.lang.psi'
	psiImplPackage='siani.tara.intellij.lang.psi.impl'

	elementTypeHolderClass='siani.tara.intellij.lang.psi.TaraTypes'
	elementTypeClass='siani.tara.intellij.lang.psi.TaraElementType'
	tokenTypeClass='siani.tara.intellij.lang.psi.TaraTokenType'

	psiImplUtilClass='siani.tara.intellij.lang.psi.impl.TaraPsiImplUtil'
}

root ::= NEWLINE* dslDeclaration? imports? (node NEWLINE+)*

dslDeclaration ::= DSL (PROTEO | headerReference) NEWLINE+

imports ::= (anImport NEWLINE*)+

anImport ::= USE headerReference NEWLINE {
	mixin= 'siani.tara.intellij.lang.psi.impl.ImportMixin'
    implements='siani.tara.intellij.lang.psi.Import'
}

doc::= DOC_LINE+ {
	mixin= 'siani.tara.intellij.lang.psi.impl.DocMixin'
	implements='siani.tara.intellij.lang.psi.Doc'
}

node ::= signature body? {
	pin = 1
	mixin= 'siani.tara.intellij.lang.psi.impl.NodeMixin'
	implements='siani.tara.intellij.lang.psi.Node'
}

signature::= (subNode | metaIdentifier parameters? identifier? parent?) annotations? address? {
	pin = 1
	mixin= 'siani.tara.intellij.lang.psi.impl.SignatureMixin'
	implements='siani.tara.intellij.lang.psi.Signature'
}

address::= ADDRESS_VALUE
{pin = 1}

private subNode ::= SUB parameters? identifier
{pin = 1}

private parent ::= EXTENDS identifierReference
{pin = 1}

parameters ::= LEFT_PARENTHESIS (explicitParameters | implicitParameters)? RIGHT_PARENTHESIS {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.ParametersMixin'
	implements = 'siani.tara.intellij.lang.psi.Parameters'
}

private explicitParameters ::= explicitParameter (COMMA explicitParameter)*
{ pin = 2}

private implicitParameters ::= implicitParameter (COMMA implicitParameter)*
{ pin = 1}

explicitParameter ::= identifier EQUALS value {
    pin = 2
	mixin = 'siani.tara.intellij.lang.psi.impl.ParameterMixin'
	implements = 'siani.tara.intellij.lang.psi.Parameter'
}

implicitParameter ::= value {
    mixin = 'siani.tara.intellij.lang.psi.impl.ParameterMixin'
    implements = 'siani.tara.intellij.lang.psi.Parameter'
}



body ::= (NEW_LINE_INDENT | INLINE) (nodeConstituents NEWLINE+)+ DEDENT {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.BodyMixin'
	implements = 'siani.tara.intellij.lang.psi.Body'
}

private nodeConstituents ::= varInit | variable | node | facetTarget | facetApply | nodeReference | doc

nodeReference ::= HAS identifierReference annotations?
{
	pin = 2
	mixin = 'siani.tara.intellij.lang.psi.impl.NodeReferenceMixin'
	implements = 'siani.tara.intellij.lang.psi.NodeReference'
}

variable ::= VAR variableType attributeType? (LIST | count)? IDENTIFIER_KEY (word | (EQUALS value measureValue?))? annotations? {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.VariableMixin'
	implements = 'siani.tara.intellij.lang.psi.Variable'
}

variableType::= NATURAL_TYPE
                | INT_TYPE
                | BOOLEAN_TYPE
                | STRING_TYPE
                | DATE_TYPE
                | RATIO_TYPE
                | DOUBLE_TYPE
                | MEASURE_TYPE_KEY
                | WORD_KEY
                | RESOURCE_KEY
                | identifierReference

count ::= LEFT_SQUARE NATURAL_VALUE_KEY RIGHT_SQUARE

word ::= NEW_LINE_INDENT (IDENTIFIER_KEY STAR? NEWLINE)+ DEDENT {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.WordMixin'
	implements = 'siani.tara.intellij.lang.psi.Word'
}

attributeType ::= COLON measureType
{pin=1}
measureType     ::= MEASURE_VALUE_KEY | IDENTIFIER_KEY {
	implements = 'siani.tara.intellij.lang.psi.MeasureType'
}

value ::= identifierReference+
		| stringValue+
        | booleanValue+
        | linkValue+
        | naturalValue+ measureValue?
        | integerValue+ measureValue?
        | doubleValue+  measureValue?
        | emptyField
{
mixin = 'siani.tara.intellij.lang.psi.impl.ValueMixin'
    implements = 'siani.tara.intellij.lang.psi.Value'
}

stringValue     ::= (QUOTE_BEGIN CHARACTER* QUOTE_END) | (NEWLINE? STRING_MULTILINE_VALUE_KEY)
booleanValue    ::= BOOLEAN_VALUE_KEY
naturalValue    ::= NATURAL_VALUE_KEY
integerValue    ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY
doubleValue     ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY | DOUBLE_VALUE_KEY
linkValue       ::= ADDRESS_VALUE | identifierReference
measureValue    ::= IDENTIFIER_KEY | MEASURE_VALUE_KEY

facetApply ::= AS metaIdentifier parameters? (WITH metaIdentifier)? body? {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.FacetApplyMixin'
    implements = 'siani.tara.intellij.lang.psi.FacetApply'
}

facetTarget ::= ON identifierReference ALWAYS? body?
{pin = 1}

annotations ::= IS annotation+ {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.AnnotationsMixin'
	implements = 'siani.tara.intellij.lang.psi.Annotations'
}

annotation ::= PLUS? (ABSTRACT | TERMINAL | SINGLE | REQUIRED | NAMED
	| COMPONENT | ROOT | FACET | INTENTION | PROPERTY | ENCLOSED | ADDRESSED | AGGREGATED | TACIT | ASSOCIATED | READONLY | CASE) {
	pin = 2
	mixin = 'siani.tara.intellij.lang.psi.impl.AnnotationMixin'
	implements = 'siani.tara.intellij.lang.psi.Annotation'
}

varInit ::= IDENTIFIER_KEY EQUALS value {
    pin = 2
	mixin = 'siani.tara.intellij.lang.psi.impl.VarInitMixin'
	implements = 'siani.tara.intellij.lang.psi.VarInit'
}


emptyField ::= EMPTY_REF

headerReference ::= hierarchy* identifier {
	pin = 2
	mixin = 'siani.tara.intellij.lang.psi.impl.IdentifierReferenceMixin'
	implements = 'siani.tara.intellij.lang.psi.HeaderReference'
}

identifierReference ::= hierarchy* identifier {
	pin = 2
	mixin = 'siani.tara.intellij.lang.psi.impl.IdentifierReferenceMixin'
	implements = 'siani.tara.intellij.lang.psi.IdentifierReference'
}

private hierarchy ::= identifier DOT
{pin = 2}

identifier ::=  IDENTIFIER_KEY {
	mixin = 'siani.tara.intellij.lang.psi.impl.IdentifierMixin'
	implements = 'siani.tara.intellij.lang.psi.Identifier'
}

metaIdentifier ::= METAIDENTIFIER_KEY | IDENTIFIER_KEY {
	mixin = 'siani.tara.intellij.lang.psi.impl.MetaIdentifierMixin'
	implements = 'siani.tara.intellij.lang.psi.MetaIdentifier'
}
