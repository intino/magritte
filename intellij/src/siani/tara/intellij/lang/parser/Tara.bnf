{
	parserClass='siani.tara.intellij.lang.parser.TaraParser'
	parserUtilClass="siani.tara.intellij.lang.parser.TaraParserUtil"
	psiVisitorName="TaraVisitor"
	extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
	implements='siani.tara.intellij.lang.psi.TaraPsiElement'
	psiClassPrefix='Tara'
	psiImplClassSuffix='Impl'
	psiPackage='siani.tara.intellij.lang.psi'
	psiImplPackage='siani.tara.intellij.lang.psi.impl'

	elementTypeHolderClass='siani.tara.intellij.lang.psi.TaraTypes'
	elementTypeClass='siani.tara.intellij.lang.psi.TaraElementType'
	tokenTypeClass='siani.tara.intellij.lang.psi.TaraTokenType'

	psiImplUtilClass='siani.tara.intellij.lang.psi.impl.TaraPsiImplUtil'
}

root ::= NEWLINE* header? NEWLINE* concept?  NEWLINE*

header ::=  namespace NEWLINE+ packet? importStatement*

namespace ::= NAMESPACE_KEY IDENTIFIER_KEY
packet ::= PACKAGE (module COLON)? headerReference
importStatement ::= NEWLINE IMPORT_KEY headerReference {
	mixin= 'siani.tara.intellij.lang.psi.impl.ImportMixin'
	implements='siani.tara.intellij.lang.psi.Import'
}

module ::= (IDENTIFIER_KEY DOT)* IDENTIFIER_KEY

doc::= DOC_LINE+ {
	mixin= 'siani.tara.intellij.lang.psi.impl.DocMixin'
	implements='siani.tara.intellij.lang.psi.Doc'
}

concept ::= doc? signature annotations? body? {
	pin = 2
	mixin= 'siani.tara.intellij.lang.psi.impl.ConceptMixin'
	implements='siani.tara.intellij.lang.psi.Concept'
}

base::= BASE_KEY

signature::= ((CASE_KEY identifier) | withHeritage | (metaIdentifier base? identifier)) parameters? {
	pin=1
	mixin= 'siani.tara.intellij.lang.psi.impl.SignatureMixin'
	implements='siani.tara.intellij.lang.psi.Signature'
}

private withHeritage ::= metaIdentifier COLON identifierReference base? identifier?


parameters ::= LEFT_PARENTHESIS parameterList? RIGHT_PARENTHESIS {
	pin = 3
	mixin = 'siani.tara.intellij.lang.psi.impl.ParametersMixin'
	implements = 'siani.tara.intellij.lang.psi.Parameters'
}

private parameterList ::= explicit? parameter (COMMA explicit? parameter)*
{ pin=2}

explicit::= identifier COLON
{ pin=2}

parameter ::=     (identifierReference)
				| (stringValue
		        | booleanValue
		        | naturalValue
		        | integerValue
		        | doubleValue
		        | stringList
		        | booleanList
		        | naturalList
		        | integerList
		        | doubleList
		        | identifierList
		        | metaWord
		        | empty) {
    pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.ParameterMixin'
	implements = 'siani.tara.intellij.lang.psi.Parameter'
}

metaWord ::= metaIdentifier metaWordNames* {
	pin = 1
}
private metaWordNames ::= DOT identifier
{pin = 1}

empty::=

body ::= NEW_LINE_INDENT (conceptConstituents NEWLINE+)+ DEDENT {
	pin = 2
	mixin= 'siani.tara.intellij.lang.psi.impl.BodyMixin'
	implements='siani.tara.intellij.lang.psi.Body'
}

private conceptConstituents ::= attribute | concept | varInit

attribute ::= doc? (aliasAttribute | naturalAttribute | integerAttribute | doubleAttribute | booleanAttribute | stringAttribute
                        | resource | referenceAttribute | word) annotations? {
	pin=2
	mixin= 'siani.tara.intellij.lang.psi.impl.AttributeMixin'
	implements='siani.tara.intellij.lang.psi.Attribute'
}

private aliasAttribute           ::= VAR ALIAS_TYPE     IDENTIFIER_KEY (COLON stringValue)?   {pin=2}
private booleanAttribute         ::= VAR BOOLEAN_TYPE   IDENTIFIER_KEY (COLON booleanValue)?  {pin=2}
private stringAttribute          ::= VAR STRING_TYPE    IDENTIFIER_KEY (COLON stringValue)?   {pin=2}
private naturalAttribute         ::= VAR NATURAL_TYPE   IDENTIFIER_KEY (COLON naturalValue)?  {pin=2}
private integerAttribute         ::= VAR INT_TYPE       IDENTIFIER_KEY (COLON integerValue)?  {pin=2}
private doubleAttribute          ::= VAR DOUBLE_TYPE    IDENTIFIER_KEY (COLON doubleValue)?   {pin=2}
private resource                 ::= VAR RESOURCE_KEY COLON IDENTIFIER_KEY IDENTIFIER_KEY     {pin=2}
private referenceAttribute       ::= VAR identifierReference IDENTIFIER_KEY {
	pin = 2
	mixin= 'siani.tara.intellij.lang.psi.impl.ReferenceStatementMixin'
	implements='siani.tara.intellij.lang.psi.ReferenceStatement'
}

stringValue    ::= STRING_VALUE_KEY  | STRING_MULTILINE_VALUE_KEY
booleanValue   ::= BOOLEAN_VALUE_KEY
naturalValue   ::= NATURAL_VALUE_KEY
integerValue   ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY
doubleValue    ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY | DOUBLE_VALUE_KEY

stringList     ::= LEFT_SQUARE stringValue+ RIGHT_SQUARE
booleanList    ::= LEFT_SQUARE booleanValue+ RIGHT_SQUARE
naturalList    ::= LEFT_SQUARE naturalValue+ RIGHT_SQUARE
integerList    ::= LEFT_SQUARE integerValue+ RIGHT_SQUARE
doubleList     ::= LEFT_SQUARE doubleValue+ RIGHT_SQUARE
identifierList ::= LEFT_SQUARE identifier+ RIGHT_SQUARE;


word ::= doc? VAR WORD_KEY IDENTIFIER_KEY NEW_LINE_INDENT (IDENTIFIER_KEY NEWLINE)+ DEDENT {
	pin = 3
	mixin = 'siani.tara.intellij.lang.psi.impl.WordMixin'
	implements ='siani.tara.intellij.lang.psi.Word'
}

annotations ::= OPEN_AN (ABSTRACT | TERMINAL | MULTIPLE | REQUIRED | HAS_NAME | intention | ROOT)+ CLOSE_AN {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.AnnotationsMixin'
	implements = 'siani.tara.intellij.lang.psi.Annotations'
}

varInit ::= IDENTIFIER_KEY COLON ( identifierReference
								 | stringValue
                                 | booleanValue
                                 | naturalValue
                                 | integerValue
                                 | doubleValue
                                 | identifierList
                                 | stringList
                                 | booleanList
                                 | naturalList
                                 | integerList
                                 | doubleList)
{pin=2}
intention ::= INTENTION_KEY {
	pin=1
	mixin= 'siani.tara.intellij.lang.psi.impl.ExternalReferenceMixin'
	implements='siani.tara.intellij.lang.psi.ExternalReference'
}

headerReference ::= hierarchy* identifier {
	pin=2
	mixin= 'siani.tara.intellij.lang.psi.impl.IdentifierReferenceMixin'
	implements='siani.tara.intellij.lang.psi.HeaderReference'
}

identifierReference::= hierarchy* identifier {
	pin=2
	mixin= 'siani.tara.intellij.lang.psi.impl.IdentifierReferenceMixin'
	implements='siani.tara.intellij.lang.psi.IdentifierReference'
}

private hierarchy ::= identifier DOT
{pin=2}

identifier::=  IDENTIFIER_KEY {
	mixin= 'siani.tara.intellij.lang.psi.impl.IdentifierMixin'
	implements='siani.tara.intellij.lang.psi.Identifier'
}

metaIdentifier ::= METAIDENTIFIER_KEY | IDENTIFIER_KEY {
	mixin= 'siani.tara.intellij.lang.psi.impl.MetaIdentifierMixin'
	implements='siani.tara.intellij.lang.psi.MetaIdentifier'
}