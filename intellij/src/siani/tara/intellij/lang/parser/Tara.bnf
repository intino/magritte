{
	parserClass='siani.tara.intellij.lang.parser.TaraParser'
	parserUtilClass="siani.tara.intellij.lang.parser.TaraParserUtil"
	psiVisitorName="TaraVisitor"
	extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
	implements='siani.tara.intellij.lang.psi.TaraPsiElement'
	psiClassPrefix='Tara'
	psiImplClassSuffix='Impl'
	psiPackage='siani.tara.intellij.lang.psi'
	psiImplPackage='siani.tara.intellij.lang.psi.impl'

	elementTypeHolderClass='siani.tara.intellij.lang.psi.TaraTypes'
	elementTypeClass='siani.tara.intellij.lang.psi.TaraElementType'
	tokenTypeClass='siani.tara.intellij.lang.psi.TaraTokenType'

	psiImplUtilClass='siani.tara.intellij.lang.psi.impl.TaraPsiImplUtil'
}

root ::= NEWLINE* header? NEWLINE+ (concept  NEWLINE*)*

header ::= box?  imports?

box ::= BOX_KEY headerReference

private imports ::= anImport+

anImport ::= NEWLINE+ USE_KEY headerReference  (AS METAMODEL)? {
	mixin= 'siani.tara.intellij.lang.psi.impl.ImportMixin'
    implements='siani.tara.intellij.lang.psi.Import'
}

doc::= DOC_LINE+ {
	mixin= 'siani.tara.intellij.lang.psi.impl.DocMixin'
	implements='siani.tara.intellij.lang.psi.Doc'
}

concept ::= doc? signature annotations? body? {
	pin = 2
	mixin= 'siani.tara.intellij.lang.psi.impl.ConceptMixin'
	implements='siani.tara.intellij.lang.psi.Concept'
}

signature::= ((CASE_KEY identifier)
			| withHeritage
			| (metaIdentifier identifier) | IDENTIFIER_KEY ) parameters? {
	pin=1
	mixin= 'siani.tara.intellij.lang.psi.impl.SignatureMixin'
	implements='siani.tara.intellij.lang.psi.Signature'
}

private withHeritage ::= metaIdentifier COLON identifierReference identifier?

parameters ::= LEFT_PARENTHESIS parameterList? RIGHT_PARENTHESIS {
	pin = 3
	mixin = 'siani.tara.intellij.lang.psi.impl.ParametersMixin'
	implements = 'siani.tara.intellij.lang.psi.Parameters'
}

private parameterList ::= explicit? parameter (COMMA explicit? parameter)*
{ pin=2}

explicit::= identifier EQUALS
{ pin=2}

parameter ::=   identifierReference+
				| stringValue+
		        | booleanValue+
		        | naturalValue+
		        | integerValue+
		        | doubleValue+
		        | metaWord
		        | empty {
    pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.ParameterMixin'
	implements = 'siani.tara.intellij.lang.psi.Parameter'
}

metaWord ::= metaIdentifier metaWordNames*
{pin = 1}
private metaWordNames ::= DOT identifier
{pin = 1}

empty::=

body ::= NEW_LINE_INDENT (conceptConstituents NEWLINE+)+ DEDENT {
	pin = 2
	mixin= 'siani.tara.intellij.lang.psi.impl.BodyMixin'
	implements='siani.tara.intellij.lang.psi.Body'
}

private conceptConstituents ::= attribute | concept | varInit | facetApply | facetTarget

facetApply ::= IS identifierReference parameters? (WITH identifierReference)?
{pin = 1}
facetTarget ::= ON identifierReference body?
{pin = 1}
attribute ::= doc? VAR (aliasAttribute | naturalAttribute | integerAttribute | doubleAttribute | booleanAttribute | stringAttribute | dateAttribute
                        | locationAttribute | resource | referenceAttribute | word) annotations? {
	pin=2
	mixin= 'siani.tara.intellij.lang.psi.impl.AttributeMixin'
	implements='siani.tara.intellij.lang.psi.Attribute'
}

private resource             ::= RESOURCE_KEY EQUALS IDENTIFIER_KEY IDENTIFIER_KEY                         {pin=1}
private locationAttribute    ::= LOCATION_TYPE       IDENTIFIER_KEY (EQUALS (naturalValue | emptyField))?   {pin=1}
private aliasAttribute       ::= ALIAS_TYPE   LIST?  IDENTIFIER_KEY (EQUALS (stringValue  | emptyField))?   {pin=1}
private booleanAttribute     ::= BOOLEAN_TYPE LIST?  IDENTIFIER_KEY (EQUALS (booleanValue | emptyField))?   {pin=1}
private stringAttribute      ::= STRING_TYPE  LIST?  IDENTIFIER_KEY (EQUALS (stringValue  | emptyField))?   {pin=1}
private naturalAttribute     ::= NATURAL_TYPE LIST?  IDENTIFIER_KEY (EQUALS (naturalValue | emptyField))?   {pin=1}
private integerAttribute     ::= INT_TYPE     LIST?  IDENTIFIER_KEY (EQUALS (integerValue | emptyField))?   {pin=1}
private doubleAttribute      ::= DOUBLE_TYPE  LIST?  IDENTIFIER_KEY (EQUALS (doubleValue  | emptyField))?   {pin=1}
private dateAttribute        ::= DATE_TYPE    LIST?  IDENTIFIER_KEY (EQUALS (naturalValue | emptyField))?   {pin=1}
private referenceAttribute   ::= identifierReference LIST? IDENTIFIER_KEY (EQUALS emptyField)? {
	pin = 1
	mixin= 'siani.tara.intellij.lang.psi.impl.ReferenceStatementMixin'
	implements='siani.tara.intellij.lang.psi.ReferenceStatement'
}
word ::= WORD_KEY IDENTIFIER_KEY NEW_LINE_INDENT (IDENTIFIER_KEY STAR? NEWLINE)+ DEDENT {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.WordMixin'
	implements ='siani.tara.intellij.lang.psi.Word'
}

stringValue    ::= STRING_VALUE_KEY  | STRING_MULTILINE_VALUE_KEY
booleanValue   ::= BOOLEAN_VALUE_KEY
naturalValue   ::= NATURAL_VALUE_KEY
integerValue   ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY
doubleValue    ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY | DOUBLE_VALUE_KEY

annotations ::= IS (PRIVATE | TERMINAL | SINGLE | REQUIRED | NAMEABLE | ROOT | PROPERTY)+ {
	pin = 1
	mixin = 'siani.tara.intellij.lang.psi.impl.AnnotationsMixin'
	implements = 'siani.tara.intellij.lang.psi.Annotations'
}

varInit ::= IDENTIFIER_KEY EQUALS ( emptyField
								 | identifierReference+
								 | stringValue+
                                 | booleanValue+
                                 | naturalValue+
                                 | integerValue+
                                 | doubleValue+)
{pin=2}
emptyField ::= EMPTY_REF

headerReference ::= hierarchy* identifier {
	pin=2
	mixin= 'siani.tara.intellij.lang.psi.impl.IdentifierReferenceMixin'
	implements='siani.tara.intellij.lang.psi.HeaderReference'
}

identifierReference ::= hierarchy* identifier {
	pin=2
	mixin= 'siani.tara.intellij.lang.psi.impl.IdentifierReferenceMixin'
	implements='siani.tara.intellij.lang.psi.IdentifierReference'
}

private hierarchy ::= identifier DOT
{pin=2}

identifier ::=  IDENTIFIER_KEY {
	mixin= 'siani.tara.intellij.lang.psi.impl.IdentifierMixin'
	implements='siani.tara.intellij.lang.psi.Identifier'
}

metaIdentifier ::= METAIDENTIFIER_KEY | IDENTIFIER_KEY | INTENTION_KEY {
	mixin= 'siani.tara.intellij.lang.psi.impl.MetaIdentifierMixin'
	implements='siani.tara.intellij.lang.psi.MetaIdentifier'
}