/* The following code was generated by JFlex 1.4.3 on 9/06/14 12:18 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/06/14 12:18 from the specification file
 * <tt>/Users/oroncal/workspace/sandbox/system/compile-server/test_2e78763/taraStubs/Test/java-production/src/intellij/tpl/lexer.flex</tt>
 */
class GorosLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\60\1\1\1\2\3\0\16\60\4\0\1\1\1\0\1\42\1\0"+
    "\1\57\2\0\1\55\1\32\1\33\1\0\1\45\1\37\1\46\1\36"+
    "\1\0\12\56\1\40\1\41\1\43\1\0\1\44\2\0\1\47\1\54"+
    "\1\70\1\52\1\66\1\71\1\101\1\73\1\50\1\57\1\74\1\76"+
    "\1\63\1\51\1\67\1\64\1\57\1\26\1\53\1\61\1\57\1\77"+
    "\1\23\3\57\1\30\1\0\1\31\1\0\1\57\1\0\1\11\1\17"+
    "\1\12\1\24\1\15\1\20\1\14\1\62\1\3\1\57\1\13\1\22"+
    "\1\4\1\21\1\6\1\5\1\75\1\7\1\16\1\10\1\27\1\25"+
    "\1\72\1\100\1\65\1\57\1\34\1\0\1\35\1\0\41\60\2\0"+
    "\4\57\4\0\1\57\2\0\1\60\7\0\1\57\4\0\1\57\5\0"+
    "\27\57\1\0\37\57\1\0\u01ca\57\4\0\14\57\16\0\5\57\7\0"+
    "\1\57\1\0\1\57\21\0\160\60\5\57\1\0\2\57\2\0\4\57"+
    "\10\0\1\57\1\0\3\57\1\0\1\57\1\0\24\57\1\0\123\57"+
    "\1\0\213\57\1\0\5\60\2\0\236\57\11\0\46\57\2\0\1\57"+
    "\7\0\47\57\11\0\55\60\1\0\1\60\1\0\2\60\1\0\2\60"+
    "\1\0\1\60\10\0\33\57\5\0\3\57\15\0\4\60\7\0\1\57"+
    "\4\0\13\60\5\0\53\57\25\60\12\56\4\0\2\57\1\60\143\57"+
    "\1\0\1\57\10\60\1\0\6\60\2\57\2\60\1\0\4\60\2\57"+
    "\12\56\3\57\2\0\1\57\17\0\1\60\1\57\1\60\36\57\33\60"+
    "\2\0\131\57\13\60\1\57\16\0\12\56\41\57\11\60\2\57\4\0"+
    "\1\57\5\0\26\57\4\60\1\57\11\60\1\57\3\60\1\57\5\60"+
    "\22\0\31\57\3\60\244\0\4\60\66\57\3\60\1\57\22\60\1\57"+
    "\7\60\12\57\2\60\2\0\12\56\1\0\7\57\1\0\7\57\1\0"+
    "\3\60\1\0\10\57\2\0\2\57\2\0\26\57\1\0\7\57\1\0"+
    "\1\57\3\0\4\57\2\0\1\60\1\57\7\60\2\0\2\60\2\0"+
    "\3\60\1\57\10\0\1\60\4\0\2\57\1\0\3\57\2\60\2\0"+
    "\12\56\4\57\7\0\1\57\5\0\3\60\1\0\6\57\4\0\2\57"+
    "\2\0\26\57\1\0\7\57\1\0\2\57\1\0\2\57\1\0\2\57"+
    "\2\0\1\60\1\0\5\60\4\0\2\60\2\0\3\60\3\0\1\60"+
    "\7\0\4\57\1\0\1\57\7\0\12\56\2\60\3\57\1\60\13\0"+
    "\3\60\1\0\11\57\1\0\3\57\1\0\26\57\1\0\7\57\1\0"+
    "\2\57\1\0\5\57\2\0\1\60\1\57\10\60\1\0\3\60\1\0"+
    "\3\60\2\0\1\57\17\0\2\57\2\60\2\0\12\56\1\0\1\57"+
    "\17\0\3\60\1\0\10\57\2\0\2\57\2\0\26\57\1\0\7\57"+
    "\1\0\2\57\1\0\5\57\2\0\1\60\1\57\7\60\2\0\2\60"+
    "\2\0\3\60\10\0\2\60\4\0\2\57\1\0\3\57\2\60\2\0"+
    "\12\56\1\0\1\57\20\0\1\60\1\57\1\0\6\57\3\0\3\57"+
    "\1\0\4\57\3\0\2\57\1\0\1\57\1\0\2\57\3\0\2\57"+
    "\3\0\3\57\3\0\14\57\4\0\5\60\3\0\3\60\1\0\4\60"+
    "\2\0\1\57\6\0\1\60\16\0\12\56\11\0\1\57\7\0\3\60"+
    "\1\0\10\57\1\0\3\57\1\0\27\57\1\0\12\57\1\0\5\57"+
    "\3\0\1\57\7\60\1\0\3\60\1\0\4\60\7\0\2\60\1\0"+
    "\2\57\6\0\2\57\2\60\2\0\12\56\22\0\2\60\1\0\10\57"+
    "\1\0\3\57\1\0\27\57\1\0\12\57\1\0\5\57\2\0\1\60"+
    "\1\57\7\60\1\0\3\60\1\0\4\60\7\0\2\60\7\0\1\57"+
    "\1\0\2\57\2\60\2\0\12\56\1\0\2\57\17\0\2\60\1\0"+
    "\10\57\1\0\3\57\1\0\51\57\2\0\1\57\7\60\1\0\3\60"+
    "\1\0\4\60\1\57\10\0\1\60\10\0\2\57\2\60\2\0\12\56"+
    "\12\0\6\57\2\0\2\60\1\0\22\57\3\0\30\57\1\0\11\57"+
    "\1\0\1\57\2\0\7\57\3\0\1\60\4\0\6\60\1\0\1\60"+
    "\1\0\10\60\22\0\2\60\15\0\60\57\1\60\2\57\7\60\4\0"+
    "\10\57\10\60\1\0\12\56\47\0\2\57\1\0\1\57\2\0\2\57"+
    "\1\0\1\57\2\0\1\57\6\0\4\57\1\0\7\57\1\0\3\57"+
    "\1\0\1\57\1\0\1\57\2\0\2\57\1\0\4\57\1\60\2\57"+
    "\6\60\1\0\2\60\1\57\2\0\5\57\1\0\1\57\1\0\6\60"+
    "\2\0\12\56\2\0\2\57\42\0\1\57\27\0\2\60\6\0\12\56"+
    "\13\0\1\60\1\0\1\60\1\0\1\60\4\0\2\60\10\57\1\0"+
    "\44\57\4\0\24\60\1\0\2\60\5\57\13\60\1\0\44\60\11\0"+
    "\1\60\71\0\53\57\24\60\1\57\12\56\6\0\6\57\4\60\4\57"+
    "\3\60\1\57\3\60\2\57\7\60\3\57\4\60\15\57\14\60\1\57"+
    "\1\60\12\56\4\60\2\0\46\57\12\0\53\57\1\0\1\57\3\0"+
    "\u0149\57\1\0\4\57\2\0\7\57\1\0\1\57\1\0\4\57\2\0"+
    "\51\57\1\0\4\57\2\0\41\57\1\0\4\57\2\0\7\57\1\0"+
    "\1\57\1\0\4\57\2\0\17\57\1\0\71\57\1\0\4\57\2\0"+
    "\103\57\2\0\3\60\40\0\20\57\20\0\125\57\14\0\u026c\57\2\0"+
    "\21\57\1\0\32\57\5\0\113\57\3\0\3\57\17\0\15\57\1\0"+
    "\4\57\3\60\13\0\22\57\3\60\13\0\22\57\2\60\14\0\15\57"+
    "\1\0\3\57\1\0\2\60\14\0\64\57\40\60\3\0\1\57\3\0"+
    "\2\57\1\60\2\0\12\56\41\0\3\60\2\0\12\56\6\0\130\57"+
    "\10\0\51\57\1\60\1\57\5\0\106\57\12\0\35\57\3\0\14\60"+
    "\4\0\14\60\12\0\12\56\36\57\2\0\5\57\13\0\54\57\4\0"+
    "\21\60\7\57\2\60\6\0\12\56\46\0\27\57\5\60\4\0\65\57"+
    "\12\60\1\0\35\60\2\0\1\60\12\56\6\0\12\56\15\0\1\57"+
    "\130\0\5\60\57\57\21\60\7\57\4\0\12\56\21\0\11\60\14\0"+
    "\3\60\36\57\12\60\3\0\2\57\12\56\6\0\46\57\16\60\14\0"+
    "\44\57\24\60\10\0\12\56\3\0\3\57\12\56\44\57\122\0\3\60"+
    "\1\0\25\60\4\57\1\60\4\57\1\60\15\0\300\57\47\60\25\0"+
    "\4\60\u0116\57\2\0\6\57\2\0\46\57\2\0\6\57\2\0\10\57"+
    "\1\0\1\57\1\0\1\57\1\0\1\57\1\0\37\57\2\0\65\57"+
    "\1\0\7\57\1\0\1\57\3\0\3\57\1\0\7\57\3\0\4\57"+
    "\2\0\6\57\4\0\15\57\5\0\3\57\1\0\7\57\16\0\5\60"+
    "\32\0\5\60\20\0\2\57\23\0\1\57\13\0\5\60\5\0\6\60"+
    "\1\0\1\57\15\0\1\57\20\0\15\57\3\0\32\57\26\0\15\60"+
    "\4\0\1\60\3\0\14\60\21\0\1\57\4\0\1\57\2\0\12\57"+
    "\1\0\1\57\3\0\5\57\6\0\1\57\1\0\1\57\1\0\1\57"+
    "\1\0\4\57\1\0\13\57\2\0\4\57\5\0\5\57\4\0\1\57"+
    "\21\0\51\57\u0a77\0\57\57\1\0\57\57\1\0\205\57\6\0\4\57"+
    "\3\60\16\0\46\57\12\0\66\57\11\0\1\57\17\0\1\60\27\57"+
    "\11\0\7\57\1\0\7\57\1\0\7\57\1\0\7\57\1\0\7\57"+
    "\1\0\7\57\1\0\7\57\1\0\7\57\1\0\40\60\57\0\1\57"+
    "\u01d5\0\3\57\31\0\11\57\6\60\1\0\5\57\2\0\5\57\4\0"+
    "\126\57\2\0\2\60\2\0\3\57\1\0\132\57\1\0\4\57\5\0"+
    "\51\57\3\0\136\57\21\0\33\57\65\0\20\57\u0200\0\u19b6\57\112\0"+
    "\u51cc\57\64\0\u048d\57\103\0\56\57\2\0\u010d\57\3\0\20\57\12\56"+
    "\2\57\24\0\57\57\1\60\14\0\2\60\1\0\31\57\10\0\120\57"+
    "\2\60\45\0\11\57\2\0\147\57\2\0\4\57\1\0\2\57\16\0"+
    "\12\57\120\0\10\57\1\60\3\57\1\60\4\57\1\60\27\57\5\60"+
    "\20\0\1\57\7\0\64\57\14\0\2\60\62\57\21\60\13\0\12\56"+
    "\6\0\22\60\6\57\3\0\1\57\4\0\12\56\34\57\10\60\2\0"+
    "\27\57\15\60\14\0\35\57\3\0\4\60\57\57\16\60\16\0\1\57"+
    "\12\56\46\0\51\57\16\60\11\0\3\57\1\60\10\57\2\60\2\0"+
    "\12\56\6\0\27\57\3\0\1\57\1\60\4\0\60\57\1\60\1\57"+
    "\3\60\2\57\2\60\5\57\2\60\1\57\1\60\1\57\30\0\3\57"+
    "\43\0\6\57\2\0\6\57\2\0\6\57\11\0\7\57\1\0\7\57"+
    "\221\0\43\57\10\60\1\0\2\60\2\0\12\56\6\0\u2ba4\57\14\0"+
    "\27\57\4\0\61\57\u2104\0\u012e\57\2\0\76\57\2\0\152\57\46\0"+
    "\7\57\14\0\5\57\5\0\1\57\1\60\12\57\1\0\15\57\1\0"+
    "\5\57\1\0\1\57\1\0\2\57\1\0\2\57\1\0\154\57\41\0"+
    "\u016b\57\22\0\100\57\2\0\66\57\50\0\15\57\3\0\20\60\20\0"+
    "\7\60\14\0\2\57\30\0\3\57\31\0\1\57\6\0\5\57\1\0"+
    "\207\57\2\0\1\60\4\0\1\57\13\0\12\56\7\0\32\57\4\0"+
    "\1\57\1\0\32\57\13\0\131\57\3\0\6\57\2\0\6\57\2\0"+
    "\6\57\2\0\3\57\3\0\2\57\3\0\2\57\22\0\3\60\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\13\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\1"+
    "\1\17\1\20\2\1\6\4\1\1\1\21\13\4\1\3"+
    "\14\4\1\22\1\0\1\23\1\24\14\4\1\0\1\25"+
    "\1\0\40\4\1\26\6\4\1\27\14\4\1\30\1\4"+
    "\1\31\26\4\1\32\1\4\1\33\1\34\1\4\1\35"+
    "\1\31\42\4\1\36\3\4\1\37\30\4\1\40\13\4"+
    "\1\41\2\4\1\42\11\4\1\43\7\4\1\44\1\4"+
    "\1\45\3\4\1\46\1\47\30\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\u0420\0\102\0\102\0\u0462\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\102\0\u0420"+
    "\0\102\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u0672\0\102"+
    "\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e"+
    "\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e"+
    "\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e"+
    "\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u014a\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c"+
    "\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1080\0\u1de8\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u014a\0\u2418"+
    "\0\u014a\0\u014a\0\u245a\0\u014a\0\u014a\0\u249c\0\u24de\0\u2520"+
    "\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940"+
    "\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u014a"+
    "\0\u2d60\0\u2da2\0\u2de4\0\u014a\0\u2e26\0\u2e68\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc"+
    "\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c"+
    "\0\u334e\0\u3390\0\u33d2\0\u3414\0\u014a\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u014a\0\u372c\0\u376e\0\u014a\0\u37b0\0\u37f2\0\u3834\0\u3876"+
    "\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u014a\0\u3a02\0\u3a44"+
    "\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u014a\0\u3bd0\0\u26ee"+
    "\0\u3c12\0\u3c54\0\u3c96\0\u014a\0\u014a\0\u3cd8\0\u3d1a\0\u3d5c"+
    "\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c"+
    "\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c"+
    "\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\6\1\10"+
    "\1\11\1\12\4\6\1\13\1\14\2\6\1\15\1\6"+
    "\1\16\1\17\1\6\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\6\1\2\1\47\1\6\1\50\1\51"+
    "\1\6\1\52\1\53\1\54\1\55\1\6\1\56\2\6"+
    "\1\57\1\60\1\6\1\61\103\0\1\3\101\0\1\62"+
    "\1\4\102\0\1\6\1\63\23\6\17\0\6\6\1\0"+
    "\24\6\3\0\25\6\17\0\6\6\1\0\24\6\3\0"+
    "\6\6\1\64\16\6\17\0\6\6\1\0\24\6\3\0"+
    "\4\6\1\65\20\6\17\0\6\6\1\0\24\6\3\0"+
    "\14\6\1\66\10\6\17\0\6\6\1\0\24\6\3\0"+
    "\6\6\1\67\16\6\17\0\6\6\1\0\24\6\3\0"+
    "\6\6\1\70\16\6\17\0\6\6\1\0\24\6\3\0"+
    "\1\71\5\6\1\72\16\6\17\0\6\6\1\0\24\6"+
    "\3\0\3\6\1\73\21\6\17\0\6\6\1\0\24\6"+
    "\3\0\6\6\1\74\16\6\17\0\6\6\1\0\24\6"+
    "\3\0\3\6\1\75\6\6\1\76\12\6\17\0\6\6"+
    "\1\0\24\6\31\0\1\77\50\0\42\100\1\101\37\100"+
    "\56\0\1\46\101\0\1\102\26\0\17\6\1\103\5\6"+
    "\17\0\6\6\1\0\24\6\3\0\16\6\1\104\6\6"+
    "\17\0\6\6\1\0\24\6\3\0\6\6\1\105\16\6"+
    "\17\0\6\6\1\0\24\6\3\0\1\106\2\6\1\107"+
    "\2\6\1\110\3\6\1\111\12\6\17\0\6\6\1\0"+
    "\24\6\3\0\5\6\1\112\4\6\1\113\11\6\1\114"+
    "\17\0\6\6\1\0\4\6\1\115\17\6\3\0\3\6"+
    "\1\116\21\6\17\0\6\6\1\0\24\6\2\117\1\120"+
    "\77\117\36\0\1\121\17\0\1\46\26\0\3\6\1\122"+
    "\2\6\1\123\3\6\1\124\12\6\17\0\6\6\1\0"+
    "\4\6\1\125\17\6\3\0\1\126\2\6\1\127\2\6"+
    "\1\130\3\6\1\131\12\6\17\0\6\6\1\0\24\6"+
    "\3\0\6\6\1\132\16\6\17\0\6\6\1\0\24\6"+
    "\3\0\1\6\1\133\17\6\1\134\1\135\2\6\17\0"+
    "\6\6\1\0\22\6\1\136\1\6\3\0\2\6\1\137"+
    "\13\6\1\140\6\6\17\0\6\6\1\0\24\6\3\0"+
    "\3\6\1\141\21\6\17\0\6\6\1\0\24\6\3\0"+
    "\1\142\2\6\1\143\1\144\20\6\17\0\6\6\1\0"+
    "\24\6\3\0\12\6\1\145\12\6\17\0\6\6\1\0"+
    "\24\6\3\0\12\6\1\146\12\6\17\0\6\6\1\0"+
    "\24\6\3\0\1\147\24\6\17\0\6\6\1\0\24\6"+
    "\3\0\12\6\1\150\12\6\17\0\6\6\1\0\24\6"+
    "\1\0\1\62\103\0\2\6\1\151\22\6\17\0\6\6"+
    "\1\0\24\6\3\0\7\6\1\152\15\6\17\0\6\6"+
    "\1\0\24\6\3\0\24\6\1\153\17\0\6\6\1\0"+
    "\24\6\3\0\13\6\1\154\11\6\17\0\6\6\1\0"+
    "\24\6\3\0\13\6\1\155\11\6\17\0\6\6\1\0"+
    "\24\6\3\0\13\6\1\156\11\6\17\0\6\6\1\0"+
    "\24\6\3\0\16\6\1\157\6\6\17\0\6\6\1\0"+
    "\24\6\3\0\17\6\1\160\5\6\17\0\6\6\1\0"+
    "\24\6\3\0\4\6\1\161\20\6\17\0\6\6\1\0"+
    "\24\6\3\0\4\6\1\162\20\6\17\0\6\6\1\0"+
    "\24\6\3\0\3\6\1\163\21\6\17\0\6\6\1\0"+
    "\24\6\3\0\6\6\1\164\4\6\1\165\11\6\17\0"+
    "\6\6\1\0\17\6\1\166\4\6\36\0\1\121\17\0"+
    "\1\102\26\0\1\167\16\6\1\170\5\6\17\0\6\6"+
    "\1\0\24\6\3\0\5\6\1\171\17\6\17\0\6\6"+
    "\1\0\24\6\3\0\5\6\1\172\17\6\17\0\6\6"+
    "\1\0\24\6\3\0\13\6\1\173\11\6\17\0\6\6"+
    "\1\0\24\6\3\0\24\6\1\174\17\0\6\6\1\0"+
    "\24\6\3\0\5\6\1\175\17\6\17\0\6\6\1\0"+
    "\24\6\3\0\2\6\1\176\10\6\1\177\11\6\17\0"+
    "\6\6\1\0\24\6\3\0\4\6\1\200\20\6\17\0"+
    "\6\6\1\0\24\6\3\0\7\6\1\201\7\6\1\202"+
    "\5\6\17\0\6\6\1\0\24\6\3\0\1\6\1\203"+
    "\23\6\17\0\6\6\1\0\24\6\3\0\3\6\1\204"+
    "\21\6\17\0\6\6\1\0\24\6\3\0\3\6\1\205"+
    "\21\6\17\0\6\6\1\0\24\6\56\0\1\206\26\0"+
    "\21\6\1\207\3\6\17\0\6\6\1\0\24\6\3\0"+
    "\14\6\1\210\10\6\17\0\6\6\1\0\24\6\3\0"+
    "\4\6\1\211\20\6\17\0\6\6\1\0\22\6\1\212"+
    "\1\6\3\0\12\6\1\213\12\6\17\0\6\6\1\0"+
    "\24\6\3\0\16\6\1\214\6\6\17\0\6\6\1\0"+
    "\24\6\3\0\21\6\1\215\3\6\17\0\6\6\1\0"+
    "\24\6\3\0\25\6\17\0\6\6\1\0\22\6\1\214"+
    "\1\6\3\0\5\6\1\216\17\6\17\0\6\6\1\0"+
    "\24\6\3\0\5\6\1\217\17\6\17\0\6\6\1\0"+
    "\24\6\3\0\14\6\1\220\10\6\17\0\6\6\1\0"+
    "\24\6\3\0\1\201\24\6\17\0\6\6\1\0\24\6"+
    "\3\0\12\6\1\221\12\6\17\0\6\6\1\0\24\6"+
    "\3\0\12\6\1\222\12\6\17\0\6\6\1\0\24\6"+
    "\3\0\12\6\1\223\12\6\17\0\6\6\1\0\24\6"+
    "\3\0\5\6\1\224\17\6\17\0\6\6\1\0\12\6"+
    "\1\225\11\6\3\0\1\6\1\226\23\6\17\0\6\6"+
    "\1\0\24\6\3\0\17\6\1\227\5\6\17\0\6\6"+
    "\1\0\24\6\3\0\4\6\1\211\20\6\17\0\6\6"+
    "\1\0\24\6\3\0\3\6\1\230\21\6\17\0\6\6"+
    "\1\0\24\6\3\0\17\6\1\231\5\6\17\0\6\6"+
    "\1\0\24\6\3\0\6\6\1\232\16\6\17\0\6\6"+
    "\1\0\24\6\3\0\12\6\1\233\12\6\17\0\6\6"+
    "\1\0\24\6\3\0\3\6\1\234\21\6\17\0\6\6"+
    "\1\0\24\6\3\0\3\6\1\235\21\6\17\0\6\6"+
    "\1\0\24\6\3\0\10\6\1\236\14\6\17\0\6\6"+
    "\1\0\24\6\3\0\12\6\1\237\12\6\17\0\6\6"+
    "\1\0\24\6\3\0\5\6\1\240\17\6\17\0\6\6"+
    "\1\0\24\6\3\0\12\6\1\241\12\6\17\0\6\6"+
    "\1\0\24\6\3\0\12\6\1\242\12\6\17\0\6\6"+
    "\1\0\24\6\3\0\6\6\1\243\16\6\17\0\6\6"+
    "\1\0\24\6\3\0\13\6\1\153\11\6\17\0\6\6"+
    "\1\0\24\6\3\0\21\6\1\244\3\6\17\0\6\6"+
    "\1\0\24\6\3\0\5\6\1\245\17\6\17\0\6\6"+
    "\1\0\24\6\3\0\21\6\1\246\3\6\17\0\6\6"+
    "\1\0\24\6\3\0\3\6\1\247\21\6\17\0\6\6"+
    "\1\0\24\6\3\0\24\6\1\250\17\0\6\6\1\0"+
    "\24\6\3\0\6\6\1\251\16\6\17\0\6\6\1\0"+
    "\24\6\3\0\3\6\1\252\21\6\17\0\6\6\1\0"+
    "\24\6\3\0\12\6\1\253\12\6\17\0\6\6\1\0"+
    "\24\6\3\0\24\6\1\254\17\0\6\6\1\0\24\6"+
    "\3\0\2\6\1\255\22\6\17\0\6\6\1\0\24\6"+
    "\3\0\14\6\1\256\10\6\17\0\6\6\1\0\24\6"+
    "\3\0\12\6\1\257\12\6\17\0\6\6\1\0\24\6"+
    "\3\0\5\6\1\260\17\6\17\0\6\6\1\0\24\6"+
    "\3\0\7\6\1\261\15\6\17\0\6\6\1\0\24\6"+
    "\3\0\1\262\24\6\17\0\6\6\1\0\24\6\3\0"+
    "\5\6\1\263\17\6\17\0\6\6\1\0\24\6\3\0"+
    "\12\6\1\264\12\6\17\0\6\6\1\0\24\6\3\0"+
    "\1\6\1\265\23\6\17\0\6\6\1\0\24\6\3\0"+
    "\25\6\17\0\6\6\1\0\14\6\1\266\7\6\3\0"+
    "\17\6\1\267\5\6\17\0\6\6\1\0\24\6\3\0"+
    "\6\6\1\270\16\6\17\0\6\6\1\0\24\6\3\0"+
    "\17\6\1\215\5\6\17\0\6\6\1\0\24\6\3\0"+
    "\1\6\1\245\23\6\17\0\6\6\1\0\24\6\3\0"+
    "\5\6\1\257\17\6\17\0\6\6\1\0\24\6\3\0"+
    "\13\6\1\271\11\6\17\0\6\6\1\0\24\6\3\0"+
    "\25\6\17\0\6\6\1\0\20\6\1\272\3\6\3\0"+
    "\12\6\1\245\12\6\17\0\6\6\1\0\24\6\3\0"+
    "\6\6\1\245\16\6\17\0\6\6\1\0\24\6\3\0"+
    "\5\6\1\273\17\6\17\0\6\6\1\0\24\6\3\0"+
    "\12\6\1\274\12\6\17\0\6\6\1\0\24\6\3\0"+
    "\16\6\1\163\6\6\17\0\6\6\1\0\24\6\3\0"+
    "\7\6\1\275\15\6\17\0\6\6\1\0\24\6\3\0"+
    "\4\6\1\276\20\6\17\0\6\6\1\0\24\6\3\0"+
    "\3\6\1\277\21\6\17\0\6\6\1\0\24\6\3\0"+
    "\25\6\17\0\6\6\1\0\4\6\1\300\17\6\3\0"+
    "\2\6\1\301\22\6\17\0\6\6\1\0\24\6\3\0"+
    "\5\6\1\302\17\6\17\0\6\6\1\0\24\6\3\0"+
    "\1\6\1\303\23\6\17\0\6\6\1\0\24\6\3\0"+
    "\2\6\1\245\22\6\17\0\6\6\1\0\24\6\3\0"+
    "\15\6\1\245\7\6\17\0\6\6\1\0\24\6\3\0"+
    "\25\6\17\0\6\6\1\0\14\6\1\245\7\6\3\0"+
    "\4\6\1\304\20\6\17\0\6\6\1\0\24\6\3\0"+
    "\4\6\1\305\20\6\17\0\6\6\1\0\24\6\3\0"+
    "\6\6\1\306\16\6\17\0\6\6\1\0\24\6\3\0"+
    "\4\6\1\307\20\6\17\0\6\6\1\0\24\6\3\0"+
    "\17\6\1\310\5\6\17\0\6\6\1\0\24\6\3\0"+
    "\25\6\17\0\6\6\1\0\11\6\1\311\12\6\3\0"+
    "\24\6\1\312\17\0\6\6\1\0\24\6\3\0\1\313"+
    "\24\6\17\0\6\6\1\0\24\6\3\0\13\6\1\314"+
    "\11\6\17\0\6\6\1\0\24\6\3\0\25\6\17\0"+
    "\6\6\1\0\14\6\1\315\7\6\3\0\4\6\1\316"+
    "\20\6\17\0\6\6\1\0\24\6\3\0\4\6\1\317"+
    "\20\6\17\0\6\6\1\0\24\6\3\0\17\6\1\320"+
    "\5\6\17\0\6\6\1\0\24\6\3\0\17\6\1\321"+
    "\5\6\17\0\6\6\1\0\24\6\3\0\25\6\17\0"+
    "\6\6\1\0\13\6\1\322\10\6\3\0\25\6\17\0"+
    "\6\6\1\0\4\6\1\245\17\6\3\0\4\6\1\323"+
    "\20\6\17\0\6\6\1\0\24\6\3\0\16\6\1\324"+
    "\6\6\17\0\6\6\1\0\24\6\3\0\1\325\24\6"+
    "\17\0\6\6\1\0\24\6\3\0\7\6\1\212\15\6"+
    "\17\0\6\6\1\0\24\6\3\0\6\6\1\326\16\6"+
    "\17\0\6\6\1\0\24\6\3\0\25\6\17\0\6\6"+
    "\1\0\16\6\1\327\5\6\3\0\12\6\1\330\12\6"+
    "\17\0\6\6\1\0\24\6\3\0\25\6\17\0\6\6"+
    "\1\0\7\6\1\331\14\6\3\0\6\6\1\332\16\6"+
    "\17\0\6\6\1\0\24\6\3\0\12\6\1\333\12\6"+
    "\17\0\6\6\1\0\24\6\3\0\12\6\1\334\12\6"+
    "\17\0\6\6\1\0\24\6\3\0\21\6\1\335\3\6"+
    "\17\0\6\6\1\0\24\6\3\0\24\6\1\336\17\0"+
    "\6\6\1\0\24\6\3\0\6\6\1\201\16\6\17\0"+
    "\6\6\1\0\24\6\3\0\17\6\1\337\5\6\17\0"+
    "\6\6\1\0\24\6\3\0\6\6\1\340\16\6\17\0"+
    "\6\6\1\0\24\6\3\0\3\6\1\341\21\6\17\0"+
    "\6\6\1\0\24\6\3\0\12\6\1\342\12\6\17\0"+
    "\6\6\1\0\24\6\3\0\25\6\17\0\6\6\1\0"+
    "\3\6\1\343\7\6\1\322\10\6\3\0\12\6\1\344"+
    "\12\6\17\0\6\6\1\0\24\6\3\0\5\6\1\345"+
    "\17\6\17\0\6\6\1\0\24\6\3\0\11\6\1\346"+
    "\13\6\17\0\6\6\1\0\24\6\3\0\6\6\1\347"+
    "\16\6\17\0\6\6\1\0\24\6\3\0\16\6\1\350"+
    "\6\6\17\0\6\6\1\0\24\6\3\0\4\6\1\351"+
    "\20\6\17\0\6\6\1\0\24\6\3\0\4\6\1\352"+
    "\20\6\17\0\6\6\1\0\24\6\3\0\25\6\17\0"+
    "\4\6\1\353\1\6\1\0\11\6\1\354\3\6\1\355"+
    "\6\6\3\0\16\6\1\356\6\6\17\0\6\6\1\0"+
    "\24\6\3\0\6\6\1\357\16\6\17\0\6\6\1\0"+
    "\24\6\3\0\6\6\1\360\16\6\17\0\6\6\1\0"+
    "\24\6\3\0\12\6\1\361\12\6\17\0\6\6\1\0"+
    "\24\6\3\0\1\362\24\6\17\0\6\6\1\0\24\6"+
    "\3\0\1\363\24\6\17\0\6\6\1\0\24\6\3\0"+
    "\11\6\1\364\13\6\17\0\6\6\1\0\24\6\3\0"+
    "\3\6\1\365\21\6\17\0\6\6\1\0\24\6\3\0"+
    "\4\6\1\360\20\6\17\0\6\6\1\0\24\6\3\0"+
    "\12\6\1\360\12\6\17\0\6\6\1\0\24\6\3\0"+
    "\6\6\1\366\16\6\17\0\6\6\1\0\24\6\3\0"+
    "\25\6\17\0\1\6\1\367\4\6\1\0\24\6\3\0"+
    "\24\6\1\370\17\0\6\6\1\0\24\6\3\0\16\6"+
    "\1\371\6\6\17\0\6\6\1\0\24\6\3\0\4\6"+
    "\1\365\20\6\17\0\6\6\1\0\24\6\3\0\21\6"+
    "\1\352\3\6\17\0\6\6\1\0\24\6\3\0\5\6"+
    "\1\215\17\6\17\0\6\6\1\0\24\6\3\0\3\6"+
    "\1\372\21\6\17\0\6\6\1\0\24\6\3\0\16\6"+
    "\1\373\6\6\17\0\6\6\1\0\24\6\3\0\13\6"+
    "\1\374\11\6\17\0\6\6\1\0\24\6\3\0\4\6"+
    "\1\245\20\6\17\0\6\6\1\0\24\6\3\0\12\6"+
    "\1\143\12\6\17\0\6\6\1\0\24\6\3\0\15\6"+
    "\1\375\7\6\17\0\6\6\1\0\24\6\3\0\12\6"+
    "\1\376\12\6\17\0\6\6\1\0\24\6\3\0\7\6"+
    "\1\377\15\6\17\0\6\6\1\0\24\6\3\0\17\6"+
    "\1\360\5\6\17\0\6\6\1\0\24\6\3\0\7\6"+
    "\1\u0100\15\6\17\0\6\6\1\0\24\6\3\0\12\6"+
    "\1\u0101\12\6\17\0\6\6\1\0\24\6\3\0\12\6"+
    "\1\u0102\12\6\17\0\6\6\1\0\24\6\3\0\5\6"+
    "\1\u0103\17\6\17\0\6\6\1\0\24\6\3\0\1\u0104"+
    "\24\6\17\0\6\6\1\0\24\6\3\0\6\6\1\u0105"+
    "\16\6\17\0\6\6\1\0\24\6\3\0\17\6\1\u0106"+
    "\5\6\17\0\6\6\1\0\24\6\3\0\25\6\17\0"+
    "\6\6\1\0\7\6\1\245\14\6\3\0\12\6\1\u0107"+
    "\12\6\17\0\6\6\1\0\24\6\3\0\2\6\1\201"+
    "\22\6\17\0\6\6\1\0\24\6\3\0\16\6\1\245"+
    "\6\6\17\0\6\6\1\0\24\6\3\0\16\6\1\u0108"+
    "\6\6\17\0\6\6\1\0\24\6\3\0\13\6\1\u0109"+
    "\11\6\17\0\6\6\1\0\24\6\3\0\4\6\1\u010a"+
    "\20\6\17\0\6\6\1\0\24\6\3\0\11\6\1\176"+
    "\13\6\17\0\6\6\1\0\24\6\3\0\11\6\1\360"+
    "\13\6\17\0\6\6\1\0\24\6\3\0\11\6\1\215"+
    "\13\6\17\0\6\6\1\0\24\6\3\0\1\110\24\6"+
    "\17\0\6\6\1\0\24\6\3\0\12\6\1\u010b\12\6"+
    "\17\0\6\6\1\0\24\6\3\0\5\6\1\u010c\17\6"+
    "\17\0\6\6\1\0\24\6\3\0\12\6\1\u010d\12\6"+
    "\17\0\6\6\1\0\24\6\3\0\21\6\1\245\3\6"+
    "\17\0\6\6\1\0\24\6\3\0\6\6\1\u010e\16\6"+
    "\17\0\6\6\1\0\24\6\3\0\25\6\17\0\6\6"+
    "\1\0\4\6\1\u010f\17\6\3\0\13\6\1\u0110\11\6"+
    "\17\0\6\6\1\0\24\6\3\0\17\6\1\245\5\6"+
    "\17\0\6\6\1\0\24\6\3\0\17\6\1\u0101\5\6"+
    "\17\0\6\6\1\0\24\6\3\0\25\6\17\0\6\6"+
    "\1\0\3\6\1\u0111\20\6\3\0\24\6\1\u0112\17\0"+
    "\6\6\1\0\24\6\3\0\4\6\1\u0113\20\6\17\0"+
    "\6\6\1\0\24\6\3\0\4\6\1\u0114\20\6\17\0"+
    "\6\6\1\0\24\6\3\0\12\6\1\u0115\12\6\17\0"+
    "\6\6\1\0\24\6\3\0\5\6\1\u0116\17\6\17\0"+
    "\6\6\1\0\24\6\3\0\25\6\17\0\6\6\1\0"+
    "\4\6\1\u0117\17\6\3\0\13\6\1\245\11\6\17\0"+
    "\6\6\1\0\24\6\3\0\12\6\1\u0118\12\6\17\0"+
    "\6\6\1\0\24\6\3\0\7\6\1\260\15\6\17\0"+
    "\6\6\1\0\24\6\3\0\4\6\1\u0112\20\6\17\0"+
    "\6\6\1\0\24\6\3\0\3\6\1\326\21\6\17\0"+
    "\6\6\1\0\24\6\3\0\12\6\1\u0119\12\6\17\0"+
    "\6\6\1\0\24\6\3\0\16\6\1\u011a\6\6\17\0"+
    "\6\6\1\0\24\6\3\0\25\6\17\0\6\6\1\0"+
    "\10\6\1\u011b\7\6\1\u011c\3\6\3\0\7\6\1\215"+
    "\15\6\17\0\6\6\1\0\24\6\3\0\6\6\1\u011d"+
    "\16\6\17\0\6\6\1\0\24\6\3\0\6\6\1\u011e"+
    "\16\6\17\0\6\6\1\0\24\6\3\0\4\6\1\u011f"+
    "\20\6\17\0\6\6\1\0\24\6\3\0\5\6\1\u0120"+
    "\17\6\17\0\6\6\1\0\24\6\3\0\17\6\1\u0121"+
    "\5\6\17\0\6\6\1\0\24\6\3\0\12\6\1\u0122"+
    "\12\6\17\0\6\6\1\0\24\6\3\0\1\u0120\24\6"+
    "\17\0\6\6\1\0\24\6\3\0\13\6\1\u0123\11\6"+
    "\17\0\6\6\1\0\24\6\3\0\5\6\1\u0124\17\6"+
    "\17\0\6\6\1\0\24\6\3\0\25\6\17\0\3\6"+
    "\1\u0125\2\6\1\0\24\6\3\0\6\6\1\336\16\6"+
    "\17\0\6\6\1\0\24\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\11\11\1\1\2\11\42\1\1\11"+
    "\1\0\1\11\15\1\1\0\1\11\1\0\324\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  GorosLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  GorosLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 40: break;
        case 22: 
          { return TaraTypes.VAR;
          }
        case 41: break;
        case 13: 
          { return TaraTypes.COLON;
          }
        case 42: break;
        case 38: 
          { return TaraTypes.ABSTRACT;
          }
        case 43: break;
        case 15: 
          { return TaraTypes.OPEN_AN;
          }
        case 44: break;
        case 24: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 45: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 46: break;
        case 36: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 47: break;
        case 8: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 48: break;
        case 18: 
          { return TaraTypes.LIST;
          }
        case 49: break;
        case 16: 
          { return TaraTypes.CLOSE_AN;
          }
        case 50: break;
        case 30: 
          { return TaraTypes.FINAL;
          }
        case 51: break;
        case 28: 
          { return TaraTypes.BASE_KEY;
          }
        case 52: break;
        case 11: 
          { return TaraTypes.DOT;
          }
        case 53: break;
        case 34: 
          { return TaraTypes.STRING_TYPE;
          }
        case 54: break;
        case 9: 
          { return openBracket();
          }
        case 55: break;
        case 4: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 56: break;
        case 7: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 57: break;
        case 20: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 58: break;
        case 21: 
          { return TaraTypes.DOC_LINE;
          }
        case 59: break;
        case 19: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 60: break;
        case 33: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 61: break;
        case 6: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 62: break;
        case 17: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 63: break;
        case 14: 
          { return semicolon();
          }
        case 64: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 65: break;
        case 39: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 66: break;
        case 31: 
          { return TaraTypes.ALIAS_TYPE;
          }
        case 67: break;
        case 26: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 68: break;
        case 32: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 69: break;
        case 37: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 70: break;
        case 27: 
          { return TaraTypes.CASE_KEY;
          }
        case 71: break;
        case 25: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 72: break;
        case 23: 
          { return TaraTypes.INT_TYPE;
          }
        case 73: break;
        case 10: 
          { return closeBracket();
          }
        case 74: break;
        case 35: 
          { return TaraTypes.PACKAGE;
          }
        case 75: break;
        case 29: 
          { return TaraTypes.WORD_KEY;
          }
        case 76: break;
        case 12: 
          { return TaraTypes.COMMA;
          }
        case 77: break;
        case 3: 
          { return newlineIndent();
          }
        case 78: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 294: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
