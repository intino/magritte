/* The following code was generated by JFlex 1.4.3 on 19/11/14 12:55 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/11/14 12:55 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\52\1\1\1\2\3\0\16\52\4\0\1\1\2\0\1\53\1\41"+
    "\1\43\1\51\1\37\1\34\1\35\1\42\1\50\1\44\1\40\1\36"+
    "\1\43\12\54\1\45\1\47\1\0\1\46\1\3\2\0\2\41\1\4"+
    "\27\41\4\0\1\41\1\0\1\17\1\15\1\7\1\27\1\10\1\33"+
    "\1\31\1\16\1\24\2\41\1\25\1\30\1\6\1\5\1\11\1\32"+
    "\1\21\1\13\1\12\1\14\1\20\1\23\1\22\1\26\1\41\4\0"+
    "\41\52\2\0\4\41\4\0\1\41\2\0\1\52\7\0\1\41\1\0"+
    "\1\43\2\0\1\41\5\0\27\41\1\0\37\41\1\0\u01ca\41\4\0"+
    "\14\41\16\0\5\41\7\0\1\41\1\0\1\41\21\0\160\52\5\41"+
    "\1\0\2\41\2\0\4\41\10\0\1\41\1\0\3\41\1\0\1\41"+
    "\1\0\24\41\1\0\123\41\1\0\213\41\1\0\5\52\2\0\236\41"+
    "\11\0\46\41\2\0\1\41\7\0\47\41\11\0\55\52\1\0\1\52"+
    "\1\0\2\52\1\0\2\52\1\0\1\52\10\0\33\41\5\0\3\41"+
    "\15\0\4\52\7\0\1\41\4\0\13\52\5\0\53\41\25\52\12\54"+
    "\4\0\2\41\1\52\143\41\1\0\1\41\10\52\1\0\6\52\2\41"+
    "\2\52\1\0\4\52\2\41\12\54\3\41\2\0\1\41\17\0\1\52"+
    "\1\41\1\52\36\41\33\52\2\0\131\41\13\52\1\41\16\0\12\54"+
    "\41\41\11\52\2\41\4\0\1\41\5\0\26\41\4\52\1\41\11\52"+
    "\1\41\3\52\1\41\5\52\22\0\31\41\3\52\244\0\4\52\66\41"+
    "\3\52\1\41\22\52\1\41\7\52\12\41\2\52\2\0\12\54\1\0"+
    "\7\41\1\0\7\41\1\0\3\52\1\0\10\41\2\0\2\41\2\0"+
    "\26\41\1\0\7\41\1\0\1\41\3\0\4\41\2\0\1\52\1\41"+
    "\7\52\2\0\2\52\2\0\3\52\1\41\10\0\1\52\4\0\2\41"+
    "\1\0\3\41\2\52\2\0\12\54\4\41\7\0\1\41\5\0\3\52"+
    "\1\0\6\41\4\0\2\41\2\0\26\41\1\0\7\41\1\0\2\41"+
    "\1\0\2\41\1\0\2\41\2\0\1\52\1\0\5\52\4\0\2\52"+
    "\2\0\3\52\3\0\1\52\7\0\4\41\1\0\1\41\7\0\12\54"+
    "\2\52\3\41\1\52\13\0\3\52\1\0\11\41\1\0\3\41\1\0"+
    "\26\41\1\0\7\41\1\0\2\41\1\0\5\41\2\0\1\52\1\41"+
    "\10\52\1\0\3\52\1\0\3\52\2\0\1\41\17\0\2\41\2\52"+
    "\2\0\12\54\1\0\1\41\17\0\3\52\1\0\10\41\2\0\2\41"+
    "\2\0\26\41\1\0\7\41\1\0\2\41\1\0\5\41\2\0\1\52"+
    "\1\41\7\52\2\0\2\52\2\0\3\52\10\0\2\52\4\0\2\41"+
    "\1\0\3\41\2\52\2\0\12\54\1\0\1\41\20\0\1\52\1\41"+
    "\1\0\6\41\3\0\3\41\1\0\4\41\3\0\2\41\1\0\1\41"+
    "\1\0\2\41\3\0\2\41\3\0\3\41\3\0\14\41\4\0\5\52"+
    "\3\0\3\52\1\0\4\52\2\0\1\41\6\0\1\52\16\0\12\54"+
    "\11\0\1\41\7\0\3\52\1\0\10\41\1\0\3\41\1\0\27\41"+
    "\1\0\12\41\1\0\5\41\3\0\1\41\7\52\1\0\3\52\1\0"+
    "\4\52\7\0\2\52\1\0\2\41\6\0\2\41\2\52\2\0\12\54"+
    "\22\0\2\52\1\0\10\41\1\0\3\41\1\0\27\41\1\0\12\41"+
    "\1\0\5\41\2\0\1\52\1\41\7\52\1\0\3\52\1\0\4\52"+
    "\7\0\2\52\7\0\1\41\1\0\2\41\2\52\2\0\12\54\1\0"+
    "\2\41\17\0\2\52\1\0\10\41\1\0\3\41\1\0\51\41\2\0"+
    "\1\41\7\52\1\0\3\52\1\0\4\52\1\41\10\0\1\52\10\0"+
    "\2\41\2\52\2\0\12\54\12\0\6\41\2\0\2\52\1\0\22\41"+
    "\3\0\30\41\1\0\11\41\1\0\1\41\2\0\7\41\3\0\1\52"+
    "\4\0\6\52\1\0\1\52\1\0\10\52\22\0\2\52\15\0\60\41"+
    "\1\52\2\41\7\52\4\0\10\41\10\52\1\0\12\54\47\0\2\41"+
    "\1\0\1\41\2\0\2\41\1\0\1\41\2\0\1\41\6\0\4\41"+
    "\1\0\7\41\1\0\3\41\1\0\1\41\1\0\1\41\2\0\2\41"+
    "\1\0\4\41\1\52\2\41\6\52\1\0\2\52\1\41\2\0\5\41"+
    "\1\0\1\41\1\0\6\52\2\0\12\54\2\0\2\41\42\0\1\41"+
    "\27\0\2\52\6\0\12\54\13\0\1\52\1\0\1\52\1\0\1\52"+
    "\4\0\2\52\10\41\1\0\44\41\4\0\24\52\1\0\2\52\5\41"+
    "\13\52\1\0\44\52\11\0\1\52\71\0\53\41\24\52\1\41\12\54"+
    "\6\0\6\41\4\52\4\41\3\52\1\41\3\52\2\41\7\52\3\41"+
    "\4\52\15\41\14\52\1\41\1\52\12\54\4\52\2\0\46\41\12\0"+
    "\53\41\1\0\1\41\3\0\u0149\41\1\0\4\41\2\0\7\41\1\0"+
    "\1\41\1\0\4\41\2\0\51\41\1\0\4\41\2\0\41\41\1\0"+
    "\4\41\2\0\7\41\1\0\1\41\1\0\4\41\2\0\17\41\1\0"+
    "\71\41\1\0\4\41\2\0\103\41\2\0\3\52\40\0\20\41\20\0"+
    "\125\41\14\0\u026c\41\2\0\21\41\1\0\32\41\5\0\113\41\3\0"+
    "\3\41\17\0\15\41\1\0\4\41\3\52\13\0\22\41\3\52\13\0"+
    "\22\41\2\52\14\0\15\41\1\0\3\41\1\0\2\52\14\0\64\41"+
    "\40\52\3\0\1\41\3\0\2\41\1\52\2\0\12\54\41\0\3\52"+
    "\2\0\12\54\6\0\130\41\10\0\51\41\1\52\1\41\5\0\106\41"+
    "\12\0\35\41\3\0\14\52\4\0\14\52\12\0\12\54\36\41\2\0"+
    "\5\41\13\0\54\41\4\0\21\52\7\41\2\52\6\0\12\54\46\0"+
    "\27\41\5\52\4\0\65\41\12\52\1\0\35\52\2\0\1\52\12\54"+
    "\6\0\12\54\15\0\1\41\130\0\5\52\57\41\21\52\7\41\4\0"+
    "\12\54\21\0\11\52\14\0\3\52\36\41\12\52\3\0\2\41\12\54"+
    "\6\0\46\41\16\52\14\0\44\41\24\52\10\0\12\54\3\0\3\41"+
    "\12\54\44\41\122\0\3\52\1\0\25\52\4\41\1\52\4\41\1\52"+
    "\15\0\300\41\47\52\25\0\4\52\u0116\41\2\0\6\41\2\0\46\41"+
    "\2\0\6\41\2\0\10\41\1\0\1\41\1\0\1\41\1\0\1\41"+
    "\1\0\37\41\2\0\65\41\1\0\7\41\1\0\1\41\3\0\3\41"+
    "\1\0\7\41\3\0\4\41\2\0\6\41\4\0\15\41\5\0\3\41"+
    "\1\0\7\41\16\0\5\52\32\0\5\52\20\0\2\41\23\0\1\41"+
    "\13\0\5\52\5\0\6\52\1\0\1\41\15\0\1\41\20\0\15\41"+
    "\3\0\14\41\1\41\15\41\26\0\15\52\4\0\1\52\3\0\14\52"+
    "\21\0\1\41\4\0\1\41\2\0\12\41\1\0\1\41\3\0\5\41"+
    "\6\0\1\41\1\0\1\41\1\0\1\41\1\0\4\41\1\0\13\41"+
    "\2\0\4\41\5\0\5\41\4\0\1\41\21\0\51\41\u0a77\0\57\41"+
    "\1\0\57\41\1\0\205\41\6\0\4\41\3\52\16\0\46\41\12\0"+
    "\66\41\11\0\1\41\17\0\1\52\27\41\11\0\7\41\1\0\7\41"+
    "\1\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41"+
    "\1\0\7\41\1\0\40\52\57\0\1\41\u01d5\0\3\41\31\0\11\41"+
    "\6\52\1\0\5\41\2\0\5\41\4\0\126\41\2\0\2\52\2\0"+
    "\3\41\1\0\132\41\1\0\4\41\5\0\51\41\3\0\136\41\21\0"+
    "\33\41\65\0\20\41\u0200\0\u19b6\41\112\0\u51cc\41\64\0\u048d\41\103\0"+
    "\56\41\2\0\u010d\41\3\0\20\41\12\54\2\41\24\0\57\41\1\52"+
    "\14\0\2\52\1\0\31\41\10\0\120\41\2\52\45\0\11\41\2\0"+
    "\147\41\2\0\4\41\1\0\2\41\16\0\12\41\120\0\10\41\1\52"+
    "\3\41\1\52\4\41\1\52\27\41\5\52\20\0\1\41\7\0\64\41"+
    "\14\0\2\52\62\41\21\52\13\0\12\54\6\0\22\52\6\41\3\0"+
    "\1\41\4\0\12\54\34\41\10\52\2\0\27\41\15\52\14\0\35\41"+
    "\3\0\4\52\57\41\16\52\16\0\1\41\12\54\46\0\51\41\16\52"+
    "\11\0\3\41\1\52\10\41\2\52\2\0\12\54\6\0\27\41\3\0"+
    "\1\41\1\52\4\0\60\41\1\52\1\41\3\52\2\41\2\52\5\41"+
    "\2\52\1\41\1\52\1\41\30\0\3\41\43\0\6\41\2\0\6\41"+
    "\2\0\6\41\11\0\7\41\1\0\7\41\221\0\43\41\10\52\1\0"+
    "\2\52\2\0\12\54\6\0\u2ba4\41\14\0\27\41\4\0\61\41\u2104\0"+
    "\u012e\41\2\0\76\41\2\0\152\41\46\0\7\41\14\0\5\41\5\0"+
    "\1\41\1\52\12\41\1\0\15\41\1\0\5\41\1\0\1\41\1\0"+
    "\2\41\1\0\2\41\1\0\154\41\41\0\u016b\41\22\0\100\41\2\0"+
    "\66\41\50\0\15\41\3\0\20\52\20\0\7\52\14\0\2\41\30\0"+
    "\3\41\31\0\1\41\6\0\5\41\1\0\207\41\2\0\1\52\4\0"+
    "\1\41\13\0\12\54\7\0\32\41\4\0\1\41\1\0\32\41\13\0"+
    "\131\41\3\0\6\41\2\0\6\41\2\0\6\41\2\0\3\41\3\0"+
    "\2\41\3\0\2\41\22\0\3\52\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\24\6\1\7\1\10"+
    "\1\11\1\2\1\1\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\3\2\1\17\1\4\1\6\1\20\16\6\1\21"+
    "\12\6\1\22\5\6\2\0\1\23\1\1\1\24\1\17"+
    "\2\0\1\25\1\0\1\1\13\6\1\26\2\6\1\27"+
    "\1\6\1\30\1\31\4\6\1\32\14\6\1\33\1\0"+
    "\2\1\2\0\1\34\1\0\1\35\11\6\1\36\10\6"+
    "\1\37\2\6\1\40\1\41\2\6\1\42\3\6\1\0"+
    "\1\1\1\43\1\35\1\0\2\6\1\44\3\6\1\45"+
    "\21\6\1\46\2\43\1\0\10\6\1\47\1\50\3\6"+
    "\1\51\6\6\1\52\2\6\1\0\1\53\1\54\3\6"+
    "\1\55\3\6\1\56\6\6\1\57\2\6\1\0\2\6"+
    "\1\60\1\61\1\62\1\6\1\63\2\6\1\64\1\65"+
    "\2\6\1\66\1\67\1\6\1\70\1\71\1\72\1\6"+
    "\1\73\1\74\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\55\0\264\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\55\0\55\0\u0438\0\u0465\0\u0492\0\55\0\u04bf"+
    "\0\55\0\55\0\55\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0"+
    "\0\u05cd\0\u05fa\0\u032a\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u032a\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u032a\0\u0a5f\0\u0a8c\0\u0ab9"+
    "\0\u0ae6\0\u0b13\0\u0b40\0\u0465\0\55\0\u0b6d\0\u0b9a\0\u0bc7"+
    "\0\u0bf4\0\u0573\0\55\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u032a\0\u0e6a\0\u0e97\0\u032a\0\u0ec4\0\u032a\0\u032a\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u032a\0\u0fa5\0\u0fd2\0\u0fff\0\u102c"+
    "\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"+
    "\0\55\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u0c21\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u032a\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545"+
    "\0\u1572\0\u159f\0\u15cc\0\u032a\0\u15f9\0\u1626\0\u032a\0\u032a"+
    "\0\u1653\0\u1680\0\u032a\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761"+
    "\0\u121b\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u032a\0\u1842\0\u186f"+
    "\0\u189c\0\u032a\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa"+
    "\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\u032a\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u032a"+
    "\0\u032a\0\u1db5\0\u1de2\0\u1e0f\0\u032a\0\u1e3c\0\u1e69\0\u1e96"+
    "\0\u1ec3\0\u1ef0\0\u1f1d\0\u032a\0\u1f4a\0\u1f77\0\u1fa4\0\u032a"+
    "\0\u032a\0\u1fd1\0\u1ffe\0\u202b\0\u032a\0\u2058\0\u2085\0\u20b2"+
    "\0\u032a\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u032a"+
    "\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u032a\0\u032a\0\u032a"+
    "\0\u22ce\0\u032a\0\u22fb\0\u2328\0\u032a\0\u032a\0\u2355\0\u2382"+
    "\0\u032a\0\u17bb\0\u23af\0\u032a\0\u032a\0\u032a\0\u23dc\0\u032a"+
    "\0\u032a\0\u032a\0\u032a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\24\1\27\1\30"+
    "\2\24\1\31\1\32\1\33\1\34\1\35\1\36\1\24"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\40\1\47\1\50\56\0\1\3\54\0\1\51\1\4"+
    "\56\0\1\24\1\52\26\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\2\24\1\53\25\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\13\24\1\54\14\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\1\24\1\55\26\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\16\24\1\56\5\24\1\57\3\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\15\24"+
    "\1\60\12\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\61\10\24\1\62\12\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\6\24\1\63\1\24\1\64\7\24\1\65\7\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\2\24\1\66\4\24\1\67\20\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\1\24"+
    "\1\70\26\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\13\24\1\71\14\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\7\24"+
    "\1\72\1\24\1\73\7\24\1\74\1\24\1\75\1\24"+
    "\1\76\2\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\13\24\1\77\14\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\1\24"+
    "\1\100\2\24\1\101\23\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\30\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\1\24"+
    "\1\102\16\24\1\103\7\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\2\24\1\104\4\24"+
    "\1\105\20\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\1\24\1\106\11\24\1\107\14\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\4\24\1\110\3\24\1\111\17\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\13\24"+
    "\1\112\14\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\36\0\1\113\16\0\37\114\1\115\15\114"+
    "\4\0\30\40\4\0\1\116\1\40\1\0\1\40\6\0"+
    "\1\40\1\0\1\117\4\0\30\40\4\0\2\40\1\0"+
    "\1\40\6\0\1\40\1\0\1\40\47\0\1\44\61\0"+
    "\1\120\54\0\1\121\2\122\1\123\52\122\4\0\30\40"+
    "\2\0\1\124\1\0\1\125\1\40\1\0\1\40\6\0"+
    "\1\40\1\0\1\50\1\0\1\51\57\0\2\24\1\126"+
    "\25\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\6\24\1\127\15\24\1\130\3\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\1\24\1\131\22\24\1\132\3\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\6\24\1\133"+
    "\21\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\5\24\1\134\22\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\1\24\1\135"+
    "\26\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\15\24\1\136\12\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\10\24\1\137"+
    "\17\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\15\24\1\140\12\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\11\24\1\141"+
    "\16\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\2\24\1\142\25\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\20\24\1\143"+
    "\7\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\4\24\1\144\23\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\1\24\1\145"+
    "\14\24\1\146\11\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\7\24\1\147\20\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\7\24\1\150\20\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\17\24\1\151\10\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\23\24\1\152\4\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\25\24\1\153\2\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\15\24\1\154\12\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\1\24\1\155\26\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\7\24\1\156\16\24\1\157\1\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\15\24\1\160"+
    "\12\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\6\24\1\161\21\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\6\24\1\162"+
    "\21\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\10\24\1\163\17\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\6\24\1\164"+
    "\21\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\6\24\1\165\21\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\21\24\1\166"+
    "\6\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\3\24\1\167\15\24\1\170\6\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\36\0"+
    "\1\171\16\0\4\172\30\173\4\172\1\174\1\173\1\172"+
    "\1\173\6\172\1\173\1\172\1\173\4\0\30\40\2\0"+
    "\1\124\1\0\2\40\1\0\1\40\6\0\1\40\1\0"+
    "\1\117\36\0\1\124\1\0\1\175\13\0\1\120\54\0"+
    "\1\176\54\0\1\177\4\0\30\40\4\0\2\40\1\0"+
    "\1\40\4\0\1\200\1\0\1\40\1\0\1\201\4\0"+
    "\3\24\1\202\24\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\10\24\1\203\17\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\4\24\1\204\23\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\15\24\1\205\12\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\5\24\1\206\22\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\4\24\1\207\23\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\6\24\1\210\21\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\5\24\1\211\22\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\24\24\1\212\3\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\4\24\1\213\23\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\20\24\1\214\7\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\25\24\1\215\2\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\14\24\1\216\13\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\21\24\1\217\6\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\6\24\1\220\21\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\13\24\1\221\14\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\15\24\1\222\12\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\15\24\1\223\12\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\6\24\1\224\21\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\1\24\1\225\26\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\10\24\1\226\17\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\23\24\1\227\4\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\12\24\1\230\15\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\4\24\1\231\23\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\11\24\1\232\16\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\4\24\1\233\23\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\13\24\1\234\14\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\6\24\1\235\21\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\4\24\1\236\23\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\7\24\1\137\20\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\40\172"+
    "\1\237\20\172\30\173\4\172\1\240\1\173\1\172\1\173"+
    "\6\172\1\173\1\172\1\173\4\172\30\173\4\172\1\241"+
    "\1\173\1\172\1\173\6\172\1\173\1\172\1\173\50\0"+
    "\1\200\3\0\1\242\54\0\1\243\54\0\1\242\4\0"+
    "\30\40\4\0\1\125\1\40\1\0\1\40\6\0\1\40"+
    "\1\0\1\201\4\0\4\24\1\244\23\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\15\24"+
    "\1\245\12\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\23\24\1\246\4\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\23\24"+
    "\1\247\4\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\1\24\1\250\26\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\2\24"+
    "\1\251\25\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\22\24\1\252\5\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\253\23\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\20\24\1\254\7\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\2\24"+
    "\1\255\25\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\21\24\1\256\6\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\257\23\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\260\23\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\15\24"+
    "\1\261\12\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\22\24\1\262\5\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\263\23\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\264\23\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\10\24"+
    "\1\265\17\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\20\24\1\266\7\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\2\24"+
    "\1\267\22\24\1\270\2\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\21\24\1\271\6\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\24\24\1\272\3\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\20\24\1\273\7\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\6\24\1\274\21\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\40\172\1\275\20\172\30\173"+
    "\4\172\1\276\1\173\1\172\1\173\6\172\1\173\1\172"+
    "\1\173\40\0\1\175\13\0\1\242\36\0\1\277\22\0"+
    "\5\24\1\300\22\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\13\24\1\301\14\24\4\0"+
    "\2\24\1\0\1\40\6\0\1\24\1\0\1\24\4\0"+
    "\20\24\1\302\7\24\4\0\2\24\1\0\1\40\6\0"+
    "\1\24\1\0\1\24\4\0\2\24\1\303\4\24\1\304"+
    "\20\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\23\24\1\305\4\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\15\24\1\306"+
    "\12\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\2\24\1\307\25\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\25\24\1\310"+
    "\2\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\4\24\1\311\23\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\15\24\1\312"+
    "\12\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\13\24\1\313\14\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\13\24\1\314"+
    "\14\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\7\24\1\315\20\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\7\24\1\316"+
    "\20\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\25\24\1\317\2\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\15\24\1\320"+
    "\12\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\15\24\1\321\12\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\6\24\1\322"+
    "\21\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\4\24\1\323\23\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\4\24\1\324"+
    "\23\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\4\0\1\24\1\325\26\24\4\0\2\24\1\0"+
    "\1\40\6\0\1\24\1\0\1\24\4\0\5\24\1\326"+
    "\22\24\4\0\2\24\1\0\1\40\6\0\1\24\1\0"+
    "\1\24\40\0\1\275\20\0\30\40\4\0\1\276\1\40"+
    "\1\0\1\40\6\0\1\40\1\0\1\40\54\0\1\327"+
    "\4\0\6\24\1\330\21\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\21\24\1\331\6\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\2\24\1\332\25\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\4\24\1\333\23\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\4\24\1\334\23\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\7\24\1\335\20\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\6\24\1\336\21\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\13\24\1\337\14\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\7\24\1\340\20\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\2\24\1\341\25\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\3\24\1\342\24\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\7\24\1\343\20\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\13\24\1\344\14\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\3\24\1\345\24\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\4\24\1\346\23\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\20\24\1\347\7\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\15\24\1\350\12\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\23\24\1\351\4\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\21\24\1\352\6\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\54\0\1\353\4\0\13\24"+
    "\1\354\14\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\2\24\1\355\25\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\23\24"+
    "\1\356\4\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\22\24\1\357\5\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\21\24"+
    "\1\360\6\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\13\24\1\361\14\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\6\24"+
    "\1\362\21\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\363\23\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\6\24"+
    "\1\364\21\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\365\23\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\23\24"+
    "\1\366\4\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\1\24\1\367\26\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\370\23\24\4\0\2\24\1\0\1\40\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\371\23\24\4\0\2\24"+
    "\1\0\1\40\6\0\1\24\1\0\1\24\54\0\1\372"+
    "\4\0\6\24\1\373\21\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\6\24\1\374\21\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\21\24\1\375\6\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\23\24\1\376\4\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\4\24\1\377\23\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\2\24\1\u0100\25\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\21\24\1\u0101\6\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24\4\0\4\24\1\u0102\23\24"+
    "\4\0\2\24\1\0\1\40\6\0\1\24\1\0\1\24"+
    "\4\0\23\24\1\u0103\4\24\4\0\2\24\1\0\1\40"+
    "\6\0\1\24\1\0\1\24";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9225];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\24\1\2\11\3\1\1\11"+
    "\1\1\3\11\47\1\2\0\1\11\3\1\2\0\1\11"+
    "\1\0\44\1\1\11\1\0\2\1\2\0\1\1\1\0"+
    "\36\1\1\0\3\1\1\0\33\1\1\0\27\1\1\0"+
    "\23\1\1\0\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 63: break;
        case 33: 
          { return TaraTypes.WITH;
          }
        case 64: break;
        case 26: 
          { return TaraTypes.VAR;
          }
        case 65: break;
        case 48: 
          { return TaraTypes.COMPOSED;
          }
        case 66: break;
        case 12: 
          { return TaraTypes.COLON;
          }
        case 67: break;
        case 51: 
          { return TaraTypes.ABSTRACT;
          }
        case 68: break;
        case 54: 
          { return TaraTypes.MULTIPLE;
          }
        case 69: break;
        case 40: 
          { return TaraTypes.SINGLE;
          }
        case 70: break;
        case 56: 
          { return TaraTypes.COMPONENT;
          }
        case 71: break;
        case 28: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 72: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 73: break;
        case 44: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 74: break;
        case 8: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 75: break;
        case 27: 
          { return TaraTypes.LIST;
          }
        case 76: break;
        case 13: 
          { return TaraTypes.EQUALS;
          }
        case 77: break;
        case 9: 
          { return TaraTypes.DOT;
          }
        case 78: break;
        case 39: 
          { return TaraTypes.STRING_TYPE;
          }
        case 79: break;
        case 36: 
          { return TaraTypes.NAMED;
          }
        case 80: break;
        case 50: 
          { return TaraTypes.TERMINAL;
          }
        case 81: break;
        case 62: 
          { return TaraTypes.AGGREGATED;
          }
        case 82: break;
        case 34: 
          { return TaraTypes.DATE_TYPE;
          }
        case 83: break;
        case 60: 
          { return TaraTypes.METAMODEL;
          }
        case 84: break;
        case 6: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 85: break;
        case 37: 
          { return TaraTypes.EMPTY_REF;
          }
        case 86: break;
        case 7: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 87: break;
        case 53: 
          { return TaraTypes.REQUIRED;
          }
        case 88: break;
        case 20: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 89: break;
        case 31: 
          { return TaraTypes.ROOT;
          }
        case 90: break;
        case 55: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 91: break;
        case 5: 
          { return inline();
          }
        case 92: break;
        case 21: 
          { return TaraTypes.DOC_LINE;
          }
        case 93: break;
        case 45: 
          { return TaraTypes.EXTENDS;
          }
        case 94: break;
        case 19: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 95: break;
        case 49: 
          { return TaraTypes.PROPERTY;
          }
        case 96: break;
        case 10: 
          { return TaraTypes.STAR;
          }
        case 97: break;
        case 42: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 98: break;
        case 15: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 99: break;
        case 14: 
          { return semicolon();
          }
        case 100: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 101: break;
        case 1: 
          { return TaraTypes.MEASURE_VALUE;
          }
        case 102: break;
        case 61: 
          { return TaraTypes.TUPLE_TYPE;
          }
        case 103: break;
        case 52: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 104: break;
        case 23: 
          { return TaraTypes.USE_KEY;
          }
        case 105: break;
        case 41: 
          { return TaraTypes.ALWAYS;
          }
        case 106: break;
        case 30: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 107: break;
        case 17: 
          { return TaraTypes.AS;
          }
        case 108: break;
        case 16: 
          { return TaraTypes.ON;
          }
        case 109: break;
        case 22: 
          { return TaraTypes.SUB;
          }
        case 110: break;
        case 46: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 111: break;
        case 18: 
          { return TaraTypes.IS;
          }
        case 112: break;
        case 47: 
          { return TaraTypes.INT_TYPE;
          }
        case 113: break;
        case 43: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 114: break;
        case 29: 
          { return TaraTypes.DATE_VALUE_KEY;
          }
        case 115: break;
        case 57: 
          { return TaraTypes.UNIVERSAL;
          }
        case 116: break;
        case 32: 
          { return TaraTypes.WORD_KEY;
          }
        case 117: break;
        case 59: 
          { return TaraTypes.INTENTION;
          }
        case 118: break;
        case 58: 
          { return TaraTypes.ADDRESSED;
          }
        case 119: break;
        case 38: 
          { return TaraTypes.FACET;
          }
        case 120: break;
        case 11: 
          { return TaraTypes.COMMA;
          }
        case 121: break;
        case 25: 
          { return TaraTypes.HAS;
          }
        case 122: break;
        case 24: 
          { return TaraTypes.BOX_KEY;
          }
        case 123: break;
        case 4: 
          { return newlineIndent();
          }
        case 124: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 260: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
