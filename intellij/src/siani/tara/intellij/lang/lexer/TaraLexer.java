/* The following code was generated by JFlex 1.4.3 on 31/03/15 10:40 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/03/15 10:40 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\56\1\1\1\60\2\0\1\57\16\56\4\0\1\1\1\0\1\41"+
    "\1\0\1\43\1\52\1\54\1\0\1\34\1\35\1\44\1\61\1\47"+
    "\1\42\1\40\1\46\12\62\1\50\1\53\1\0\1\51\1\3\2\0"+
    "\2\43\1\4\1\43\1\55\25\43\1\36\1\63\1\37\1\0\1\43"+
    "\1\0\1\17\1\15\1\7\1\22\1\10\1\33\1\30\1\16\1\25"+
    "\2\43\1\23\1\32\1\6\1\5\1\11\1\31\1\21\1\13\1\12"+
    "\1\14\1\20\1\24\1\27\1\26\1\43\1\0\1\2\2\0\41\56"+
    "\2\0\4\43\4\0\1\43\2\0\1\56\2\0\1\52\4\0\1\43"+
    "\1\0\1\45\2\0\1\43\5\0\27\43\1\0\37\43\1\0\u01ca\43"+
    "\4\0\14\43\16\0\5\43\7\0\1\43\1\0\1\43\21\0\160\56"+
    "\5\43\1\0\2\43\2\0\4\43\10\0\1\43\1\0\3\43\1\0"+
    "\1\43\1\0\24\43\1\0\123\43\1\0\213\43\1\0\5\56\2\0"+
    "\236\43\11\0\46\43\2\0\1\43\7\0\47\43\7\0\1\43\1\0"+
    "\55\56\1\0\1\56\1\0\2\56\1\0\2\56\1\0\1\56\10\0"+
    "\33\43\5\0\3\43\15\0\5\56\6\0\1\43\4\0\13\56\5\0"+
    "\53\43\25\56\12\62\4\0\2\43\1\56\143\43\1\0\1\43\10\56"+
    "\1\0\6\56\2\43\2\56\1\0\4\56\2\43\12\62\3\43\2\0"+
    "\1\43\17\0\1\56\1\43\1\56\36\43\33\56\2\0\131\43\13\56"+
    "\1\43\16\0\12\62\41\43\11\56\2\43\4\0\1\43\5\0\26\43"+
    "\4\56\1\43\11\56\1\43\3\56\1\43\5\56\22\0\31\43\3\56"+
    "\104\0\1\43\1\0\13\43\67\0\33\56\1\0\4\56\66\43\3\56"+
    "\1\43\22\56\1\43\7\56\12\43\2\56\2\0\12\62\1\0\7\43"+
    "\1\0\7\43\1\0\3\56\1\0\10\43\2\0\2\43\2\0\26\43"+
    "\1\0\7\43\1\0\1\43\3\0\4\43\2\0\1\56\1\43\7\56"+
    "\2\0\2\56\2\0\3\56\1\43\10\0\1\56\4\0\2\43\1\0"+
    "\3\43\2\56\2\0\12\62\4\43\7\0\1\43\5\0\3\56\1\0"+
    "\6\43\4\0\2\43\2\0\26\43\1\0\7\43\1\0\2\43\1\0"+
    "\2\43\1\0\2\43\2\0\1\56\1\0\5\56\4\0\2\56\2\0"+
    "\3\56\3\0\1\56\7\0\4\43\1\0\1\43\7\0\12\62\2\56"+
    "\3\43\1\56\13\0\3\56\1\0\11\43\1\0\3\43\1\0\26\43"+
    "\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\56\1\43\10\56"+
    "\1\0\3\56\1\0\3\56\2\0\1\43\17\0\2\43\2\56\2\0"+
    "\12\62\1\0\1\43\17\0\3\56\1\0\10\43\2\0\2\43\2\0"+
    "\26\43\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\56\1\43"+
    "\7\56\2\0\2\56\2\0\3\56\10\0\2\56\4\0\2\43\1\0"+
    "\3\43\2\56\2\0\12\62\1\0\1\43\20\0\1\56\1\43\1\0"+
    "\6\43\3\0\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1\0"+
    "\2\43\3\0\2\43\3\0\3\43\3\0\14\43\4\0\5\56\3\0"+
    "\3\56\1\0\4\56\2\0\1\43\6\0\1\56\16\0\12\62\11\0"+
    "\1\43\7\0\3\56\1\0\10\43\1\0\3\43\1\0\27\43\1\0"+
    "\12\43\1\0\5\43\3\0\1\43\7\56\1\0\3\56\1\0\4\56"+
    "\7\0\2\56\1\0\2\43\6\0\2\43\2\56\2\0\12\62\22\0"+
    "\2\56\1\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43\1\0"+
    "\5\43\2\0\1\56\1\43\7\56\1\0\3\56\1\0\4\56\7\0"+
    "\2\56\7\0\1\43\1\0\2\43\2\56\2\0\12\62\1\0\2\43"+
    "\17\0\2\56\1\0\10\43\1\0\3\43\1\0\51\43\2\0\1\43"+
    "\7\56\1\0\3\56\1\0\4\56\1\43\10\0\1\56\10\0\2\43"+
    "\2\56\2\0\12\62\12\0\6\43\2\0\2\56\1\0\22\43\3\0"+
    "\30\43\1\0\11\43\1\0\1\43\2\0\7\43\3\0\1\56\4\0"+
    "\6\56\1\0\1\56\1\0\10\56\22\0\2\56\15\0\60\43\1\56"+
    "\2\43\7\56\4\0\10\43\10\56\1\0\12\62\47\0\2\43\1\0"+
    "\1\43\2\0\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0"+
    "\7\43\1\0\3\43\1\0\1\43\1\0\1\43\2\0\2\43\1\0"+
    "\4\43\1\56\2\43\6\56\1\0\2\56\1\43\2\0\5\43\1\0"+
    "\1\43\1\0\6\56\2\0\12\62\2\0\4\43\40\0\1\43\27\0"+
    "\2\56\6\0\12\62\13\0\1\56\1\0\1\56\1\0\1\56\4\0"+
    "\2\56\10\43\1\0\44\43\4\0\24\56\1\0\2\56\5\43\13\56"+
    "\1\0\44\56\11\0\1\56\71\0\53\43\24\56\1\43\12\62\6\0"+
    "\6\43\4\56\4\43\3\56\1\43\3\56\2\43\7\56\3\43\4\56"+
    "\15\43\14\56\1\43\1\56\12\62\4\56\2\0\46\43\1\0\1\43"+
    "\5\0\1\43\2\0\53\43\1\0\u014d\43\1\0\4\43\2\0\7\43"+
    "\1\0\1\43\1\0\4\43\2\0\51\43\1\0\4\43\2\0\41\43"+
    "\1\0\4\43\2\0\7\43\1\0\1\43\1\0\4\43\2\0\17\43"+
    "\1\0\71\43\1\0\4\43\2\0\103\43\2\0\3\56\40\0\20\43"+
    "\20\0\125\43\14\0\u026c\43\2\0\21\43\1\0\32\43\5\0\113\43"+
    "\3\0\3\43\17\0\15\43\1\0\4\43\3\56\13\0\22\43\3\56"+
    "\13\0\22\43\2\56\14\0\15\43\1\0\3\43\1\0\2\56\14\0"+
    "\64\43\40\56\3\0\1\43\3\0\2\43\1\56\2\0\12\62\41\0"+
    "\3\56\2\0\12\62\6\0\130\43\10\0\51\43\1\56\1\43\5\0"+
    "\106\43\12\0\35\43\3\0\14\56\4\0\14\56\12\0\12\62\36\43"+
    "\2\0\5\43\13\0\54\43\4\0\21\56\7\43\2\56\6\0\12\62"+
    "\46\0\27\43\5\56\4\0\65\43\12\56\1\0\35\56\2\0\1\56"+
    "\12\62\6\0\12\62\15\0\1\43\130\0\5\56\57\43\21\56\7\43"+
    "\4\0\12\62\21\0\11\56\14\0\3\56\36\43\15\56\2\43\12\62"+
    "\54\43\16\56\14\0\44\43\24\56\10\0\12\62\3\0\3\43\12\62"+
    "\44\43\122\0\3\56\1\0\25\56\4\43\1\56\4\43\3\56\2\43"+
    "\11\0\300\43\47\56\25\0\4\56\u0116\43\2\0\6\43\2\0\46\43"+
    "\2\0\6\43\2\0\10\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\37\43\2\0\65\43\1\0\7\43\1\0\1\43\3\0\3\43"+
    "\1\0\7\43\3\0\4\43\2\0\6\43\4\0\15\43\5\0\3\43"+
    "\1\0\7\43\16\0\5\56\32\0\5\56\20\0\2\43\23\0\1\43"+
    "\13\0\5\56\5\0\6\56\1\0\1\43\15\0\1\43\20\0\15\43"+
    "\3\0\14\43\1\43\16\43\25\0\15\56\4\0\1\56\3\0\14\56"+
    "\21\0\1\43\4\0\1\43\2\0\12\43\1\0\1\43\3\0\5\43"+
    "\6\0\1\43\1\0\1\43\1\0\1\43\1\0\4\43\1\0\13\43"+
    "\2\0\4\43\5\0\5\43\4\0\1\43\21\0\51\43\u0a77\0\57\43"+
    "\1\0\57\43\1\0\205\43\6\0\4\43\3\56\2\43\14\0\46\43"+
    "\1\0\1\43\5\0\1\43\2\0\70\43\7\0\1\43\17\0\1\56"+
    "\27\43\11\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0"+
    "\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0\40\56\57\0"+
    "\1\43\u01d5\0\3\43\31\0\11\43\6\56\1\0\5\43\2\0\5\43"+
    "\4\0\126\43\2\0\2\56\2\0\3\43\1\0\132\43\1\0\4\43"+
    "\5\0\51\43\3\0\136\43\21\0\33\43\65\0\20\43\u0200\0\u19b6\43"+
    "\112\0\u51cd\43\63\0\u048d\43\103\0\56\43\2\0\u010d\43\3\0\20\43"+
    "\12\62\2\43\24\0\57\43\1\56\4\0\12\56\1\0\31\43\7\0"+
    "\1\56\120\43\2\56\45\0\11\43\2\0\147\43\2\0\4\43\1\0"+
    "\4\43\14\0\13\43\115\0\12\43\1\56\3\43\1\56\4\43\1\56"+
    "\27\43\5\56\20\0\1\43\7\0\64\43\14\0\2\56\62\43\21\56"+
    "\13\0\12\62\6\0\22\56\6\43\3\0\1\43\4\0\12\62\34\43"+
    "\10\56\2\0\27\43\15\56\14\0\35\43\3\0\4\56\57\43\16\56"+
    "\16\0\1\43\12\62\46\0\51\43\16\56\11\0\3\43\1\56\10\43"+
    "\2\56\2\0\12\62\6\0\27\43\3\0\1\43\1\56\4\0\60\43"+
    "\1\56\1\43\3\56\2\43\2\56\5\43\2\56\1\43\1\56\1\43"+
    "\30\0\3\43\2\0\13\43\5\56\2\0\3\43\2\56\12\0\6\43"+
    "\2\0\6\43\2\0\6\43\11\0\7\43\1\0\7\43\221\0\43\43"+
    "\10\56\1\0\2\56\2\0\12\62\6\0\u2ba4\43\14\0\27\43\4\0"+
    "\61\43\u2104\0\u016e\43\2\0\152\43\46\0\7\43\14\0\5\43\5\0"+
    "\1\43\1\56\12\43\1\0\15\43\1\0\5\43\1\0\1\43\1\0"+
    "\2\43\1\0\2\43\1\0\154\43\41\0\u016b\43\22\0\100\43\2\0"+
    "\66\43\50\0\15\43\3\0\20\56\20\0\7\56\14\0\2\43\30\0"+
    "\3\43\31\0\1\43\6\0\5\43\1\0\207\43\2\0\1\56\4\0"+
    "\1\43\13\0\12\62\7\0\32\43\4\0\1\43\1\0\32\43\13\0"+
    "\131\43\3\0\6\43\2\0\6\43\2\0\6\43\2\0\3\43\3\0"+
    "\2\43\3\0\2\43\22\0\3\56\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\24\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\1\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\1\22\1\23\1\24"+
    "\1\25\1\24\1\3\1\5\1\26\20\5\1\27\16\5"+
    "\1\30\3\5\2\0\1\31\4\0\15\5\1\32\1\5"+
    "\1\33\1\5\1\34\5\5\1\35\6\5\1\36\10\5"+
    "\1\37\4\0\2\40\1\0\1\41\4\5\1\42\6\5"+
    "\1\43\10\5\1\44\3\5\1\0\1\20\1\45\1\5"+
    "\1\46\1\47\1\50\3\5\1\51\1\0\1\52\1\0"+
    "\1\40\2\0\2\5\1\53\3\5\1\54\2\5\1\55"+
    "\12\5\1\56\4\5\1\57\1\52\2\0\1\41\7\5"+
    "\1\60\1\61\4\5\1\62\3\5\1\63\3\5\1\0"+
    "\1\64\1\65\2\5\1\66\2\5\1\67\7\5\1\70"+
    "\1\71\1\0\1\5\1\72\1\73\1\74\1\5\1\75"+
    "\2\5\1\76\1\77\1\5\1\100\1\101\1\5\1\102"+
    "\1\5\1\103\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\150\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\150\0\150\0\150\0\150\0\u0514\0\150"+
    "\0\u0548\0\150\0\u057c\0\150\0\150\0\150\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\150\0\150\0\u06b4\0\u06e8\0\u071c"+
    "\0\u0410\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u0410\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u0410\0\u1248\0\u0410\0\u127c\0\u0410\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u0410\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u0410\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\150\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u0f08"+
    "\0\150\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u0410"+
    "\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u0410\0\u19cc"+
    "\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u0410"+
    "\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\150\0\u1c70\0\u0410"+
    "\0\u0410\0\u0410\0\u1ca4\0\u1cd8\0\u1d0c\0\u0410\0\u1d40\0\u16c0"+
    "\0\u1d74\0\u16f4\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u0410\0\u1e78"+
    "\0\u1eac\0\u1ee0\0\u0410\0\u1f14\0\u1f48\0\u0410\0\u1f7c\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u0410\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u0410\0\u2254\0\u2288"+
    "\0\u22bc\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4"+
    "\0\u2428\0\u0410\0\u0410\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u0410"+
    "\0\u252c\0\u2560\0\u2594\0\u0410\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u0410\0\u0410\0\u2698\0\u26cc\0\u0410\0\u2700\0\u2734\0\u0410"+
    "\0\u2768\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u0410"+
    "\0\u0410\0\u28d4\0\u2908\0\u0410\0\u0410\0\u0410\0\u293c\0\u0410"+
    "\0\u2970\0\u29a4\0\u0410\0\u0410\0\u29d8\0\u1da8\0\u0410\0\u2a0c"+
    "\0\u0410\0\u2a40\0\u0410\0\u0410\0\u0410";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\4\26\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\26\1\42\1\3\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\26\1\3\2\5\1\52\1\53\1\3"+
    "\41\54\1\55\15\54\2\3\2\54\1\56\65\0\1\4"+
    "\63\0\1\57\1\5\54\0\2\5\7\0\1\26\1\60"+
    "\26\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\2\26\1\61\25\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\13\26\1\62"+
    "\14\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\1\26\1\63\11\26\1\64\14\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\2\26\1\65\20\26\1\66\2\26\1\67\1\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\15\26\1\70\12\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\4\26\1\71\6\26\1\72"+
    "\1\26\1\73\12\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\6\26\1\74\1\26\1\75"+
    "\10\26\1\76\6\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\7\26\1\77\20\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\1\26\1\100\26\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\13\26\1\101\14\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\7\26\1\102\1\26\1\103\4\26\1\104\1\105\4\26"+
    "\1\106\3\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\5\0\13\26\1\107\14\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\1\26"+
    "\1\110\2\26\1\111\6\26\1\112\14\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\1\26"+
    "\1\113\5\26\1\114\3\26\1\115\14\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\30\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\1\26\1\116\17\26\1\117\6\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\2\26"+
    "\1\120\4\26\1\121\20\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\4\26\1\122\23\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\13\26\1\123\5\26\1\124\6\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\41\0\1\125"+
    "\65\0\1\126\17\0\1\127\45\0\1\130\1\0\1\131"+
    "\21\0\30\47\6\0\2\47\1\0\2\47\6\0\2\47"+
    "\3\0\1\47\54\0\1\50\72\0\1\132\63\0\1\53"+
    "\41\0\1\133\21\0\1\53\7\0\1\54\3\0\1\54"+
    "\6\0\1\54\17\0\1\54\23\0\1\57\66\0\2\26"+
    "\1\134\25\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\5\0\6\26\1\135\17\26\1\136\1\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\26\26\1\137\1\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\7\26\1\140\20\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\3\26\1\141\24\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\6\26\1\142\21\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\5\26\1\143\22\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\1\26\1\144\26\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\15\26\1\145\12\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\3\26\1\146\24\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\10\26\1\147\17\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\15\26\1\150\12\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\11\26\1\151\16\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\2\26\1\152\25\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\4\26\1\153\23\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\1\26\1\154\26\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\7\26\1\155\20\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\7\26\1\156\20\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\7\26\1\157\20\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\16\26\1\160\11\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\20\26\1\161\7\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\24\26\1\162\3\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\15\26\1\163\12\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\1\26\1\164\26\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\13\26\1\165\11\26\1\166\2\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\6\26"+
    "\1\167\21\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\5\0\3\26\1\170\4\26\1\171\17\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\17\26\1\172\10\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\6\26\1\173\21\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\15\26\1\174\12\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\6\26\1\175\21\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\6\26\1\176\21\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\13\26\1\177\14\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\3\26\1\200\13\26\1\201\10\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\17\26"+
    "\1\202\10\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\41\0\1\203\23\0\42\204\1\205\21\204"+
    "\40\0\1\133\21\0\1\127\1\0\44\206\1\207\17\206"+
    "\57\131\1\210\1\211\3\131\62\0\1\212\63\0\1\213"+
    "\5\0\3\26\1\214\24\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\10\26\1\215\17\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\4\26\1\216\23\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\5\26\1\217\22\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\4\26\1\220\23\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\17\26\1\221\10\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\4\26\1\222\23\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\6\26\1\223\21\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\5\26\1\224\22\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\26\26\1\225\1\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\21\26\1\226\6\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\4\26\1\227\23\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\21\26\1\230\6\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\24\26\1\231\3\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\17\26\1\232\10\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\1\26\1\233\26\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\6\26\1\234\21\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\15\26\1\235\12\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\13\26\1\236\14\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\15\26\1\237\12\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\6\26\1\240\21\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\16\26\1\241\11\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\5\0\10\26\1\242\17\26\6\0\2\26\1\0\2\47"+
    "\6\0\2\26\3\0\1\26\5\0\21\26\1\243\6\26"+
    "\6\0\2\26\1\0\2\47\6\0\2\26\3\0\1\26"+
    "\1\0\4\244\30\170\6\244\2\170\1\244\2\245\6\244"+
    "\2\170\1\244\1\246\1\244\1\170\1\244\4\0\11\26"+
    "\1\247\16\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\5\0\4\26\1\250\23\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\16\26"+
    "\1\251\11\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\5\0\12\26\1\252\15\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\4\26"+
    "\1\253\23\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\5\0\7\26\1\254\20\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\4\26"+
    "\1\255\23\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\5\0\7\26\1\147\20\26\6\0\2\26"+
    "\1\0\2\47\6\0\2\26\3\0\1\26\5\0\4\26"+
    "\1\256\23\26\6\0\2\26\1\0\2\47\6\0\2\26"+
    "\3\0\1\26\1\0\42\204\1\257\63\204\1\260\21\204"+
    "\44\206\1\261\63\206\1\261\1\206\1\262\15\206\62\0"+
    "\1\263\56\0\1\264\4\0\1\213\5\0\4\26\1\265"+
    "\23\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\15\26\1\266\12\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\16\26\1\267"+
    "\11\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\1\26\1\270\26\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\1\26\1\271"+
    "\26\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\2\26\1\272\25\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\22\26\1\273"+
    "\5\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\4\26\1\274\23\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\21\26\1\275"+
    "\6\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\6\26\1\276\21\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\2\26\1\277"+
    "\25\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\17\26\1\300\10\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\4\26\1\301"+
    "\23\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\3\26\1\302\24\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\15\26\1\303"+
    "\12\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\4\26\1\304\23\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\22\26\1\305"+
    "\5\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\4\26\1\306\23\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\1\26\1\307"+
    "\26\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\21\26\1\310\6\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\1\26\1\311"+
    "\26\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\1\0\60\244\1\246\7\244\30\245\6\244\2\245"+
    "\1\244\2\245\6\244\2\245\1\244\1\246\1\244\1\245"+
    "\1\244\4\0\17\26\1\312\10\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\2\26\1\313"+
    "\21\26\1\314\3\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\10\26\1\315\17\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\6\26\1\316\21\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\1\0\42\204\1\317\21\204\44\206"+
    "\1\261\1\206\1\211\15\206\40\0\1\320\65\0\1\321"+
    "\16\0\1\321\1\322\5\0\5\26\1\323\22\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\13\26\1\324\14\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\2\26\1\325\25\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\7\26\1\326\20\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\16\26\1\327\11\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\15\26\1\330\12\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\2\26\1\331\25\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\24\26\1\332\3\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\4\26\1\333\23\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\13\26\1\334\14\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\21\26\1\335\6\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\13\26\1\336\14\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\7\26\1\337\20\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\7\26\1\340\20\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\24\26\1\341\3\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\2\26\1\342\25\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\15\26\1\343\12\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\4\26\1\344\23\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\6\26\1\345\21\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\4\26\1\346\23\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\15\26\1\347\12\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\43\0"+
    "\1\317\103\0\1\350\63\0\1\322\5\0\6\26\1\351"+
    "\21\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\17\26\1\352\10\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\4\26\1\353"+
    "\23\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\4\26\1\354\23\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\7\26\1\355"+
    "\20\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\6\26\1\356\21\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\13\26\1\357"+
    "\14\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\2\26\1\360\25\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\13\26\1\361"+
    "\14\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\3\26\1\362\24\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\7\26\1\363"+
    "\20\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\13\26\1\364\14\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\17\26\1\365"+
    "\10\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\4\26\1\366\23\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\21\26\1\367"+
    "\6\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\15\26\1\370\12\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\4\26\1\371"+
    "\23\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\63\0\1\372\5\0\2\26\1\373\25\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\16\26\1\374\11\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\22\26\1\375\5\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\17\26\1\376\10\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\6\26\1\377\21\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\6\26\1\u0100\21\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\4\26\1\u0101\23\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\6\26\1\u0102\21\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\22\26\1\u0103\5\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\5\0"+
    "\16\26\1\u0104\11\26\6\0\2\26\1\0\2\47\6\0"+
    "\2\26\3\0\1\26\5\0\1\26\1\u0105\26\26\6\0"+
    "\2\26\1\0\2\47\6\0\2\26\3\0\1\26\63\0"+
    "\1\u0106\5\0\6\26\1\u0107\21\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\4\26\1\u0108"+
    "\23\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\16\26\1\u0109\11\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\4\26\1\u010a"+
    "\23\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\2\26\1\u010b\25\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\5\0\16\26\1\u010c"+
    "\11\26\6\0\2\26\1\0\2\47\6\0\2\26\3\0"+
    "\1\26\5\0\16\26\1\u010d\11\26\6\0\2\26\1\0"+
    "\2\47\6\0\2\26\3\0\1\26\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10868];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\24\1\4\11\1\1\1\11"+
    "\1\1\1\11\1\1\3\11\5\1\2\11\47\1\2\0"+
    "\1\1\4\0\47\1\1\11\4\0\1\1\1\11\1\0"+
    "\31\1\1\0\1\1\1\11\10\1\1\0\1\1\1\0"+
    "\1\1\2\0\33\1\2\0\26\1\1\0\21\1\1\0"+
    "\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

//    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 70: break;
        case 8: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 71: break;
        case 40: 
          { return TaraTypes.WITH;
          }
        case 72: break;
        case 29: 
          { return TaraTypes.VAR;
          }
        case 73: break;
        case 14: 
          { return TaraTypes.COLON;
          }
        case 74: break;
        case 61: 
          { return TaraTypes.ABSTRACT;
          }
        case 75: break;
        case 46: 
          { return TaraTypes.RATIO_TYPE;
          }
        case 76: break;
        case 21: 
          { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
          }
        case 77: break;
        case 16: 
          { return TaraTypes.MEASURE_VALUE_KEY;
          }
        case 78: break;
        case 49: 
          { return TaraTypes.SINGLE;
          }
        case 79: break;
        case 65: 
          { return TaraTypes.COMPONENT;
          }
        case 80: break;
        case 33: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 81: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 82: break;
        case 53: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 83: break;
        case 7: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 84: break;
        case 31: 
          { return TaraTypes.LIST;
          }
        case 85: break;
        case 34: 
          { return TaraTypes.CASE;
          }
        case 86: break;
        case 15: 
          { return TaraTypes.EQUALS;
          }
        case 87: break;
        case 10: 
          { return TaraTypes.DOT;
          }
        case 88: break;
        case 48: 
          { return TaraTypes.STRING_TYPE;
          }
        case 89: break;
        case 43: 
          { return TaraTypes.NAMED;
          }
        case 90: break;
        case 60: 
          { return TaraTypes.TERMINAL;
          }
        case 91: break;
        case 69: 
          { return TaraTypes.AGGREGATED;
          }
        case 92: break;
        case 38: 
          { return TaraTypes.DATE_TYPE;
          }
        case 93: break;
        case 5: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 94: break;
        case 44: 
          { return TaraTypes.EMPTY_REF;
          }
        case 95: break;
        case 6: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 96: break;
        case 63: 
          { return TaraTypes.REQUIRED;
          }
        case 97: break;
        case 18: 
          { return TaraTypes.PLUS;
          }
        case 98: break;
        case 25: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 99: break;
        case 30: 
          { return TaraTypes.DSL;
          }
        case 100: break;
        case 36: 
          { return TaraTypes.ROOT;
          }
        case 101: break;
        case 64: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 102: break;
        case 4: 
          { return inline();
          }
        case 103: break;
        case 54: 
          { return TaraTypes.EXTENDS;
          }
        case 104: break;
        case 59: 
          { return TaraTypes.PROPERTY;
          }
        case 105: break;
        case 12: 
          { return TaraTypes.STAR;
          }
        case 106: break;
        case 51: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 107: break;
        case 9: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 108: break;
        case 19: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 109: break;
        case 17: 
          { return semicolon();
          }
        case 110: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 111: break;
        case 41: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 112: break;
        case 37: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 113: break;
        case 50: 
          { return TaraTypes.ALWAYS;
          }
        case 114: break;
        case 35: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 115: break;
        case 45: 
          { return TaraTypes.TACIT;
          }
        case 116: break;
        case 23: 
          { return TaraTypes.AS;
          }
        case 117: break;
        case 22: 
          { return TaraTypes.ON;
          }
        case 118: break;
        case 26: 
          { return TaraTypes.SUB;
          }
        case 119: break;
        case 62: 
          { return TaraTypes.READONLY;
          }
        case 120: break;
        case 58: 
          { return TaraTypes.ENCLOSED;
          }
        case 121: break;
        case 11: 
          { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
          }
        case 122: break;
        case 55: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 123: break;
        case 24: 
          { return TaraTypes.IS;
          }
        case 124: break;
        case 57: 
          { return TaraTypes.MEASURE_TYPE_KEY;
          }
        case 125: break;
        case 27: 
          { return TaraTypes.USE;
          }
        case 126: break;
        case 56: 
          { return TaraTypes.INT_TYPE;
          }
        case 127: break;
        case 52: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 128: break;
        case 68: 
          { return TaraTypes.ASSOCIATED;
          }
        case 129: break;
        case 39: 
          { return TaraTypes.WORD_KEY;
          }
        case 130: break;
        case 67: 
          { return TaraTypes.INTENTION;
          }
        case 131: break;
        case 66: 
          { return TaraTypes.ADDRESSED;
          }
        case 132: break;
        case 20: 
          { return TaraTypes.CHARACTER;
          }
        case 133: break;
        case 47: 
          { return TaraTypes.FACET;
          }
        case 134: break;
        case 13: 
          { return TaraTypes.COMMA;
          }
        case 135: break;
        case 32: 
          { System.out.println(yytext());
          }
        case 136: break;
        case 28: 
          { return TaraTypes.HAS;
          }
        case 137: break;
        case 3: 
          { return newlineIndent();
          }
        case 138: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 270: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
