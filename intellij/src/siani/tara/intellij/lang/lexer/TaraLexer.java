/* The following code was generated by JFlex 1.4.3 on 20/06/14 12:15 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/06/14 12:15 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\63\1\1\1\2\3\0\16\63\4\0\1\1\1\0\1\0\1\60"+
    "\1\62\2\0\1\41\1\33\1\34\1\0\1\50\1\43\1\27\1\42"+
    "\1\0\12\61\1\44\1\45\1\46\1\0\1\47\2\0\1\51\1\56"+
    "\1\3\1\54\4\62\1\52\4\62\1\53\3\62\1\31\1\55\3\62"+
    "\1\30\3\62\1\35\1\0\1\36\1\0\1\62\1\0\1\15\1\21"+
    "\1\6\1\25\1\7\1\57\1\17\1\26\1\12\1\62\1\16\1\23"+
    "\1\13\1\5\1\4\1\10\1\24\1\14\1\20\1\11\1\22\1\32"+
    "\4\62\1\37\1\0\1\40\1\0\41\63\2\0\4\62\4\0\1\62"+
    "\2\0\1\63\7\0\1\62\4\0\1\62\5\0\27\62\1\0\37\62"+
    "\1\0\u01ca\62\4\0\14\62\16\0\5\62\7\0\1\62\1\0\1\62"+
    "\21\0\160\63\5\62\1\0\2\62\2\0\4\62\10\0\1\62\1\0"+
    "\3\62\1\0\1\62\1\0\24\62\1\0\123\62\1\0\213\62\1\0"+
    "\5\63\2\0\236\62\11\0\46\62\2\0\1\62\7\0\47\62\11\0"+
    "\55\63\1\0\1\63\1\0\2\63\1\0\2\63\1\0\1\63\10\0"+
    "\33\62\5\0\3\62\15\0\4\63\7\0\1\62\4\0\13\63\5\0"+
    "\53\62\25\63\12\61\4\0\2\62\1\63\143\62\1\0\1\62\10\63"+
    "\1\0\6\63\2\62\2\63\1\0\4\63\2\62\12\61\3\62\2\0"+
    "\1\62\17\0\1\63\1\62\1\63\36\62\33\63\2\0\131\62\13\63"+
    "\1\62\16\0\12\61\41\62\11\63\2\62\4\0\1\62\5\0\26\62"+
    "\4\63\1\62\11\63\1\62\3\63\1\62\5\63\22\0\31\62\3\63"+
    "\244\0\4\63\66\62\3\63\1\62\22\63\1\62\7\63\12\62\2\63"+
    "\2\0\12\61\1\0\7\62\1\0\7\62\1\0\3\63\1\0\10\62"+
    "\2\0\2\62\2\0\26\62\1\0\7\62\1\0\1\62\3\0\4\62"+
    "\2\0\1\63\1\62\7\63\2\0\2\63\2\0\3\63\1\62\10\0"+
    "\1\63\4\0\2\62\1\0\3\62\2\63\2\0\12\61\4\62\7\0"+
    "\1\62\5\0\3\63\1\0\6\62\4\0\2\62\2\0\26\62\1\0"+
    "\7\62\1\0\2\62\1\0\2\62\1\0\2\62\2\0\1\63\1\0"+
    "\5\63\4\0\2\63\2\0\3\63\3\0\1\63\7\0\4\62\1\0"+
    "\1\62\7\0\12\61\2\63\3\62\1\63\13\0\3\63\1\0\11\62"+
    "\1\0\3\62\1\0\26\62\1\0\7\62\1\0\2\62\1\0\5\62"+
    "\2\0\1\63\1\62\10\63\1\0\3\63\1\0\3\63\2\0\1\62"+
    "\17\0\2\62\2\63\2\0\12\61\1\0\1\62\17\0\3\63\1\0"+
    "\10\62\2\0\2\62\2\0\26\62\1\0\7\62\1\0\2\62\1\0"+
    "\5\62\2\0\1\63\1\62\7\63\2\0\2\63\2\0\3\63\10\0"+
    "\2\63\4\0\2\62\1\0\3\62\2\63\2\0\12\61\1\0\1\62"+
    "\20\0\1\63\1\62\1\0\6\62\3\0\3\62\1\0\4\62\3\0"+
    "\2\62\1\0\1\62\1\0\2\62\3\0\2\62\3\0\3\62\3\0"+
    "\14\62\4\0\5\63\3\0\3\63\1\0\4\63\2\0\1\62\6\0"+
    "\1\63\16\0\12\61\11\0\1\62\7\0\3\63\1\0\10\62\1\0"+
    "\3\62\1\0\27\62\1\0\12\62\1\0\5\62\3\0\1\62\7\63"+
    "\1\0\3\63\1\0\4\63\7\0\2\63\1\0\2\62\6\0\2\62"+
    "\2\63\2\0\12\61\22\0\2\63\1\0\10\62\1\0\3\62\1\0"+
    "\27\62\1\0\12\62\1\0\5\62\2\0\1\63\1\62\7\63\1\0"+
    "\3\63\1\0\4\63\7\0\2\63\7\0\1\62\1\0\2\62\2\63"+
    "\2\0\12\61\1\0\2\62\17\0\2\63\1\0\10\62\1\0\3\62"+
    "\1\0\51\62\2\0\1\62\7\63\1\0\3\63\1\0\4\63\1\62"+
    "\10\0\1\63\10\0\2\62\2\63\2\0\12\61\12\0\6\62\2\0"+
    "\2\63\1\0\22\62\3\0\30\62\1\0\11\62\1\0\1\62\2\0"+
    "\7\62\3\0\1\63\4\0\6\63\1\0\1\63\1\0\10\63\22\0"+
    "\2\63\15\0\60\62\1\63\2\62\7\63\4\0\10\62\10\63\1\0"+
    "\12\61\47\0\2\62\1\0\1\62\2\0\2\62\1\0\1\62\2\0"+
    "\1\62\6\0\4\62\1\0\7\62\1\0\3\62\1\0\1\62\1\0"+
    "\1\62\2\0\2\62\1\0\4\62\1\63\2\62\6\63\1\0\2\63"+
    "\1\62\2\0\5\62\1\0\1\62\1\0\6\63\2\0\12\61\2\0"+
    "\2\62\42\0\1\62\27\0\2\63\6\0\12\61\13\0\1\63\1\0"+
    "\1\63\1\0\1\63\4\0\2\63\10\62\1\0\44\62\4\0\24\63"+
    "\1\0\2\63\5\62\13\63\1\0\44\63\11\0\1\63\71\0\53\62"+
    "\24\63\1\62\12\61\6\0\6\62\4\63\4\62\3\63\1\62\3\63"+
    "\2\62\7\63\3\62\4\63\15\62\14\63\1\62\1\63\12\61\4\63"+
    "\2\0\46\62\12\0\53\62\1\0\1\62\3\0\u0149\62\1\0\4\62"+
    "\2\0\7\62\1\0\1\62\1\0\4\62\2\0\51\62\1\0\4\62"+
    "\2\0\41\62\1\0\4\62\2\0\7\62\1\0\1\62\1\0\4\62"+
    "\2\0\17\62\1\0\71\62\1\0\4\62\2\0\103\62\2\0\3\63"+
    "\40\0\20\62\20\0\125\62\14\0\u026c\62\2\0\21\62\1\0\32\62"+
    "\5\0\113\62\3\0\3\62\17\0\15\62\1\0\4\62\3\63\13\0"+
    "\22\62\3\63\13\0\22\62\2\63\14\0\15\62\1\0\3\62\1\0"+
    "\2\63\14\0\64\62\40\63\3\0\1\62\3\0\2\62\1\63\2\0"+
    "\12\61\41\0\3\63\2\0\12\61\6\0\130\62\10\0\51\62\1\63"+
    "\1\62\5\0\106\62\12\0\35\62\3\0\14\63\4\0\14\63\12\0"+
    "\12\61\36\62\2\0\5\62\13\0\54\62\4\0\21\63\7\62\2\63"+
    "\6\0\12\61\46\0\27\62\5\63\4\0\65\62\12\63\1\0\35\63"+
    "\2\0\1\63\12\61\6\0\12\61\15\0\1\62\130\0\5\63\57\62"+
    "\21\63\7\62\4\0\12\61\21\0\11\63\14\0\3\63\36\62\12\63"+
    "\3\0\2\62\12\61\6\0\46\62\16\63\14\0\44\62\24\63\10\0"+
    "\12\61\3\0\3\62\12\61\44\62\122\0\3\63\1\0\25\63\4\62"+
    "\1\63\4\62\1\63\15\0\300\62\47\63\25\0\4\63\u0116\62\2\0"+
    "\6\62\2\0\46\62\2\0\6\62\2\0\10\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\37\62\2\0\65\62\1\0\7\62\1\0"+
    "\1\62\3\0\3\62\1\0\7\62\3\0\4\62\2\0\6\62\4\0"+
    "\15\62\5\0\3\62\1\0\7\62\16\0\5\63\32\0\5\63\20\0"+
    "\2\62\23\0\1\62\13\0\5\63\5\0\6\63\1\0\1\62\15\0"+
    "\1\62\20\0\15\62\3\0\32\62\26\0\15\63\4\0\1\63\3\0"+
    "\14\63\21\0\1\62\4\0\1\62\2\0\12\62\1\0\1\62\3\0"+
    "\5\62\6\0\1\62\1\0\1\62\1\0\1\62\1\0\4\62\1\0"+
    "\13\62\2\0\4\62\5\0\5\62\4\0\1\62\21\0\51\62\u0a77\0"+
    "\57\62\1\0\57\62\1\0\205\62\6\0\4\62\3\63\16\0\46\62"+
    "\12\0\66\62\11\0\1\62\17\0\1\63\27\62\11\0\7\62\1\0"+
    "\7\62\1\0\7\62\1\0\7\62\1\0\7\62\1\0\7\62\1\0"+
    "\7\62\1\0\7\62\1\0\40\63\57\0\1\62\u01d5\0\3\62\31\0"+
    "\11\62\6\63\1\0\5\62\2\0\5\62\4\0\126\62\2\0\2\63"+
    "\2\0\3\62\1\0\132\62\1\0\4\62\5\0\51\62\3\0\136\62"+
    "\21\0\33\62\65\0\20\62\u0200\0\u19b6\62\112\0\u51cc\62\64\0\u048d\62"+
    "\103\0\56\62\2\0\u010d\62\3\0\20\62\12\61\2\62\24\0\57\62"+
    "\1\63\14\0\2\63\1\0\31\62\10\0\120\62\2\63\45\0\11\62"+
    "\2\0\147\62\2\0\4\62\1\0\2\62\16\0\12\62\120\0\10\62"+
    "\1\63\3\62\1\63\4\62\1\63\27\62\5\63\20\0\1\62\7\0"+
    "\64\62\14\0\2\63\62\62\21\63\13\0\12\61\6\0\22\63\6\62"+
    "\3\0\1\62\4\0\12\61\34\62\10\63\2\0\27\62\15\63\14\0"+
    "\35\62\3\0\4\63\57\62\16\63\16\0\1\62\12\61\46\0\51\62"+
    "\16\63\11\0\3\62\1\63\10\62\2\63\2\0\12\61\6\0\27\62"+
    "\3\0\1\62\1\63\4\0\60\62\1\63\1\62\3\63\2\62\2\63"+
    "\5\62\2\63\1\62\1\63\1\62\30\0\3\62\43\0\6\62\2\0"+
    "\6\62\2\0\6\62\11\0\7\62\1\0\7\62\221\0\43\62\10\63"+
    "\1\0\2\63\2\0\12\61\6\0\u2ba4\62\14\0\27\62\4\0\61\62"+
    "\u2104\0\u012e\62\2\0\76\62\2\0\152\62\46\0\7\62\14\0\5\62"+
    "\5\0\1\62\1\63\12\62\1\0\15\62\1\0\5\62\1\0\1\62"+
    "\1\0\2\62\1\0\2\62\1\0\154\62\41\0\u016b\62\22\0\100\62"+
    "\2\0\66\62\50\0\15\62\3\0\20\63\20\0\7\63\14\0\2\62"+
    "\30\0\3\62\31\0\1\62\6\0\5\62\1\0\207\62\2\0\1\63"+
    "\4\0\1\62\13\0\12\61\7\0\32\62\4\0\1\62\1\0\32\62"+
    "\13\0\131\62\3\0\6\62\2\0\6\62\2\0\6\62\2\0\3\62"+
    "\3\0\2\62\3\0\2\62\22\0\3\63\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\14\4\1\1\3\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\1\7\4\1\1\1\21"+
    "\1\3\16\4\1\0\1\22\3\4\1\0\1\23\7\4"+
    "\1\0\1\24\1\0\16\4\2\0\2\4\1\25\7\4"+
    "\1\26\2\4\1\27\2\4\1\30\3\4\1\31\2\4"+
    "\1\32\2\0\1\33\1\34\20\4\1\0\1\33\1\4"+
    "\1\35\12\4\1\36\3\4\1\0\3\4\1\37\1\40"+
    "\1\4\1\41\1\4\1\42\5\4\1\0\1\4\1\43"+
    "\1\44\1\45\1\4\1\46\1\4\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\u0410\0\64\0\64\0\64\0\u0444\0\64"+
    "\0\64\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0410"+
    "\0\64\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0618\0\64\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0"+
    "\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0104\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u0bfc\0\u1144\0\u1178"+
    "\0\u0104\0\u11ac\0\u11e0\0\u0104\0\u1214\0\u1248\0\u127c\0\u0104"+
    "\0\u12b0\0\u12e4\0\u0104\0\u1318\0\u134c\0\u0f3c\0\u0104\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u0104\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c"+
    "\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u0104\0\u1964\0\u1998"+
    "\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u0104\0\u0104\0\u1ad0"+
    "\0\u0104\0\u1b04\0\u0104\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08"+
    "\0\u1c3c\0\u1c70\0\u0104\0\u0104\0\u0104\0\u1ca4\0\u0104\0\u1cd8"+
    "\0\u0104\0\u0104\0\u0104\0\64\0\u0104\0\u0104\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\3\6\1\17"+
    "\4\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\6\1\2\65\0"+
    "\1\3\63\0\1\54\1\4\64\0\1\6\1\55\22\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\24\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\12\6"+
    "\1\56\11\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\12\6\1\57\11\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\12\6\1\60\11\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\4\6\1\61\4\6"+
    "\1\62\12\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\2\6\1\63\5\6\1\64\13\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\17\6\1\65\4\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\1\6"+
    "\1\66\2\6\1\67\17\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\16\6\1\70\5\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\12\6\1\71\11\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\12\6"+
    "\1\72\11\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\27\0\1\73\31\0\1\74\5\0\1\6\1\75\22\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\4\6"+
    "\1\76\17\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\12\6\1\77\11\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\41\100\1\101\22\100\45\0\1\37\77\0"+
    "\1\53\5\0\20\6\1\102\3\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\3\0\2\6\1\103\21\6\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\3\0\12\6\1\104"+
    "\11\6\1\0\3\6\16\0\7\6\1\0\3\6\3\0"+
    "\1\6\1\105\22\6\1\0\3\6\16\0\7\6\1\0"+
    "\3\6\3\0\6\6\1\106\15\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\3\0\1\6\1\107\22\6\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\3\0\12\6\1\110"+
    "\11\6\1\0\3\6\16\0\7\6\1\0\3\6\2\111"+
    "\1\112\61\111\42\0\1\113\16\0\1\53\3\0\1\54"+
    "\65\0\2\6\1\114\21\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\10\6\1\115\13\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\15\6\1\116\6\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\3\6"+
    "\1\117\20\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\11\6\1\120\12\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\17\6\1\121\4\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\6\6\1\122\15\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\5\6"+
    "\1\123\16\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\20\6\1\124\3\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\1\6\1\125\22\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\21\6\1\126\2\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\15\6"+
    "\1\127\6\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\15\6\1\130\6\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\15\6\1\131\6\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\27\132\1\133\34\132\42\0"+
    "\1\113\16\0\1\74\5\0\11\6\1\134\12\6\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\3\0\15\6\1\135"+
    "\6\6\1\0\3\6\16\0\7\6\1\0\3\6\3\0"+
    "\11\6\1\136\12\6\1\0\3\6\16\0\7\6\1\0"+
    "\3\6\3\0\7\6\1\137\14\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\3\0\6\6\1\140\15\6\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\3\0\6\6\1\141"+
    "\15\6\1\0\3\6\16\0\7\6\1\0\3\6\3\0"+
    "\17\6\1\142\4\6\1\0\3\6\16\0\7\6\1\0"+
    "\3\6\3\0\11\6\1\143\12\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\3\0\1\6\1\144\22\6\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\3\0\20\6\1\145"+
    "\3\6\1\0\3\6\16\0\7\6\1\0\3\6\61\0"+
    "\1\146\5\0\3\6\1\147\20\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\3\0\4\6\1\150\17\6\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\3\0\4\6\1\151"+
    "\17\6\1\0\3\6\16\0\7\6\1\0\3\6\3\0"+
    "\13\6\1\152\10\6\1\0\3\6\16\0\7\6\1\0"+
    "\3\6\3\0\10\6\1\153\13\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\3\0\4\6\1\154\17\6\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\3\0\4\6\1\155"+
    "\17\6\1\0\3\6\16\0\7\6\1\0\3\6\3\0"+
    "\1\6\1\156\22\6\1\0\3\6\16\0\7\6\1\0"+
    "\3\6\3\0\6\6\1\157\15\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\3\0\6\6\1\160\15\6\1\0"+
    "\3\6\16\0\7\6\1\0\3\6\3\0\17\6\1\161"+
    "\4\6\1\0\3\6\16\0\7\6\1\0\3\6\3\0"+
    "\6\6\1\162\15\6\1\0\3\6\16\0\7\6\1\0"+
    "\3\6\3\0\4\6\1\163\17\6\1\0\3\6\16\0"+
    "\7\6\1\0\3\6\3\0\24\6\1\164\3\6\16\0"+
    "\7\6\1\0\3\6\27\132\1\165\63\132\1\166\34\132"+
    "\3\0\22\6\1\167\1\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\1\6\1\170\22\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\12\6\1\171\11\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\4\6"+
    "\1\172\17\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\17\6\1\173\4\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\16\6\1\174\5\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\7\6\1\175\14\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\20\6"+
    "\1\176\3\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\15\6\1\121\6\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\4\6\1\177\17\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\15\6\1\200\6\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\12\6"+
    "\1\201\11\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\7\6\1\202\14\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\2\6\1\203\21\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\11\6\1\204\12\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\7\6"+
    "\1\205\14\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\7\6\1\206\14\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\11\6\1\207\12\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\5\0\1\210\56\0\27\132"+
    "\1\211\34\132\3\0\17\6\1\212\4\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\15\6\1\213\6\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\14\6"+
    "\1\214\7\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\11\6\1\215\12\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\20\6\1\216\3\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\2\6\1\217\21\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\4\6"+
    "\1\220\17\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\5\6\1\221\16\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\5\6\1\222\16\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\14\6\1\223\7\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\2\6"+
    "\1\224\21\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\6\6\1\225\15\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\6\6\1\226\15\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\5\6\1\227\16\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\11\6"+
    "\1\230\12\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\12\6\1\231\11\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\15\0\1\232\75\0\1\211\37\0\11\6"+
    "\1\233\12\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\4\6\1\234\17\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\12\6\1\235\11\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\4\6\1\236\17\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\14\6"+
    "\1\237\7\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\12\6\1\240\11\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\6\6\1\241\15\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\12\6\1\242\11\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\4\6"+
    "\1\243\17\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\12\6\1\244\11\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\7\6\1\245\14\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\20\6\1\246\3\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\4\6"+
    "\1\247\17\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\3\6\1\250\20\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\13\0\1\251\53\0\3\6\1\252\20\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\11\6"+
    "\1\253\12\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\20\6\1\254\3\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\2\6\1\255\21\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\3\6\1\256\20\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\20\6"+
    "\1\257\3\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\3\0\1\6\1\260\22\6\1\0\3\6\16\0\7\6"+
    "\1\0\3\6\3\0\4\6\1\261\17\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\22\6\1\262\1\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\6\6"+
    "\1\263\15\6\1\0\3\6\16\0\7\6\1\0\3\6"+
    "\7\0\1\264\57\0\4\6\1\265\17\6\1\0\3\6"+
    "\16\0\7\6\1\0\3\6\3\0\4\6\1\266\17\6"+
    "\1\0\3\6\16\0\7\6\1\0\3\6\3\0\2\6"+
    "\1\267\21\6\1\0\3\6\16\0\7\6\1\0\3\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7436];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\6\11\1\1\3\11\1\1\2\11"+
    "\31\1\1\0\4\1\1\0\1\11\7\1\1\0\1\11"+
    "\1\0\16\1\2\0\30\1\2\0\22\1\1\0\21\1"+
    "\1\0\16\1\1\0\12\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 46: break;
        case 7: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 47: break;
        case 21: 
          { return TaraTypes.VAR;
          }
        case 48: break;
        case 13: 
          { return TaraTypes.COLON;
          }
        case 49: break;
        case 41: 
          { return TaraTypes.ABSTRACT;
          }
        case 50: break;
        case 15: 
          { return TaraTypes.OPEN_AN;
          }
        case 51: break;
        case 39: 
          { return TaraTypes.MULTIPLE;
          }
        case 52: break;
        case 44: 
          { return TaraTypes.NAMESPACE_KEY;
          }
        case 53: break;
        case 22: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 54: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 55: break;
        case 36: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 56: break;
        case 6: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 57: break;
        case 16: 
          { return TaraTypes.CLOSE_AN;
          }
        case 58: break;
        case 26: 
          { return TaraTypes.BASE_KEY;
          }
        case 59: break;
        case 11: 
          { return TaraTypes.DOT;
          }
        case 60: break;
        case 45: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 61: break;
        case 32: 
          { return TaraTypes.STRING_TYPE;
          }
        case 62: break;
        case 9: 
          { return openBracket();
          }
        case 63: break;
        case 38: 
          { return TaraTypes.TERMINAL;
          }
        case 64: break;
        case 4: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 65: break;
        case 42: 
          { return TaraTypes.HAS_NAME;
          }
        case 66: break;
        case 5: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 67: break;
        case 40: 
          { return TaraTypes.REQUIRED;
          }
        case 68: break;
        case 18: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 69: break;
        case 25: 
          { return TaraTypes.ROOT;
          }
        case 70: break;
        case 20: 
          { return TaraTypes.DOC_LINE;
          }
        case 71: break;
        case 19: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 72: break;
        case 31: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 73: break;
        case 8: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 74: break;
        case 17: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 75: break;
        case 14: 
          { return semicolon();
          }
        case 76: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 77: break;
        case 43: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 78: break;
        case 29: 
          { return TaraTypes.ALIAS_TYPE;
          }
        case 79: break;
        case 24: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 80: break;
        case 30: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 81: break;
        case 37: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 82: break;
        case 23: 
          { return TaraTypes.CASE_KEY;
          }
        case 83: break;
        case 33: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 84: break;
        case 35: 
          { return TaraTypes.INT_TYPE;
          }
        case 85: break;
        case 10: 
          { return closeBracket();
          }
        case 86: break;
        case 34: 
          { return TaraTypes.PACKAGE;
          }
        case 87: break;
        case 28: 
          { return TaraTypes.WORD_KEY;
          }
        case 88: break;
        case 12: 
          { return TaraTypes.COMMA;
          }
        case 89: break;
        case 3: 
          { return newlineIndent();
          }
        case 90: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 184: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
