/* The following code was generated by JFlex 1.4.3 on 13/02/15 11:38 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/02/15 11:38 from the specification file
 * <tt>/Users/octavio/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\55\1\1\1\2\3\0\16\55\4\0\1\1\1\0\1\41\1\0"+
    "\1\43\1\51\1\53\1\0\1\34\1\35\1\44\1\56\1\46\1\42"+
    "\1\40\1\45\12\57\1\47\1\52\1\0\1\50\1\3\2\0\2\43"+
    "\1\4\1\43\1\54\25\43\1\36\1\0\1\37\1\0\1\43\1\0"+
    "\1\17\1\15\1\7\1\22\1\10\1\33\1\30\1\16\1\25\2\43"+
    "\1\23\1\32\1\6\1\5\1\11\1\31\1\21\1\13\1\12\1\14"+
    "\1\20\1\24\1\27\1\26\1\43\4\0\41\55\2\0\4\43\4\0"+
    "\1\43\2\0\1\55\2\0\1\51\4\0\1\43\1\0\1\45\2\0"+
    "\1\43\5\0\27\43\1\0\37\43\1\0\u01ca\43\4\0\14\43\16\0"+
    "\5\43\7\0\1\43\1\0\1\43\21\0\160\55\5\43\1\0\2\43"+
    "\2\0\4\43\10\0\1\43\1\0\3\43\1\0\1\43\1\0\24\43"+
    "\1\0\123\43\1\0\213\43\1\0\5\55\2\0\236\43\11\0\46\43"+
    "\2\0\1\43\7\0\47\43\11\0\55\55\1\0\1\55\1\0\2\55"+
    "\1\0\2\55\1\0\1\55\10\0\33\43\5\0\3\43\15\0\4\55"+
    "\7\0\1\43\4\0\13\55\5\0\53\43\25\55\12\57\4\0\2\43"+
    "\1\55\143\43\1\0\1\43\10\55\1\0\6\55\2\43\2\55\1\0"+
    "\4\55\2\43\12\57\3\43\2\0\1\43\17\0\1\55\1\43\1\55"+
    "\36\43\33\55\2\0\131\43\13\55\1\43\16\0\12\57\41\43\11\55"+
    "\2\43\4\0\1\43\5\0\26\43\4\55\1\43\11\55\1\43\3\55"+
    "\1\43\5\55\22\0\31\43\3\55\244\0\4\55\66\43\3\55\1\43"+
    "\22\55\1\43\7\55\12\43\2\55\2\0\12\57\1\0\7\43\1\0"+
    "\7\43\1\0\3\55\1\0\10\43\2\0\2\43\2\0\26\43\1\0"+
    "\7\43\1\0\1\43\3\0\4\43\2\0\1\55\1\43\7\55\2\0"+
    "\2\55\2\0\3\55\1\43\10\0\1\55\4\0\2\43\1\0\3\43"+
    "\2\55\2\0\12\57\4\43\7\0\1\43\5\0\3\55\1\0\6\43"+
    "\4\0\2\43\2\0\26\43\1\0\7\43\1\0\2\43\1\0\2\43"+
    "\1\0\2\43\2\0\1\55\1\0\5\55\4\0\2\55\2\0\3\55"+
    "\3\0\1\55\7\0\4\43\1\0\1\43\7\0\12\57\2\55\3\43"+
    "\1\55\13\0\3\55\1\0\11\43\1\0\3\43\1\0\26\43\1\0"+
    "\7\43\1\0\2\43\1\0\5\43\2\0\1\55\1\43\10\55\1\0"+
    "\3\55\1\0\3\55\2\0\1\43\17\0\2\43\2\55\2\0\12\57"+
    "\1\0\1\43\17\0\3\55\1\0\10\43\2\0\2\43\2\0\26\43"+
    "\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\55\1\43\7\55"+
    "\2\0\2\55\2\0\3\55\10\0\2\55\4\0\2\43\1\0\3\43"+
    "\2\55\2\0\12\57\1\0\1\43\20\0\1\55\1\43\1\0\6\43"+
    "\3\0\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1\0\2\43"+
    "\3\0\2\43\3\0\3\43\3\0\14\43\4\0\5\55\3\0\3\55"+
    "\1\0\4\55\2\0\1\43\6\0\1\55\16\0\12\57\11\0\1\43"+
    "\7\0\3\55\1\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43"+
    "\1\0\5\43\3\0\1\43\7\55\1\0\3\55\1\0\4\55\7\0"+
    "\2\55\1\0\2\43\6\0\2\43\2\55\2\0\12\57\22\0\2\55"+
    "\1\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43\1\0\5\43"+
    "\2\0\1\55\1\43\7\55\1\0\3\55\1\0\4\55\7\0\2\55"+
    "\7\0\1\43\1\0\2\43\2\55\2\0\12\57\1\0\2\43\17\0"+
    "\2\55\1\0\10\43\1\0\3\43\1\0\51\43\2\0\1\43\7\55"+
    "\1\0\3\55\1\0\4\55\1\43\10\0\1\55\10\0\2\43\2\55"+
    "\2\0\12\57\12\0\6\43\2\0\2\55\1\0\22\43\3\0\30\43"+
    "\1\0\11\43\1\0\1\43\2\0\7\43\3\0\1\55\4\0\6\55"+
    "\1\0\1\55\1\0\10\55\22\0\2\55\15\0\60\43\1\55\2\43"+
    "\7\55\4\0\10\43\10\55\1\0\12\57\47\0\2\43\1\0\1\43"+
    "\2\0\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0\7\43"+
    "\1\0\3\43\1\0\1\43\1\0\1\43\2\0\2\43\1\0\4\43"+
    "\1\55\2\43\6\55\1\0\2\55\1\43\2\0\5\43\1\0\1\43"+
    "\1\0\6\55\2\0\12\57\2\0\2\43\42\0\1\43\27\0\2\55"+
    "\6\0\12\57\13\0\1\55\1\0\1\55\1\0\1\55\4\0\2\55"+
    "\10\43\1\0\44\43\4\0\24\55\1\0\2\55\5\43\13\55\1\0"+
    "\44\55\11\0\1\55\71\0\53\43\24\55\1\43\12\57\6\0\6\43"+
    "\4\55\4\43\3\55\1\43\3\55\2\43\7\55\3\43\4\55\15\43"+
    "\14\55\1\43\1\55\12\57\4\55\2\0\46\43\12\0\53\43\1\0"+
    "\1\43\3\0\u0149\43\1\0\4\43\2\0\7\43\1\0\1\43\1\0"+
    "\4\43\2\0\51\43\1\0\4\43\2\0\41\43\1\0\4\43\2\0"+
    "\7\43\1\0\1\43\1\0\4\43\2\0\17\43\1\0\71\43\1\0"+
    "\4\43\2\0\103\43\2\0\3\55\40\0\20\43\20\0\125\43\14\0"+
    "\u026c\43\2\0\21\43\1\0\32\43\5\0\113\43\3\0\3\43\17\0"+
    "\15\43\1\0\4\43\3\55\13\0\22\43\3\55\13\0\22\43\2\55"+
    "\14\0\15\43\1\0\3\43\1\0\2\55\14\0\64\43\40\55\3\0"+
    "\1\43\3\0\2\43\1\55\2\0\12\57\41\0\3\55\2\0\12\57"+
    "\6\0\130\43\10\0\51\43\1\55\1\43\5\0\106\43\12\0\35\43"+
    "\3\0\14\55\4\0\14\55\12\0\12\57\36\43\2\0\5\43\13\0"+
    "\54\43\4\0\21\55\7\43\2\55\6\0\12\57\46\0\27\43\5\55"+
    "\4\0\65\43\12\55\1\0\35\55\2\0\1\55\12\57\6\0\12\57"+
    "\15\0\1\43\130\0\5\55\57\43\21\55\7\43\4\0\12\57\21\0"+
    "\11\55\14\0\3\55\36\43\12\55\3\0\2\43\12\57\6\0\46\43"+
    "\16\55\14\0\44\43\24\55\10\0\12\57\3\0\3\43\12\57\44\43"+
    "\122\0\3\55\1\0\25\55\4\43\1\55\4\43\1\55\15\0\300\43"+
    "\47\55\25\0\4\55\u0116\43\2\0\6\43\2\0\46\43\2\0\6\43"+
    "\2\0\10\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0\37\43"+
    "\2\0\65\43\1\0\7\43\1\0\1\43\3\0\3\43\1\0\7\43"+
    "\3\0\4\43\2\0\6\43\4\0\15\43\5\0\3\43\1\0\7\43"+
    "\16\0\5\55\32\0\5\55\20\0\2\43\23\0\1\43\13\0\5\55"+
    "\5\0\6\55\1\0\1\43\15\0\1\43\20\0\15\43\3\0\14\43"+
    "\1\43\15\43\26\0\15\55\4\0\1\55\3\0\14\55\21\0\1\43"+
    "\4\0\1\43\2\0\12\43\1\0\1\43\3\0\5\43\6\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\4\43\1\0\13\43\2\0\4\43"+
    "\5\0\5\43\4\0\1\43\21\0\51\43\u0a77\0\57\43\1\0\57\43"+
    "\1\0\205\43\6\0\4\43\3\55\16\0\46\43\12\0\66\43\11\0"+
    "\1\43\17\0\1\55\27\43\11\0\7\43\1\0\7\43\1\0\7\43"+
    "\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43"+
    "\1\0\40\55\57\0\1\43\u01d5\0\3\43\31\0\11\43\6\55\1\0"+
    "\5\43\2\0\5\43\4\0\126\43\2\0\2\55\2\0\3\43\1\0"+
    "\132\43\1\0\4\43\5\0\51\43\3\0\136\43\21\0\33\43\65\0"+
    "\20\43\u0200\0\u19b6\43\112\0\u51cc\43\64\0\u048d\43\103\0\56\43\2\0"+
    "\u010d\43\3\0\20\43\12\57\2\43\24\0\57\43\1\55\14\0\2\55"+
    "\1\0\31\43\10\0\120\43\2\55\45\0\11\43\2\0\147\43\2\0"+
    "\4\43\1\0\2\43\16\0\12\43\120\0\10\43\1\55\3\43\1\55"+
    "\4\43\1\55\27\43\5\55\20\0\1\43\7\0\64\43\14\0\2\55"+
    "\62\43\21\55\13\0\12\57\6\0\22\55\6\43\3\0\1\43\4\0"+
    "\12\57\34\43\10\55\2\0\27\43\15\55\14\0\35\43\3\0\4\55"+
    "\57\43\16\55\16\0\1\43\12\57\46\0\51\43\16\55\11\0\3\43"+
    "\1\55\10\43\2\55\2\0\12\57\6\0\27\43\3\0\1\43\1\55"+
    "\4\0\60\43\1\55\1\43\3\55\2\43\2\55\5\43\2\55\1\43"+
    "\1\55\1\43\30\0\3\43\43\0\6\43\2\0\6\43\2\0\6\43"+
    "\11\0\7\43\1\0\7\43\221\0\43\43\10\55\1\0\2\55\2\0"+
    "\12\57\6\0\u2ba4\43\14\0\27\43\4\0\61\43\u2104\0\u012e\43\2\0"+
    "\76\43\2\0\152\43\46\0\7\43\14\0\5\43\5\0\1\43\1\55"+
    "\12\43\1\0\15\43\1\0\5\43\1\0\1\43\1\0\2\43\1\0"+
    "\2\43\1\0\154\43\41\0\u016b\43\22\0\100\43\2\0\66\43\50\0"+
    "\15\43\3\0\20\55\20\0\7\55\14\0\2\43\30\0\3\43\31\0"+
    "\1\43\6\0\5\43\1\0\207\43\2\0\1\55\4\0\1\43\13\0"+
    "\12\57\7\0\32\43\4\0\1\43\1\0\32\43\13\0\131\43\3\0"+
    "\6\43\2\0\6\43\2\0\6\43\2\0\3\43\3\0\2\43\3\0"+
    "\2\43\22\0\3\55\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\24\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\1\1\22\1\23\1\24\1\25"+
    "\1\3\1\5\1\26\17\5\1\27\17\5\1\30\3\5"+
    "\2\0\1\31\2\0\14\5\1\32\1\5\1\33\1\5"+
    "\1\34\5\5\1\35\6\5\1\36\10\5\1\37\3\0"+
    "\1\40\4\5\1\41\5\5\1\42\10\5\1\43\4\5"+
    "\1\0\1\44\1\20\1\45\1\46\1\47\3\5\1\50"+
    "\1\0\1\51\2\0\2\5\1\52\3\5\1\53\14\5"+
    "\1\54\4\5\1\55\1\51\2\0\1\40\7\5\1\56"+
    "\1\57\4\5\1\60\3\5\1\61\3\5\1\0\1\62"+
    "\1\63\2\5\1\64\2\5\1\65\7\5\1\66\1\67"+
    "\1\0\1\5\1\70\1\71\1\72\1\5\1\73\2\5"+
    "\1\74\1\75\1\5\1\76\1\77\1\5\1\100\1\5"+
    "\1\101\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\140\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\140\0\140\0\140\0\140\0\u04b0\0\140"+
    "\0\u04e0\0\140\0\140\0\140\0\140\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\140\0\140\0\u0600\0\u0630\0\u03c0\0\u0660"+
    "\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u03c0\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u03c0\0\u0ff0\0\u03c0\0\u1020\0\u03c0"+
    "\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u03c0\0\u1140\0\u1170"+
    "\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u03c0\0\u1260\0\u1290\0\u12c0"+
    "\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\140\0\u13e0\0\u1410"+
    "\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u03c0\0\u1560"+
    "\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u03c0\0\u1650\0\u1680\0\u16b0"+
    "\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u03c0\0\u17d0\0\u1800"+
    "\0\u1830\0\u1860\0\u1890\0\140\0\u18c0\0\u03c0\0\u03c0\0\u03c0"+
    "\0\u18f0\0\u1920\0\u1950\0\u03c0\0\u1980\0\u1410\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u03c0\0\u1a70\0\u1aa0\0\u1ad0\0\u03c0\0\u1b00"+
    "\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80"+
    "\0\u1cb0\0\u1ce0\0\u1d10\0\u03c0\0\u1d40\0\u1d70\0\u1da0\0\u1dd0"+
    "\0\u03c0\0\u1e00\0\u1e30\0\u1e60\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0"+
    "\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u03c0\0\u03c0\0\u1fe0\0\u2010"+
    "\0\u2040\0\u2070\0\u03c0\0\u20a0\0\u20d0\0\u2100\0\u03c0\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\u03c0\0\u03c0\0\u21f0\0\u2220\0\u03c0"+
    "\0\u2250\0\u2280\0\u03c0\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370"+
    "\0\u23a0\0\u23d0\0\u03c0\0\u03c0\0\u2400\0\u2430\0\u03c0\0\u03c0"+
    "\0\u03c0\0\u2460\0\u03c0\0\u2490\0\u24c0\0\u03c0\0\u03c0\0\u24f0"+
    "\0\u19b0\0\u03c0\0\u2520\0\u03c0\0\u2550\0\u03c0\0\u03c0\0\u03c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\4\26\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\26\1\42\1\3\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\26\1\3\1\51\1\52\41\53\1\54\16\53"+
    "\61\0\1\4\57\0\1\55\1\5\61\0\1\26\1\56"+
    "\26\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\2\26\1\57\25\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\13\26\1\60"+
    "\14\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\1\26\1\61\11\26\1\62\14\26\6\0"+
    "\2\26\1\0\1\46\6\0\2\26\1\0\1\26\4\0"+
    "\2\26\1\63\20\26\1\64\2\26\1\65\1\26\6\0"+
    "\2\26\1\0\1\46\6\0\2\26\1\0\1\26\4\0"+
    "\15\26\1\66\12\26\6\0\2\26\1\0\1\46\6\0"+
    "\2\26\1\0\1\26\4\0\4\26\1\67\10\26\1\70"+
    "\12\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\6\26\1\71\1\26\1\72\10\26\1\73"+
    "\6\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\7\26\1\74\20\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\1\26\1\75"+
    "\26\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\13\26\1\76\14\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\7\26\1\77"+
    "\1\26\1\100\4\26\1\101\1\102\4\26\1\103\3\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\13\26\1\104\14\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\1\26\1\105\2\26"+
    "\1\106\6\26\1\107\14\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\1\26\1\110\2\26"+
    "\1\111\2\26\1\112\3\26\1\113\14\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\30\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\1\26\1\114\17\26\1\115\6\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\2\26"+
    "\1\116\4\26\1\117\20\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\4\26\1\120\23\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\13\26\1\121\5\26\1\122\6\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\40\0\1\123"+
    "\61\0\1\124\14\0\1\125\4\0\30\46\6\0\2\46"+
    "\1\0\1\46\6\0\2\46\1\0\1\46\52\0\1\47"+
    "\64\0\1\126\57\0\1\52\40\0\1\127\16\0\1\52"+
    "\1\0\1\55\62\0\2\26\1\130\25\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\6\26"+
    "\1\131\17\26\1\132\1\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\26\26\1\133\1\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\7\26\1\134\20\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\3\26\1\135\24\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\6\26\1\136\21\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\5\26\1\137\22\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\1\26\1\140\26\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\15\26\1\141\12\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\10\26\1\142\17\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\15\26\1\143\12\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\11\26\1\144\16\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\2\26\1\145\25\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\4\26\1\146\23\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\1\26\1\147\26\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\7\26\1\150\20\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\7\26\1\151\20\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\7\26\1\152\20\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\16\26\1\153\11\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\20\26\1\154\7\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\24\26\1\155\3\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\15\26\1\156\12\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\1\26\1\157\26\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\13\26\1\160\11\26\1\161\2\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\6\26"+
    "\1\162\21\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\10\26\1\163\17\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\27\26"+
    "\1\164\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\17\26\1\165\10\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\6\26\1\166"+
    "\21\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\15\26\1\167\12\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\6\26\1\170"+
    "\21\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\6\26\1\171\21\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\13\26\1\172"+
    "\14\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\3\26\1\173\13\26\1\174\10\26\6\0"+
    "\2\26\1\0\1\46\6\0\2\26\1\0\1\26\4\0"+
    "\17\26\1\175\10\26\6\0\2\26\1\0\1\46\6\0"+
    "\2\26\1\0\1\26\40\0\1\176\17\0\42\177\1\200"+
    "\15\177\40\0\1\127\16\0\1\125\57\0\1\201\57\0"+
    "\1\202\4\0\3\26\1\203\24\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\10\26\1\204"+
    "\17\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\4\26\1\205\23\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\5\26\1\206"+
    "\22\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\4\26\1\207\23\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\17\26\1\210"+
    "\10\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\4\26\1\211\23\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\6\26\1\212"+
    "\21\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\5\26\1\213\22\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\26\26\1\214"+
    "\1\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\4\26\1\215\23\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\21\26\1\216"+
    "\6\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\24\26\1\217\3\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\17\26\1\220"+
    "\10\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\1\26\1\221\26\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\6\26\1\222"+
    "\21\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\15\26\1\223\12\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\13\26\1\224"+
    "\14\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\15\26\1\225\12\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\6\26\1\226"+
    "\21\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\16\26\1\227\11\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\10\26\1\230"+
    "\17\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\21\26\1\231\6\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\11\26\1\232"+
    "\16\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\2\233\1\234\1\233\30\164\6\233\2\164\1\233"+
    "\1\235\6\233\2\164\1\233\1\164\4\0\4\26\1\236"+
    "\23\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\16\26\1\237\11\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\12\26\1\240"+
    "\15\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\4\26\1\241\23\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\7\26\1\242"+
    "\20\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\4\26\1\243\23\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\4\0\7\26\1\142"+
    "\20\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0"+
    "\1\26\4\0\4\26\1\244\23\26\6\0\2\26\1\0"+
    "\1\46\6\0\2\26\1\0\1\26\42\177\1\245\57\177"+
    "\1\246\15\177\57\0\1\247\54\0\1\250\2\0\1\202"+
    "\4\0\4\26\1\251\23\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\15\26\1\252\12\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\16\26\1\253\11\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\1\26\1\254\26\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\1\26\1\255\26\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\2\26\1\256\25\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\22\26\1\257\5\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\4\26\1\260\23\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\21\26\1\261\6\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\2\26\1\262\25\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\17\26\1\263\10\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\4\26\1\264\23\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\3\26\1\265\24\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\15\26\1\266\12\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\4\26\1\267\23\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\22\26\1\270\5\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\4\26\1\271\23\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\1\26\1\272\26\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\21\26\1\273\6\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\1\26\1\274\26\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\17\26\1\275\10\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\2\233\1\234\57\233\1\234"+
    "\1\233\30\235\6\233\2\235\1\233\1\235\6\233\2\235"+
    "\1\233\1\235\4\0\2\26\1\276\21\26\1\277\3\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\10\26\1\300\17\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\6\26\1\301\21\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\42\177\1\302\15\177\40\0\1\303\61\0\1\304\13\0"+
    "\1\304\1\305\4\0\5\26\1\306\22\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\13\26"+
    "\1\307\14\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\2\26\1\310\25\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\7\26"+
    "\1\311\20\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\16\26\1\312\11\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\15\26"+
    "\1\313\12\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\2\26\1\314\25\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\24\26"+
    "\1\315\3\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\4\26\1\316\23\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\13\26"+
    "\1\317\14\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\21\26\1\320\6\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\13\26"+
    "\1\321\14\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\7\26\1\322\20\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\7\26"+
    "\1\323\20\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\24\26\1\324\3\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\2\26"+
    "\1\325\25\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\15\26\1\326\12\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\4\26"+
    "\1\327\23\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\6\26\1\330\21\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\4\26"+
    "\1\331\23\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\15\26\1\332\12\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\42\0\1\302"+
    "\74\0\1\333\57\0\1\305\4\0\6\26\1\334\21\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\17\26\1\335\10\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\4\26\1\336\23\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\4\26\1\337\23\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\7\26\1\340\20\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\6\26\1\341\21\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\13\26\1\342\14\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\2\26\1\343\25\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\13\26\1\344\14\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\3\26\1\345\24\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\7\26\1\346\20\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\13\26\1\347\14\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\17\26\1\350\10\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\4\26\1\351\23\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\21\26\1\352\6\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\15\26\1\353\12\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\4\26\1\354\23\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\57\0\1\355\4\0\2\26\1\356\25\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\16\26"+
    "\1\357\11\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\22\26\1\360\5\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\17\26"+
    "\1\361\10\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\6\26\1\362\21\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\6\26"+
    "\1\363\21\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\4\26\1\364\23\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\6\26"+
    "\1\365\21\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\22\26\1\366\5\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\4\0\16\26"+
    "\1\367\11\26\6\0\2\26\1\0\1\46\6\0\2\26"+
    "\1\0\1\26\4\0\1\26\1\370\26\26\6\0\2\26"+
    "\1\0\1\46\6\0\2\26\1\0\1\26\57\0\1\371"+
    "\4\0\6\26\1\372\21\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\4\26\1\373\23\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\16\26\1\374\11\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\4\26\1\375\23\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\2\26\1\376\25\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26\4\0\16\26\1\377\11\26"+
    "\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26"+
    "\4\0\16\26\1\u0100\11\26\6\0\2\26\1\0\1\46"+
    "\6\0\2\26\1\0\1\26";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\24\1\4\11\1\1\1\11"+
    "\1\1\4\11\5\1\2\11\46\1\2\0\1\1\2\0"+
    "\46\1\1\11\3\0\31\1\1\0\1\11\10\1\1\0"+
    "\1\1\2\0\32\1\2\0\26\1\1\0\21\1\1\0"+
    "\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 68: break;
        case 8: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 69: break;
        case 39: 
          { return TaraTypes.WITH;
          }
        case 70: break;
        case 29: 
          { return TaraTypes.VAR;
          }
        case 71: break;
        case 14: 
          { return TaraTypes.COLON;
          }
        case 72: break;
        case 59: 
          { return TaraTypes.ABSTRACT;
          }
        case 73: break;
        case 44: 
          { return TaraTypes.RATIO_TYPE;
          }
        case 74: break;
        case 21: 
          { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
          }
        case 75: break;
        case 16: 
          { return TaraTypes.MEASURE_VALUE_KEY;
          }
        case 76: break;
        case 47: 
          { return TaraTypes.SINGLE;
          }
        case 77: break;
        case 63: 
          { return TaraTypes.COMPONENT;
          }
        case 78: break;
        case 32: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 79: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 80: break;
        case 51: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 81: break;
        case 7: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 82: break;
        case 31: 
          { return TaraTypes.LIST;
          }
        case 83: break;
        case 33: 
          { return TaraTypes.CASE;
          }
        case 84: break;
        case 15: 
          { return TaraTypes.EQUALS;
          }
        case 85: break;
        case 10: 
          { return TaraTypes.DOT;
          }
        case 86: break;
        case 46: 
          { return TaraTypes.STRING_TYPE;
          }
        case 87: break;
        case 42: 
          { return TaraTypes.NAMED;
          }
        case 88: break;
        case 58: 
          { return TaraTypes.TERMINAL;
          }
        case 89: break;
        case 67: 
          { return TaraTypes.AGGREGATED;
          }
        case 90: break;
        case 37: 
          { return TaraTypes.DATE_TYPE;
          }
        case 91: break;
        case 5: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 92: break;
        case 43: 
          { return TaraTypes.EMPTY_REF;
          }
        case 93: break;
        case 6: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 94: break;
        case 61: 
          { return TaraTypes.REQUIRED;
          }
        case 95: break;
        case 18: 
          { return TaraTypes.PLUS;
          }
        case 96: break;
        case 25: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 97: break;
        case 30: 
          { return TaraTypes.DSL;
          }
        case 98: break;
        case 35: 
          { return TaraTypes.ROOT;
          }
        case 99: break;
        case 62: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 100: break;
        case 4: 
          { return inline();
          }
        case 101: break;
        case 52: 
          { return TaraTypes.EXTENDS;
          }
        case 102: break;
        case 57: 
          { return TaraTypes.PROPERTY;
          }
        case 103: break;
        case 12: 
          { return TaraTypes.STAR;
          }
        case 104: break;
        case 49: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 105: break;
        case 9: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 106: break;
        case 19: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 107: break;
        case 17: 
          { return semicolon();
          }
        case 108: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 109: break;
        case 40: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 110: break;
        case 36: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 111: break;
        case 48: 
          { return TaraTypes.ALWAYS;
          }
        case 112: break;
        case 34: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 113: break;
        case 23: 
          { return TaraTypes.AS;
          }
        case 114: break;
        case 22: 
          { return TaraTypes.ON;
          }
        case 115: break;
        case 26: 
          { return TaraTypes.SUB;
          }
        case 116: break;
        case 60: 
          { return TaraTypes.READONLY;
          }
        case 117: break;
        case 56: 
          { return TaraTypes.ENCLOSED;
          }
        case 118: break;
        case 11: 
          { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
          }
        case 119: break;
        case 53: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 120: break;
        case 24: 
          { return TaraTypes.IS;
          }
        case 121: break;
        case 55: 
          { return TaraTypes.MEASURE_TYPE_KEY;
          }
        case 122: break;
        case 27: 
          { return TaraTypes.USE;
          }
        case 123: break;
        case 54: 
          { return TaraTypes.INT_TYPE;
          }
        case 124: break;
        case 50: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 125: break;
        case 66: 
          { return TaraTypes.ASSOCIATED;
          }
        case 126: break;
        case 38: 
          { return TaraTypes.WORD_KEY;
          }
        case 127: break;
        case 65: 
          { return TaraTypes.INTENTION;
          }
        case 128: break;
        case 64: 
          { return TaraTypes.ADDRESSED;
          }
        case 129: break;
        case 20: 
          { return TaraTypes.CHARACTER;
          }
        case 130: break;
        case 45: 
          { return TaraTypes.FACET;
          }
        case 131: break;
        case 13: 
          { return TaraTypes.COMMA;
          }
        case 132: break;
        case 28: 
          { return TaraTypes.HAS;
          }
        case 133: break;
        case 3: 
          { return newlineIndent();
          }
        case 134: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 257: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
