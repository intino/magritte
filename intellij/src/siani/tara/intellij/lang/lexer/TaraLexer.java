/* The following code was generated by JFlex 1.4.3 on 24/06/14 10:50 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/06/14 10:50 from the specification file
 * <tt>/Users/octavio/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\65\1\1\1\2\3\0\16\65\4\0\1\1\1\0\1\0\1\62"+
    "\1\64\2\0\1\41\1\33\1\34\1\43\1\51\1\44\1\30\1\42"+
    "\1\0\12\63\1\45\1\46\1\47\1\0\1\50\2\0\1\52\1\60"+
    "\1\3\1\56\4\64\1\53\4\64\1\55\3\64\1\32\1\57\3\64"+
    "\1\31\3\64\1\35\1\0\1\36\1\0\1\64\1\0\1\17\1\15"+
    "\1\6\1\26\1\7\1\61\1\54\1\27\1\12\2\64\1\24\1\13"+
    "\1\5\1\4\1\10\1\25\1\14\1\20\1\11\1\23\1\21\1\64"+
    "\1\16\1\22\1\64\1\37\1\0\1\40\1\0\41\65\2\0\4\64"+
    "\4\0\1\64\2\0\1\65\7\0\1\64\4\0\1\64\5\0\27\64"+
    "\1\0\37\64\1\0\u01ca\64\4\0\14\64\16\0\5\64\7\0\1\64"+
    "\1\0\1\64\21\0\160\65\5\64\1\0\2\64\2\0\4\64\10\0"+
    "\1\64\1\0\3\64\1\0\1\64\1\0\24\64\1\0\123\64\1\0"+
    "\213\64\1\0\5\65\2\0\236\64\11\0\46\64\2\0\1\64\7\0"+
    "\47\64\11\0\55\65\1\0\1\65\1\0\2\65\1\0\2\65\1\0"+
    "\1\65\10\0\33\64\5\0\3\64\15\0\4\65\7\0\1\64\4\0"+
    "\13\65\5\0\53\64\25\65\12\63\4\0\2\64\1\65\143\64\1\0"+
    "\1\64\10\65\1\0\6\65\2\64\2\65\1\0\4\65\2\64\12\63"+
    "\3\64\2\0\1\64\17\0\1\65\1\64\1\65\36\64\33\65\2\0"+
    "\131\64\13\65\1\64\16\0\12\63\41\64\11\65\2\64\4\0\1\64"+
    "\5\0\26\64\4\65\1\64\11\65\1\64\3\65\1\64\5\65\22\0"+
    "\31\64\3\65\244\0\4\65\66\64\3\65\1\64\22\65\1\64\7\65"+
    "\12\64\2\65\2\0\12\63\1\0\7\64\1\0\7\64\1\0\3\65"+
    "\1\0\10\64\2\0\2\64\2\0\26\64\1\0\7\64\1\0\1\64"+
    "\3\0\4\64\2\0\1\65\1\64\7\65\2\0\2\65\2\0\3\65"+
    "\1\64\10\0\1\65\4\0\2\64\1\0\3\64\2\65\2\0\12\63"+
    "\4\64\7\0\1\64\5\0\3\65\1\0\6\64\4\0\2\64\2\0"+
    "\26\64\1\0\7\64\1\0\2\64\1\0\2\64\1\0\2\64\2\0"+
    "\1\65\1\0\5\65\4\0\2\65\2\0\3\65\3\0\1\65\7\0"+
    "\4\64\1\0\1\64\7\0\12\63\2\65\3\64\1\65\13\0\3\65"+
    "\1\0\11\64\1\0\3\64\1\0\26\64\1\0\7\64\1\0\2\64"+
    "\1\0\5\64\2\0\1\65\1\64\10\65\1\0\3\65\1\0\3\65"+
    "\2\0\1\64\17\0\2\64\2\65\2\0\12\63\1\0\1\64\17\0"+
    "\3\65\1\0\10\64\2\0\2\64\2\0\26\64\1\0\7\64\1\0"+
    "\2\64\1\0\5\64\2\0\1\65\1\64\7\65\2\0\2\65\2\0"+
    "\3\65\10\0\2\65\4\0\2\64\1\0\3\64\2\65\2\0\12\63"+
    "\1\0\1\64\20\0\1\65\1\64\1\0\6\64\3\0\3\64\1\0"+
    "\4\64\3\0\2\64\1\0\1\64\1\0\2\64\3\0\2\64\3\0"+
    "\3\64\3\0\14\64\4\0\5\65\3\0\3\65\1\0\4\65\2\0"+
    "\1\64\6\0\1\65\16\0\12\63\11\0\1\64\7\0\3\65\1\0"+
    "\10\64\1\0\3\64\1\0\27\64\1\0\12\64\1\0\5\64\3\0"+
    "\1\64\7\65\1\0\3\65\1\0\4\65\7\0\2\65\1\0\2\64"+
    "\6\0\2\64\2\65\2\0\12\63\22\0\2\65\1\0\10\64\1\0"+
    "\3\64\1\0\27\64\1\0\12\64\1\0\5\64\2\0\1\65\1\64"+
    "\7\65\1\0\3\65\1\0\4\65\7\0\2\65\7\0\1\64\1\0"+
    "\2\64\2\65\2\0\12\63\1\0\2\64\17\0\2\65\1\0\10\64"+
    "\1\0\3\64\1\0\51\64\2\0\1\64\7\65\1\0\3\65\1\0"+
    "\4\65\1\64\10\0\1\65\10\0\2\64\2\65\2\0\12\63\12\0"+
    "\6\64\2\0\2\65\1\0\22\64\3\0\30\64\1\0\11\64\1\0"+
    "\1\64\2\0\7\64\3\0\1\65\4\0\6\65\1\0\1\65\1\0"+
    "\10\65\22\0\2\65\15\0\60\64\1\65\2\64\7\65\4\0\10\64"+
    "\10\65\1\0\12\63\47\0\2\64\1\0\1\64\2\0\2\64\1\0"+
    "\1\64\2\0\1\64\6\0\4\64\1\0\7\64\1\0\3\64\1\0"+
    "\1\64\1\0\1\64\2\0\2\64\1\0\4\64\1\65\2\64\6\65"+
    "\1\0\2\65\1\64\2\0\5\64\1\0\1\64\1\0\6\65\2\0"+
    "\12\63\2\0\2\64\42\0\1\64\27\0\2\65\6\0\12\63\13\0"+
    "\1\65\1\0\1\65\1\0\1\65\4\0\2\65\10\64\1\0\44\64"+
    "\4\0\24\65\1\0\2\65\5\64\13\65\1\0\44\65\11\0\1\65"+
    "\71\0\53\64\24\65\1\64\12\63\6\0\6\64\4\65\4\64\3\65"+
    "\1\64\3\65\2\64\7\65\3\64\4\65\15\64\14\65\1\64\1\65"+
    "\12\63\4\65\2\0\46\64\12\0\53\64\1\0\1\64\3\0\u0149\64"+
    "\1\0\4\64\2\0\7\64\1\0\1\64\1\0\4\64\2\0\51\64"+
    "\1\0\4\64\2\0\41\64\1\0\4\64\2\0\7\64\1\0\1\64"+
    "\1\0\4\64\2\0\17\64\1\0\71\64\1\0\4\64\2\0\103\64"+
    "\2\0\3\65\40\0\20\64\20\0\125\64\14\0\u026c\64\2\0\21\64"+
    "\1\0\32\64\5\0\113\64\3\0\3\64\17\0\15\64\1\0\4\64"+
    "\3\65\13\0\22\64\3\65\13\0\22\64\2\65\14\0\15\64\1\0"+
    "\3\64\1\0\2\65\14\0\64\64\40\65\3\0\1\64\3\0\2\64"+
    "\1\65\2\0\12\63\41\0\3\65\2\0\12\63\6\0\130\64\10\0"+
    "\51\64\1\65\1\64\5\0\106\64\12\0\35\64\3\0\14\65\4\0"+
    "\14\65\12\0\12\63\36\64\2\0\5\64\13\0\54\64\4\0\21\65"+
    "\7\64\2\65\6\0\12\63\46\0\27\64\5\65\4\0\65\64\12\65"+
    "\1\0\35\65\2\0\1\65\12\63\6\0\12\63\15\0\1\64\130\0"+
    "\5\65\57\64\21\65\7\64\4\0\12\63\21\0\11\65\14\0\3\65"+
    "\36\64\12\65\3\0\2\64\12\63\6\0\46\64\16\65\14\0\44\64"+
    "\24\65\10\0\12\63\3\0\3\64\12\63\44\64\122\0\3\65\1\0"+
    "\25\65\4\64\1\65\4\64\1\65\15\0\300\64\47\65\25\0\4\65"+
    "\u0116\64\2\0\6\64\2\0\46\64\2\0\6\64\2\0\10\64\1\0"+
    "\1\64\1\0\1\64\1\0\1\64\1\0\37\64\2\0\65\64\1\0"+
    "\7\64\1\0\1\64\3\0\3\64\1\0\7\64\3\0\4\64\2\0"+
    "\6\64\4\0\15\64\5\0\3\64\1\0\7\64\16\0\5\65\32\0"+
    "\5\65\20\0\2\64\23\0\1\64\13\0\5\65\5\0\6\65\1\0"+
    "\1\64\15\0\1\64\20\0\15\64\3\0\32\64\26\0\15\65\4\0"+
    "\1\65\3\0\14\65\21\0\1\64\4\0\1\64\2\0\12\64\1\0"+
    "\1\64\3\0\5\64\6\0\1\64\1\0\1\64\1\0\1\64\1\0"+
    "\4\64\1\0\13\64\2\0\4\64\5\0\5\64\4\0\1\64\21\0"+
    "\51\64\u0a77\0\57\64\1\0\57\64\1\0\205\64\6\0\4\64\3\65"+
    "\16\0\46\64\12\0\66\64\11\0\1\64\17\0\1\65\27\64\11\0"+
    "\7\64\1\0\7\64\1\0\7\64\1\0\7\64\1\0\7\64\1\0"+
    "\7\64\1\0\7\64\1\0\7\64\1\0\40\65\57\0\1\64\u01d5\0"+
    "\3\64\31\0\11\64\6\65\1\0\5\64\2\0\5\64\4\0\126\64"+
    "\2\0\2\65\2\0\3\64\1\0\132\64\1\0\4\64\5\0\51\64"+
    "\3\0\136\64\21\0\33\64\65\0\20\64\u0200\0\u19b6\64\112\0\u51cc\64"+
    "\64\0\u048d\64\103\0\56\64\2\0\u010d\64\3\0\20\64\12\63\2\64"+
    "\24\0\57\64\1\65\14\0\2\65\1\0\31\64\10\0\120\64\2\65"+
    "\45\0\11\64\2\0\147\64\2\0\4\64\1\0\2\64\16\0\12\64"+
    "\120\0\10\64\1\65\3\64\1\65\4\64\1\65\27\64\5\65\20\0"+
    "\1\64\7\0\64\64\14\0\2\65\62\64\21\65\13\0\12\63\6\0"+
    "\22\65\6\64\3\0\1\64\4\0\12\63\34\64\10\65\2\0\27\64"+
    "\15\65\14\0\35\64\3\0\4\65\57\64\16\65\16\0\1\64\12\63"+
    "\46\0\51\64\16\65\11\0\3\64\1\65\10\64\2\65\2\0\12\63"+
    "\6\0\27\64\3\0\1\64\1\65\4\0\60\64\1\65\1\64\3\65"+
    "\2\64\2\65\5\64\2\65\1\64\1\65\1\64\30\0\3\64\43\0"+
    "\6\64\2\0\6\64\2\0\6\64\11\0\7\64\1\0\7\64\221\0"+
    "\43\64\10\65\1\0\2\65\2\0\12\63\6\0\u2ba4\64\14\0\27\64"+
    "\4\0\61\64\u2104\0\u012e\64\2\0\76\64\2\0\152\64\46\0\7\64"+
    "\14\0\5\64\5\0\1\64\1\65\12\64\1\0\15\64\1\0\5\64"+
    "\1\0\1\64\1\0\2\64\1\0\2\64\1\0\154\64\41\0\u016b\64"+
    "\22\0\100\64\2\0\66\64\50\0\15\64\3\0\20\65\20\0\7\65"+
    "\14\0\2\64\30\0\3\64\31\0\1\64\6\0\5\64\1\0\207\64"+
    "\2\0\1\65\4\0\1\64\13\0\12\63\7\0\32\64\4\0\1\64"+
    "\1\0\32\64\13\0\131\64\3\0\6\64\2\0\6\64\2\0\6\64"+
    "\2\0\3\64\3\0\2\64\3\0\2\64\22\0\3\65\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\15\4\1\1\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\1\7\4\1\1"+
    "\1\22\1\3\14\4\1\23\2\4\1\0\1\24\2\4"+
    "\1\0\1\25\7\4\1\0\1\26\1\0\14\4\1\27"+
    "\1\30\1\4\2\0\11\4\1\31\1\4\1\32\4\4"+
    "\1\33\3\4\1\34\1\4\2\0\1\35\1\36\10\4"+
    "\1\37\7\4\1\0\1\35\1\4\1\40\12\4\1\41"+
    "\2\4\1\0\3\4\1\42\1\43\1\4\1\44\1\4"+
    "\1\45\4\4\1\0\1\4\1\46\1\47\1\50\1\51"+
    "\1\52\1\4\1\53\1\54\1\55\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\u0438\0\66\0\66\0\66\0\66\0\u046e"+
    "\0\66\0\66\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u010e\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0438\0\66\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u0c06\0\u0654\0\66\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u010e\0\u010e\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u0c3c\0\u1182"+
    "\0\u010e\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u010e\0\u1290\0\u12c6"+
    "\0\u12fc\0\u010e\0\u1332\0\u1368\0\u139e\0\u0f66\0\u010e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u010e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u010e\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u010e\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u010e\0\u010e\0\u1b00\0\u010e"+
    "\0\u1b36\0\u010e\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u1cb0\0\u010e\0\u010e"+
    "\0\66\0\u010e\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\6\1\17\1\6"+
    "\1\20\5\6\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\6"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\6"+
    "\1\2\67\0\1\3\65\0\1\55\1\4\66\0\1\6"+
    "\1\56\23\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\25\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\14\6\1\57\10\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\10\6\1\60\14\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\11\6\1\61\13\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\4\6"+
    "\1\62\4\6\1\63\13\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\2\6\1\64\5\6\1\65\14\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\20\6"+
    "\1\66\4\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\1\6\1\67\2\6\1\70\20\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\1\6\1\71\23\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\15\6"+
    "\1\72\7\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\14\6\1\73\10\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\14\6\1\74\10\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\30\0\1\75\32\0\1\76"+
    "\5\0\1\6\1\77\23\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\4\6\1\100\20\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\41\101\1\102\24\101\46\0"+
    "\1\40\102\0\1\54\5\0\21\6\1\103\3\6\1\0"+
    "\2\6\17\0\10\6\1\0\3\6\3\0\2\6\1\104"+
    "\22\6\1\0\2\6\17\0\10\6\1\0\3\6\3\0"+
    "\14\6\1\105\10\6\1\0\2\6\17\0\10\6\1\0"+
    "\3\6\3\0\1\6\1\106\23\6\1\0\2\6\17\0"+
    "\10\6\1\0\3\6\3\0\6\6\1\107\16\6\1\0"+
    "\2\6\17\0\10\6\1\0\3\6\3\0\1\6\1\110"+
    "\23\6\1\0\2\6\17\0\10\6\1\0\3\6\3\0"+
    "\14\6\1\111\10\6\1\0\2\6\17\0\10\6\1\0"+
    "\3\6\2\112\1\113\63\112\42\0\1\114\20\0\1\54"+
    "\3\0\1\55\67\0\2\6\1\115\22\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\15\6\1\116\7\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\5\6"+
    "\1\117\17\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\1\6\1\120\5\6\1\121\15\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\11\6\1\122\13\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\20\6"+
    "\1\123\4\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\6\6\1\124\16\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\5\6\1\125\17\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\21\6\1\126\3\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\1\6"+
    "\1\127\23\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\22\6\1\130\2\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\13\6\1\131\11\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\11\6\1\132\13\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\15\6"+
    "\1\133\7\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\30\134\1\135\35\134\42\0\1\114\20\0\1\76\5\0"+
    "\11\6\1\136\13\6\1\0\2\6\17\0\10\6\1\0"+
    "\3\6\3\0\15\6\1\137\7\6\1\0\2\6\17\0"+
    "\10\6\1\0\3\6\3\0\7\6\1\140\15\6\1\0"+
    "\2\6\17\0\10\6\1\0\3\6\3\0\6\6\1\141"+
    "\16\6\1\0\2\6\17\0\10\6\1\0\3\6\3\0"+
    "\6\6\1\142\16\6\1\0\2\6\17\0\10\6\1\0"+
    "\3\6\3\0\20\6\1\143\4\6\1\0\2\6\17\0"+
    "\10\6\1\0\3\6\3\0\11\6\1\144\13\6\1\0"+
    "\2\6\17\0\10\6\1\0\3\6\3\0\1\6\1\145"+
    "\23\6\1\0\2\6\17\0\10\6\1\0\3\6\3\0"+
    "\21\6\1\146\3\6\1\0\2\6\17\0\10\6\1\0"+
    "\3\6\63\0\1\147\5\0\3\6\1\150\21\6\1\0"+
    "\2\6\17\0\10\6\1\0\3\6\3\0\4\6\1\151"+
    "\20\6\1\0\2\6\17\0\10\6\1\0\3\6\3\0"+
    "\6\6\1\152\16\6\1\0\2\6\17\0\10\6\1\0"+
    "\3\6\3\0\5\6\1\153\17\6\1\0\2\6\17\0"+
    "\10\6\1\0\3\6\3\0\16\6\1\154\6\6\1\0"+
    "\2\6\17\0\10\6\1\0\3\6\3\0\10\6\1\155"+
    "\14\6\1\0\2\6\17\0\10\6\1\0\3\6\3\0"+
    "\4\6\1\156\20\6\1\0\2\6\17\0\10\6\1\0"+
    "\3\6\3\0\4\6\1\157\20\6\1\0\2\6\17\0"+
    "\10\6\1\0\3\6\3\0\1\6\1\160\23\6\1\0"+
    "\2\6\17\0\10\6\1\0\3\6\3\0\6\6\1\161"+
    "\16\6\1\0\2\6\17\0\10\6\1\0\3\6\3\0"+
    "\6\6\1\162\16\6\1\0\2\6\17\0\10\6\1\0"+
    "\3\6\3\0\20\6\1\163\4\6\1\0\2\6\17\0"+
    "\10\6\1\0\3\6\3\0\25\6\1\164\2\6\17\0"+
    "\10\6\1\0\3\6\30\134\1\165\65\134\1\166\35\134"+
    "\3\0\23\6\1\167\1\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\1\6\1\170\23\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\14\6\1\171\10\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\4\6"+
    "\1\172\20\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\20\6\1\173\4\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\12\6\1\174\12\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\7\6\1\175\15\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\21\6"+
    "\1\176\3\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\15\6\1\123\7\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\4\6\1\177\20\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\17\6\1\200\5\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\4\6"+
    "\1\201\20\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\14\6\1\202\10\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\7\6\1\203\15\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\2\6\1\204\22\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\11\6"+
    "\1\205\13\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\7\6\1\206\15\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\7\6\1\207\15\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\5\0\1\210\60\0\30\134"+
    "\1\211\35\134\3\0\20\6\1\212\4\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\15\6\1\213\7\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\25\6"+
    "\1\0\2\6\17\0\2\6\1\214\5\6\1\0\3\6"+
    "\3\0\11\6\1\215\13\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\21\6\1\216\3\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\2\6\1\217\22\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\4\6"+
    "\1\220\20\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\5\6\1\221\17\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\11\6\1\222\13\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\6\6\1\223\16\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\2\6"+
    "\1\224\22\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\6\6\1\225\16\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\6\6\1\226\16\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\5\6\1\227\17\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\11\6"+
    "\1\230\13\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\17\0\1\231\76\0\1\211\40\0\11\6\1\232\13\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\4\6"+
    "\1\233\20\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\14\6\1\234\10\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\4\6\1\235\20\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\25\6\1\0\2\6"+
    "\17\0\2\6\1\236\5\6\1\0\3\6\3\0\14\6"+
    "\1\237\10\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\6\6\1\240\16\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\6\6\1\241\16\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\4\6\1\242\20\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\14\6"+
    "\1\243\10\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\7\6\1\244\15\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\21\6\1\245\3\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\4\6\1\246\20\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\13\0\1\247"+
    "\55\0\3\6\1\250\21\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\11\6\1\251\13\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\21\6\1\252\3\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\2\6"+
    "\1\253\22\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\17\6\1\254\5\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\3\0\21\6\1\255\3\6\1\0\2\6"+
    "\17\0\10\6\1\0\3\6\3\0\1\6\1\256\23\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\4\6"+
    "\1\257\20\6\1\0\2\6\17\0\10\6\1\0\3\6"+
    "\3\0\23\6\1\260\1\6\1\0\2\6\17\0\10\6"+
    "\1\0\3\6\7\0\1\261\61\0\4\6\1\262\20\6"+
    "\1\0\2\6\17\0\10\6\1\0\3\6\3\0\2\6"+
    "\1\263\22\6\1\0\2\6\17\0\10\6\1\0\3\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7398];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\6\11\1\1\4\11\1\1\2\11"+
    "\32\1\1\0\3\1\1\0\1\11\7\1\1\0\1\11"+
    "\1\0\17\1\2\0\26\1\2\0\22\1\1\0\20\1"+
    "\1\0\15\1\1\0\11\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 48: break;
        case 7: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 49: break;
        case 24: 
          { return TaraTypes.VAR;
          }
        case 50: break;
        case 14: 
          { return TaraTypes.COLON;
          }
        case 51: break;
        case 16: 
          { return TaraTypes.OPEN_AN;
          }
        case 52: break;
        case 43: 
          { return TaraTypes.MULTIPLE;
          }
        case 53: break;
        case 25: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 54: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 55: break;
        case 39: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 56: break;
        case 6: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 57: break;
        case 17: 
          { return TaraTypes.CLOSE_AN;
          }
        case 58: break;
        case 11: 
          { return TaraTypes.DOT;
          }
        case 59: break;
        case 47: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 60: break;
        case 35: 
          { return TaraTypes.STRING_TYPE;
          }
        case 61: break;
        case 9: 
          { return openBracket();
          }
        case 62: break;
        case 42: 
          { return TaraTypes.TERMINAL;
          }
        case 63: break;
        case 4: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 64: break;
        case 45: 
          { return TaraTypes.HAS_NAME;
          }
        case 65: break;
        case 31: 
          { return TaraTypes.EMPTY_REF;
          }
        case 66: break;
        case 5: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 67: break;
        case 44: 
          { return TaraTypes.REQUIRED;
          }
        case 68: break;
        case 37: 
          { return TaraTypes.PRIVATE;
          }
        case 69: break;
        case 20: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 70: break;
        case 28: 
          { return TaraTypes.ROOT;
          }
        case 71: break;
        case 22: 
          { return TaraTypes.DOC_LINE;
          }
        case 72: break;
        case 21: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 73: break;
        case 41: 
          { return TaraTypes.PROPERTY;
          }
        case 74: break;
        case 12: 
          { return TaraTypes.STAR;
          }
        case 75: break;
        case 34: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 76: break;
        case 8: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 77: break;
        case 18: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 78: break;
        case 15: 
          { return semicolon();
          }
        case 79: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 80: break;
        case 46: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 81: break;
        case 32: 
          { return TaraTypes.ALIAS_TYPE;
          }
        case 82: break;
        case 27: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 83: break;
        case 19: 
          { return TaraTypes.AS;
          }
        case 84: break;
        case 33: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 85: break;
        case 40: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 86: break;
        case 26: 
          { return TaraTypes.CASE_KEY;
          }
        case 87: break;
        case 38: 
          { return TaraTypes.INT_TYPE;
          }
        case 88: break;
        case 36: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 89: break;
        case 10: 
          { return closeBracket();
          }
        case 90: break;
        case 30: 
          { return TaraTypes.WORD_KEY;
          }
        case 91: break;
        case 13: 
          { return TaraTypes.COMMA;
          }
        case 92: break;
        case 23: 
          { return TaraTypes.BOX_KEY;
          }
        case 93: break;
        case 3: 
          { return newlineIndent();
          }
        case 94: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 180: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
