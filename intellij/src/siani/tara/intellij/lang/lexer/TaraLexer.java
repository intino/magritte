/* The following code was generated by JFlex 1.4.3 on 27/11/14 12:36 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/11/14 12:36 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\54\1\1\1\2\3\0\16\54\4\0\1\1\2\0\1\55\1\43"+
    "\1\45\1\53\1\41\1\34\1\35\1\44\1\52\1\46\1\42\1\40"+
    "\1\45\12\56\1\47\1\51\1\0\1\50\1\3\2\0\2\43\1\4"+
    "\27\43\1\36\1\0\1\37\1\0\1\43\1\0\1\17\1\15\1\7"+
    "\1\27\1\10\1\33\1\31\1\16\1\24\2\43\1\25\1\30\1\6"+
    "\1\5\1\11\1\32\1\21\1\13\1\12\1\14\1\20\1\23\1\22"+
    "\1\26\1\43\4\0\41\54\2\0\4\43\4\0\1\43\2\0\1\54"+
    "\7\0\1\43\1\0\1\45\2\0\1\43\5\0\27\43\1\0\37\43"+
    "\1\0\u01ca\43\4\0\14\43\16\0\5\43\7\0\1\43\1\0\1\43"+
    "\21\0\160\54\5\43\1\0\2\43\2\0\4\43\10\0\1\43\1\0"+
    "\3\43\1\0\1\43\1\0\24\43\1\0\123\43\1\0\213\43\1\0"+
    "\5\54\2\0\236\43\11\0\46\43\2\0\1\43\7\0\47\43\11\0"+
    "\55\54\1\0\1\54\1\0\2\54\1\0\2\54\1\0\1\54\10\0"+
    "\33\43\5\0\3\43\15\0\4\54\7\0\1\43\4\0\13\54\5\0"+
    "\53\43\25\54\12\56\4\0\2\43\1\54\143\43\1\0\1\43\10\54"+
    "\1\0\6\54\2\43\2\54\1\0\4\54\2\43\12\56\3\43\2\0"+
    "\1\43\17\0\1\54\1\43\1\54\36\43\33\54\2\0\131\43\13\54"+
    "\1\43\16\0\12\56\41\43\11\54\2\43\4\0\1\43\5\0\26\43"+
    "\4\54\1\43\11\54\1\43\3\54\1\43\5\54\22\0\31\43\3\54"+
    "\244\0\4\54\66\43\3\54\1\43\22\54\1\43\7\54\12\43\2\54"+
    "\2\0\12\56\1\0\7\43\1\0\7\43\1\0\3\54\1\0\10\43"+
    "\2\0\2\43\2\0\26\43\1\0\7\43\1\0\1\43\3\0\4\43"+
    "\2\0\1\54\1\43\7\54\2\0\2\54\2\0\3\54\1\43\10\0"+
    "\1\54\4\0\2\43\1\0\3\43\2\54\2\0\12\56\4\43\7\0"+
    "\1\43\5\0\3\54\1\0\6\43\4\0\2\43\2\0\26\43\1\0"+
    "\7\43\1\0\2\43\1\0\2\43\1\0\2\43\2\0\1\54\1\0"+
    "\5\54\4\0\2\54\2\0\3\54\3\0\1\54\7\0\4\43\1\0"+
    "\1\43\7\0\12\56\2\54\3\43\1\54\13\0\3\54\1\0\11\43"+
    "\1\0\3\43\1\0\26\43\1\0\7\43\1\0\2\43\1\0\5\43"+
    "\2\0\1\54\1\43\10\54\1\0\3\54\1\0\3\54\2\0\1\43"+
    "\17\0\2\43\2\54\2\0\12\56\1\0\1\43\17\0\3\54\1\0"+
    "\10\43\2\0\2\43\2\0\26\43\1\0\7\43\1\0\2\43\1\0"+
    "\5\43\2\0\1\54\1\43\7\54\2\0\2\54\2\0\3\54\10\0"+
    "\2\54\4\0\2\43\1\0\3\43\2\54\2\0\12\56\1\0\1\43"+
    "\20\0\1\54\1\43\1\0\6\43\3\0\3\43\1\0\4\43\3\0"+
    "\2\43\1\0\1\43\1\0\2\43\3\0\2\43\3\0\3\43\3\0"+
    "\14\43\4\0\5\54\3\0\3\54\1\0\4\54\2\0\1\43\6\0"+
    "\1\54\16\0\12\56\11\0\1\43\7\0\3\54\1\0\10\43\1\0"+
    "\3\43\1\0\27\43\1\0\12\43\1\0\5\43\3\0\1\43\7\54"+
    "\1\0\3\54\1\0\4\54\7\0\2\54\1\0\2\43\6\0\2\43"+
    "\2\54\2\0\12\56\22\0\2\54\1\0\10\43\1\0\3\43\1\0"+
    "\27\43\1\0\12\43\1\0\5\43\2\0\1\54\1\43\7\54\1\0"+
    "\3\54\1\0\4\54\7\0\2\54\7\0\1\43\1\0\2\43\2\54"+
    "\2\0\12\56\1\0\2\43\17\0\2\54\1\0\10\43\1\0\3\43"+
    "\1\0\51\43\2\0\1\43\7\54\1\0\3\54\1\0\4\54\1\43"+
    "\10\0\1\54\10\0\2\43\2\54\2\0\12\56\12\0\6\43\2\0"+
    "\2\54\1\0\22\43\3\0\30\43\1\0\11\43\1\0\1\43\2\0"+
    "\7\43\3\0\1\54\4\0\6\54\1\0\1\54\1\0\10\54\22\0"+
    "\2\54\15\0\60\43\1\54\2\43\7\54\4\0\10\43\10\54\1\0"+
    "\12\56\47\0\2\43\1\0\1\43\2\0\2\43\1\0\1\43\2\0"+
    "\1\43\6\0\4\43\1\0\7\43\1\0\3\43\1\0\1\43\1\0"+
    "\1\43\2\0\2\43\1\0\4\43\1\54\2\43\6\54\1\0\2\54"+
    "\1\43\2\0\5\43\1\0\1\43\1\0\6\54\2\0\12\56\2\0"+
    "\2\43\42\0\1\43\27\0\2\54\6\0\12\56\13\0\1\54\1\0"+
    "\1\54\1\0\1\54\4\0\2\54\10\43\1\0\44\43\4\0\24\54"+
    "\1\0\2\54\5\43\13\54\1\0\44\54\11\0\1\54\71\0\53\43"+
    "\24\54\1\43\12\56\6\0\6\43\4\54\4\43\3\54\1\43\3\54"+
    "\2\43\7\54\3\43\4\54\15\43\14\54\1\43\1\54\12\56\4\54"+
    "\2\0\46\43\12\0\53\43\1\0\1\43\3\0\u0149\43\1\0\4\43"+
    "\2\0\7\43\1\0\1\43\1\0\4\43\2\0\51\43\1\0\4\43"+
    "\2\0\41\43\1\0\4\43\2\0\7\43\1\0\1\43\1\0\4\43"+
    "\2\0\17\43\1\0\71\43\1\0\4\43\2\0\103\43\2\0\3\54"+
    "\40\0\20\43\20\0\125\43\14\0\u026c\43\2\0\21\43\1\0\32\43"+
    "\5\0\113\43\3\0\3\43\17\0\15\43\1\0\4\43\3\54\13\0"+
    "\22\43\3\54\13\0\22\43\2\54\14\0\15\43\1\0\3\43\1\0"+
    "\2\54\14\0\64\43\40\54\3\0\1\43\3\0\2\43\1\54\2\0"+
    "\12\56\41\0\3\54\2\0\12\56\6\0\130\43\10\0\51\43\1\54"+
    "\1\43\5\0\106\43\12\0\35\43\3\0\14\54\4\0\14\54\12\0"+
    "\12\56\36\43\2\0\5\43\13\0\54\43\4\0\21\54\7\43\2\54"+
    "\6\0\12\56\46\0\27\43\5\54\4\0\65\43\12\54\1\0\35\54"+
    "\2\0\1\54\12\56\6\0\12\56\15\0\1\43\130\0\5\54\57\43"+
    "\21\54\7\43\4\0\12\56\21\0\11\54\14\0\3\54\36\43\12\54"+
    "\3\0\2\43\12\56\6\0\46\43\16\54\14\0\44\43\24\54\10\0"+
    "\12\56\3\0\3\43\12\56\44\43\122\0\3\54\1\0\25\54\4\43"+
    "\1\54\4\43\1\54\15\0\300\43\47\54\25\0\4\54\u0116\43\2\0"+
    "\6\43\2\0\46\43\2\0\6\43\2\0\10\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\37\43\2\0\65\43\1\0\7\43\1\0"+
    "\1\43\3\0\3\43\1\0\7\43\3\0\4\43\2\0\6\43\4\0"+
    "\15\43\5\0\3\43\1\0\7\43\16\0\5\54\32\0\5\54\20\0"+
    "\2\43\23\0\1\43\13\0\5\54\5\0\6\54\1\0\1\43\15\0"+
    "\1\43\20\0\15\43\3\0\14\43\1\43\15\43\26\0\15\54\4\0"+
    "\1\54\3\0\14\54\21\0\1\43\4\0\1\43\2\0\12\43\1\0"+
    "\1\43\3\0\5\43\6\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\4\43\1\0\13\43\2\0\4\43\5\0\5\43\4\0\1\43\21\0"+
    "\51\43\u0a77\0\57\43\1\0\57\43\1\0\205\43\6\0\4\43\3\54"+
    "\16\0\46\43\12\0\66\43\11\0\1\43\17\0\1\54\27\43\11\0"+
    "\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0"+
    "\7\43\1\0\7\43\1\0\7\43\1\0\40\54\57\0\1\43\u01d5\0"+
    "\3\43\31\0\11\43\6\54\1\0\5\43\2\0\5\43\4\0\126\43"+
    "\2\0\2\54\2\0\3\43\1\0\132\43\1\0\4\43\5\0\51\43"+
    "\3\0\136\43\21\0\33\43\65\0\20\43\u0200\0\u19b6\43\112\0\u51cc\43"+
    "\64\0\u048d\43\103\0\56\43\2\0\u010d\43\3\0\20\43\12\56\2\43"+
    "\24\0\57\43\1\54\14\0\2\54\1\0\31\43\10\0\120\43\2\54"+
    "\45\0\11\43\2\0\147\43\2\0\4\43\1\0\2\43\16\0\12\43"+
    "\120\0\10\43\1\54\3\43\1\54\4\43\1\54\27\43\5\54\20\0"+
    "\1\43\7\0\64\43\14\0\2\54\62\43\21\54\13\0\12\56\6\0"+
    "\22\54\6\43\3\0\1\43\4\0\12\56\34\43\10\54\2\0\27\43"+
    "\15\54\14\0\35\43\3\0\4\54\57\43\16\54\16\0\1\43\12\56"+
    "\46\0\51\43\16\54\11\0\3\43\1\54\10\43\2\54\2\0\12\56"+
    "\6\0\27\43\3\0\1\43\1\54\4\0\60\43\1\54\1\43\3\54"+
    "\2\43\2\54\5\43\2\54\1\43\1\54\1\43\30\0\3\43\43\0"+
    "\6\43\2\0\6\43\2\0\6\43\11\0\7\43\1\0\7\43\221\0"+
    "\43\43\10\54\1\0\2\54\2\0\12\56\6\0\u2ba4\43\14\0\27\43"+
    "\4\0\61\43\u2104\0\u012e\43\2\0\76\43\2\0\152\43\46\0\7\43"+
    "\14\0\5\43\5\0\1\43\1\54\12\43\1\0\15\43\1\0\5\43"+
    "\1\0\1\43\1\0\2\43\1\0\2\43\1\0\154\43\41\0\u016b\43"+
    "\22\0\100\43\2\0\66\43\50\0\15\43\3\0\20\54\20\0\7\54"+
    "\14\0\2\43\30\0\3\43\31\0\1\43\6\0\5\43\1\0\207\43"+
    "\2\0\1\54\4\0\1\43\13\0\12\56\7\0\32\43\4\0\1\43"+
    "\1\0\32\43\13\0\131\43\3\0\6\43\2\0\6\43\2\0\6\43"+
    "\2\0\3\43\3\0\2\43\3\0\2\43\22\0\3\54\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\24\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\1\13\1\14\1\13\1\15"+
    "\1\16\1\17\1\20\3\1\1\21\1\3\1\5\1\22"+
    "\16\5\1\23\12\5\1\24\5\5\2\0\1\25\1\13"+
    "\1\26\1\21\2\0\1\27\1\0\1\13\12\5\1\30"+
    "\2\5\1\31\1\5\1\32\1\33\4\5\1\34\14\5"+
    "\1\35\1\0\2\13\2\0\1\36\1\0\1\37\10\5"+
    "\1\40\10\5\1\41\2\5\1\42\1\43\2\5\1\44"+
    "\3\5\1\0\1\13\1\45\1\37\1\0\2\5\1\46"+
    "\2\5\1\47\21\5\1\50\2\45\1\0\7\5\1\51"+
    "\1\52\3\5\1\53\6\5\1\54\2\5\1\0\1\55"+
    "\1\56\2\5\1\57\3\5\1\60\6\5\1\61\2\5"+
    "\1\0\1\5\1\62\1\63\1\64\1\5\1\65\2\5"+
    "\1\66\1\67\2\5\1\70\1\71\1\72\1\73\1\74"+
    "\1\5\1\75\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\57\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\57\0\57\0\57\0\57\0\u0468\0\u0497\0\u04c6"+
    "\0\57\0\u04f5\0\57\0\57\0\57\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u034e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u034e\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u034e\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0497\0\57\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u05b1\0\57\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u034e\0\u0edf\0\u0f0e\0\u034e\0\u0f3d\0\u034e\0\u034e"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u034e\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe"+
    "\0\u122d\0\57\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u0cab"+
    "\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490"+
    "\0\u14bf\0\u14ee\0\u034e\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u034e\0\u1695\0\u16c4\0\u034e\0\u034e"+
    "\0\u16f3\0\u1722\0\u034e\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d"+
    "\0\u12ba\0\u183c\0\u186b\0\u189a\0\u18c9\0\u034e\0\u18f8\0\u1927"+
    "\0\u034e\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70"+
    "\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8"+
    "\0\u1c17\0\u1c46\0\u034e\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31"+
    "\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u034e\0\u034e\0\u1e4b"+
    "\0\u1e7a\0\u1ea9\0\u034e\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94"+
    "\0\u1fc3\0\u034e\0\u1ff2\0\u2021\0\u2050\0\u034e\0\u034e\0\u207f"+
    "\0\u20ae\0\u034e\0\u20dd\0\u210c\0\u213b\0\u034e\0\u216a\0\u2199"+
    "\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u034e\0\u2284\0\u22b3\0\u22e2"+
    "\0\u2311\0\u034e\0\u034e\0\u034e\0\u2340\0\u034e\0\u236f\0\u239e"+
    "\0\u034e\0\u034e\0\u23cd\0\u23fc\0\u034e\0\u186b\0\u034e\0\u034e"+
    "\0\u034e\0\u242b\0\u034e\0\u034e\0\u034e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\24\1\27\1\30"+
    "\2\24\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\24\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\42\1\51\1\52\60\0\1\3\56\0"+
    "\1\53\1\4\60\0\1\24\1\54\26\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\2\24"+
    "\1\55\25\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\13\24\1\56\14\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\1\24"+
    "\1\57\26\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\16\24\1\60\5\24\1\61\3\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\15\24\1\62\12\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\4\24\1\63\10\24"+
    "\1\64\12\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\6\24\1\65\1\24\1\66\7\24"+
    "\1\67\7\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\2\24\1\70\4\24\1\71\20\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\1\24\1\72\26\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\13\24\1\73\14\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\7\24\1\74\1\24\1\75\7\24\1\76\1\24"+
    "\1\77\1\24\1\100\2\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\13\24\1\101\14\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\1\24\1\102\2\24\1\103\23\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\30\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\1\24\1\104\16\24\1\105\7\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\2\24"+
    "\1\106\4\24\1\107\20\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\1\24\1\110\11\24"+
    "\1\111\14\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\112\3\24\1\113\17\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\13\24\1\114\14\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\40\0\1\115\16\0\41\116"+
    "\1\117\15\116\4\0\30\42\6\0\1\120\1\42\1\0"+
    "\1\42\6\0\1\42\1\0\1\121\4\0\30\42\6\0"+
    "\2\42\1\0\1\42\6\0\1\42\1\0\1\42\51\0"+
    "\1\46\63\0\1\122\56\0\1\123\2\124\1\125\54\124"+
    "\4\0\30\42\4\0\1\126\1\0\1\127\1\42\1\0"+
    "\1\42\6\0\1\42\1\0\1\52\1\0\1\53\61\0"+
    "\2\24\1\130\25\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\6\24\1\131\15\24\1\132"+
    "\3\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\24\24\1\133\3\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\6\24\1\134"+
    "\21\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\5\24\1\135\22\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\1\24\1\136"+
    "\26\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\15\24\1\137\12\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\10\24\1\140"+
    "\17\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\15\24\1\141\12\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\11\24\1\142"+
    "\16\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\2\24\1\143\25\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\20\24\1\144"+
    "\7\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\4\24\1\145\23\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\1\24\1\146"+
    "\14\24\1\147\11\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\7\24\1\150\20\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\7\24\1\151\20\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\17\24\1\152\10\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\23\24\1\153\4\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\25\24\1\154\2\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\15\24\1\155\12\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\1\24\1\156\26\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\7\24\1\157\16\24\1\160\1\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\15\24\1\161"+
    "\12\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\6\24\1\162\21\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\6\24\1\163"+
    "\21\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\10\24\1\164\17\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\6\24\1\165"+
    "\21\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\6\24\1\166\21\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\21\24\1\167"+
    "\6\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\3\24\1\170\15\24\1\171\6\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\40\0"+
    "\1\172\16\0\4\173\30\174\6\173\1\175\1\174\1\173"+
    "\1\174\6\173\1\174\1\173\1\174\4\0\30\42\4\0"+
    "\1\126\1\0\2\42\1\0\1\42\6\0\1\42\1\0"+
    "\1\121\40\0\1\126\1\0\1\176\13\0\1\122\56\0"+
    "\1\177\56\0\1\200\4\0\30\42\6\0\2\42\1\0"+
    "\1\42\4\0\1\201\1\0\1\42\1\0\1\202\4\0"+
    "\3\24\1\203\24\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\10\24\1\204\17\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\4\24\1\205\23\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\5\24\1\206\22\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\4\24\1\207\23\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\6\24\1\210\21\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\5\24\1\211\22\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\24\24\1\212\3\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\4\24\1\213\23\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\20\24\1\214\7\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\25\24\1\215\2\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\14\24\1\216\13\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\21\24\1\217\6\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\6\24\1\220\21\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\13\24\1\221\14\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\15\24\1\222\12\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\15\24\1\223\12\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\6\24\1\224\21\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\1\24\1\225\26\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\10\24\1\226\17\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\23\24\1\227\4\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\12\24\1\230\15\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\4\24\1\231\23\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\11\24\1\232\16\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\4\24\1\233\23\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\13\24\1\234\14\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\6\24\1\235\21\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\4\24\1\236\23\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\7\24\1\140\20\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\42\173\1\237\20\173\30\174\6\173"+
    "\1\240\1\174\1\173\1\174\6\173\1\174\1\173\1\174"+
    "\4\173\30\174\6\173\1\241\1\174\1\173\1\174\6\173"+
    "\1\174\1\173\1\174\52\0\1\201\3\0\1\242\56\0"+
    "\1\243\56\0\1\242\4\0\30\42\6\0\1\127\1\42"+
    "\1\0\1\42\6\0\1\42\1\0\1\202\4\0\4\24"+
    "\1\244\23\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\15\24\1\245\12\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\23\24"+
    "\1\246\4\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\1\24\1\247\26\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\2\24"+
    "\1\250\25\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\22\24\1\251\5\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\252\23\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\20\24\1\253\7\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\2\24"+
    "\1\254\25\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\21\24\1\255\6\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\256\23\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\257\23\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\15\24"+
    "\1\260\12\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\22\24\1\261\5\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\262\23\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\263\23\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\10\24"+
    "\1\264\17\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\20\24\1\265\7\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\2\24"+
    "\1\266\22\24\1\267\2\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\21\24\1\270\6\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\24\24\1\271\3\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\20\24\1\272\7\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\6\24\1\273\21\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\42\173\1\274\20\173\30\174"+
    "\6\173\1\275\1\174\1\173\1\174\6\173\1\174\1\173"+
    "\1\174\42\0\1\176\13\0\1\242\40\0\1\276\22\0"+
    "\5\24\1\277\22\24\6\0\2\24\1\0\1\42\6\0"+
    "\1\24\1\0\1\24\4\0\13\24\1\300\14\24\6\0"+
    "\2\24\1\0\1\42\6\0\1\24\1\0\1\24\4\0"+
    "\2\24\1\301\4\24\1\302\20\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\23\24\1\303"+
    "\4\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\15\24\1\304\12\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\2\24\1\305"+
    "\25\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\25\24\1\306\2\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\4\24\1\307"+
    "\23\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\15\24\1\310\12\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\13\24\1\311"+
    "\14\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\13\24\1\312\14\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\7\24\1\313"+
    "\20\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\7\24\1\314\20\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\25\24\1\315"+
    "\2\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\15\24\1\316\12\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\15\24\1\317"+
    "\12\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\6\24\1\320\21\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\4\24\1\321"+
    "\23\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\4\24\1\322\23\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\4\0\1\24\1\323"+
    "\26\24\6\0\2\24\1\0\1\42\6\0\1\24\1\0"+
    "\1\24\4\0\5\24\1\324\22\24\6\0\2\24\1\0"+
    "\1\42\6\0\1\24\1\0\1\24\42\0\1\274\20\0"+
    "\30\42\6\0\1\275\1\42\1\0\1\42\6\0\1\42"+
    "\1\0\1\42\56\0\1\325\4\0\6\24\1\326\21\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\21\24\1\327\6\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\4\24\1\330\23\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\4\24\1\331\23\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\7\24\1\332\20\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\6\24\1\333\21\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\13\24\1\334\14\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\7\24\1\335\20\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\2\24\1\336\25\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\3\24\1\337\24\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\7\24\1\340\20\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\13\24\1\341\14\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\3\24\1\342\24\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\4\24\1\343\23\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\20\24\1\344\7\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\15\24\1\345\12\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\23\24\1\346\4\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\21\24\1\347\6\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\56\0\1\350\4\0\2\24"+
    "\1\351\25\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\23\24\1\352\4\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\22\24"+
    "\1\353\5\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\21\24\1\354\6\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\13\24"+
    "\1\355\14\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\6\24\1\356\21\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\357\23\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\6\24\1\360\21\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\361\23\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\23\24\1\362\4\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\1\24"+
    "\1\363\26\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\4\0\4\24\1\364\23\24\6\0\2\24"+
    "\1\0\1\42\6\0\1\24\1\0\1\24\4\0\4\24"+
    "\1\365\23\24\6\0\2\24\1\0\1\42\6\0\1\24"+
    "\1\0\1\24\56\0\1\366\4\0\6\24\1\367\21\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\21\24\1\370\6\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\23\24\1\371\4\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\4\24\1\372\23\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\2\24\1\373\25\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24"+
    "\4\0\21\24\1\374\6\24\6\0\2\24\1\0\1\42"+
    "\6\0\1\24\1\0\1\24\4\0\23\24\1\375\4\24"+
    "\6\0\2\24\1\0\1\42\6\0\1\24\1\0\1\24";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9306];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\24\1\4\11\3\1\1\11"+
    "\1\1\3\11\47\1\2\0\1\11\3\1\2\0\1\11"+
    "\1\0\43\1\1\11\1\0\2\1\2\0\1\1\1\0"+
    "\35\1\1\0\3\1\1\0\32\1\1\0\26\1\1\0"+
    "\22\1\1\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 64: break;
        case 8: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 65: break;
        case 35: 
          { return TaraTypes.WITH;
          }
        case 66: break;
        case 28: 
          { return TaraTypes.VAR;
          }
        case 67: break;
        case 50: 
          { return TaraTypes.COMPOSED;
          }
        case 68: break;
        case 14: 
          { return TaraTypes.COLON;
          }
        case 69: break;
        case 53: 
          { return TaraTypes.ABSTRACT;
          }
        case 70: break;
        case 56: 
          { return TaraTypes.MULTIPLE;
          }
        case 71: break;
        case 42: 
          { return TaraTypes.SINGLE;
          }
        case 72: break;
        case 58: 
          { return TaraTypes.COMPONENT;
          }
        case 73: break;
        case 30: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 74: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 75: break;
        case 46: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 76: break;
        case 7: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 77: break;
        case 29: 
          { return TaraTypes.LIST;
          }
        case 78: break;
        case 15: 
          { return TaraTypes.EQUALS;
          }
        case 79: break;
        case 10: 
          { return TaraTypes.DOT;
          }
        case 80: break;
        case 41: 
          { return TaraTypes.STRING_TYPE;
          }
        case 81: break;
        case 38: 
          { return TaraTypes.NAMED;
          }
        case 82: break;
        case 52: 
          { return TaraTypes.TERMINAL;
          }
        case 83: break;
        case 63: 
          { return TaraTypes.AGGREGATED;
          }
        case 84: break;
        case 36: 
          { return TaraTypes.DATE_TYPE;
          }
        case 85: break;
        case 62: 
          { return TaraTypes.METAMODEL;
          }
        case 86: break;
        case 5: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 87: break;
        case 39: 
          { return TaraTypes.EMPTY_REF;
          }
        case 88: break;
        case 6: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 89: break;
        case 55: 
          { return TaraTypes.REQUIRED;
          }
        case 90: break;
        case 22: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 91: break;
        case 33: 
          { return TaraTypes.ROOT;
          }
        case 92: break;
        case 57: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 93: break;
        case 4: 
          { return inline();
          }
        case 94: break;
        case 23: 
          { return TaraTypes.DOC_LINE;
          }
        case 95: break;
        case 47: 
          { return TaraTypes.EXTENDS;
          }
        case 96: break;
        case 21: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 97: break;
        case 51: 
          { return TaraTypes.PROPERTY;
          }
        case 98: break;
        case 12: 
          { return TaraTypes.STAR;
          }
        case 99: break;
        case 44: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 100: break;
        case 9: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 101: break;
        case 17: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 102: break;
        case 16: 
          { return semicolon();
          }
        case 103: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 104: break;
        case 11: 
          { return TaraTypes.MEASURE_VALUE;
          }
        case 105: break;
        case 54: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 106: break;
        case 25: 
          { return TaraTypes.USE_KEY;
          }
        case 107: break;
        case 43: 
          { return TaraTypes.ALWAYS;
          }
        case 108: break;
        case 32: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 109: break;
        case 19: 
          { return TaraTypes.AS;
          }
        case 110: break;
        case 18: 
          { return TaraTypes.ON;
          }
        case 111: break;
        case 24: 
          { return TaraTypes.SUB;
          }
        case 112: break;
        case 48: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 113: break;
        case 20: 
          { return TaraTypes.IS;
          }
        case 114: break;
        case 49: 
          { return TaraTypes.INT_TYPE;
          }
        case 115: break;
        case 45: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 116: break;
        case 31: 
          { return TaraTypes.DATE_VALUE_KEY;
          }
        case 117: break;
        case 59: 
          { return TaraTypes.UNIVERSAL;
          }
        case 118: break;
        case 34: 
          { return TaraTypes.WORD_KEY;
          }
        case 119: break;
        case 61: 
          { return TaraTypes.INTENTION;
          }
        case 120: break;
        case 60: 
          { return TaraTypes.ADDRESSED;
          }
        case 121: break;
        case 40: 
          { return TaraTypes.FACET;
          }
        case 122: break;
        case 13: 
          { return TaraTypes.COMMA;
          }
        case 123: break;
        case 27: 
          { return TaraTypes.HAS;
          }
        case 124: break;
        case 26: 
          { return TaraTypes.BOX_KEY;
          }
        case 125: break;
        case 3: 
          { return newlineIndent();
          }
        case 126: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 254: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
