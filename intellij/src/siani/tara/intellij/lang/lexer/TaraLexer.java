/* The following code was generated by JFlex 1.4.3 on 19/02/15 10:43 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;

import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/02/15 10:43 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int QUOTED = 2;
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\55\1\1\1\2\2\0\1\60\16\55\4\0\1\1\1\0\1\41" +
			"\1\0\1\43\1\51\1\53\1\0\1\34\1\35\1\44\1\56\1\46" +
			"\1\42\1\40\1\45\12\57\1\47\1\52\1\0\1\50\1\3\2\0" +
			"\2\43\1\4\1\43\1\54\25\43\1\36\1\61\1\37\1\0\1\43" +
			"\1\0\1\17\1\15\1\7\1\22\1\10\1\33\1\30\1\16\1\25" +
			"\2\43\1\23\1\32\1\6\1\5\1\11\1\31\1\21\1\13\1\12" +
			"\1\14\1\20\1\24\1\27\1\26\1\43\4\0\41\55\2\0\4\43" +
			"\4\0\1\43\2\0\1\55\2\0\1\51\4\0\1\43\1\0\1\45" +
			"\2\0\1\43\5\0\27\43\1\0\37\43\1\0\u01ca\43\4\0\14\43" +
			"\16\0\5\43\7\0\1\43\1\0\1\43\21\0\160\55\5\43\1\0" +
			"\2\43\2\0\4\43\10\0\1\43\1\0\3\43\1\0\1\43\1\0" +
			"\24\43\1\0\123\43\1\0\213\43\1\0\5\55\2\0\236\43\11\0" +
			"\46\43\2\0\1\43\7\0\47\43\11\0\55\55\1\0\1\55\1\0" +
			"\2\55\1\0\2\55\1\0\1\55\10\0\33\43\5\0\3\43\15\0" +
			"\4\55\7\0\1\43\4\0\13\55\5\0\53\43\25\55\12\57\4\0" +
			"\2\43\1\55\143\43\1\0\1\43\10\55\1\0\6\55\2\43\2\55" +
			"\1\0\4\55\2\43\12\57\3\43\2\0\1\43\17\0\1\55\1\43" +
			"\1\55\36\43\33\55\2\0\131\43\13\55\1\43\16\0\12\57\41\43" +
			"\11\55\2\43\4\0\1\43\5\0\26\43\4\55\1\43\11\55\1\43" +
			"\3\55\1\43\5\55\22\0\31\43\3\55\244\0\4\55\66\43\3\55" +
			"\1\43\22\55\1\43\7\55\12\43\2\55\2\0\12\57\1\0\7\43" +
			"\1\0\7\43\1\0\3\55\1\0\10\43\2\0\2\43\2\0\26\43" +
			"\1\0\7\43\1\0\1\43\3\0\4\43\2\0\1\55\1\43\7\55" +
			"\2\0\2\55\2\0\3\55\1\43\10\0\1\55\4\0\2\43\1\0" +
			"\3\43\2\55\2\0\12\57\4\43\7\0\1\43\5\0\3\55\1\0" +
			"\6\43\4\0\2\43\2\0\26\43\1\0\7\43\1\0\2\43\1\0" +
			"\2\43\1\0\2\43\2\0\1\55\1\0\5\55\4\0\2\55\2\0" +
			"\3\55\3\0\1\55\7\0\4\43\1\0\1\43\7\0\12\57\2\55" +
			"\3\43\1\55\13\0\3\55\1\0\11\43\1\0\3\43\1\0\26\43" +
			"\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\55\1\43\10\55" +
			"\1\0\3\55\1\0\3\55\2\0\1\43\17\0\2\43\2\55\2\0" +
			"\12\57\1\0\1\43\17\0\3\55\1\0\10\43\2\0\2\43\2\0" +
			"\26\43\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\55\1\43" +
			"\7\55\2\0\2\55\2\0\3\55\10\0\2\55\4\0\2\43\1\0" +
			"\3\43\2\55\2\0\12\57\1\0\1\43\20\0\1\55\1\43\1\0" +
			"\6\43\3\0\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1\0" +
			"\2\43\3\0\2\43\3\0\3\43\3\0\14\43\4\0\5\55\3\0" +
			"\3\55\1\0\4\55\2\0\1\43\6\0\1\55\16\0\12\57\11\0" +
			"\1\43\7\0\3\55\1\0\10\43\1\0\3\43\1\0\27\43\1\0" +
			"\12\43\1\0\5\43\3\0\1\43\7\55\1\0\3\55\1\0\4\55" +
			"\7\0\2\55\1\0\2\43\6\0\2\43\2\55\2\0\12\57\22\0" +
			"\2\55\1\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43\1\0" +
			"\5\43\2\0\1\55\1\43\7\55\1\0\3\55\1\0\4\55\7\0" +
			"\2\55\7\0\1\43\1\0\2\43\2\55\2\0\12\57\1\0\2\43" +
			"\17\0\2\55\1\0\10\43\1\0\3\43\1\0\51\43\2\0\1\43" +
			"\7\55\1\0\3\55\1\0\4\55\1\43\10\0\1\55\10\0\2\43" +
			"\2\55\2\0\12\57\12\0\6\43\2\0\2\55\1\0\22\43\3\0" +
			"\30\43\1\0\11\43\1\0\1\43\2\0\7\43\3\0\1\55\4\0" +
			"\6\55\1\0\1\55\1\0\10\55\22\0\2\55\15\0\60\43\1\55" +
			"\2\43\7\55\4\0\10\43\10\55\1\0\12\57\47\0\2\43\1\0" +
			"\1\43\2\0\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0" +
			"\7\43\1\0\3\43\1\0\1\43\1\0\1\43\2\0\2\43\1\0" +
			"\4\43\1\55\2\43\6\55\1\0\2\55\1\43\2\0\5\43\1\0" +
			"\1\43\1\0\6\55\2\0\12\57\2\0\2\43\42\0\1\43\27\0" +
			"\2\55\6\0\12\57\13\0\1\55\1\0\1\55\1\0\1\55\4\0" +
			"\2\55\10\43\1\0\44\43\4\0\24\55\1\0\2\55\5\43\13\55" +
			"\1\0\44\55\11\0\1\55\71\0\53\43\24\55\1\43\12\57\6\0" +
			"\6\43\4\55\4\43\3\55\1\43\3\55\2\43\7\55\3\43\4\55" +
			"\15\43\14\55\1\43\1\55\12\57\4\55\2\0\46\43\12\0\53\43" +
			"\1\0\1\43\3\0\u0149\43\1\0\4\43\2\0\7\43\1\0\1\43" +
			"\1\0\4\43\2\0\51\43\1\0\4\43\2\0\41\43\1\0\4\43" +
			"\2\0\7\43\1\0\1\43\1\0\4\43\2\0\17\43\1\0\71\43" +
			"\1\0\4\43\2\0\103\43\2\0\3\55\40\0\20\43\20\0\125\43" +
			"\14\0\u026c\43\2\0\21\43\1\0\32\43\5\0\113\43\3\0\3\43" +
			"\17\0\15\43\1\0\4\43\3\55\13\0\22\43\3\55\13\0\22\43" +
			"\2\55\14\0\15\43\1\0\3\43\1\0\2\55\14\0\64\43\40\55" +
			"\3\0\1\43\3\0\2\43\1\55\2\0\12\57\41\0\3\55\2\0" +
			"\12\57\6\0\130\43\10\0\51\43\1\55\1\43\5\0\106\43\12\0" +
			"\35\43\3\0\14\55\4\0\14\55\12\0\12\57\36\43\2\0\5\43" +
			"\13\0\54\43\4\0\21\55\7\43\2\55\6\0\12\57\46\0\27\43" +
			"\5\55\4\0\65\43\12\55\1\0\35\55\2\0\1\55\12\57\6\0" +
			"\12\57\15\0\1\43\130\0\5\55\57\43\21\55\7\43\4\0\12\57" +
			"\21\0\11\55\14\0\3\55\36\43\12\55\3\0\2\43\12\57\6\0" +
			"\46\43\16\55\14\0\44\43\24\55\10\0\12\57\3\0\3\43\12\57" +
			"\44\43\122\0\3\55\1\0\25\55\4\43\1\55\4\43\1\55\15\0" +
			"\300\43\47\55\25\0\4\55\u0116\43\2\0\6\43\2\0\46\43\2\0" +
			"\6\43\2\0\10\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0" +
			"\37\43\2\0\65\43\1\0\7\43\1\0\1\43\3\0\3\43\1\0" +
			"\7\43\3\0\4\43\2\0\6\43\4\0\15\43\5\0\3\43\1\0" +
			"\7\43\16\0\5\55\32\0\5\55\20\0\2\43\23\0\1\43\13\0" +
			"\5\55\5\0\6\55\1\0\1\43\15\0\1\43\20\0\15\43\3\0" +
			"\14\43\1\43\15\43\26\0\15\55\4\0\1\55\3\0\14\55\21\0" +
			"\1\43\4\0\1\43\2\0\12\43\1\0\1\43\3\0\5\43\6\0" +
			"\1\43\1\0\1\43\1\0\1\43\1\0\4\43\1\0\13\43\2\0" +
			"\4\43\5\0\5\43\4\0\1\43\21\0\51\43\u0a77\0\57\43\1\0" +
			"\57\43\1\0\205\43\6\0\4\43\3\55\16\0\46\43\12\0\66\43" +
			"\11\0\1\43\17\0\1\55\27\43\11\0\7\43\1\0\7\43\1\0" +
			"\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0" +
			"\7\43\1\0\40\55\57\0\1\43\u01d5\0\3\43\31\0\11\43\6\55" +
			"\1\0\5\43\2\0\5\43\4\0\126\43\2\0\2\55\2\0\3\43" +
			"\1\0\132\43\1\0\4\43\5\0\51\43\3\0\136\43\21\0\33\43" +
			"\65\0\20\43\u0200\0\u19b6\43\112\0\u51cc\43\64\0\u048d\43\103\0\56\43" +
			"\2\0\u010d\43\3\0\20\43\12\57\2\43\24\0\57\43\1\55\14\0" +
			"\2\55\1\0\31\43\10\0\120\43\2\55\45\0\11\43\2\0\147\43" +
			"\2\0\4\43\1\0\2\43\16\0\12\43\120\0\10\43\1\55\3\43" +
			"\1\55\4\43\1\55\27\43\5\55\20\0\1\43\7\0\64\43\14\0" +
			"\2\55\62\43\21\55\13\0\12\57\6\0\22\55\6\43\3\0\1\43" +
			"\4\0\12\57\34\43\10\55\2\0\27\43\15\55\14\0\35\43\3\0" +
			"\4\55\57\43\16\55\16\0\1\43\12\57\46\0\51\43\16\55\11\0" +
			"\3\43\1\55\10\43\2\55\2\0\12\57\6\0\27\43\3\0\1\43" +
			"\1\55\4\0\60\43\1\55\1\43\3\55\2\43\2\55\5\43\2\55" +
			"\1\43\1\55\1\43\30\0\3\43\43\0\6\43\2\0\6\43\2\0" +
			"\6\43\11\0\7\43\1\0\7\43\221\0\43\43\10\55\1\0\2\55" +
			"\2\0\12\57\6\0\u2ba4\43\14\0\27\43\4\0\61\43\u2104\0\u012e\43" +
			"\2\0\76\43\2\0\152\43\46\0\7\43\14\0\5\43\5\0\1\43" +
			"\1\55\12\43\1\0\15\43\1\0\5\43\1\0\1\43\1\0\2\43" +
			"\1\0\2\43\1\0\154\43\41\0\u016b\43\22\0\100\43\2\0\66\43" +
			"\50\0\15\43\3\0\20\55\20\0\7\55\14\0\2\43\30\0\3\43" +
			"\31\0\1\43\6\0\5\43\1\0\207\43\2\0\1\55\4\0\1\43" +
			"\13\0\12\57\7\0\32\43\4\0\1\43\1\0\32\43\13\0\131\43" +
			"\3\0\6\43\2\0\6\43\2\0\6\43\2\0\3\43\3\0\2\43" +
			"\3\0\2\43\22\0\3\55\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\2\0\1\1\1\2\1\3\1\4\24\5\1\6\1\7" +
			"\1\10\1\11\1\12\1\13\1\1\1\14\1\15\1\16" +
			"\1\17\1\20\1\21\1\1\1\22\1\23\1\24\1\25" +
			"\1\24\1\3\1\5\1\26\20\5\1\27\17\5\1\30" +
			"\3\5\2\0\1\31\2\0\15\5\1\32\1\5\1\33" +
			"\1\5\1\34\5\5\1\35\6\5\1\36\10\5\1\37" +
			"\3\0\1\40\4\5\1\41\6\5\1\42\10\5\1\43" +
			"\4\5\1\0\1\44\1\20\1\45\1\46\1\47\3\5" +
			"\1\50\1\0\1\51\2\0\2\5\1\52\3\5\1\53" +
			"\2\5\1\54\12\5\1\55\4\5\1\56\1\51\2\0" +
			"\1\40\7\5\1\57\1\60\4\5\1\61\3\5\1\62" +
			"\3\5\1\0\1\63\1\64\2\5\1\65\2\5\1\66" +
			"\7\5\1\67\1\70\1\0\1\5\1\71\1\72\1\73" +
			"\1\5\1\74\2\5\1\75\1\76\1\5\1\77\1\100" +
			"\1\5\1\101\1\5\1\102\1\103\1\104";

	private static int[] zzUnpackAction() {
		int[] result = new int[261];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\62\0\144\0\226\0\310\0\144\0\372\0\u012c" +
			"\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc" +
			"\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c" +
			"\0\u047e\0\u04b0\0\144\0\144\0\144\0\144\0\u04e2\0\144" +
			"\0\u0514\0\144\0\144\0\144\0\144\0\u0546\0\u0578\0\u05aa" +
			"\0\u05dc\0\u060e\0\144\0\144\0\u0640\0\u0672\0\u06a4\0\u03e8" +
			"\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834" +
			"\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4" +
			"\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54" +
			"\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4" +
			"\0\u03e8\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42" +
			"\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2" +
			"\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u03e8\0\u1130" +
			"\0\u03e8\0\u1162\0\u03e8\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c" +
			"\0\u03e8\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u03e8" +
			"\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518" +
			"\0\144\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676" +
			"\0\u16a8\0\u03e8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4" +
			"\0\u03e8\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932" +
			"\0\u1964\0\u03e8\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\144" +
			"\0\u1a90\0\u03e8\0\u03e8\0\u03e8\0\u1ac2\0\u1af4\0\u1b26\0\u03e8" +
			"\0\u1b58\0\u157c\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u03e8\0\u1c52" +
			"\0\u1c84\0\u1cb6\0\u03e8\0\u1ce8\0\u1d1a\0\u03e8\0\u1d4c\0\u1d7e" +
			"\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e" +
			"\0\u03e8\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u03e8\0\u2008\0\u203a" +
			"\0\u206c\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198" +
			"\0\u21ca\0\u03e8\0\u03e8\0\u21fc\0\u222e\0\u2260\0\u2292\0\u03e8" +
			"\0\u22c4\0\u22f6\0\u2328\0\u03e8\0\u235a\0\u238c\0\u23be\0\u23f0" +
			"\0\u03e8\0\u03e8\0\u2422\0\u2454\0\u03e8\0\u2486\0\u24b8\0\u03e8" +
			"\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u03e8" +
			"\0\u03e8\0\u2648\0\u267a\0\u03e8\0\u03e8\0\u03e8\0\u26ac\0\u03e8" +
			"\0\u26de\0\u2710\0\u03e8\0\u03e8\0\u2742\0\u1b8a\0\u03e8\0\u2774" +
			"\0\u03e8\0\u27a6\0\u03e8\0\u03e8\0\u03e8";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[261];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12" +
			"\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
			"\1\23\1\24\1\25\1\26\1\27\1\30\4\26\1\31" +
			"\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
			"\1\26\1\42\1\3\1\43\1\44\1\45\1\46\1\47" +
			"\1\50\1\26\1\3\1\51\1\52\2\3\2\53\1\0" +
			"\36\53\1\54\16\53\1\0\1\55\63\0\1\4\61\0" +
			"\1\56\1\5\63\0\1\26\1\57\26\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\2\26" +
			"\1\60\25\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\13\26\1\61\14\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\1\26" +
			"\1\62\11\26\1\63\14\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\2\26\1\64\20\26" +
			"\1\65\2\26\1\66\1\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\15\26\1\67\12\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\4\26\1\70\6\26\1\71\1\26\1\72\12\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\6\26\1\73\1\26\1\74\10\26\1\75\6\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\7\26\1\76\20\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\1\26\1\77\26\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\13\26\1\100\14\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\7\26\1\101\1\26" +
			"\1\102\4\26\1\103\1\104\4\26\1\105\3\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\13\26\1\106\14\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\1\26\1\107\2\26\1\110" +
			"\6\26\1\111\14\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\1\26\1\112\2\26\1\113" +
			"\2\26\1\114\3\26\1\115\14\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\30\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\1\26\1\116\17\26\1\117\6\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\2\26\1\120" +
			"\4\26\1\121\20\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\4\26\1\122\23\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\13\26\1\123\5\26\1\124\6\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\42\0\1\125\63\0" +
			"\1\126\14\0\1\127\6\0\30\46\6\0\2\46\1\0" +
			"\1\46\6\0\2\46\1\0\1\46\54\0\1\47\66\0" +
			"\1\130\61\0\1\52\42\0\1\131\16\0\1\52\10\0" +
			"\1\53\3\0\1\53\6\0\1\53\17\0\1\53\21\0" +
			"\1\56\64\0\2\26\1\132\25\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\6\26\1\133" +
			"\17\26\1\134\1\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\26\26\1\135\1\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\7\26\1\136\20\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\3\26\1\137\24\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\6\26\1\140\21\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\5\26\1\141\22\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\1\26\1\142\26\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\15\26\1\143\12\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\3\26\1\144\24\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\10\26\1\145\17\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\15\26\1\146\12\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\11\26\1\147\16\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\2\26\1\150\25\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\4\26\1\151\23\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\1\26\1\152\26\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\7\26\1\153\20\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\7\26\1\154\20\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\7\26\1\155\20\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\16\26\1\156\11\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\20\26\1\157\7\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\24\26\1\160\3\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\15\26\1\161\12\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\1\26\1\162\26\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\13\26\1\163\11\26\1\164" +
			"\2\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\6\26\1\165\21\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\10\26\1\166" +
			"\17\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\27\26\1\167\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\17\26\1\170\10\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\6\26\1\171\21\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\15\26\1\172\12\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\6\26\1\173\21\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\6\26\1\174\21\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\13\26\1\175\14\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\3\26\1\176\13\26" +
			"\1\177\10\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\17\26\1\200\10\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\42\0\1\201" +
			"\21\0\42\202\1\203\17\202\40\0\1\131\16\0\1\127" +
			"\61\0\1\204\61\0\1\205\6\0\3\26\1\206\24\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\10\26\1\207\17\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\4\26\1\210\23\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\5\26\1\211\22\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\4\26\1\212\23\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\17\26\1\213\10\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\4\26\1\214\23\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\6\26\1\215\21\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\5\26\1\216\22\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\26\26\1\217\1\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\21\26\1\220\6\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\4\26\1\221\23\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\21\26\1\222\6\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\24\26\1\223\3\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\17\26\1\224\10\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\1\26\1\225\26\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\6\26\1\226\21\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\15\26\1\227\12\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\13\26\1\230\14\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\15\26\1\231\12\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\6\26\1\232\21\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\16\26\1\233\11\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\10\26\1\234\17\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\21\26\1\235\6\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\11\26\1\236\16\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\2\0\2\237\1\240\1\237\30\167\6\237\2\167\1\237" +
			"\1\241\6\237\2\167\1\237\1\167\2\237\4\0\4\26" +
			"\1\242\23\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\16\26\1\243\11\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\12\26" +
			"\1\244\15\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\4\26\1\245\23\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\7\26" +
			"\1\246\20\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\4\26\1\247\23\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\7\26" +
			"\1\145\20\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\4\26\1\250\23\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\2\0\42\202" +
			"\1\251\61\202\1\252\17\202\57\0\1\253\56\0\1\254" +
			"\2\0\1\205\6\0\4\26\1\255\23\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\15\26" +
			"\1\256\12\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\16\26\1\257\11\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\1\26" +
			"\1\260\26\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\1\26\1\261\26\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\2\26" +
			"\1\262\25\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\22\26\1\263\5\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\4\26" +
			"\1\264\23\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\21\26\1\265\6\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\6\26" +
			"\1\266\21\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\2\26\1\267\25\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\17\26" +
			"\1\270\10\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\4\26\1\271\23\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\3\26" +
			"\1\272\24\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\15\26\1\273\12\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\4\26" +
			"\1\274\23\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\22\26\1\275\5\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\4\26" +
			"\1\276\23\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\1\26\1\277\26\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\21\26" +
			"\1\300\6\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\6\0\1\26\1\301\26\26\6\0\2\26" +
			"\1\0\1\46\6\0\2\26\1\0\1\26\6\0\17\26" +
			"\1\302\10\26\6\0\2\26\1\0\1\46\6\0\2\26" +
			"\1\0\1\26\2\0\2\237\1\240\61\237\1\240\1\237" +
			"\30\241\6\237\2\241\1\237\1\241\6\237\2\241\1\237" +
			"\1\241\2\237\4\0\2\26\1\303\21\26\1\304\3\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\6\0\10\26\1\305\17\26\6\0\2\26\1\0\1\46" +
			"\6\0\2\26\1\0\1\26\6\0\6\26\1\306\21\26" +
			"\6\0\2\26\1\0\1\46\6\0\2\26\1\0\1\26" +
			"\2\0\42\202\1\307\17\202\40\0\1\310\63\0\1\311" +
			"\13\0\1\311\1\312\6\0\5\26\1\313\22\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\13\26\1\314\14\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\2\26\1\315\25\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\7\26\1\316\20\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\16\26\1\317\11\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\15\26\1\320\12\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\2\26\1\321\25\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\24\26\1\322\3\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\4\26\1\323\23\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\13\26\1\324\14\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\21\26\1\325\6\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\13\26\1\326\14\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\7\26\1\327\20\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\7\26\1\330\20\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\24\26\1\331\3\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\2\26\1\332\25\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\15\26\1\333\12\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\4\26\1\334\23\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\6\26\1\335\21\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\4\26\1\336\23\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\15\26\1\337\12\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\44\0" +
			"\1\307\76\0\1\340\61\0\1\312\6\0\6\26\1\341" +
			"\21\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\17\26\1\342\10\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\4\26\1\343" +
			"\23\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\4\26\1\344\23\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\7\26\1\345" +
			"\20\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\6\26\1\346\21\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\13\26\1\347" +
			"\14\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\2\26\1\350\25\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\13\26\1\351" +
			"\14\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\3\26\1\352\24\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\7\26\1\353" +
			"\20\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\13\26\1\354\14\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\17\26\1\355" +
			"\10\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\4\26\1\356\23\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\21\26\1\357" +
			"\6\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\15\26\1\360\12\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\4\26\1\361" +
			"\23\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\61\0\1\362\6\0\2\26\1\363\25\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\16\26\1\364\11\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\22\26\1\365\5\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\17\26\1\366\10\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\6\26\1\367\21\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\6\26\1\370\21\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\4\26\1\371\23\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\6\26\1\372\21\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\22\26\1\373\5\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\6\0" +
			"\16\26\1\374\11\26\6\0\2\26\1\0\1\46\6\0" +
			"\2\26\1\0\1\26\6\0\1\26\1\375\26\26\6\0" +
			"\2\26\1\0\1\46\6\0\2\26\1\0\1\26\61\0" +
			"\1\376\6\0\6\26\1\377\21\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\4\26\1\u0100" +
			"\23\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\16\26\1\u0101\11\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\4\26\1\u0102" +
			"\23\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\2\26\1\u0103\25\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\6\0\16\26\1\u0104" +
			"\11\26\6\0\2\26\1\0\1\46\6\0\2\26\1\0" +
			"\1\26\6\0\16\26\1\u0105\11\26\6\0\2\26\1\0" +
			"\1\46\6\0\2\26\1\0\1\26\2\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[10200];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	private static java.io.Reader zzReader = null; // Fake

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\2\0\1\11\2\1\1\11\24\1\4\11\1\1\1\11" +
			"\1\1\4\11\5\1\2\11\50\1\2\0\1\1\2\0" +
			"\47\1\1\11\3\0\32\1\1\0\1\11\10\1\1\0" +
			"\1\1\2\0\33\1\2\0\26\1\1\0\21\1\1\0" +
			"\23\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[261];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end) ? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof() {
		if (queue.isEmpty() && !end) {
			blockManager.eof();
			storeTokens();
			end = true;
			queue.add(TaraTypes.NEWLINE);
		}
		return sendToken();
	}

	private String getTextSpaces(String text) {
		int index = (text.indexOf(' ') == -1) ? text.indexOf('\t') : text.indexOf(' ');
		return (index == -1) ? "" : text.substring(index);
	}

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

	private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
		if (queue.isEmpty()) {
			String spaces = getTextSpaces(yytext().toString());
			blockManager.spaces(spaces);
			storeTokens();
		}
		return sendToken();
	}

	private IElementType inline() {
		blockManager.openBracket(yytext().length());
		storeTokens();
		return sendToken();
	}

	private IElementType semicolon() {
		blockManager.semicolon(yytext().length());
		storeTokens();
		return sendToken();
	}

	private void storeTokens() {
		blockManager.actions();
		for (IElementType token : blockManager.actions())
			queue.offer(token);
	}


	TaraLexer(java.io.Reader in) {
		zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	TaraLexer(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 2230) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p/>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p/>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p/>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p/>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 41: {
					return TaraTypes.STRING_MULTILINE_VALUE_KEY;
				}
				case 69:
					break;
				case 8: {
					return TaraTypes.LEFT_SQUARE;
				}
				case 70:
					break;
				case 39: {
					return TaraTypes.WITH;
				}
				case 71:
					break;
				case 29: {
					return TaraTypes.VAR;
				}
				case 72:
					break;
				case 14: {
					return TaraTypes.COLON;
				}
				case 73:
					break;
				case 60: {
					return TaraTypes.ABSTRACT;
				}
				case 74:
					break;
				case 45: {
					return TaraTypes.RATIO_TYPE;
				}
				case 75:
					break;
				case 21: {
					yybegin(YYINITIAL);
					return TaraTypes.QUOTE_END;
				}
				case 76:
					break;
				case 16: {
					return TaraTypes.MEASURE_VALUE_KEY;
				}
				case 77:
					break;
				case 48: {
					return TaraTypes.SINGLE;
				}
				case 78:
					break;
				case 64: {
					return TaraTypes.COMPONENT;
				}
				case 79:
					break;
				case 32: {
					return TaraTypes.DOUBLE_VALUE_KEY;
				}
				case 80:
					break;
				case 2: {
					return TokenType.WHITE_SPACE;
				}
				case 81:
					break;
				case 52: {
					return TaraTypes.NATURAL_TYPE;
				}
				case 82:
					break;
				case 7: {
					return TaraTypes.RIGHT_PARENTHESIS;
				}
				case 83:
					break;
				case 31: {
					return TaraTypes.LIST;
				}
				case 84:
					break;
				case 33: {
					return TaraTypes.CASE;
				}
				case 85:
					break;
				case 15: {
					return TaraTypes.EQUALS;
				}
				case 86:
					break;
				case 10: {
					return TaraTypes.DOT;
				}
				case 87:
					break;
				case 47: {
					return TaraTypes.STRING_TYPE;
				}
				case 88:
					break;
				case 42: {
					return TaraTypes.NAMED;
				}
				case 89:
					break;
				case 59: {
					return TaraTypes.TERMINAL;
				}
				case 90:
					break;
				case 68: {
					return TaraTypes.AGGREGATED;
				}
				case 91:
					break;
				case 37: {
					return TaraTypes.DATE_TYPE;
				}
				case 92:
					break;
				case 5: {
					return TaraTypes.IDENTIFIER_KEY;
				}
				case 93:
					break;
				case 43: {
					return TaraTypes.EMPTY_REF;
				}
				case 94:
					break;
				case 6: {
					return TaraTypes.LEFT_PARENTHESIS;
				}
				case 95:
					break;
				case 62: {
					return TaraTypes.REQUIRED;
				}
				case 96:
					break;
				case 18: {
					return TaraTypes.PLUS;
				}
				case 97:
					break;
				case 25: {
					return TaraTypes.NEGATIVE_VALUE_KEY;
				}
				case 98:
					break;
				case 30: {
					return TaraTypes.DSL;
				}
				case 99:
					break;
				case 35: {
					return TaraTypes.ROOT;
				}
				case 100:
					break;
				case 63: {
					return TaraTypes.ADDRESS_VALUE;
				}
				case 101:
					break;
				case 4: {
					return inline();
				}
				case 102:
					break;
				case 53: {
					return TaraTypes.EXTENDS;
				}
				case 103:
					break;
				case 58: {
					return TaraTypes.PROPERTY;
				}
				case 104:
					break;
				case 12: {
					return TaraTypes.STAR;
				}
				case 105:
					break;
				case 50: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 106:
					break;
				case 9: {
					return TaraTypes.RIGHT_SQUARE;
				}
				case 107:
					break;
				case 19: {
					return TaraTypes.NATURAL_VALUE_KEY;
				}
				case 108:
					break;
				case 17: {
					return semicolon();
				}
				case 109:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 110:
					break;
				case 40: {
					return TaraTypes.RESOURCE_KEY;
				}
				case 111:
					break;
				case 36: {
					yypushback(1);
					return TaraTypes.DOC_LINE;
				}
				case 112:
					break;
				case 49: {
					return TaraTypes.ALWAYS;
				}
				case 113:
					break;
				case 34: {
					return TaraTypes.BOOLEAN_VALUE_KEY;
				}
				case 114:
					break;
				case 44: {
					return TaraTypes.TACIT;
				}
				case 115:
					break;
				case 23: {
					return TaraTypes.AS;
				}
				case 116:
					break;
				case 22: {
					return TaraTypes.ON;
				}
				case 117:
					break;
				case 26: {
					return TaraTypes.SUB;
				}
				case 118:
					break;
				case 61: {
					return TaraTypes.READONLY;
				}
				case 119:
					break;
				case 57: {
					return TaraTypes.ENCLOSED;
				}
				case 120:
					break;
				case 11: {
					yybegin(QUOTED);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 121:
					break;
				case 54: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 122:
					break;
				case 24: {
					return TaraTypes.IS;
				}
				case 123:
					break;
				case 56: {
					return TaraTypes.MEASURE_TYPE_KEY;
				}
				case 124:
					break;
				case 27: {
					return TaraTypes.USE;
				}
				case 125:
					break;
				case 55: {
					return TaraTypes.INT_TYPE;
				}
				case 126:
					break;
				case 51: {
					return TaraTypes.METAIDENTIFIER_KEY;
				}
				case 127:
					break;
				case 67: {
					return TaraTypes.ASSOCIATED;
				}
				case 128:
					break;
				case 38: {
					return TaraTypes.WORD_KEY;
				}
				case 129:
					break;
				case 66: {
					return TaraTypes.INTENTION;
				}
				case 130:
					break;
				case 65: {
					return TaraTypes.ADDRESSED;
				}
				case 131:
					break;
				case 20: {
					return TaraTypes.CHARACTER;
				}
				case 132:
					break;
				case 46: {
					return TaraTypes.FACET;
				}
				case 133:
					break;
				case 13: {
					return TaraTypes.COMMA;
				}
				case 134:
					break;
				case 28: {
					return TaraTypes.HAS;
				}
				case 135:
					break;
				case 3: {
					return newlineIndent();
				}
				case 136:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						switch (zzLexicalState) {
							case YYINITIAL: {
								return eof();
							}
							case 262:
								break;
							default:
								return null;
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
