/* The following code was generated by JFlex 1.4.3 on 8/07/14 13:08 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/07/14 13:08 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\54\1\1\1\2\3\0\16\54\4\0\1\1\1\0\1\0\1\51"+
    "\1\53\2\0\1\40\1\33\1\34\1\42\1\47\1\43\1\41\1\35"+
    "\1\0\12\52\1\44\1\46\1\0\1\45\3\0\2\53\1\3\5\53"+
    "\1\12\21\53\4\0\1\53\1\0\1\14\1\17\1\6\1\22\1\7"+
    "\1\50\1\30\1\25\1\13\2\53\1\23\1\21\1\5\1\4\1\10"+
    "\1\31\1\26\1\15\1\11\1\16\1\27\1\24\1\20\1\32\1\53"+
    "\1\36\1\0\1\37\1\0\41\54\2\0\4\53\4\0\1\53\2\0"+
    "\1\54\7\0\1\53\4\0\1\53\5\0\27\53\1\0\37\53\1\0"+
    "\u01ca\53\4\0\14\53\16\0\5\53\7\0\1\53\1\0\1\53\21\0"+
    "\160\54\5\53\1\0\2\53\2\0\4\53\10\0\1\53\1\0\3\53"+
    "\1\0\1\53\1\0\24\53\1\0\123\53\1\0\213\53\1\0\5\54"+
    "\2\0\236\53\11\0\46\53\2\0\1\53\7\0\47\53\11\0\55\54"+
    "\1\0\1\54\1\0\2\54\1\0\2\54\1\0\1\54\10\0\33\53"+
    "\5\0\3\53\15\0\4\54\7\0\1\53\4\0\13\54\5\0\53\53"+
    "\25\54\12\52\4\0\2\53\1\54\143\53\1\0\1\53\10\54\1\0"+
    "\6\54\2\53\2\54\1\0\4\54\2\53\12\52\3\53\2\0\1\53"+
    "\17\0\1\54\1\53\1\54\36\53\33\54\2\0\131\53\13\54\1\53"+
    "\16\0\12\52\41\53\11\54\2\53\4\0\1\53\5\0\26\53\4\54"+
    "\1\53\11\54\1\53\3\54\1\53\5\54\22\0\31\53\3\54\244\0"+
    "\4\54\66\53\3\54\1\53\22\54\1\53\7\54\12\53\2\54\2\0"+
    "\12\52\1\0\7\53\1\0\7\53\1\0\3\54\1\0\10\53\2\0"+
    "\2\53\2\0\26\53\1\0\7\53\1\0\1\53\3\0\4\53\2\0"+
    "\1\54\1\53\7\54\2\0\2\54\2\0\3\54\1\53\10\0\1\54"+
    "\4\0\2\53\1\0\3\53\2\54\2\0\12\52\4\53\7\0\1\53"+
    "\5\0\3\54\1\0\6\53\4\0\2\53\2\0\26\53\1\0\7\53"+
    "\1\0\2\53\1\0\2\53\1\0\2\53\2\0\1\54\1\0\5\54"+
    "\4\0\2\54\2\0\3\54\3\0\1\54\7\0\4\53\1\0\1\53"+
    "\7\0\12\52\2\54\3\53\1\54\13\0\3\54\1\0\11\53\1\0"+
    "\3\53\1\0\26\53\1\0\7\53\1\0\2\53\1\0\5\53\2\0"+
    "\1\54\1\53\10\54\1\0\3\54\1\0\3\54\2\0\1\53\17\0"+
    "\2\53\2\54\2\0\12\52\1\0\1\53\17\0\3\54\1\0\10\53"+
    "\2\0\2\53\2\0\26\53\1\0\7\53\1\0\2\53\1\0\5\53"+
    "\2\0\1\54\1\53\7\54\2\0\2\54\2\0\3\54\10\0\2\54"+
    "\4\0\2\53\1\0\3\53\2\54\2\0\12\52\1\0\1\53\20\0"+
    "\1\54\1\53\1\0\6\53\3\0\3\53\1\0\4\53\3\0\2\53"+
    "\1\0\1\53\1\0\2\53\3\0\2\53\3\0\3\53\3\0\14\53"+
    "\4\0\5\54\3\0\3\54\1\0\4\54\2\0\1\53\6\0\1\54"+
    "\16\0\12\52\11\0\1\53\7\0\3\54\1\0\10\53\1\0\3\53"+
    "\1\0\27\53\1\0\12\53\1\0\5\53\3\0\1\53\7\54\1\0"+
    "\3\54\1\0\4\54\7\0\2\54\1\0\2\53\6\0\2\53\2\54"+
    "\2\0\12\52\22\0\2\54\1\0\10\53\1\0\3\53\1\0\27\53"+
    "\1\0\12\53\1\0\5\53\2\0\1\54\1\53\7\54\1\0\3\54"+
    "\1\0\4\54\7\0\2\54\7\0\1\53\1\0\2\53\2\54\2\0"+
    "\12\52\1\0\2\53\17\0\2\54\1\0\10\53\1\0\3\53\1\0"+
    "\51\53\2\0\1\53\7\54\1\0\3\54\1\0\4\54\1\53\10\0"+
    "\1\54\10\0\2\53\2\54\2\0\12\52\12\0\6\53\2\0\2\54"+
    "\1\0\22\53\3\0\30\53\1\0\11\53\1\0\1\53\2\0\7\53"+
    "\3\0\1\54\4\0\6\54\1\0\1\54\1\0\10\54\22\0\2\54"+
    "\15\0\60\53\1\54\2\53\7\54\4\0\10\53\10\54\1\0\12\52"+
    "\47\0\2\53\1\0\1\53\2\0\2\53\1\0\1\53\2\0\1\53"+
    "\6\0\4\53\1\0\7\53\1\0\3\53\1\0\1\53\1\0\1\53"+
    "\2\0\2\53\1\0\4\53\1\54\2\53\6\54\1\0\2\54\1\53"+
    "\2\0\5\53\1\0\1\53\1\0\6\54\2\0\12\52\2\0\2\53"+
    "\42\0\1\53\27\0\2\54\6\0\12\52\13\0\1\54\1\0\1\54"+
    "\1\0\1\54\4\0\2\54\10\53\1\0\44\53\4\0\24\54\1\0"+
    "\2\54\5\53\13\54\1\0\44\54\11\0\1\54\71\0\53\53\24\54"+
    "\1\53\12\52\6\0\6\53\4\54\4\53\3\54\1\53\3\54\2\53"+
    "\7\54\3\53\4\54\15\53\14\54\1\53\1\54\12\52\4\54\2\0"+
    "\46\53\12\0\53\53\1\0\1\53\3\0\u0149\53\1\0\4\53\2\0"+
    "\7\53\1\0\1\53\1\0\4\53\2\0\51\53\1\0\4\53\2\0"+
    "\41\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0\4\53\2\0"+
    "\17\53\1\0\71\53\1\0\4\53\2\0\103\53\2\0\3\54\40\0"+
    "\20\53\20\0\125\53\14\0\u026c\53\2\0\21\53\1\0\32\53\5\0"+
    "\113\53\3\0\3\53\17\0\15\53\1\0\4\53\3\54\13\0\22\53"+
    "\3\54\13\0\22\53\2\54\14\0\15\53\1\0\3\53\1\0\2\54"+
    "\14\0\64\53\40\54\3\0\1\53\3\0\2\53\1\54\2\0\12\52"+
    "\41\0\3\54\2\0\12\52\6\0\130\53\10\0\51\53\1\54\1\53"+
    "\5\0\106\53\12\0\35\53\3\0\14\54\4\0\14\54\12\0\12\52"+
    "\36\53\2\0\5\53\13\0\54\53\4\0\21\54\7\53\2\54\6\0"+
    "\12\52\46\0\27\53\5\54\4\0\65\53\12\54\1\0\35\54\2\0"+
    "\1\54\12\52\6\0\12\52\15\0\1\53\130\0\5\54\57\53\21\54"+
    "\7\53\4\0\12\52\21\0\11\54\14\0\3\54\36\53\12\54\3\0"+
    "\2\53\12\52\6\0\46\53\16\54\14\0\44\53\24\54\10\0\12\52"+
    "\3\0\3\53\12\52\44\53\122\0\3\54\1\0\25\54\4\53\1\54"+
    "\4\53\1\54\15\0\300\53\47\54\25\0\4\54\u0116\53\2\0\6\53"+
    "\2\0\46\53\2\0\6\53\2\0\10\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\37\53\2\0\65\53\1\0\7\53\1\0\1\53"+
    "\3\0\3\53\1\0\7\53\3\0\4\53\2\0\6\53\4\0\15\53"+
    "\5\0\3\53\1\0\7\53\16\0\5\54\32\0\5\54\20\0\2\53"+
    "\23\0\1\53\13\0\5\54\5\0\6\54\1\0\1\53\15\0\1\53"+
    "\20\0\15\53\3\0\32\53\26\0\15\54\4\0\1\54\3\0\14\54"+
    "\21\0\1\53\4\0\1\53\2\0\12\53\1\0\1\53\3\0\5\53"+
    "\6\0\1\53\1\0\1\53\1\0\1\53\1\0\4\53\1\0\13\53"+
    "\2\0\4\53\5\0\5\53\4\0\1\53\21\0\51\53\u0a77\0\57\53"+
    "\1\0\57\53\1\0\205\53\6\0\4\53\3\54\16\0\46\53\12\0"+
    "\66\53\11\0\1\53\17\0\1\54\27\53\11\0\7\53\1\0\7\53"+
    "\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53"+
    "\1\0\7\53\1\0\40\54\57\0\1\53\u01d5\0\3\53\31\0\11\53"+
    "\6\54\1\0\5\53\2\0\5\53\4\0\126\53\2\0\2\54\2\0"+
    "\3\53\1\0\132\53\1\0\4\53\5\0\51\53\3\0\136\53\21\0"+
    "\33\53\65\0\20\53\u0200\0\u19b6\53\112\0\u51cc\53\64\0\u048d\53\103\0"+
    "\56\53\2\0\u010d\53\3\0\20\53\12\52\2\53\24\0\57\53\1\54"+
    "\14\0\2\54\1\0\31\53\10\0\120\53\2\54\45\0\11\53\2\0"+
    "\147\53\2\0\4\53\1\0\2\53\16\0\12\53\120\0\10\53\1\54"+
    "\3\53\1\54\4\53\1\54\27\53\5\54\20\0\1\53\7\0\64\53"+
    "\14\0\2\54\62\53\21\54\13\0\12\52\6\0\22\54\6\53\3\0"+
    "\1\53\4\0\12\52\34\53\10\54\2\0\27\53\15\54\14\0\35\53"+
    "\3\0\4\54\57\53\16\54\16\0\1\53\12\52\46\0\51\53\16\54"+
    "\11\0\3\53\1\54\10\53\2\54\2\0\12\52\6\0\27\53\3\0"+
    "\1\53\1\54\4\0\60\53\1\54\1\53\3\54\2\53\2\54\5\53"+
    "\2\54\1\53\1\54\1\53\30\0\3\53\43\0\6\53\2\0\6\53"+
    "\2\0\6\53\11\0\7\53\1\0\7\53\221\0\43\53\10\54\1\0"+
    "\2\54\2\0\12\52\6\0\u2ba4\53\14\0\27\53\4\0\61\53\u2104\0"+
    "\u012e\53\2\0\76\53\2\0\152\53\46\0\7\53\14\0\5\53\5\0"+
    "\1\53\1\54\12\53\1\0\15\53\1\0\5\53\1\0\1\53\1\0"+
    "\2\53\1\0\2\53\1\0\154\53\41\0\u016b\53\22\0\100\53\2\0"+
    "\66\53\50\0\15\53\3\0\20\54\20\0\7\54\14\0\2\53\30\0"+
    "\3\53\31\0\1\53\6\0\5\53\1\0\207\53\2\0\1\54\4\0"+
    "\1\53\13\0\12\52\7\0\32\53\4\0\1\53\1\0\32\53\13\0"+
    "\131\53\3\0\6\53\2\0\6\53\2\0\6\53\2\0\3\53\3\0"+
    "\2\53\3\0\2\53\22\0\3\54\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\24\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\1\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\4\1\1\1\17\1\3\1\4\1\20\10\4"+
    "\1\21\1\22\16\4\2\0\1\23\1\0\1\24\1\4"+
    "\1\0\1\25\1\0\16\4\1\26\1\4\1\27\11\4"+
    "\1\30\1\31\2\0\1\4\1\32\3\4\1\33\4\4"+
    "\1\34\10\4\1\35\1\4\1\36\1\37\1\40\2\4"+
    "\1\0\1\41\3\4\1\42\5\4\1\43\10\4\1\41"+
    "\10\4\1\44\1\45\2\4\1\46\3\4\1\47\1\50"+
    "\2\4\1\51\2\4\1\52\1\53\4\4\1\54\1\55"+
    "\1\56\2\4\1\57\1\60\1\61\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\55\0\55\0\u0438\0\55\0\55\0\u0465\0\u0492\0\55"+
    "\0\55\0\55\0\55\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u02fd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\u06db\0\u0708\0\u0735\0\u02fd\0\u02fd\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0465\0\55\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0546\0\55\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40"+
    "\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8"+
    "\0\u0cd5\0\u0d02\0\u02fd\0\u0d2f\0\u02fd\0\u0d5c\0\u0d89\0\u0db6"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u02fd\0\55"+
    "\0\u0ef1\0\u0f1e\0\u0f4b\0\u0a8c\0\u0f78\0\u0fa5\0\u0fd2\0\u02fd"+
    "\0\u0fff\0\u102c\0\u1059\0\u1086\0\u02fd\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u02fd\0\u121b\0\u02fd"+
    "\0\u02fd\0\u02fd\0\u1248\0\u1275\0\u12a2\0\u0f1e\0\u12cf\0\u12fc"+
    "\0\u1329\0\u02fd\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u02fd"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572"+
    "\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\u02fd\0\u02fd\0\u1734\0\u1761\0\u02fd\0\u178e\0\u17bb"+
    "\0\u17e8\0\u02fd\0\u02fd\0\u1815\0\u1842\0\u02fd\0\u186f\0\u189c"+
    "\0\u02fd\0\u02fd\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u02fd\0\u02fd"+
    "\0\u02fd\0\u197d\0\u19aa\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\22\1\27\1\30"+
    "\3\22\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\22\1\2\56\0\1\3\54\0\1\51\1\4"+
    "\55\0\1\22\1\52\26\22\15\0\1\22\1\0\3\22"+
    "\3\0\2\22\1\53\25\22\15\0\1\22\1\0\3\22"+
    "\3\0\11\22\1\54\16\22\15\0\1\22\1\0\3\22"+
    "\3\0\11\22\1\55\16\22\15\0\1\22\1\0\3\22"+
    "\3\0\16\22\1\56\11\22\15\0\1\22\1\0\3\22"+
    "\3\0\23\22\1\57\4\22\15\0\1\22\1\0\3\22"+
    "\3\0\4\22\1\60\16\22\1\61\4\22\15\0\1\22"+
    "\1\0\3\22\3\0\2\22\1\62\25\22\15\0\1\22"+
    "\1\0\3\22\3\0\2\22\1\63\7\22\1\64\15\22"+
    "\15\0\1\22\1\0\3\22\3\0\12\22\1\65\5\22"+
    "\1\66\7\22\15\0\1\22\1\0\3\22\3\0\6\22"+
    "\1\67\1\22\1\70\17\22\15\0\1\22\1\0\3\22"+
    "\3\0\12\22\1\71\15\22\15\0\1\22\1\0\3\22"+
    "\3\0\1\22\1\72\26\22\15\0\1\22\1\0\3\22"+
    "\3\0\30\22\15\0\1\22\1\0\3\22\3\0\4\22"+
    "\1\73\23\22\15\0\1\22\1\0\3\22\3\0\1\22"+
    "\1\74\7\22\1\75\16\22\15\0\1\22\1\0\3\22"+
    "\3\0\1\22\1\76\26\22\15\0\1\22\1\0\3\22"+
    "\3\0\1\22\1\77\6\22\1\100\17\22\15\0\1\22"+
    "\1\0\3\22\3\0\1\22\1\101\2\22\1\102\23\22"+
    "\15\0\1\22\1\0\3\22\3\0\11\22\1\103\16\22"+
    "\15\0\1\22\1\0\3\22\35\0\1\104\17\0\40\105"+
    "\1\106\14\105\41\0\1\107\10\0\1\110\50\0\1\44"+
    "\60\0\1\50\5\0\11\22\1\111\16\22\15\0\1\22"+
    "\1\0\3\22\2\112\1\113\52\112\35\0\1\114\14\0"+
    "\1\50\3\0\1\51\56\0\2\22\1\115\25\22\15\0"+
    "\1\22\1\0\3\22\3\0\6\22\1\116\7\22\1\117"+
    "\11\22\15\0\1\22\1\0\3\22\3\0\12\22\1\120"+
    "\15\22\15\0\1\22\1\0\3\22\3\0\5\22\1\121"+
    "\22\22\15\0\1\22\1\0\3\22\3\0\1\22\1\122"+
    "\6\22\1\123\17\22\15\0\1\22\1\0\3\22\3\0"+
    "\23\22\1\124\4\22\15\0\1\22\1\0\3\22\3\0"+
    "\13\22\1\125\14\22\15\0\1\22\1\0\3\22\3\0"+
    "\6\22\1\126\21\22\15\0\1\22\1\0\3\22\3\0"+
    "\6\22\1\127\21\22\15\0\1\22\1\0\3\22\3\0"+
    "\10\22\1\130\17\22\15\0\1\22\1\0\3\22\3\0"+
    "\23\22\1\131\4\22\15\0\1\22\1\0\3\22\3\0"+
    "\2\22\1\132\25\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\133\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\1\22\1\134\13\22\1\135\12\22\15\0\1\22\1\0"+
    "\3\22\3\0\6\22\1\136\21\22\15\0\1\22\1\0"+
    "\3\22\3\0\13\22\1\137\14\22\15\0\1\22\1\0"+
    "\3\22\3\0\6\22\1\140\21\22\15\0\1\22\1\0"+
    "\3\22\3\0\3\22\1\141\24\22\15\0\1\22\1\0"+
    "\3\22\3\0\23\22\1\142\4\22\15\0\1\22\1\0"+
    "\3\22\3\0\6\22\1\143\21\22\15\0\1\22\1\0"+
    "\3\22\3\0\1\22\1\144\26\22\15\0\1\22\1\0"+
    "\3\22\3\0\12\22\1\145\13\22\1\146\1\22\15\0"+
    "\1\22\1\0\3\22\3\0\23\22\1\147\4\22\15\0"+
    "\1\22\1\0\3\22\35\0\1\150\17\0\41\151\1\152"+
    "\13\151\35\0\1\114\14\0\1\110\5\0\20\22\1\153"+
    "\7\22\15\0\1\22\1\0\3\22\52\0\1\154\5\0"+
    "\3\22\1\155\24\22\15\0\1\22\1\0\3\22\3\0"+
    "\13\22\1\156\14\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\157\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\160\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\6\22\1\161\21\22\15\0\1\22\1\0\3\22\3\0"+
    "\5\22\1\162\22\22\15\0\1\22\1\0\3\22\3\0"+
    "\24\22\1\163\3\22\15\0\1\22\1\0\3\22\3\0"+
    "\16\22\1\164\11\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\165\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\166\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\167\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\11\22\1\170\16\22\15\0\1\22\1\0\3\22\3\0"+
    "\10\22\1\171\17\22\15\0\1\22\1\0\3\22\3\0"+
    "\25\22\1\172\2\22\15\0\1\22\1\0\3\22\3\0"+
    "\20\22\1\173\7\22\15\0\1\22\1\0\3\22\3\0"+
    "\11\22\1\174\16\22\15\0\1\22\1\0\3\22\3\0"+
    "\14\22\1\175\13\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\176\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\11\22\1\177\16\22\15\0\1\22\1\0\3\22\3\0"+
    "\17\22\1\200\10\22\15\0\1\22\1\0\3\22\3\0"+
    "\22\22\1\201\5\22\15\0\1\22\1\0\3\22\3\0"+
    "\6\22\1\202\21\22\15\0\1\22\1\0\3\22\3\0"+
    "\1\22\1\203\26\22\15\0\1\22\1\0\3\22\3\0"+
    "\13\22\1\204\14\22\15\0\1\22\1\0\3\22\41\151"+
    "\1\205\54\151\1\206\13\151\3\0\12\22\1\125\15\22"+
    "\15\0\1\22\1\0\3\22\3\0\4\22\1\207\23\22"+
    "\15\0\1\22\1\0\3\22\3\0\23\22\1\210\4\22"+
    "\15\0\1\22\1\0\3\22\3\0\11\22\1\211\16\22"+
    "\15\0\1\22\1\0\3\22\3\0\27\22\1\212\15\0"+
    "\1\22\1\0\3\22\3\0\4\22\1\213\23\22\15\0"+
    "\1\22\1\0\3\22\3\0\11\22\1\214\16\22\15\0"+
    "\1\22\1\0\3\22\3\0\10\22\1\215\17\22\15\0"+
    "\1\22\1\0\3\22\3\0\2\22\1\216\25\22\15\0"+
    "\1\22\1\0\3\22\3\0\25\22\1\217\2\22\15\0"+
    "\1\22\1\0\3\22\3\0\12\22\1\220\15\22\15\0"+
    "\1\22\1\0\3\22\3\0\2\22\1\221\25\22\15\0"+
    "\1\22\1\0\3\22\3\0\20\22\1\222\7\22\15\0"+
    "\1\22\1\0\3\22\3\0\4\22\1\223\23\22\15\0"+
    "\1\22\1\0\3\22\3\0\16\22\1\224\11\22\15\0"+
    "\1\22\1\0\3\22\3\0\20\22\1\225\7\22\15\0"+
    "\1\22\1\0\3\22\3\0\6\22\1\226\21\22\15\0"+
    "\1\22\1\0\3\22\3\0\13\22\1\227\14\22\15\0"+
    "\1\22\1\0\3\22\3\0\10\22\1\230\17\22\15\0"+
    "\1\22\1\0\3\22\41\151\1\231\13\151\3\0\5\22"+
    "\1\232\22\22\15\0\1\22\1\0\3\22\3\0\11\22"+
    "\1\233\16\22\15\0\1\22\1\0\3\22\3\0\14\22"+
    "\1\234\13\22\15\0\1\22\1\0\3\22\3\0\23\22"+
    "\1\235\4\22\15\0\1\22\1\0\3\22\3\0\6\22"+
    "\1\236\21\22\15\0\1\22\1\0\3\22\3\0\2\22"+
    "\1\237\25\22\15\0\1\22\1\0\3\22\3\0\6\22"+
    "\1\240\21\22\15\0\1\22\1\0\3\22\3\0\4\22"+
    "\1\241\23\22\15\0\1\22\1\0\3\22\3\0\25\22"+
    "\1\242\2\22\15\0\1\22\1\0\3\22\3\0\4\22"+
    "\1\243\23\22\15\0\1\22\1\0\3\22\3\0\11\22"+
    "\1\244\16\22\15\0\1\22\1\0\3\22\3\0\1\22"+
    "\1\245\26\22\15\0\1\22\1\0\3\22\3\0\4\22"+
    "\1\246\23\22\15\0\1\22\1\0\3\22\3\0\10\22"+
    "\1\247\17\22\15\0\1\22\1\0\3\22\3\0\23\22"+
    "\1\250\4\22\15\0\1\22\1\0\3\22\3\0\23\22"+
    "\1\251\4\22\15\0\1\22\1\0\3\22\41\0\1\231"+
    "\16\0\6\22\1\252\21\22\15\0\1\22\1\0\3\22"+
    "\3\0\20\22\1\253\7\22\15\0\1\22\1\0\3\22"+
    "\3\0\20\22\1\254\7\22\15\0\1\22\1\0\3\22"+
    "\3\0\6\22\1\255\21\22\15\0\1\22\1\0\3\22"+
    "\3\0\4\22\1\256\23\22\15\0\1\22\1\0\3\22"+
    "\3\0\11\22\1\257\16\22\15\0\1\22\1\0\3\22"+
    "\3\0\10\22\1\260\17\22\15\0\1\22\1\0\3\22"+
    "\3\0\23\22\1\261\4\22\15\0\1\22\1\0\3\22"+
    "\3\0\2\22\1\262\25\22\15\0\1\22\1\0\3\22"+
    "\3\0\17\22\1\263\10\22\15\0\1\22\1\0\3\22"+
    "\3\0\1\22\1\264\26\22\15\0\1\22\1\0\3\22"+
    "\3\0\3\22\1\265\24\22\15\0\1\22\1\0\3\22"+
    "\3\0\4\22\1\266\23\22\15\0\1\22\1\0\3\22"+
    "\3\0\4\22\1\267\23\22\15\0\1\22\1\0\3\22"+
    "\3\0\27\22\1\270\15\0\1\22\1\0\3\22\3\0"+
    "\20\22\1\271\7\22\15\0\1\22\1\0\3\22\3\0"+
    "\1\22\1\272\26\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\273\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\2\22\1\274\25\22\15\0\1\22\1\0\3\22\3\0"+
    "\4\22\1\275\23\22\15\0\1\22\1\0\3\22\3\0"+
    "\17\22\1\276\10\22\15\0\1\22\1\0\3\22\3\0"+
    "\2\22\1\277\25\22\15\0\1\22\1\0\3\22\3\0"+
    "\20\22\1\300\7\22\15\0\1\22\1\0\3\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6615];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\2\11\1\1\2\11\2\1\4\11"+
    "\40\1\2\0\1\11\1\0\2\1\1\0\1\11\1\0"+
    "\33\1\1\11\2\0\32\1\1\0\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 52: break;
        case 31: 
          { return TaraTypes.WITH;
          }
        case 53: break;
        case 24: 
          { return TaraTypes.VAR;
          }
        case 54: break;
        case 12: 
          { return TaraTypes.COLON;
          }
        case 55: break;
        case 37: 
          { return TaraTypes.SINGLE;
          }
        case 56: break;
        case 47: 
          { return TaraTypes.LOCATION_TYPE;
          }
        case 57: break;
        case 26: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 58: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 59: break;
        case 40: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 60: break;
        case 6: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 61: break;
        case 25: 
          { return TaraTypes.LIST;
          }
        case 62: break;
        case 13: 
          { return TaraTypes.EQUALS;
          }
        case 63: break;
        case 7: 
          { return TaraTypes.DOT;
          }
        case 64: break;
        case 50: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 65: break;
        case 36: 
          { return TaraTypes.STRING_TYPE;
          }
        case 66: break;
        case 8: 
          { return openBracket();
          }
        case 67: break;
        case 46: 
          { return TaraTypes.TERMINAL;
          }
        case 68: break;
        case 29: 
          { return TaraTypes.DATE_TYPE;
          }
        case 69: break;
        case 51: 
          { return TaraTypes.METAMODEL;
          }
        case 70: break;
        case 4: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 71: break;
        case 34: 
          { return TaraTypes.EMPTY_REF;
          }
        case 72: break;
        case 5: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 73: break;
        case 49: 
          { return TaraTypes.REQUIRED;
          }
        case 74: break;
        case 41: 
          { return TaraTypes.PRIVATE;
          }
        case 75: break;
        case 20: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 76: break;
        case 32: 
          { return TaraTypes.ROOT;
          }
        case 77: break;
        case 21: 
          { return TaraTypes.DOC_LINE;
          }
        case 78: break;
        case 19: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 79: break;
        case 45: 
          { return TaraTypes.PROPERTY;
          }
        case 80: break;
        case 10: 
          { return TaraTypes.STAR;
          }
        case 81: break;
        case 38: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 82: break;
        case 15: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 83: break;
        case 14: 
          { return semicolon();
          }
        case 84: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 85: break;
        case 48: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 86: break;
        case 22: 
          { return TaraTypes.USE_KEY;
          }
        case 87: break;
        case 35: 
          { return TaraTypes.ALIAS_TYPE;
          }
        case 88: break;
        case 28: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 89: break;
        case 44: 
          { return TaraTypes.NAMEABLE;
          }
        case 90: break;
        case 18: 
          { return TaraTypes.AS;
          }
        case 91: break;
        case 16: 
          { return TaraTypes.ON;
          }
        case 92: break;
        case 43: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 93: break;
        case 27: 
          { return TaraTypes.CASE_KEY;
          }
        case 94: break;
        case 17: 
          { return TaraTypes.IS;
          }
        case 95: break;
        case 42: 
          { return TaraTypes.INT_TYPE;
          }
        case 96: break;
        case 39: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 97: break;
        case 9: 
          { return closeBracket();
          }
        case 98: break;
        case 30: 
          { return TaraTypes.WORD_KEY;
          }
        case 99: break;
        case 11: 
          { return TaraTypes.COMMA;
          }
        case 100: break;
        case 23: 
          { return TaraTypes.BOX_KEY;
          }
        case 101: break;
        case 3: 
          { return newlineIndent();
          }
        case 102: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 193: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
