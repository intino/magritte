/* The following code was generated by JFlex 1.4.3 on 14/07/14 12:13 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/07/14 12:13 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\55\1\1\1\2\3\0\16\55\4\0\1\1\2\0\1\56\1\46"+
    "\1\50\1\53\1\40\1\33\1\34\1\42\1\52\1\43\1\41\1\35"+
    "\1\0\12\57\1\44\1\51\1\0\1\45\3\0\2\60\1\3\5\60"+
    "\1\12\21\60\4\0\1\60\1\0\1\14\1\17\1\6\1\22\1\7"+
    "\1\54\1\30\1\25\1\13\2\60\1\23\1\21\1\5\1\4\1\10"+
    "\1\31\1\26\1\15\1\11\1\16\1\27\1\24\1\20\1\32\1\60"+
    "\1\36\1\0\1\37\1\0\41\55\2\0\4\60\4\0\1\60\2\0"+
    "\1\55\7\0\1\60\4\0\1\60\5\0\27\60\1\0\37\60\1\0"+
    "\u01ca\60\4\0\14\60\16\0\5\60\7\0\1\60\1\0\1\60\21\0"+
    "\160\55\5\60\1\0\2\60\2\0\4\60\10\0\1\60\1\0\3\60"+
    "\1\0\1\60\1\0\24\60\1\0\123\60\1\0\213\60\1\0\5\55"+
    "\2\0\236\60\11\0\46\60\2\0\1\60\7\0\47\60\11\0\55\55"+
    "\1\0\1\55\1\0\2\55\1\0\2\55\1\0\1\55\10\0\33\60"+
    "\5\0\3\60\15\0\4\55\7\0\1\60\4\0\13\55\5\0\53\60"+
    "\25\55\12\57\4\0\2\60\1\55\143\60\1\0\1\60\10\55\1\0"+
    "\6\55\2\60\2\55\1\0\4\55\2\60\12\57\3\60\2\0\1\60"+
    "\17\0\1\55\1\60\1\55\36\60\33\55\2\0\131\60\13\55\1\60"+
    "\16\0\12\57\41\60\11\55\2\60\4\0\1\60\5\0\26\60\4\55"+
    "\1\60\11\55\1\60\3\55\1\60\5\55\22\0\31\60\3\55\244\0"+
    "\4\55\66\60\3\55\1\60\22\55\1\60\7\55\12\60\2\55\2\0"+
    "\12\57\1\0\7\60\1\0\7\60\1\0\3\55\1\0\10\60\2\0"+
    "\2\60\2\0\26\60\1\0\7\60\1\0\1\60\3\0\4\60\2\0"+
    "\1\55\1\60\7\55\2\0\2\55\2\0\3\55\1\60\10\0\1\55"+
    "\4\0\2\60\1\0\3\60\2\55\2\0\12\57\4\60\7\0\1\60"+
    "\5\0\3\55\1\0\6\60\4\0\2\60\2\0\26\60\1\0\7\60"+
    "\1\0\2\60\1\0\2\60\1\0\2\60\2\0\1\55\1\0\5\55"+
    "\4\0\2\55\2\0\3\55\3\0\1\55\7\0\4\60\1\0\1\60"+
    "\7\0\12\57\2\55\3\60\1\55\13\0\3\55\1\0\11\60\1\0"+
    "\3\60\1\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60\2\0"+
    "\1\55\1\60\10\55\1\0\3\55\1\0\3\55\2\0\1\60\17\0"+
    "\2\60\2\55\2\0\12\57\1\0\1\60\17\0\3\55\1\0\10\60"+
    "\2\0\2\60\2\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\2\0\1\55\1\60\7\55\2\0\2\55\2\0\3\55\10\0\2\55"+
    "\4\0\2\60\1\0\3\60\2\55\2\0\12\57\1\0\1\60\20\0"+
    "\1\55\1\60\1\0\6\60\3\0\3\60\1\0\4\60\3\0\2\60"+
    "\1\0\1\60\1\0\2\60\3\0\2\60\3\0\3\60\3\0\14\60"+
    "\4\0\5\55\3\0\3\55\1\0\4\55\2\0\1\60\6\0\1\55"+
    "\16\0\12\57\11\0\1\60\7\0\3\55\1\0\10\60\1\0\3\60"+
    "\1\0\27\60\1\0\12\60\1\0\5\60\3\0\1\60\7\55\1\0"+
    "\3\55\1\0\4\55\7\0\2\55\1\0\2\60\6\0\2\60\2\55"+
    "\2\0\12\57\22\0\2\55\1\0\10\60\1\0\3\60\1\0\27\60"+
    "\1\0\12\60\1\0\5\60\2\0\1\55\1\60\7\55\1\0\3\55"+
    "\1\0\4\55\7\0\2\55\7\0\1\60\1\0\2\60\2\55\2\0"+
    "\12\57\1\0\2\60\17\0\2\55\1\0\10\60\1\0\3\60\1\0"+
    "\51\60\2\0\1\60\7\55\1\0\3\55\1\0\4\55\1\60\10\0"+
    "\1\55\10\0\2\60\2\55\2\0\12\57\12\0\6\60\2\0\2\55"+
    "\1\0\22\60\3\0\30\60\1\0\11\60\1\0\1\60\2\0\7\60"+
    "\3\0\1\55\4\0\6\55\1\0\1\55\1\0\10\55\22\0\2\55"+
    "\15\0\60\60\1\55\2\60\7\55\4\0\10\60\10\55\1\0\12\57"+
    "\47\0\2\60\1\0\1\60\2\0\2\60\1\0\1\60\2\0\1\60"+
    "\6\0\4\60\1\0\7\60\1\0\3\60\1\0\1\60\1\0\1\60"+
    "\2\0\2\60\1\0\4\60\1\55\2\60\6\55\1\0\2\55\1\60"+
    "\2\0\5\60\1\0\1\60\1\0\6\55\2\0\12\57\2\0\2\60"+
    "\42\0\1\60\27\0\2\55\6\0\12\57\13\0\1\55\1\0\1\55"+
    "\1\0\1\55\4\0\2\55\10\60\1\0\44\60\4\0\24\55\1\0"+
    "\2\55\5\60\13\55\1\0\44\55\11\0\1\55\71\0\53\60\24\55"+
    "\1\60\12\57\6\0\6\60\4\55\4\60\3\55\1\60\3\55\2\60"+
    "\7\55\3\60\4\55\15\60\14\55\1\60\1\55\12\57\4\55\2\0"+
    "\46\60\12\0\53\60\1\0\1\60\3\0\u0149\60\1\0\4\60\2\0"+
    "\7\60\1\0\1\60\1\0\4\60\2\0\51\60\1\0\4\60\2\0"+
    "\41\60\1\0\4\60\2\0\7\60\1\0\1\60\1\0\4\60\2\0"+
    "\17\60\1\0\71\60\1\0\4\60\2\0\103\60\2\0\3\55\40\0"+
    "\20\60\20\0\125\60\14\0\u026c\60\2\0\21\60\1\0\32\60\5\0"+
    "\113\60\3\0\3\60\17\0\15\60\1\0\4\60\3\55\13\0\22\60"+
    "\3\55\13\0\22\60\2\55\14\0\15\60\1\0\3\60\1\0\2\55"+
    "\14\0\64\60\40\55\3\0\1\60\3\0\2\60\1\55\2\0\12\57"+
    "\41\0\3\55\2\0\12\57\6\0\130\60\10\0\51\60\1\55\1\60"+
    "\5\0\106\60\12\0\35\60\3\0\14\55\4\0\14\55\12\0\12\57"+
    "\36\60\2\0\5\60\13\0\54\60\4\0\21\55\7\60\2\55\6\0"+
    "\12\57\46\0\27\60\5\55\4\0\65\60\12\55\1\0\35\55\2\0"+
    "\1\55\12\57\6\0\12\57\15\0\1\60\130\0\5\55\57\60\21\55"+
    "\7\60\4\0\12\57\21\0\11\55\14\0\3\55\36\60\12\55\3\0"+
    "\2\60\12\57\6\0\46\60\16\55\14\0\44\60\24\55\10\0\12\57"+
    "\3\0\3\60\12\57\44\60\122\0\3\55\1\0\25\55\4\60\1\55"+
    "\4\60\1\55\15\0\300\60\47\55\25\0\4\55\u0116\60\2\0\6\60"+
    "\2\0\46\60\2\0\6\60\2\0\10\60\1\0\1\60\1\0\1\60"+
    "\1\0\1\60\1\0\37\60\2\0\65\60\1\0\7\60\1\0\1\60"+
    "\3\0\3\60\1\0\7\60\3\0\4\60\2\0\6\60\4\0\15\60"+
    "\5\0\3\60\1\0\7\60\16\0\5\55\32\0\5\55\20\0\2\60"+
    "\23\0\1\60\13\0\5\55\5\0\6\55\1\0\1\60\15\0\1\60"+
    "\20\0\15\60\3\0\14\60\1\47\15\60\26\0\15\55\4\0\1\55"+
    "\3\0\14\55\21\0\1\60\4\0\1\60\2\0\12\60\1\0\1\60"+
    "\3\0\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0\4\60"+
    "\1\0\13\60\2\0\4\60\5\0\5\60\4\0\1\60\21\0\51\60"+
    "\u0a77\0\57\60\1\0\57\60\1\0\205\60\6\0\4\60\3\55\16\0"+
    "\46\60\12\0\66\60\11\0\1\60\17\0\1\55\27\60\11\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60"+
    "\1\0\7\60\1\0\7\60\1\0\40\55\57\0\1\60\u01d5\0\3\60"+
    "\31\0\11\60\6\55\1\0\5\60\2\0\5\60\4\0\126\60\2\0"+
    "\2\55\2\0\3\60\1\0\132\60\1\0\4\60\5\0\51\60\3\0"+
    "\136\60\21\0\33\60\65\0\20\60\u0200\0\u19b6\60\112\0\u51cc\60\64\0"+
    "\u048d\60\103\0\56\60\2\0\u010d\60\3\0\20\60\12\57\2\60\24\0"+
    "\57\60\1\55\14\0\2\55\1\0\31\60\10\0\120\60\2\55\45\0"+
    "\11\60\2\0\147\60\2\0\4\60\1\0\2\60\16\0\12\60\120\0"+
    "\10\60\1\55\3\60\1\55\4\60\1\55\27\60\5\55\20\0\1\60"+
    "\7\0\64\60\14\0\2\55\62\60\21\55\13\0\12\57\6\0\22\55"+
    "\6\60\3\0\1\60\4\0\12\57\34\60\10\55\2\0\27\60\15\55"+
    "\14\0\35\60\3\0\4\55\57\60\16\55\16\0\1\60\12\57\46\0"+
    "\51\60\16\55\11\0\3\60\1\55\10\60\2\55\2\0\12\57\6\0"+
    "\27\60\3\0\1\60\1\55\4\0\60\60\1\55\1\60\3\55\2\60"+
    "\2\55\5\60\2\55\1\60\1\55\1\60\30\0\3\60\43\0\6\60"+
    "\2\0\6\60\2\0\6\60\11\0\7\60\1\0\7\60\221\0\43\60"+
    "\10\55\1\0\2\55\2\0\12\57\6\0\u2ba4\60\14\0\27\60\4\0"+
    "\61\60\u2104\0\u012e\60\2\0\76\60\2\0\152\60\46\0\7\60\14\0"+
    "\5\60\5\0\1\60\1\55\12\60\1\0\15\60\1\0\5\60\1\0"+
    "\1\60\1\0\2\60\1\0\2\60\1\0\154\60\41\0\u016b\60\22\0"+
    "\100\60\2\0\66\60\50\0\15\60\3\0\20\55\20\0\7\55\14\0"+
    "\2\60\30\0\3\60\31\0\1\60\6\0\5\60\1\0\207\60\2\0"+
    "\1\55\4\0\1\60\13\0\12\57\7\0\32\60\4\0\1\60\1\0"+
    "\32\60\13\0\131\60\3\0\6\60\2\0\6\60\2\0\6\60\2\0"+
    "\3\60\3\0\2\60\3\0\2\60\22\0\3\55\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\23\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\1\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\4\1\1\1\22\1\3"+
    "\1\4\1\23\11\4\1\24\1\25\14\4\2\0\1\26"+
    "\1\0\1\27\1\30\1\4\1\0\1\31\2\0\16\4"+
    "\1\32\1\4\1\33\11\4\1\34\1\35\2\0\1\4"+
    "\1\36\1\0\1\37\4\4\1\40\4\4\1\41\7\4"+
    "\1\42\1\43\1\44\1\45\3\4\1\0\1\46\1\0"+
    "\2\4\1\47\1\4\1\50\15\4\1\46\2\0\10\4"+
    "\1\51\1\52\2\4\1\53\3\4\1\0\1\54\1\55"+
    "\2\4\1\56\2\4\1\57\1\60\4\4\1\61\1\4"+
    "\1\62\1\63\2\4\1\64\1\65\2\4\1\66\1\67"+
    "\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\61"+
    "\0\61\0\u0467\0\61\0\61\0\u0498\0\u04c9\0\61\0\61"+
    "\0\61\0\61\0\u0341\0\u0341\0\61\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0341\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u0341"+
    "\0\u0341\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0498\0\61"+
    "\0\u0ab8\0\u0ae9\0\u055c\0\u0b1a\0\u05be\0\61\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0341\0\u0e5b"+
    "\0\u0341\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u0341\0\61\0\u1045\0\u1076\0\u10a7\0\u10d8"+
    "\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u0341\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u0341\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u0341\0\u0341\0\u0341\0\u0341\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u1076\0\u150e\0\u153f\0\u1570\0\u0341"+
    "\0\u15a1\0\u0341\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u0341\0\u0341\0\u1a6a\0\u1a9b\0\u0341\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u0341\0\u0341\0\u1b90\0\u1bc1\0\u0341"+
    "\0\u1bf2\0\u1c23\0\u0341\0\u0341\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7"+
    "\0\u1d18\0\u1d49\0\u0341\0\u0341\0\u1d7a\0\u1dab\0\u0341\0\u0341"+
    "\0\u1ddc\0\u1e0d\0\u0341\0\u0341\0\u0341\0\u0341";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\22\1\25\1\22\1\26\1\27"+
    "\3\22\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\2\1\52\1\53\1\22\62\0"+
    "\1\3\60\0\1\54\1\4\61\0\1\22\1\55\26\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\2\22"+
    "\1\56\25\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\11\22\1\57\16\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\1\22\1\60\7\22\1\61\16\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\16\22"+
    "\1\62\11\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\23\22\1\63\4\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\4\22\1\64\16\22\1\65\4\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\2\22"+
    "\1\66\25\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\2\22\1\67\7\22\1\70\15\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\12\22\1\71\15\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\6\22"+
    "\1\72\1\22\1\73\17\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\12\22\1\74\15\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\1\22\1\75\26\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\30\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\4\22"+
    "\1\76\23\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\1\22\1\77\7\22\1\100\16\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\1\22\1\101\6\22"+
    "\1\102\17\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\1\22\1\103\2\22\1\104\23\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\11\22\1\105\16\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\35\0\1\106"+
    "\23\0\40\107\1\110\20\107\41\0\1\111\15\0\1\112"+
    "\52\0\1\46\66\0\1\53\4\0\30\113\13\0\2\113"+
    "\4\0\2\113\1\0\2\113\3\0\11\22\1\114\16\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\2\115\1\116"+
    "\56\115\35\0\1\117\3\0\1\120\15\0\1\53\2\0"+
    "\1\54\62\0\2\22\1\121\25\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\6\22\1\122\7\22\1\123"+
    "\11\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\1\22\1\124\26\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\12\22\1\125\15\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\5\22\1\126\22\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\1\22\1\127"+
    "\6\22\1\130\17\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\23\22\1\131\4\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\13\22\1\132\14\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\6\22\1\133"+
    "\21\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\6\22\1\134\21\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\23\22\1\135\4\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\2\22\1\136\25\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\4\22\1\137"+
    "\23\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\1\22\1\140\13\22\1\141\12\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\6\22\1\142\21\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\13\22\1\143"+
    "\14\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\6\22\1\144\21\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\23\22\1\145\4\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\6\22\1\146\21\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\1\22\1\147"+
    "\26\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\12\22\1\150\13\22\1\151\1\22\13\0\2\22\4\0"+
    "\1\152\1\22\1\0\2\22\3\0\23\22\1\153\4\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\35\0\1\154"+
    "\23\0\41\155\1\156\17\155\35\0\1\117\21\0\1\112"+
    "\4\0\20\22\1\157\7\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\57\0\1\160\53\0\1\161\4\0\1\162"+
    "\4\0\3\22\1\163\24\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\13\22\1\164\14\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\4\22\1\165\23\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\23\22"+
    "\1\166\4\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\4\22\1\167\23\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\6\22\1\170\21\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\5\22\1\171\22\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\24\22"+
    "\1\172\3\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\16\22\1\173\11\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\4\22\1\174\23\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\4\22\1\175\23\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\4\22"+
    "\1\176\23\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\10\22\1\177\17\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\25\22\1\200\2\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\20\22\1\201\7\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\11\22"+
    "\1\202\16\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\14\22\1\203\13\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\4\22\1\204\23\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\17\22\1\205\10\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\22\22"+
    "\1\206\5\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\6\22\1\207\21\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\1\22\1\210\26\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\13\22\1\211\14\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\4\22"+
    "\1\212\23\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\41\155\1\213\60\155\1\214\17\155\3\0\12\22\1\132"+
    "\15\22\13\0\2\22\4\0\2\22\1\0\2\22\41\0"+
    "\1\215\15\0\1\160\60\0\1\162\42\0\1\120\15\0"+
    "\1\162\4\0\4\22\1\216\23\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\23\22\1\217\4\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\17\22\1\220"+
    "\10\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\17\22\1\221\10\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\27\22\1\222\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\4\22\1\223\23\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\11\22\1\224\16\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\10\22"+
    "\1\225\17\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\2\22\1\226\25\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\25\22\1\227\2\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\2\22\1\230\25\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\20\22"+
    "\1\231\7\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\4\22\1\232\23\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\16\22\1\233\11\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\20\22\1\234\7\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\13\22"+
    "\1\235\14\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\10\22\1\236\17\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\23\22\1\237\4\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\41\155\1\240\17\155\41\0"+
    "\1\241\10\0\1\241\4\0\1\242\4\0\5\22\1\243"+
    "\22\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\11\22\1\244\16\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\10\22\1\245\17\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\23\22\1\246\4\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\6\22\1\247"+
    "\21\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\2\22\1\250\25\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\6\22\1\251\21\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\4\22\1\252\23\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\25\22\1\253"+
    "\2\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\4\22\1\254\23\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\11\22\1\255\16\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\1\22\1\256\26\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\4\22\1\257"+
    "\23\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\23\22\1\260\4\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\23\22\1\261\4\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\4\22\1\262\23\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\41\0\1\240\76\0"+
    "\1\242\36\0\1\263\21\0\1\242\4\0\6\22\1\264"+
    "\21\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\20\22\1\265\7\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\2\22\1\266\25\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\6\22\1\267\21\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\4\22\1\270"+
    "\23\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\11\22\1\271\16\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\10\22\1\272\17\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\23\22\1\273\4\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\2\22\1\274"+
    "\25\22\13\0\2\22\4\0\2\22\1\0\2\22\3\0"+
    "\17\22\1\275\10\22\13\0\2\22\4\0\2\22\1\0"+
    "\2\22\3\0\3\22\1\276\24\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\4\22\1\277\23\22\13\0"+
    "\2\22\4\0\2\22\1\0\2\22\3\0\2\22\1\300"+
    "\25\22\13\0\2\22\4\0\2\22\1\0\2\22\57\0"+
    "\1\301\4\0\11\22\1\302\16\22\13\0\2\22\4\0"+
    "\2\22\1\0\2\22\3\0\27\22\1\303\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\20\22\1\304\7\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\1\22"+
    "\1\305\26\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\4\22\1\306\23\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\4\22\1\307\23\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\17\22\1\310\10\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\3\22"+
    "\1\311\24\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\41\0\1\215\15\0\1\301\4\0\6\22\1\312\21\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22\3\0\2\22"+
    "\1\313\25\22\13\0\2\22\4\0\2\22\1\0\2\22"+
    "\3\0\20\22\1\314\7\22\13\0\2\22\4\0\2\22"+
    "\1\0\2\22\3\0\4\22\1\315\23\22\13\0\2\22"+
    "\4\0\2\22\1\0\2\22\3\0\4\22\1\316\23\22"+
    "\13\0\2\22\4\0\2\22\1\0\2\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7742];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\2\11\1\1\2\11\2\1\4\11"+
    "\2\1\1\11\40\1\2\0\1\11\1\0\3\1\1\0"+
    "\1\11\2\0\33\1\1\11\2\0\2\1\1\0\31\1"+
    "\1\0\1\1\1\0\23\1\2\0\20\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 58: break;
        case 36: 
          { return TaraTypes.WITH;
          }
        case 59: break;
        case 28: 
          { return TaraTypes.VAR;
          }
        case 60: break;
        case 12: 
          { return TaraTypes.COLON;
          }
        case 61: break;
        case 16: 
          { return TaraTypes.PERCENTAGE;
          }
        case 62: break;
        case 42: 
          { return TaraTypes.SINGLE;
          }
        case 63: break;
        case 24: 
          { return TaraTypes.CODE_VALUE_KEY;
          }
        case 64: break;
        case 30: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 65: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 66: break;
        case 45: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 67: break;
        case 6: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 68: break;
        case 29: 
          { return TaraTypes.LIST;
          }
        case 69: break;
        case 13: 
          { return TaraTypes.EQUALS;
          }
        case 70: break;
        case 7: 
          { return TaraTypes.DOT;
          }
        case 71: break;
        case 54: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 72: break;
        case 41: 
          { return TaraTypes.STRING_TYPE;
          }
        case 73: break;
        case 39: 
          { return TaraTypes.NAMED;
          }
        case 74: break;
        case 8: 
          { return openBracket();
          }
        case 75: break;
        case 51: 
          { return TaraTypes.TERMINAL;
          }
        case 76: break;
        case 34: 
          { return TaraTypes.DATE_TYPE;
          }
        case 77: break;
        case 55: 
          { return TaraTypes.METAMODEL;
          }
        case 78: break;
        case 4: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 79: break;
        case 40: 
          { return TaraTypes.EMPTY_REF;
          }
        case 80: break;
        case 5: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 81: break;
        case 53: 
          { return TaraTypes.REQUIRED;
          }
        case 82: break;
        case 46: 
          { return TaraTypes.PRIVATE;
          }
        case 83: break;
        case 56: 
          { return TaraTypes.REFERENCE_TYPE;
          }
        case 84: break;
        case 23: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 85: break;
        case 37: 
          { return TaraTypes.ROOT;
          }
        case 86: break;
        case 25: 
          { return TaraTypes.DOC_LINE;
          }
        case 87: break;
        case 22: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 88: break;
        case 50: 
          { return TaraTypes.PROPERTY;
          }
        case 89: break;
        case 10: 
          { return TaraTypes.STAR;
          }
        case 90: break;
        case 43: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 91: break;
        case 18: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 92: break;
        case 49: 
          { return TaraTypes.COORDINATE_VALUE_KEY;
          }
        case 93: break;
        case 17: 
          { return semicolon();
          }
        case 94: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 95: break;
        case 52: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 96: break;
        case 26: 
          { return TaraTypes.USE_KEY;
          }
        case 97: break;
        case 33: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 98: break;
        case 21: 
          { return TaraTypes.AS;
          }
        case 99: break;
        case 19: 
          { return TaraTypes.ON;
          }
        case 100: break;
        case 48: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 101: break;
        case 32: 
          { return TaraTypes.CASE_KEY;
          }
        case 102: break;
        case 20: 
          { return TaraTypes.IS;
          }
        case 103: break;
        case 47: 
          { return TaraTypes.INT_TYPE;
          }
        case 104: break;
        case 44: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 105: break;
        case 31: 
          { return TaraTypes.DATE_VALUE_KEY;
          }
        case 106: break;
        case 57: 
          { return TaraTypes.COORDINATE_TYPE;
          }
        case 107: break;
        case 15: 
          { return TaraTypes.EURO;
          }
        case 108: break;
        case 9: 
          { return closeBracket();
          }
        case 109: break;
        case 35: 
          { return TaraTypes.WORD_KEY;
          }
        case 110: break;
        case 14: 
          { return TaraTypes.DOLLAR;
          }
        case 111: break;
        case 11: 
          { return TaraTypes.COMMA;
          }
        case 112: break;
        case 27: 
          { return TaraTypes.BOX_KEY;
          }
        case 113: break;
        case 3: 
          { return newlineIndent();
          }
        case 114: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 207: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
