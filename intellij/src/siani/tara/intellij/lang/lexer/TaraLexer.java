/* The following code was generated by JFlex 1.4.3 on 29/07/14 10:51 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/07/14 10:51 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\56\1\1\1\2\3\0\16\56\4\0\1\1\2\0\1\57\1\50"+
    "\1\52\1\55\1\41\1\34\1\35\1\44\1\54\1\45\1\42\1\36"+
    "\1\0\12\60\1\46\1\53\1\0\1\47\3\0\2\43\1\3\5\43"+
    "\1\12\21\43\4\0\1\43\1\0\1\14\1\20\1\6\1\23\1\7"+
    "\1\26\1\31\1\16\1\13\2\43\1\24\1\22\1\5\1\4\1\10"+
    "\1\32\1\27\1\15\1\11\1\17\1\30\1\25\1\21\1\33\1\43"+
    "\1\37\1\0\1\40\1\0\41\56\2\0\4\43\4\0\1\43\2\0"+
    "\1\56\7\0\1\43\4\0\1\43\5\0\27\43\1\0\37\43\1\0"+
    "\u01ca\43\4\0\14\43\16\0\5\43\7\0\1\43\1\0\1\43\21\0"+
    "\160\56\5\43\1\0\2\43\2\0\4\43\10\0\1\43\1\0\3\43"+
    "\1\0\1\43\1\0\24\43\1\0\123\43\1\0\213\43\1\0\5\56"+
    "\2\0\236\43\11\0\46\43\2\0\1\43\7\0\47\43\11\0\55\56"+
    "\1\0\1\56\1\0\2\56\1\0\2\56\1\0\1\56\10\0\33\43"+
    "\5\0\3\43\15\0\4\56\7\0\1\43\4\0\13\56\5\0\53\43"+
    "\25\56\12\60\4\0\2\43\1\56\143\43\1\0\1\43\10\56\1\0"+
    "\6\56\2\43\2\56\1\0\4\56\2\43\12\60\3\43\2\0\1\43"+
    "\17\0\1\56\1\43\1\56\36\43\33\56\2\0\131\43\13\56\1\43"+
    "\16\0\12\60\41\43\11\56\2\43\4\0\1\43\5\0\26\43\4\56"+
    "\1\43\11\56\1\43\3\56\1\43\5\56\22\0\31\43\3\56\244\0"+
    "\4\56\66\43\3\56\1\43\22\56\1\43\7\56\12\43\2\56\2\0"+
    "\12\60\1\0\7\43\1\0\7\43\1\0\3\56\1\0\10\43\2\0"+
    "\2\43\2\0\26\43\1\0\7\43\1\0\1\43\3\0\4\43\2\0"+
    "\1\56\1\43\7\56\2\0\2\56\2\0\3\56\1\43\10\0\1\56"+
    "\4\0\2\43\1\0\3\43\2\56\2\0\12\60\4\43\7\0\1\43"+
    "\5\0\3\56\1\0\6\43\4\0\2\43\2\0\26\43\1\0\7\43"+
    "\1\0\2\43\1\0\2\43\1\0\2\43\2\0\1\56\1\0\5\56"+
    "\4\0\2\56\2\0\3\56\3\0\1\56\7\0\4\43\1\0\1\43"+
    "\7\0\12\60\2\56\3\43\1\56\13\0\3\56\1\0\11\43\1\0"+
    "\3\43\1\0\26\43\1\0\7\43\1\0\2\43\1\0\5\43\2\0"+
    "\1\56\1\43\10\56\1\0\3\56\1\0\3\56\2\0\1\43\17\0"+
    "\2\43\2\56\2\0\12\60\1\0\1\43\17\0\3\56\1\0\10\43"+
    "\2\0\2\43\2\0\26\43\1\0\7\43\1\0\2\43\1\0\5\43"+
    "\2\0\1\56\1\43\7\56\2\0\2\56\2\0\3\56\10\0\2\56"+
    "\4\0\2\43\1\0\3\43\2\56\2\0\12\60\1\0\1\43\20\0"+
    "\1\56\1\43\1\0\6\43\3\0\3\43\1\0\4\43\3\0\2\43"+
    "\1\0\1\43\1\0\2\43\3\0\2\43\3\0\3\43\3\0\14\43"+
    "\4\0\5\56\3\0\3\56\1\0\4\56\2\0\1\43\6\0\1\56"+
    "\16\0\12\60\11\0\1\43\7\0\3\56\1\0\10\43\1\0\3\43"+
    "\1\0\27\43\1\0\12\43\1\0\5\43\3\0\1\43\7\56\1\0"+
    "\3\56\1\0\4\56\7\0\2\56\1\0\2\43\6\0\2\43\2\56"+
    "\2\0\12\60\22\0\2\56\1\0\10\43\1\0\3\43\1\0\27\43"+
    "\1\0\12\43\1\0\5\43\2\0\1\56\1\43\7\56\1\0\3\56"+
    "\1\0\4\56\7\0\2\56\7\0\1\43\1\0\2\43\2\56\2\0"+
    "\12\60\1\0\2\43\17\0\2\56\1\0\10\43\1\0\3\43\1\0"+
    "\51\43\2\0\1\43\7\56\1\0\3\56\1\0\4\56\1\43\10\0"+
    "\1\56\10\0\2\43\2\56\2\0\12\60\12\0\6\43\2\0\2\56"+
    "\1\0\22\43\3\0\30\43\1\0\11\43\1\0\1\43\2\0\7\43"+
    "\3\0\1\56\4\0\6\56\1\0\1\56\1\0\10\56\22\0\2\56"+
    "\15\0\60\43\1\56\2\43\7\56\4\0\10\43\10\56\1\0\12\60"+
    "\47\0\2\43\1\0\1\43\2\0\2\43\1\0\1\43\2\0\1\43"+
    "\6\0\4\43\1\0\7\43\1\0\3\43\1\0\1\43\1\0\1\43"+
    "\2\0\2\43\1\0\4\43\1\56\2\43\6\56\1\0\2\56\1\43"+
    "\2\0\5\43\1\0\1\43\1\0\6\56\2\0\12\60\2\0\2\43"+
    "\42\0\1\43\27\0\2\56\6\0\12\60\13\0\1\56\1\0\1\56"+
    "\1\0\1\56\4\0\2\56\10\43\1\0\44\43\4\0\24\56\1\0"+
    "\2\56\5\43\13\56\1\0\44\56\11\0\1\56\71\0\53\43\24\56"+
    "\1\43\12\60\6\0\6\43\4\56\4\43\3\56\1\43\3\56\2\43"+
    "\7\56\3\43\4\56\15\43\14\56\1\43\1\56\12\60\4\56\2\0"+
    "\46\43\12\0\53\43\1\0\1\43\3\0\u0149\43\1\0\4\43\2\0"+
    "\7\43\1\0\1\43\1\0\4\43\2\0\51\43\1\0\4\43\2\0"+
    "\41\43\1\0\4\43\2\0\7\43\1\0\1\43\1\0\4\43\2\0"+
    "\17\43\1\0\71\43\1\0\4\43\2\0\103\43\2\0\3\56\40\0"+
    "\20\43\20\0\125\43\14\0\u026c\43\2\0\21\43\1\0\32\43\5\0"+
    "\113\43\3\0\3\43\17\0\15\43\1\0\4\43\3\56\13\0\22\43"+
    "\3\56\13\0\22\43\2\56\14\0\15\43\1\0\3\43\1\0\2\56"+
    "\14\0\64\43\40\56\3\0\1\43\3\0\2\43\1\56\2\0\12\60"+
    "\41\0\3\56\2\0\12\60\6\0\130\43\10\0\51\43\1\56\1\43"+
    "\5\0\106\43\12\0\35\43\3\0\14\56\4\0\14\56\12\0\12\60"+
    "\36\43\2\0\5\43\13\0\54\43\4\0\21\56\7\43\2\56\6\0"+
    "\12\60\46\0\27\43\5\56\4\0\65\43\12\56\1\0\35\56\2\0"+
    "\1\56\12\60\6\0\12\60\15\0\1\43\130\0\5\56\57\43\21\56"+
    "\7\43\4\0\12\60\21\0\11\56\14\0\3\56\36\43\12\56\3\0"+
    "\2\43\12\60\6\0\46\43\16\56\14\0\44\43\24\56\10\0\12\60"+
    "\3\0\3\43\12\60\44\43\122\0\3\56\1\0\25\56\4\43\1\56"+
    "\4\43\1\56\15\0\300\43\47\56\25\0\4\56\u0116\43\2\0\6\43"+
    "\2\0\46\43\2\0\6\43\2\0\10\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\37\43\2\0\65\43\1\0\7\43\1\0\1\43"+
    "\3\0\3\43\1\0\7\43\3\0\4\43\2\0\6\43\4\0\15\43"+
    "\5\0\3\43\1\0\7\43\16\0\5\56\32\0\5\56\20\0\2\43"+
    "\23\0\1\43\13\0\5\56\5\0\6\56\1\0\1\43\15\0\1\43"+
    "\20\0\15\43\3\0\14\43\1\51\15\43\26\0\15\56\4\0\1\56"+
    "\3\0\14\56\21\0\1\43\4\0\1\43\2\0\12\43\1\0\1\43"+
    "\3\0\5\43\6\0\1\43\1\0\1\43\1\0\1\43\1\0\4\43"+
    "\1\0\13\43\2\0\4\43\5\0\5\43\4\0\1\43\21\0\51\43"+
    "\u0a77\0\57\43\1\0\57\43\1\0\205\43\6\0\4\43\3\56\16\0"+
    "\46\43\12\0\66\43\11\0\1\43\17\0\1\56\27\43\11\0\7\43"+
    "\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43"+
    "\1\0\7\43\1\0\7\43\1\0\40\56\57\0\1\43\u01d5\0\3\43"+
    "\31\0\11\43\6\56\1\0\5\43\2\0\5\43\4\0\126\43\2\0"+
    "\2\56\2\0\3\43\1\0\132\43\1\0\4\43\5\0\51\43\3\0"+
    "\136\43\21\0\33\43\65\0\20\43\u0200\0\u19b6\43\112\0\u51cc\43\64\0"+
    "\u048d\43\103\0\56\43\2\0\u010d\43\3\0\20\43\12\60\2\43\24\0"+
    "\57\43\1\56\14\0\2\56\1\0\31\43\10\0\120\43\2\56\45\0"+
    "\11\43\2\0\147\43\2\0\4\43\1\0\2\43\16\0\12\43\120\0"+
    "\10\43\1\56\3\43\1\56\4\43\1\56\27\43\5\56\20\0\1\43"+
    "\7\0\64\43\14\0\2\56\62\43\21\56\13\0\12\60\6\0\22\56"+
    "\6\43\3\0\1\43\4\0\12\60\34\43\10\56\2\0\27\43\15\56"+
    "\14\0\35\43\3\0\4\56\57\43\16\56\16\0\1\43\12\60\46\0"+
    "\51\43\16\56\11\0\3\43\1\56\10\43\2\56\2\0\12\60\6\0"+
    "\27\43\3\0\1\43\1\56\4\0\60\43\1\56\1\43\3\56\2\43"+
    "\2\56\5\43\2\56\1\43\1\56\1\43\30\0\3\43\43\0\6\43"+
    "\2\0\6\43\2\0\6\43\11\0\7\43\1\0\7\43\221\0\43\43"+
    "\10\56\1\0\2\56\2\0\12\60\6\0\u2ba4\43\14\0\27\43\4\0"+
    "\61\43\u2104\0\u012e\43\2\0\76\43\2\0\152\43\46\0\7\43\14\0"+
    "\5\43\5\0\1\43\1\56\12\43\1\0\15\43\1\0\5\43\1\0"+
    "\1\43\1\0\2\43\1\0\2\43\1\0\154\43\41\0\u016b\43\22\0"+
    "\100\43\2\0\66\43\50\0\15\43\3\0\20\56\20\0\7\56\14\0"+
    "\2\43\30\0\3\43\31\0\1\43\6\0\5\43\1\0\207\43\2\0"+
    "\1\56\4\0\1\43\13\0\12\60\7\0\32\43\4\0\1\43\1\0"+
    "\32\43\13\0\131\43\3\0\6\43\2\0\6\43\2\0\6\43\2\0"+
    "\3\43\3\0\2\43\3\0\2\43\22\0\3\56\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\25\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\1\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\3\1\1\22\1\3\1\4\1\23"+
    "\11\4\1\24\1\25\1\26\16\4\2\0\1\27\1\0"+
    "\1\30\1\31\1\0\1\32\2\0\16\4\1\33\1\34"+
    "\1\4\1\35\12\4\1\36\1\37\2\0\1\40\1\0"+
    "\1\41\4\4\1\42\4\4\1\43\7\4\1\44\1\45"+
    "\1\46\1\47\3\4\1\0\1\50\1\0\2\4\1\51"+
    "\1\4\1\52\15\4\1\50\2\0\10\4\1\53\1\54"+
    "\2\4\1\55\3\4\1\0\1\56\1\57\2\4\1\60"+
    "\2\4\1\61\1\62\4\4\1\63\1\4\1\64\1\65"+
    "\2\4\1\66\1\4\1\67\1\4\1\70\1\71\1\72"+
    "\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\61\0\61\0\u04c9\0\61\0\61\0\u04fa\0\u052b"+
    "\0\61\0\61\0\61\0\61\0\u0372\0\u0372\0\61\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u0372\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u0372\0\u0372\0\u0372\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u04fa\0\61\0\u0b4b\0\u0b7c\0\u05be\0\u05ef"+
    "\0\61\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0372\0\u0372\0\u0ebd\0\u0372\0\u0eee\0\u0f1f\0\u0f50"+
    "\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u0372"+
    "\0\61\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u0372\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u0372"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u0372"+
    "\0\u0372\0\u0372\0\u0372\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1109"+
    "\0\u1570\0\u15a1\0\u15d2\0\u0372\0\u1603\0\u0372\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u0372\0\u0372"+
    "\0\u1acc\0\u1afd\0\u0372\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u0372"+
    "\0\u0372\0\u1bf2\0\u1c23\0\u0372\0\u1c54\0\u1c85\0\u0372\0\u0372"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u0372\0\u0372"+
    "\0\u1ddc\0\u1e0d\0\u0372\0\u1e3e\0\u0372\0\u1e6f\0\u0372\0\u0372"+
    "\0\u0372\0\u0372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\23\1\26\1\27\1\30"+
    "\1\31\3\23\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\23\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\2\1\53\1\54\62\0"+
    "\1\3\60\0\1\55\1\4\61\0\1\23\1\56\27\23"+
    "\6\0\2\23\4\0\2\23\4\0\1\23\1\0\1\23"+
    "\3\0\2\23\1\57\26\23\6\0\2\23\4\0\2\23"+
    "\4\0\1\23\1\0\1\23\3\0\11\23\1\60\17\23"+
    "\6\0\2\23\4\0\2\23\4\0\1\23\1\0\1\23"+
    "\3\0\1\23\1\61\7\23\1\62\17\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\17\23"+
    "\1\63\11\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\24\23\1\64\4\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\4\23"+
    "\1\65\17\23\1\66\4\23\6\0\2\23\4\0\2\23"+
    "\4\0\1\23\1\0\1\23\3\0\2\23\1\67\26\23"+
    "\6\0\2\23\4\0\2\23\4\0\1\23\1\0\1\23"+
    "\3\0\2\23\1\70\7\23\1\71\10\23\1\72\5\23"+
    "\6\0\2\23\4\0\2\23\4\0\1\23\1\0\1\23"+
    "\3\0\12\23\1\73\16\23\6\0\2\23\4\0\2\23"+
    "\4\0\1\23\1\0\1\23\3\0\6\23\1\74\1\23"+
    "\1\75\20\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\11\23\1\76\17\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\12\23"+
    "\1\77\16\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\1\23\1\100\27\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\31\23"+
    "\6\0\2\23\4\0\2\23\4\0\1\23\1\0\1\23"+
    "\3\0\4\23\1\101\24\23\6\0\2\23\4\0\2\23"+
    "\4\0\1\23\1\0\1\23\3\0\1\23\1\102\7\23"+
    "\1\103\17\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\1\23\1\104\6\23\1\105\20\23"+
    "\6\0\2\23\4\0\2\23\4\0\1\23\1\0\1\23"+
    "\3\0\11\23\1\106\17\23\6\0\2\23\4\0\2\23"+
    "\4\0\1\23\1\0\1\23\3\0\1\23\1\107\2\23"+
    "\1\110\24\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\11\23\1\111\17\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\36\0\1\112"+
    "\22\0\41\113\1\114\17\113\42\0\1\115\15\0\1\116"+
    "\53\0\1\50\65\0\1\54\3\0\31\117\7\0\1\117"+
    "\4\0\2\117\4\0\1\117\1\0\1\117\2\120\1\121"+
    "\56\120\36\0\1\122\3\0\1\123\15\0\1\54\1\0"+
    "\1\55\62\0\2\23\1\124\26\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\6\23\1\125"+
    "\10\23\1\126\11\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\1\23\1\127\27\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\12\23\1\130\16\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\5\23\1\131\23\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\1\23\1\132\6\23\1\133\20\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\24\23\1\134"+
    "\4\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\14\23\1\135\14\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\6\23\1\136"+
    "\22\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\6\23\1\137\22\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\24\23\1\140"+
    "\4\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\2\23\1\141\26\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\12\23\1\142"+
    "\16\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\4\23\1\143\24\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\1\23\1\144"+
    "\14\23\1\145\12\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\6\23\1\146\22\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\14\23\1\147\14\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\6\23\1\150\22\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\24\23\1\151\4\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\6\23\1\152\22\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\21\23\1\153\7\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\1\23\1\154\27\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\12\23\1\155\10\23\1\156\3\23\1\157\1\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\24\23\1\160\4\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\36\0\1\161\22\0\42\162\1\163"+
    "\16\162\36\0\1\122\21\0\1\116\60\0\1\164\54\0"+
    "\1\165\3\0\1\166\3\0\3\23\1\167\25\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\14\23\1\170\14\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\4\23\1\171\24\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\24\23\1\172\4\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\4\23\1\173\24\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\6\23\1\174\22\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\5\23\1\175\23\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\25\23\1\176\3\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\17\23\1\177\11\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\4\23\1\200\24\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\4\23\1\201\24\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\4\23\1\202\24\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\10\23\1\203\20\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\26\23\1\204\2\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\21\23\1\205\7\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\11\23\1\206\17\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\15\23\1\207\13\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\4\23\1\210\24\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\20\23\1\211\10\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\13\23\1\212\15\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\12\23\1\135\16\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\6\23\1\213\22\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\1\23\1\214\27\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\4\23\1\215\24\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\14\23\1\216\14\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\42\162"+
    "\1\217\60\162\1\220\16\162\42\0\1\221\15\0\1\164"+
    "\60\0\1\166\42\0\1\123\15\0\1\166\3\0\4\23"+
    "\1\222\24\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\24\23\1\223\4\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\20\23"+
    "\1\224\10\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\20\23\1\225\10\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\30\23"+
    "\1\226\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\4\23\1\227\24\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\11\23\1\230"+
    "\17\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\10\23\1\231\20\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\2\23\1\232"+
    "\26\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\26\23\1\233\2\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\2\23\1\234"+
    "\26\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\21\23\1\235\7\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\4\23\1\236"+
    "\24\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\17\23\1\237\11\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\21\23\1\240"+
    "\7\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\14\23\1\241\14\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\3\0\24\23\1\242"+
    "\4\23\6\0\2\23\4\0\2\23\4\0\1\23\1\0"+
    "\1\23\3\0\10\23\1\243\20\23\6\0\2\23\4\0"+
    "\2\23\4\0\1\23\1\0\1\23\42\162\1\244\16\162"+
    "\42\0\1\245\11\0\1\245\3\0\1\246\3\0\5\23"+
    "\1\247\23\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\11\23\1\250\17\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\10\23"+
    "\1\251\20\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\24\23\1\252\4\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\6\23"+
    "\1\253\22\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\2\23\1\254\26\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\6\23"+
    "\1\255\22\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\4\23\1\256\24\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\26\23"+
    "\1\257\2\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\4\23\1\260\24\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\11\23"+
    "\1\261\17\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\1\23\1\262\27\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\4\23"+
    "\1\263\24\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\24\23\1\264\4\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\4\23"+
    "\1\265\24\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\24\23\1\266\4\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\42\0\1\244"+
    "\76\0\1\246\36\0\1\267\21\0\1\246\3\0\6\23"+
    "\1\270\22\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\21\23\1\271\7\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\2\23"+
    "\1\272\26\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\6\23\1\273\22\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\4\23"+
    "\1\274\24\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\11\23\1\275\17\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\10\23"+
    "\1\276\20\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\24\23\1\277\4\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\2\23"+
    "\1\300\26\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\20\23\1\301\10\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\3\23"+
    "\1\302\25\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\3\0\2\23\1\303\26\23\6\0\2\23"+
    "\4\0\2\23\4\0\1\23\1\0\1\23\3\0\4\23"+
    "\1\304\24\23\6\0\2\23\4\0\2\23\4\0\1\23"+
    "\1\0\1\23\60\0\1\305\3\0\11\23\1\306\17\23"+
    "\6\0\2\23\4\0\2\23\4\0\1\23\1\0\1\23"+
    "\3\0\30\23\1\307\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\21\23\1\310\7\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\1\23\1\311\27\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\4\23\1\312\24\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\4\23\1\313\24\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\3\23\1\314\25\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\20\23\1\315\10\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\42\0\1\221\15\0\1\305\3\0"+
    "\6\23\1\316\22\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\2\23\1\317\26\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\21\23\1\320\7\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23\3\0\4\23\1\321\24\23\6\0"+
    "\2\23\4\0\2\23\4\0\1\23\1\0\1\23\3\0"+
    "\4\23\1\322\24\23\6\0\2\23\4\0\2\23\4\0"+
    "\1\23\1\0\1\23";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\2\11\1\1\2\11\2\1\4\11"+
    "\2\1\1\11\42\1\2\0\1\11\1\0\2\1\1\0"+
    "\1\11\2\0\35\1\1\11\2\0\1\1\1\0\31\1"+
    "\1\0\1\1\1\0\23\1\2\0\20\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 60: break;
        case 21: 
          { return TaraTypes.IF;
          }
        case 61: break;
        case 38: 
          { return TaraTypes.WITH;
          }
        case 62: break;
        case 30: 
          { return TaraTypes.VAR;
          }
        case 63: break;
        case 12: 
          { return TaraTypes.COLON;
          }
        case 64: break;
        case 16: 
          { return TaraTypes.PERCENTAGE;
          }
        case 65: break;
        case 44: 
          { return TaraTypes.SINGLE;
          }
        case 66: break;
        case 25: 
          { return TaraTypes.CODE_VALUE_KEY;
          }
        case 67: break;
        case 32: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 68: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 69: break;
        case 47: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 70: break;
        case 6: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 71: break;
        case 31: 
          { return TaraTypes.LIST;
          }
        case 72: break;
        case 13: 
          { return TaraTypes.EQUALS;
          }
        case 73: break;
        case 7: 
          { return TaraTypes.DOT;
          }
        case 74: break;
        case 56: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 75: break;
        case 43: 
          { return TaraTypes.STRING_TYPE;
          }
        case 76: break;
        case 41: 
          { return TaraTypes.NAMED;
          }
        case 77: break;
        case 8: 
          { return openBracket();
          }
        case 78: break;
        case 53: 
          { return TaraTypes.TERMINAL;
          }
        case 79: break;
        case 36: 
          { return TaraTypes.DATE_TYPE;
          }
        case 80: break;
        case 57: 
          { return TaraTypes.METAMODEL;
          }
        case 81: break;
        case 4: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 82: break;
        case 42: 
          { return TaraTypes.EMPTY_REF;
          }
        case 83: break;
        case 5: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 84: break;
        case 55: 
          { return TaraTypes.REQUIRED;
          }
        case 85: break;
        case 48: 
          { return TaraTypes.PRIVATE;
          }
        case 86: break;
        case 58: 
          { return TaraTypes.REFERENCE_TYPE;
          }
        case 87: break;
        case 24: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 88: break;
        case 39: 
          { return TaraTypes.ROOT;
          }
        case 89: break;
        case 26: 
          { return TaraTypes.DOC_LINE;
          }
        case 90: break;
        case 23: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 91: break;
        case 52: 
          { return TaraTypes.PROPERTY;
          }
        case 92: break;
        case 10: 
          { return TaraTypes.STAR;
          }
        case 93: break;
        case 45: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 94: break;
        case 18: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 95: break;
        case 51: 
          { return TaraTypes.COORDINATE_VALUE_KEY;
          }
        case 96: break;
        case 17: 
          { return semicolon();
          }
        case 97: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 98: break;
        case 54: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 99: break;
        case 28: 
          { return TaraTypes.USE_KEY;
          }
        case 100: break;
        case 35: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 101: break;
        case 22: 
          { return TaraTypes.AS;
          }
        case 102: break;
        case 19: 
          { return TaraTypes.ON;
          }
        case 103: break;
        case 50: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 104: break;
        case 34: 
          { return TaraTypes.CASE_KEY;
          }
        case 105: break;
        case 20: 
          { return TaraTypes.IS;
          }
        case 106: break;
        case 49: 
          { return TaraTypes.INT_TYPE;
          }
        case 107: break;
        case 46: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 108: break;
        case 33: 
          { return TaraTypes.DATE_VALUE_KEY;
          }
        case 109: break;
        case 59: 
          { return TaraTypes.COORDINATE_TYPE;
          }
        case 110: break;
        case 15: 
          { return TaraTypes.EURO;
          }
        case 111: break;
        case 9: 
          { return closeBracket();
          }
        case 112: break;
        case 37: 
          { return TaraTypes.WORD_KEY;
          }
        case 113: break;
        case 14: 
          { return TaraTypes.DOLLAR;
          }
        case 114: break;
        case 11: 
          { return TaraTypes.COMMA;
          }
        case 115: break;
        case 27: 
          { return TaraTypes.HAS;
          }
        case 116: break;
        case 29: 
          { return TaraTypes.BOX_KEY;
          }
        case 117: break;
        case 3: 
          { return newlineIndent();
          }
        case 118: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 211: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
