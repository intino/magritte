/* The following code was generated by JFlex 1.4.3 on 3/10/14 10:21 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/10/14 10:21 from the specification file
 * <tt>/Users/Octavio/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\57\1\1\1\2\3\0\16\57\4\0\1\1\2\0\1\60\1\50"+
    "\1\52\1\56\1\41\1\34\1\35\1\44\1\55\1\45\1\42\1\36"+
    "\1\0\12\61\1\46\1\54\1\0\1\47\1\3\2\0\2\43\1\4"+
    "\27\43\4\0\1\43\1\0\1\17\1\15\1\7\1\22\1\10\1\33"+
    "\1\31\1\16\1\25\2\43\1\23\1\21\1\6\1\5\1\11\1\32"+
    "\1\27\1\13\1\12\1\14\1\30\1\24\1\20\1\26\1\43\1\37"+
    "\1\0\1\40\1\0\41\57\2\0\4\43\4\0\1\43\2\0\1\57"+
    "\7\0\1\43\4\0\1\53\5\0\27\43\1\0\37\43\1\0\u013f\43"+
    "\31\0\162\43\4\0\14\43\16\0\5\43\11\0\1\43\21\0\130\57"+
    "\5\0\23\57\12\0\1\43\13\0\1\43\1\0\3\43\1\0\1\43"+
    "\1\0\24\43\1\0\54\43\1\0\46\43\1\0\5\43\4\0\202\43"+
    "\1\0\4\57\3\0\105\43\1\0\46\43\2\0\2\43\6\0\20\43"+
    "\41\0\46\43\2\0\1\43\7\0\47\43\11\0\21\57\1\0\27\57"+
    "\1\0\3\57\1\0\1\57\1\0\2\57\1\0\1\57\13\0\33\43"+
    "\5\0\3\43\15\0\4\57\14\0\6\57\13\0\32\43\5\0\13\43"+
    "\16\57\7\0\12\61\4\0\2\43\1\57\143\43\1\0\1\43\10\57"+
    "\1\0\6\57\2\43\2\57\1\0\4\57\2\43\12\61\3\43\2\0"+
    "\1\43\17\0\1\57\1\43\1\57\36\43\33\57\2\0\3\43\60\0"+
    "\46\43\13\57\1\43\u014f\0\3\57\66\43\2\0\1\57\1\43\20\57"+
    "\2\0\1\43\4\57\3\0\12\43\2\57\2\0\12\61\21\0\3\57"+
    "\1\0\10\43\2\0\2\43\2\0\26\43\1\0\7\43\1\0\1\43"+
    "\3\0\4\43\2\0\1\57\1\43\7\57\2\0\2\57\2\0\3\57"+
    "\11\0\1\57\4\0\2\43\1\0\3\43\2\57\2\0\12\61\4\43"+
    "\15\0\3\57\1\0\6\43\4\0\2\43\2\0\26\43\1\0\7\43"+
    "\1\0\2\43\1\0\2\43\1\0\2\43\2\0\1\57\1\0\5\57"+
    "\4\0\2\57\2\0\3\57\13\0\4\43\1\0\1\43\7\0\12\61"+
    "\2\57\3\43\14\0\3\57\1\0\11\43\1\0\3\43\1\0\26\43"+
    "\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\57\1\43\10\57"+
    "\1\0\3\57\1\0\3\57\2\0\1\43\17\0\2\43\2\57\2\0"+
    "\12\61\1\0\1\43\17\0\3\57\1\0\10\43\2\0\2\43\2\0"+
    "\26\43\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\57\1\43"+
    "\6\57\3\0\2\57\2\0\3\57\10\0\2\57\4\0\2\43\1\0"+
    "\3\43\4\0\12\61\1\0\1\43\20\0\1\57\1\43\1\0\6\43"+
    "\3\0\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1\0\2\43"+
    "\3\0\2\43\3\0\3\43\3\0\10\43\1\0\3\43\4\0\5\57"+
    "\3\0\3\57\1\0\4\57\11\0\1\57\17\0\11\61\11\0\1\43"+
    "\7\0\3\57\1\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43"+
    "\1\0\5\43\4\0\7\57\1\0\3\57\1\0\4\57\7\0\2\57"+
    "\11\0\2\43\4\0\12\61\22\0\2\57\1\0\10\43\1\0\3\43"+
    "\1\0\27\43\1\0\12\43\1\0\5\43\2\0\1\57\1\43\7\57"+
    "\1\0\3\57\1\0\4\57\7\0\2\57\7\0\1\43\1\0\2\43"+
    "\4\0\12\61\22\0\2\57\1\0\10\43\1\0\3\43\1\0\27\43"+
    "\1\0\20\43\4\0\6\57\2\0\3\57\1\0\4\57\11\0\1\57"+
    "\10\0\2\43\4\0\12\61\22\0\2\57\1\0\22\43\3\0\30\43"+
    "\1\0\11\43\1\0\1\43\2\0\7\43\3\0\1\57\4\0\6\57"+
    "\1\0\1\57\1\0\10\57\22\0\2\57\15\0\60\43\1\57\2\43"+
    "\7\57\4\0\10\43\10\57\1\0\12\61\47\0\2\43\1\0\1\43"+
    "\2\0\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0\7\43"+
    "\1\0\3\43\1\0\1\43\1\0\1\43\2\0\2\43\1\0\4\43"+
    "\1\57\2\43\6\57\1\0\2\57\1\43\2\0\5\43\1\0\1\43"+
    "\1\0\6\57\2\0\12\61\2\0\2\43\42\0\1\43\27\0\2\57"+
    "\6\0\12\61\13\0\1\57\1\0\1\57\1\0\1\57\4\0\2\57"+
    "\10\43\1\0\42\43\6\0\24\57\1\0\2\57\4\43\4\0\10\57"+
    "\1\0\44\57\11\0\1\57\71\0\42\43\1\0\5\43\1\0\2\43"+
    "\1\0\7\57\3\0\4\57\6\0\12\61\6\0\6\43\4\57\106\0"+
    "\46\43\12\0\51\43\7\0\132\43\5\0\104\43\5\0\122\43\6\0"+
    "\7\43\1\0\77\43\1\0\1\43\1\0\4\43\2\0\7\43\1\0"+
    "\1\43\1\0\4\43\2\0\47\43\1\0\1\43\1\0\4\43\2\0"+
    "\37\43\1\0\1\43\1\0\4\43\2\0\7\43\1\0\1\43\1\0"+
    "\4\43\2\0\7\43\1\0\7\43\1\0\27\43\1\0\37\43\1\0"+
    "\1\43\1\0\4\43\2\0\7\43\1\0\47\43\1\0\23\43\16\0"+
    "\11\61\56\0\125\43\14\0\u026c\43\2\0\10\43\12\0\32\43\5\0"+
    "\113\43\3\0\3\43\17\0\15\43\1\0\4\43\3\57\13\0\22\43"+
    "\3\57\13\0\22\43\2\57\14\0\15\43\1\0\3\43\1\0\2\57"+
    "\14\0\64\43\40\57\3\0\1\43\3\0\2\43\1\57\2\0\12\61"+
    "\41\0\3\57\2\0\12\61\6\0\130\43\10\0\51\43\1\57\126\0"+
    "\35\43\3\0\14\57\4\0\14\57\12\0\12\61\36\43\2\0\5\43"+
    "\u038b\0\154\43\224\0\234\43\4\0\132\43\6\0\26\43\2\0\6\43"+
    "\2\0\46\43\2\0\6\43\2\0\10\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\37\43\2\0\65\43\1\0\7\43\1\0\1\43"+
    "\3\0\3\43\1\0\7\43\3\0\4\43\2\0\6\43\4\0\15\43"+
    "\5\0\3\43\1\0\7\43\17\0\4\57\32\0\5\57\20\0\2\43"+
    "\23\0\1\43\13\0\4\57\6\0\6\57\1\0\1\43\15\0\1\43"+
    "\40\0\14\43\1\51\5\43\36\0\15\57\4\0\1\57\3\0\6\57"+
    "\27\0\1\43\4\0\1\43\2\0\12\43\1\0\1\43\3\0\5\43"+
    "\6\0\1\43\1\0\1\43\1\0\1\43\1\0\4\43\1\0\3\43"+
    "\1\0\7\43\3\0\3\43\5\0\5\43\26\0\44\43\u0e81\0\3\43"+
    "\31\0\11\43\6\57\1\0\5\43\2\0\5\43\4\0\126\43\2\0"+
    "\2\57\2\0\3\43\1\0\137\43\5\0\50\43\4\0\136\43\21\0"+
    "\30\43\70\0\20\43\u0200\0\u19b6\43\112\0\u51a6\43\132\0\u048d\43\u0773\0"+
    "\u2ba4\43\u215c\0\u012e\43\2\0\73\43\225\0\7\43\14\0\5\43\5\0"+
    "\1\43\1\57\12\43\1\0\15\43\1\0\5\43\1\0\1\43\1\0"+
    "\2\43\1\0\2\43\1\0\154\43\41\0\u016b\43\22\0\100\43\2\0"+
    "\66\43\50\0\15\43\3\0\20\57\20\0\4\57\17\0\2\43\30\0"+
    "\3\43\31\0\1\43\6\0\5\43\1\0\207\43\2\0\1\57\4\0"+
    "\1\43\13\0\12\61\7\0\32\43\4\0\1\43\1\0\32\43\12\0"+
    "\132\43\3\0\6\43\2\0\6\43\2\0\6\43\2\0\3\43\3\0"+
    "\2\43\3\0\2\43\22\0\3\57\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\24\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\3\1\1\24\1\3"+
    "\1\5\1\25\16\5\1\26\7\5\1\27\3\5\2\0"+
    "\1\30\1\0\1\31\1\32\1\0\1\33\2\0\15\5"+
    "\1\34\1\5\1\35\1\5\1\36\1\37\11\5\1\40"+
    "\2\5\1\41\2\0\1\42\1\0\1\43\7\5\1\44"+
    "\3\5\1\45\6\5\1\46\1\47\1\50\4\5\1\0"+
    "\1\51\1\0\2\5\1\52\3\5\1\53\15\5\1\54"+
    "\1\51\2\0\10\5\1\55\1\56\1\5\1\57\1\5"+
    "\1\60\4\5\1\0\1\61\1\62\2\5\1\63\1\5"+
    "\1\64\1\5\1\65\2\5\1\66\2\5\1\67\2\5"+
    "\1\70\1\71\2\5\1\72\1\73\1\5\1\74\1\75"+
    "\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\62\0\62\0\u04b0\0\62\0\62\0\u04e2\0\u0514"+
    "\0\62\0\62\0\62\0\62\0\u0320\0\u0320\0\62\0\u0320"+
    "\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u0320"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0320\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0320\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u04e2\0\62\0\u0b86\0\u0bb8\0\u05aa"+
    "\0\u05dc\0\62\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0320\0\u0ed8\0\u0320\0\u0f0a\0\u0320\0\u0320\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u0320\0\u10fe\0\u1130\0\62\0\u1162\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u0320\0\u13ba\0\u13ec\0\u141e\0\u0320\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u0320\0\u0320\0\u0320\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1644\0\u1194\0\u1676\0\u16a8\0\u16da\0\u0320"+
    "\0\u170c\0\u173e\0\u1770\0\u0320\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u0320\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u0320\0\u0320\0\u1c52"+
    "\0\u0320\0\u1c84\0\u0320\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e"+
    "\0\u0320\0\u0320\0\u1db0\0\u1de2\0\u0320\0\u1e14\0\u0320\0\u1e46"+
    "\0\u0320\0\u1e78\0\u1eaa\0\u0320\0\u1edc\0\u1f0e\0\u1f40\0\u1f72"+
    "\0\u1fa4\0\u0320\0\u0320\0\u1fd6\0\u2008\0\u0320\0\u0320\0\u203a"+
    "\0\u0320\0\u0320\0\u0320\0\u0320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\22\1\25\1\26\1\22\1\27"+
    "\1\30\2\22\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\22\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\2\1\54"+
    "\1\55\63\0\1\3\61\0\1\56\1\4\63\0\1\22"+
    "\1\57\26\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\2\22\1\60\25\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\13\22\1\61\14\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\1\22\1\62\26\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\14\22"+
    "\1\63\1\64\12\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\1\22\1\65"+
    "\21\22\1\66\4\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\4\22\1\67"+
    "\16\22\1\70\4\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\6\22\1\71"+
    "\1\22\1\72\10\22\1\73\6\22\6\0\2\22\4\0"+
    "\2\22\1\0\1\22\3\0\1\22\1\0\1\22\4\0"+
    "\7\22\1\74\20\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\1\22\1\75"+
    "\26\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\13\22\1\76\14\22\6\0"+
    "\2\22\4\0\2\22\1\0\1\22\3\0\1\22\1\0"+
    "\1\22\4\0\7\22\1\77\7\22\1\100\10\22\6\0"+
    "\2\22\4\0\2\22\1\0\1\22\3\0\1\22\1\0"+
    "\1\22\4\0\30\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\4\22\1\101"+
    "\23\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\1\22\1\102\11\22\1\103"+
    "\14\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\1\22\1\104\17\22\1\105"+
    "\6\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\2\22\1\106\4\22\1\107"+
    "\20\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\4\22\1\110\23\22\6\0"+
    "\2\22\4\0\2\22\1\0\1\22\3\0\1\22\1\0"+
    "\1\22\4\0\13\22\1\111\14\22\6\0\2\22\4\0"+
    "\2\22\1\0\1\22\3\0\1\22\1\0\1\22\4\0"+
    "\13\22\1\112\14\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\36\0\1\113\23\0"+
    "\41\114\1\115\20\114\42\0\1\116\16\0\1\117\54\0"+
    "\1\51\66\0\1\55\4\0\30\120\7\0\1\120\4\0"+
    "\2\120\1\0\1\120\3\0\1\120\1\0\1\120\2\121"+
    "\1\122\57\121\36\0\1\123\3\0\1\124\16\0\1\55"+
    "\1\0\1\56\64\0\2\22\1\125\25\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\6\22\1\126\6\22\1\127\12\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\1\22\1\130\13\22\1\131\12\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\6\22\1\132\21\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\5\22"+
    "\1\133\22\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\23\22\1\134\4\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\1\22\1\135\17\22\1\136\6\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\23\22\1\137\4\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\10\22\1\140\17\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\23\22"+
    "\1\141\4\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\11\22\1\142\16\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\2\22\1\143\25\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\4\22\1\144\23\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\1\22"+
    "\1\145\12\22\1\146\13\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\7\22"+
    "\1\147\20\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\20\22\1\150\7\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\6\22\1\151\21\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\10\22\1\152\17\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\6\22"+
    "\1\153\21\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\23\22\1\154\4\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\6\22\1\155\21\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\6\22\1\156\21\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\7\22"+
    "\1\157\16\22\1\160\1\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\23\22"+
    "\1\161\4\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\3\22\1\162\13\22"+
    "\1\163\10\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\36\0\1\164\23\0\42\165"+
    "\1\166\17\165\36\0\1\123\22\0\1\117\61\0\1\167"+
    "\55\0\1\170\3\0\1\171\4\0\3\22\1\172\24\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\10\22\1\173\17\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\4\22\1\174\23\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\23\22"+
    "\1\175\4\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\5\22\1\176\22\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\4\22\1\177\23\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\6\22\1\200\21\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\6\22"+
    "\1\201\21\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\5\22\1\202\22\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\24\22\1\203\3\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\15\22\1\204\12\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\4\22"+
    "\1\205\23\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\21\22\1\206\6\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\25\22\1\207\2\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\17\22\1\210\10\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\13\22"+
    "\1\211\14\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\13\22\1\212\14\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\11\22\1\213\16\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\4\22\1\214\23\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\16\22"+
    "\1\215\11\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\12\22\1\216\15\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\4\22\1\217\23\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\1\22\1\220\26\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\10\22"+
    "\1\221\17\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\4\22\1\222\23\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\7\22\1\140\20\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\42\165\1\223\61\165\1\224\17\165\42\0\1\225\16\0"+
    "\1\167\61\0\1\171\42\0\1\124\16\0\1\171\4\0"+
    "\4\22\1\226\23\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\23\22\1\227"+
    "\4\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\16\22\1\230\11\22\6\0"+
    "\2\22\4\0\2\22\1\0\1\22\3\0\1\22\1\0"+
    "\1\22\4\0\16\22\1\231\11\22\6\0\2\22\4\0"+
    "\2\22\1\0\1\22\3\0\1\22\1\0\1\22\4\0"+
    "\1\22\1\232\26\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\2\22\1\233"+
    "\25\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\22\22\1\234\5\22\6\0"+
    "\2\22\4\0\2\22\1\0\1\22\3\0\1\22\1\0"+
    "\1\22\4\0\4\22\1\235\23\22\6\0\2\22\4\0"+
    "\2\22\1\0\1\22\3\0\1\22\1\0\1\22\4\0"+
    "\13\22\1\236\14\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\21\22\1\237"+
    "\6\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\2\22\1\240\25\22\6\0"+
    "\2\22\4\0\2\22\1\0\1\22\3\0\1\22\1\0"+
    "\1\22\4\0\17\22\1\241\10\22\6\0\2\22\4\0"+
    "\2\22\1\0\1\22\3\0\1\22\1\0\1\22\4\0"+
    "\4\22\1\242\23\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\22\22\1\243"+
    "\5\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\15\22\1\244\12\22\6\0"+
    "\2\22\4\0\2\22\1\0\1\22\3\0\1\22\1\0"+
    "\1\22\4\0\17\22\1\245\10\22\6\0\2\22\4\0"+
    "\2\22\1\0\1\22\3\0\1\22\1\0\1\22\4\0"+
    "\2\22\1\246\22\22\1\247\2\22\6\0\2\22\4\0"+
    "\2\22\1\0\1\22\3\0\1\22\1\0\1\22\4\0"+
    "\10\22\1\250\17\22\6\0\2\22\4\0\2\22\1\0"+
    "\1\22\3\0\1\22\1\0\1\22\4\0\21\22\1\251"+
    "\6\22\6\0\2\22\4\0\2\22\1\0\1\22\3\0"+
    "\1\22\1\0\1\22\4\0\6\22\1\252\21\22\6\0"+
    "\2\22\4\0\2\22\1\0\1\22\3\0\1\22\1\0"+
    "\1\22\42\165\1\253\17\165\42\0\1\254\12\0\1\254"+
    "\3\0\1\255\4\0\5\22\1\256\22\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\13\22\1\257\14\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\21\22"+
    "\1\260\6\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\2\22\1\261\25\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\16\22\1\262\11\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\23\22\1\263\4\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\6\22"+
    "\1\264\21\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\2\22\1\265\25\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\25\22\1\266\2\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\4\22\1\267\23\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\13\22"+
    "\1\270\14\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\7\22\1\271\20\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\1\22\1\272\26\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\4\22\1\273\23\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\6\22"+
    "\1\274\21\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\4\22\1\275\23\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\23\22\1\276\4\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\23\22\1\277\4\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\42\0\1\253"+
    "\100\0\1\255\36\0\1\300\22\0\1\255\4\0\6\22"+
    "\1\301\21\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\17\22\1\302\10\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\2\22\1\303\25\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\4\22\1\304\23\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\7\22"+
    "\1\305\20\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\6\22\1\306\21\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\4\22\1\307\23\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\13\22\1\310\14\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\2\22"+
    "\1\311\25\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\16\22\1\312\11\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\21\22\1\313\6\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\23\22\1\314\4\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\3\22"+
    "\1\315\24\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\4\22\1\316\23\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\61\0\1\317\4\0\13\22\1\320\14\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\2\22\1\321\25\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\22\22\1\322\5\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\17\22"+
    "\1\323\10\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\4\22\1\324\23\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\1\22\1\325\26\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\4\22\1\326\23\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\16\22"+
    "\1\327\11\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\42\0\1\225\16\0\1\317"+
    "\4\0\6\22\1\330\21\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22\4\0\6\22"+
    "\1\331\21\22\6\0\2\22\4\0\2\22\1\0\1\22"+
    "\3\0\1\22\1\0\1\22\4\0\17\22\1\332\10\22"+
    "\6\0\2\22\4\0\2\22\1\0\1\22\3\0\1\22"+
    "\1\0\1\22\4\0\2\22\1\333\25\22\6\0\2\22"+
    "\4\0\2\22\1\0\1\22\3\0\1\22\1\0\1\22"+
    "\4\0\4\22\1\334\23\22\6\0\2\22\4\0\2\22"+
    "\1\0\1\22\3\0\1\22\1\0\1\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\24\1\2\11\1\1\2\11"+
    "\2\1\4\11\2\1\1\11\43\1\2\0\1\11\1\0"+
    "\2\1\1\0\1\11\2\0\37\1\1\11\2\0\1\1"+
    "\1\0\32\1\1\0\1\1\1\0\26\1\2\0\22\1"+
    "\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
            if (queue.isEmpty()) {
                String spaces = "    ";
                blockManager.spaces(spaces);
                storeTokens();
            }
            return sendToken();
        }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1752) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return TaraTypes.GRADE;
          }
        case 64: break;
        case 41: 
          { return TaraTypes.STRING_MULTILINE_VALUE_KEY;
          }
        case 65: break;
        case 40: 
          { return TaraTypes.WITH;
          }
        case 66: break;
        case 32: 
          { return TaraTypes.VAR;
          }
        case 67: break;
        case 13: 
          { return TaraTypes.COLON;
          }
        case 68: break;
        case 17: 
          { return TaraTypes.PERCENTAGE;
          }
        case 69: break;
        case 46: 
          { return TaraTypes.SINGLE;
          }
        case 70: break;
        case 26: 
          { return TaraTypes.CODE_VALUE_KEY;
          }
        case 71: break;
        case 60: 
          { return TaraTypes.COMPONENT;
          }
        case 72: break;
        case 34: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 73: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 74: break;
        case 50: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 75: break;
        case 7: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 76: break;
        case 33: 
          { return TaraTypes.LIST;
          }
        case 77: break;
        case 14: 
          { return TaraTypes.EQUALS;
          }
        case 78: break;
        case 8: 
          { return TaraTypes.DOT;
          }
        case 79: break;
        case 45: 
          { return TaraTypes.STRING_TYPE;
          }
        case 80: break;
        case 42: 
          { return TaraTypes.NAMED;
          }
        case 81: break;
        case 9: 
          { return openBracket();
          }
        case 82: break;
        case 57: 
          { return TaraTypes.TERMINAL;
          }
        case 83: break;
        case 38: 
          { return TaraTypes.DATE_TYPE;
          }
        case 84: break;
        case 61: 
          { return TaraTypes.METAMODEL;
          }
        case 85: break;
        case 5: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 86: break;
        case 43: 
          { return TaraTypes.EMPTY_REF;
          }
        case 87: break;
        case 6: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 88: break;
        case 59: 
          { return TaraTypes.REQUIRED;
          }
        case 89: break;
        case 52: 
          { return TaraTypes.PRIVATE;
          }
        case 90: break;
        case 25: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 91: break;
        case 4: 
          { return inline();
          }
        case 92: break;
        case 27: 
          { return TaraTypes.DOC_LINE;
          }
        case 93: break;
        case 51: 
          { return TaraTypes.EXTENDS;
          }
        case 94: break;
        case 24: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 95: break;
        case 56: 
          { return TaraTypes.PROPERTY;
          }
        case 96: break;
        case 11: 
          { return TaraTypes.STAR;
          }
        case 97: break;
        case 48: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 98: break;
        case 20: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 99: break;
        case 55: 
          { return TaraTypes.COORDINATE_VALUE_KEY;
          }
        case 100: break;
        case 19: 
          { return semicolon();
          }
        case 101: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 102: break;
        case 58: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 103: break;
        case 29: 
          { return TaraTypes.USE_KEY;
          }
        case 104: break;
        case 47: 
          { return TaraTypes.ALWAYS;
          }
        case 105: break;
        case 37: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 106: break;
        case 22: 
          { return TaraTypes.AS;
          }
        case 107: break;
        case 21: 
          { return TaraTypes.ON;
          }
        case 108: break;
        case 28: 
          { return TaraTypes.SUB;
          }
        case 109: break;
        case 53: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 110: break;
        case 23: 
          { return TaraTypes.IS;
          }
        case 111: break;
        case 36: 
          { return TaraTypes.PORT_TYPE;
          }
        case 112: break;
        case 54: 
          { return TaraTypes.INT_TYPE;
          }
        case 113: break;
        case 49: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 114: break;
        case 35: 
          { return TaraTypes.DATE_VALUE_KEY;
          }
        case 115: break;
        case 63: 
          { return TaraTypes.COORDINATE_TYPE;
          }
        case 116: break;
        case 16: 
          { return TaraTypes.EURO;
          }
        case 117: break;
        case 10: 
          { return closeBracket();
          }
        case 118: break;
        case 39: 
          { return TaraTypes.WORD_KEY;
          }
        case 119: break;
        case 62: 
          { return TaraTypes.INTENTION;
          }
        case 120: break;
        case 15: 
          { return TaraTypes.DOLLAR;
          }
        case 121: break;
        case 44: 
          { return TaraTypes.FACET;
          }
        case 122: break;
        case 12: 
          { return TaraTypes.COMMA;
          }
        case 123: break;
        case 31: 
          { return TaraTypes.HAS;
          }
        case 124: break;
        case 30: 
          { return TaraTypes.BOX_KEY;
          }
        case 125: break;
        case 3: 
          { return newlineIndent();
          }
        case 126: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 221: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
