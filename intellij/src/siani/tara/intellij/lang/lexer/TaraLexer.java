/* The following code was generated by JFlex 1.4.3 on 19/05/15 7:59 */

package siani.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import siani.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;

import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/05/15 7:59 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int QUOTED = 2;
	public static final int YYINITIAL = 0;
	public static final int MULTILINE = 4;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1, 2, 2
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\55\1\1\1\60\2\0\1\57\16\55\4\0\1\1\1\0\1\41" +
			"\1\53\1\43\1\51\2\0\1\34\1\35\1\56\1\61\1\46\1\42" +
			"\1\40\1\45\12\62\1\47\1\52\1\0\1\50\1\3\2\0\2\43" +
			"\1\4\1\43\1\54\25\43\1\36\1\63\1\37\1\0\1\43\1\0" +
			"\1\17\1\15\1\7\1\22\1\10\1\33\1\27\1\16\1\25\2\43" +
			"\1\23\1\30\1\6\1\5\1\11\1\31\1\21\1\13\1\12\1\14" +
			"\1\20\1\24\1\26\1\32\1\43\1\0\1\2\2\0\41\55\2\0" +
			"\4\43\4\0\1\43\2\0\1\55\2\0\1\51\4\0\1\43\1\0" +
			"\1\44\2\0\1\43\5\0\27\43\1\0\37\43\1\0\u01ca\43\4\0" +
			"\14\43\16\0\5\43\7\0\1\43\1\0\1\43\21\0\160\55\5\43" +
			"\1\0\2\43\2\0\4\43\10\0\1\43\1\0\3\43\1\0\1\43" +
			"\1\0\24\43\1\0\123\43\1\0\213\43\1\0\5\55\2\0\236\43" +
			"\11\0\46\43\2\0\1\43\7\0\47\43\7\0\1\43\1\0\55\55" +
			"\1\0\1\55\1\0\2\55\1\0\2\55\1\0\1\55\10\0\33\43" +
			"\5\0\3\43\15\0\5\55\6\0\1\43\4\0\13\55\5\0\53\43" +
			"\25\55\12\62\4\0\2\43\1\55\143\43\1\0\1\43\10\55\1\0" +
			"\6\55\2\43\2\55\1\0\4\55\2\43\12\62\3\43\2\0\1\43" +
			"\17\0\1\55\1\43\1\55\36\43\33\55\2\0\131\43\13\55\1\43" +
			"\16\0\12\62\41\43\11\55\2\43\4\0\1\43\5\0\26\43\4\55" +
			"\1\43\11\55\1\43\3\55\1\43\5\55\22\0\31\43\3\55\104\0" +
			"\1\43\1\0\13\43\67\0\33\55\1\0\4\55\66\43\3\55\1\43" +
			"\22\55\1\43\7\55\12\43\2\55\2\0\12\62\1\0\7\43\1\0" +
			"\7\43\1\0\3\55\1\0\10\43\2\0\2\43\2\0\26\43\1\0" +
			"\7\43\1\0\1\43\3\0\4\43\2\0\1\55\1\43\7\55\2\0" +
			"\2\55\2\0\3\55\1\43\10\0\1\55\4\0\2\43\1\0\3\43" +
			"\2\55\2\0\12\62\4\43\7\0\1\43\5\0\3\55\1\0\6\43" +
			"\4\0\2\43\2\0\26\43\1\0\7\43\1\0\2\43\1\0\2\43" +
			"\1\0\2\43\2\0\1\55\1\0\5\55\4\0\2\55\2\0\3\55" +
			"\3\0\1\55\7\0\4\43\1\0\1\43\7\0\12\62\2\55\3\43" +
			"\1\55\13\0\3\55\1\0\11\43\1\0\3\43\1\0\26\43\1\0" +
			"\7\43\1\0\2\43\1\0\5\43\2\0\1\55\1\43\10\55\1\0" +
			"\3\55\1\0\3\55\2\0\1\43\17\0\2\43\2\55\2\0\12\62" +
			"\1\0\1\43\17\0\3\55\1\0\10\43\2\0\2\43\2\0\26\43" +
			"\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\55\1\43\7\55" +
			"\2\0\2\55\2\0\3\55\10\0\2\55\4\0\2\43\1\0\3\43" +
			"\2\55\2\0\12\62\1\0\1\43\20\0\1\55\1\43\1\0\6\43" +
			"\3\0\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1\0\2\43" +
			"\3\0\2\43\3\0\3\43\3\0\14\43\4\0\5\55\3\0\3\55" +
			"\1\0\4\55\2\0\1\43\6\0\1\55\16\0\12\62\11\0\1\43" +
			"\7\0\3\55\1\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43" +
			"\1\0\5\43\3\0\1\43\7\55\1\0\3\55\1\0\4\55\7\0" +
			"\2\55\1\0\2\43\6\0\2\43\2\55\2\0\12\62\22\0\2\55" +
			"\1\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43\1\0\5\43" +
			"\2\0\1\55\1\43\7\55\1\0\3\55\1\0\4\55\7\0\2\55" +
			"\7\0\1\43\1\0\2\43\2\55\2\0\12\62\1\0\2\43\17\0" +
			"\2\55\1\0\10\43\1\0\3\43\1\0\51\43\2\0\1\43\7\55" +
			"\1\0\3\55\1\0\4\55\1\43\10\0\1\55\10\0\2\43\2\55" +
			"\2\0\12\62\12\0\6\43\2\0\2\55\1\0\22\43\3\0\30\43" +
			"\1\0\11\43\1\0\1\43\2\0\7\43\3\0\1\55\4\0\6\55" +
			"\1\0\1\55\1\0\10\55\22\0\2\55\15\0\60\43\1\55\2\43" +
			"\7\55\4\0\10\43\10\55\1\0\12\62\47\0\2\43\1\0\1\43" +
			"\2\0\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0\7\43" +
			"\1\0\3\43\1\0\1\43\1\0\1\43\2\0\2\43\1\0\4\43" +
			"\1\55\2\43\6\55\1\0\2\55\1\43\2\0\5\43\1\0\1\43" +
			"\1\0\6\55\2\0\12\62\2\0\4\43\40\0\1\43\27\0\2\55" +
			"\6\0\12\62\13\0\1\55\1\0\1\55\1\0\1\55\4\0\2\55" +
			"\10\43\1\0\44\43\4\0\24\55\1\0\2\55\5\43\13\55\1\0" +
			"\44\55\11\0\1\55\71\0\53\43\24\55\1\43\12\62\6\0\6\43" +
			"\4\55\4\43\3\55\1\43\3\55\2\43\7\55\3\43\4\55\15\43" +
			"\14\55\1\43\1\55\12\62\4\55\2\0\46\43\1\0\1\43\5\0" +
			"\1\43\2\0\53\43\1\0\u014d\43\1\0\4\43\2\0\7\43\1\0" +
			"\1\43\1\0\4\43\2\0\51\43\1\0\4\43\2\0\41\43\1\0" +
			"\4\43\2\0\7\43\1\0\1\43\1\0\4\43\2\0\17\43\1\0" +
			"\71\43\1\0\4\43\2\0\103\43\2\0\3\55\40\0\20\43\20\0" +
			"\125\43\14\0\u026c\43\2\0\21\43\1\0\32\43\5\0\113\43\3\0" +
			"\3\43\17\0\15\43\1\0\4\43\3\55\13\0\22\43\3\55\13\0" +
			"\22\43\2\55\14\0\15\43\1\0\3\43\1\0\2\55\14\0\64\43" +
			"\40\55\3\0\1\43\3\0\2\43\1\55\2\0\12\62\41\0\3\55" +
			"\2\0\12\62\6\0\130\43\10\0\51\43\1\55\1\43\5\0\106\43" +
			"\12\0\35\43\3\0\14\55\4\0\14\55\12\0\12\62\36\43\2\0" +
			"\5\43\13\0\54\43\4\0\21\55\7\43\2\55\6\0\12\62\46\0" +
			"\27\43\5\55\4\0\65\43\12\55\1\0\35\55\2\0\1\55\12\62" +
			"\6\0\12\62\15\0\1\43\130\0\5\55\57\43\21\55\7\43\4\0" +
			"\12\62\21\0\11\55\14\0\3\55\36\43\15\55\2\43\12\62\54\43" +
			"\16\55\14\0\44\43\24\55\10\0\12\62\3\0\3\43\12\62\44\43" +
			"\122\0\3\55\1\0\25\55\4\43\1\55\4\43\3\55\2\43\11\0" +
			"\300\43\47\55\25\0\4\55\u0116\43\2\0\6\43\2\0\46\43\2\0" +
			"\6\43\2\0\10\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0" +
			"\37\43\2\0\65\43\1\0\7\43\1\0\1\43\3\0\3\43\1\0" +
			"\7\43\3\0\4\43\2\0\6\43\4\0\15\43\5\0\3\43\1\0" +
			"\7\43\16\0\5\55\32\0\5\55\20\0\2\43\23\0\1\43\13\0" +
			"\5\55\5\0\6\55\1\0\1\43\15\0\1\43\20\0\15\43\3\0" +
			"\14\43\1\43\16\43\25\0\15\55\4\0\1\55\3\0\14\55\21\0" +
			"\1\43\4\0\1\43\2\0\12\43\1\0\1\43\3\0\5\43\6\0" +
			"\1\43\1\0\1\43\1\0\1\43\1\0\4\43\1\0\13\43\2\0" +
			"\4\43\5\0\5\43\4\0\1\43\21\0\51\43\u0a77\0\57\43\1\0" +
			"\57\43\1\0\205\43\6\0\4\43\3\55\2\43\14\0\46\43\1\0" +
			"\1\43\5\0\1\43\2\0\70\43\7\0\1\43\17\0\1\55\27\43" +
			"\11\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43" +
			"\1\0\7\43\1\0\7\43\1\0\7\43\1\0\40\55\57\0\1\43" +
			"\u01d5\0\3\43\31\0\11\43\6\55\1\0\5\43\2\0\5\43\4\0" +
			"\126\43\2\0\2\55\2\0\3\43\1\0\132\43\1\0\4\43\5\0" +
			"\51\43\3\0\136\43\21\0\33\43\65\0\20\43\u0200\0\u19b6\43\112\0" +
			"\u51cd\43\63\0\u048d\43\103\0\56\43\2\0\u010d\43\3\0\20\43\12\62" +
			"\2\43\24\0\57\43\1\55\4\0\12\55\1\0\31\43\7\0\1\55" +
			"\120\43\2\55\45\0\11\43\2\0\147\43\2\0\4\43\1\0\4\43" +
			"\14\0\13\43\115\0\12\43\1\55\3\43\1\55\4\43\1\55\27\43" +
			"\5\55\20\0\1\43\7\0\64\43\14\0\2\55\62\43\21\55\13\0" +
			"\12\62\6\0\22\55\6\43\3\0\1\43\4\0\12\62\34\43\10\55" +
			"\2\0\27\43\15\55\14\0\35\43\3\0\4\55\57\43\16\55\16\0" +
			"\1\43\12\62\46\0\51\43\16\55\11\0\3\43\1\55\10\43\2\55" +
			"\2\0\12\62\6\0\27\43\3\0\1\43\1\55\4\0\60\43\1\55" +
			"\1\43\3\55\2\43\2\55\5\43\2\55\1\43\1\55\1\43\30\0" +
			"\3\43\2\0\13\43\5\55\2\0\3\43\2\55\12\0\6\43\2\0" +
			"\6\43\2\0\6\43\11\0\7\43\1\0\7\43\221\0\43\43\10\55" +
			"\1\0\2\55\2\0\12\62\6\0\u2ba4\43\14\0\27\43\4\0\61\43" +
			"\u2104\0\u016e\43\2\0\152\43\46\0\7\43\14\0\5\43\5\0\1\43" +
			"\1\55\12\43\1\0\15\43\1\0\5\43\1\0\1\43\1\0\2\43" +
			"\1\0\2\43\1\0\154\43\41\0\u016b\43\22\0\100\43\2\0\66\43" +
			"\50\0\15\43\3\0\20\55\20\0\7\55\14\0\2\43\30\0\3\43" +
			"\31\0\1\43\6\0\5\43\1\0\207\43\2\0\1\55\4\0\1\43" +
			"\13\0\12\62\7\0\32\43\4\0\1\43\1\0\32\43\13\0\131\43" +
			"\3\0\6\43\2\0\6\43\2\0\6\43\2\0\3\43\3\0\2\43" +
			"\3\0\2\43\22\0\3\55\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\3\0\1\1\1\2\1\3\1\4\23\5\1\6\1\7" +
			"\1\10\1\11\1\12\1\13\2\1\1\14\1\15\1\16" +
			"\1\17\1\20\2\1\1\21\1\22\1\23\2\22\1\3" +
			"\1\5\1\24\15\5\1\25\13\5\1\26\5\5\1\0" +
			"\1\27\1\30\1\31\1\0\1\32\1\0\1\23\11\5" +
			"\1\33\1\5\1\34\1\5\1\35\1\5\1\36\6\5" +
			"\1\37\12\5\1\40\2\0\1\41\10\5\1\42\4\5" +
			"\1\43\3\5\1\0\1\17\1\44\1\5\1\45\1\46" +
			"\1\47\1\50\5\5\1\51\1\0\1\31\1\0\5\5" +
			"\1\52\10\5\1\53\5\5\1\54\1\31\1\0\1\41" +
			"\2\5\1\55\4\5\1\56\1\57\4\5\1\60\4\5" +
			"\1\61\1\62\1\5\1\63\2\5\1\64\3\5\1\65" +
			"\1\66\1\5\1\67\1\70\1\71\1\72\1\73\1\74" +
			"\1\75\1\76";

	private static int[] zzUnpackAction() {
		int[] result = new int[222];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\64\0\150\0\234\0\320\0\u0104\0\234\0\u0138" +
			"\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8" +
			"\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478" +
			"\0\u04ac\0\u04e0\0\234\0\234\0\234\0\234\0\u0514\0\234" +
			"\0\u0548\0\u057c\0\234\0\234\0\234\0\u05b0\0\u05e4\0\u0618" +
			"\0\u064c\0\u0680\0\234\0\234\0\u06b4\0\u06e8\0\u071c\0\u0750" +
			"\0\u01d4\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc" +
			"\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u01d4\0\u0a28" +
			"\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8" +
			"\0\u0bfc\0\u0c30\0\u01d4\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34" +
			"\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0618\0\u0e6c\0\u06e8" +
			"\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c" +
			"\0\u1040\0\u01d4\0\u1074\0\u01d4\0\u10a8\0\u01d4\0\u10dc\0\u01d4" +
			"\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u01d4\0\u1248" +
			"\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8" +
			"\0\u141c\0\234\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554" +
			"\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u01d4\0\u168c\0\u16c0" +
			"\0\u16f4\0\u1728\0\u01d4\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c" +
			"\0\234\0\u1860\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u1894\0\u18c8" +
			"\0\u18fc\0\u1930\0\u1964\0\u01d4\0\u1998\0\u1450\0\u19cc\0\u1a00" +
			"\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u01d4\0\u1b04\0\u1b38\0\u1b6c" +
			"\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u01d4\0\u1ca4\0\u1cd8" +
			"\0\u1d0c\0\u1d40\0\u1d74\0\u01d4\0\234\0\u1da8\0\u1da8\0\u1ddc" +
			"\0\u1e10\0\u01d4\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u01d4\0\u01d4" +
			"\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u01d4\0\u1fe4\0\u2018\0\u204c" +
			"\0\u2080\0\u01d4\0\u01d4\0\u20b4\0\u01d4\0\u20e8\0\u211c\0\u01d4" +
			"\0\u2150\0\u2184\0\u21b8\0\u01d4\0\u01d4\0\u21ec\0\u01d4\0\u01d4" +
			"\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[222];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
			"\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23" +
			"\1\24\1\25\1\26\1\13\1\27\1\30\2\13\1\31" +
			"\2\13\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
			"\1\41\1\13\1\4\1\42\1\43\1\44\1\45\1\46" +
			"\1\47\1\50\1\13\2\4\2\6\1\51\1\52\1\4" +
			"\41\53\1\54\15\53\2\4\2\53\1\55\42\53\1\56" +
			"\20\53\1\55\65\0\1\5\63\0\1\57\1\6\54\0" +
			"\2\6\7\0\1\13\1\60\26\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\2\13\1\61\25\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\13\13\1\62\14\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\30\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\2\13\1\63\17\13\1\64" +
			"\1\13\1\65\3\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\15\13\1\66\12\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\4\13\1\67" +
			"\10\13\1\70\12\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\6\13\1\71\1\13\1\72\10\13" +
			"\1\73\6\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\7\13\1\74\20\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\1\13\1\75\26\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\13\13\1\76\14\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\7\13\1\77\1\13\1\100\16\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\13\13\1\101\14\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\1\13\1\102\2\13\1\103\6\13" +
			"\1\104\14\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\1\13\1\105\5\13\1\106\3\13\1\107" +
			"\14\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\1\13\1\110\17\13\1\111\6\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\2\13\1\112" +
			"\4\13\1\113\20\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\4\13\1\114\3\13\1\115\17\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\4\13\1\116\6\13\1\117\5\13\1\120\6\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\41\0\1\121" +
			"\65\0\1\122\17\0\1\123\46\0\1\124\10\0\1\125" +
			"\11\0\30\46\6\0\4\46\6\0\2\46\4\0\1\46" +
			"\53\0\1\47\15\0\30\126\7\0\1\126\10\0\1\126" +
			"\71\0\1\52\41\0\1\127\21\0\1\52\7\0\1\53" +
			"\3\0\1\53\6\0\1\53\17\0\1\53\64\0\1\130" +
			"\22\0\1\57\66\0\2\13\1\131\25\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\6\13\1\132" +
			"\21\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\3\13\1\133\24\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\6\13\1\134\21\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\5\13" +
			"\1\135\22\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\1\13\1\136\26\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\15\13\1\137\12\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\10\13\1\140\17\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\15\13\1\141\12\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\11\13\1\142" +
			"\16\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\2\13\1\143\25\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\4\13\1\144\23\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\1\13" +
			"\1\145\26\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\7\13\1\146\20\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\7\13\1\147\20\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\15\13\1\150\12\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\1\13\1\151\26\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\13\13\1\152" +
			"\11\13\1\153\2\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\6\13\1\154\21\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\3\13\1\155" +
			"\4\13\1\156\17\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\17\13\1\157\10\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\6\13\1\160" +
			"\21\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\15\13\1\161\12\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\6\13\1\162\21\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\6\13" +
			"\1\163\21\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\13\13\1\164\14\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\17\13\1\165\10\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\13\13\1\166\14\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\3\13\1\167\13\13\1\170\10\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\17\13\1\171\10\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\41\0\1\172\65\0\1\122\61\0\1\127" +
			"\21\0\1\123\1\0\60\124\1\0\3\124\56\173\1\174" +
			"\5\173\62\0\1\175\5\0\3\13\1\176\24\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\10\13" +
			"\1\177\10\13\1\200\6\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\17\13\1\201\10\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\4\13" +
			"\1\202\23\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\6\13\1\203\21\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\5\13\1\204\22\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\24\13\1\205\3\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\4\13\1\206\23\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\21\13\1\207" +
			"\6\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\23\13\1\210\4\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\17\13\1\211\10\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\6\13" +
			"\1\212\21\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\6\13\1\213\21\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\16\13\1\214\11\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\10\13\1\215\17\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\21\13\1\216\6\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\1\0\4\217\30\155" +
			"\6\217\2\155\2\220\6\217\2\155\2\217\1\221\1\217" +
			"\1\155\1\217\4\0\11\13\1\222\16\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\4\13\1\223" +
			"\23\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\16\13\1\224\11\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\12\13\1\225\15\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\1\13" +
			"\1\226\2\13\1\227\23\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\7\13\1\230\20\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\6\13" +
			"\1\231\21\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\6\13\1\232\21\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\4\13\1\233\23\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\7\13\1\140\20\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\4\13\1\234\23\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\1\0\56\173\1\235" +
			"\52\173\1\236\10\173\1\235\5\173\54\0\1\237\5\0" +
			"\1\175\5\0\4\13\1\240\23\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\15\13\1\241\12\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\14\13\1\242\13\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\1\13\1\243\26\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\2\13\1\244" +
			"\25\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\26\13\1\245\1\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\4\13\1\246\23\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\21\13" +
			"\1\247\6\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\2\13\1\250\25\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\17\13\1\251\10\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\4\13\1\252\23\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\15\13\1\253\12\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\1\13\1\254" +
			"\26\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\21\13\1\255\6\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\1\13\1\256\26\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\1\0\60\217" +
			"\1\221\7\217\30\220\6\217\4\220\6\217\2\220\2\217" +
			"\1\221\1\217\1\220\1\217\4\0\17\13\1\257\10\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\23\13\1\260\4\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\10\13\1\261\17\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\21\13\1\262" +
			"\6\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\10\13\1\263\17\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\6\13\1\264\21\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\1\0\45\173" +
			"\1\265\10\173\1\235\5\173\42\0\1\266\16\0\1\266" +
			"\1\267\5\0\5\13\1\270\22\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\13\13\1\271\14\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\4\13\1\272\23\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\7\13\1\273\20\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\16\13\1\274" +
			"\11\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\15\13\1\275\12\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\2\13\1\276\25\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\23\13" +
			"\1\277\4\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\4\13\1\300\23\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\13\13\1\301\14\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\13\13\1\302\14\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\2\13\1\303\25\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\15\13\1\304" +
			"\12\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\4\13\1\305\23\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\4\13\1\306\23\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\15\13" +
			"\1\307\12\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\5\13\1\310\22\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\15\13\1\311\12\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\63\0" +
			"\1\267\5\0\6\13\1\312\21\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\17\13\1\313\10\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\4\13\1\314\23\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\7\13\1\315\20\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\6\13\1\316" +
			"\21\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\13\13\1\317\14\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\2\13\1\320\25\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\3\13" +
			"\1\321\24\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\17\13\1\322\10\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\4\13\1\323\23\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\15\13\1\324\12\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\4\13\1\325\23\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\17\13\1\326" +
			"\10\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\5\0\4\13\1\327\23\13\6\0\2\13\2\46\6\0" +
			"\2\13\4\0\1\13\5\0\16\13\1\330\11\13\6\0" +
			"\2\13\2\46\6\0\2\13\4\0\1\13\5\0\26\13" +
			"\1\331\1\13\6\0\2\13\2\46\6\0\2\13\4\0" +
			"\1\13\5\0\17\13\1\332\10\13\6\0\2\13\2\46" +
			"\6\0\2\13\4\0\1\13\5\0\6\13\1\333\21\13" +
			"\6\0\2\13\2\46\6\0\2\13\4\0\1\13\5\0" +
			"\26\13\1\334\1\13\6\0\2\13\2\46\6\0\2\13" +
			"\4\0\1\13\5\0\16\13\1\335\11\13\6\0\2\13" +
			"\2\46\6\0\2\13\4\0\1\13\5\0\4\13\1\336" +
			"\23\13\6\0\2\13\2\46\6\0\2\13\4\0\1\13" +
			"\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[8736];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	private static java.io.Reader zzReader = null; // Fake

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\3\0\1\11\2\1\1\11\23\1\4\11\1\1\1\11" +
			"\2\1\3\11\5\1\2\11\44\1\1\0\3\1\1\0" +
			"\1\1\1\0\42\1\1\11\2\0\22\1\1\0\1\1" +
			"\1\11\13\1\1\0\1\1\1\0\25\1\1\11\1\0" +
			"\50\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[222];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end) ? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof() {
		if (queue.isEmpty() && !end) {
			blockManager.eof();
			storeTokens();
			end = true;
			queue.add(TaraTypes.NEWLINE);
		}
		return sendToken();
	}

	private String getTextSpaces(String text) {
		int index = (text.indexOf(' ') == -1) ? text.indexOf('\t') : text.indexOf(' ');
		return (index == -1) ? "" : text.substring(index);
	}

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

	private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
		if (queue.isEmpty()) {
			String spaces = getTextSpaces(yytext().toString());
			blockManager.spaces(spaces);
			storeTokens();
		}
		return sendToken();
	}

	private IElementType inline() {
		blockManager.openBracket(yytext().length());
		storeTokens();
		return sendToken();
	}

	private IElementType semicolon() {
		blockManager.semicolon(yytext().length());
		storeTokens();
		return sendToken();
	}

	private void storeTokens() {
		blockManager.actions();
		for (IElementType token : blockManager.actions())
			queue.offer(token);
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	TaraLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 2270) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p/>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p/>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p/>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p/>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 8: {
					return TaraTypes.LEFT_SQUARE;
				}
				case 63:
					break;
				case 39: {
					return TaraTypes.WITH;
				}
				case 64:
					break;
				case 30: {
					return TaraTypes.VAR;
				}
				case 65:
					break;
				case 13: {
					return TaraTypes.COLON;
				}
				case 66:
					break;
				case 59: {
					return TaraTypes.ABSTRACT;
				}
				case 67:
					break;
				case 43: {
					return TaraTypes.RATIO_TYPE;
				}
				case 68:
					break;
				case 62: {
					return TaraTypes.MULTIPLE;
				}
				case 69:
					break;
				case 19: {
					yybegin(YYINITIAL);
					return TaraTypes.QUOTE_END;
				}
				case 70:
					break;
				case 15: {
					return TaraTypes.MEASURE_VALUE_KEY;
				}
				case 71:
					break;
				case 47: {
					return TaraTypes.SINGLE;
				}
				case 72:
					break;
				case 33: {
					return TaraTypes.DOUBLE_VALUE_KEY;
				}
				case 73:
					break;
				case 2: {
					return TokenType.WHITE_SPACE;
				}
				case 74:
					break;
				case 50: {
					return TaraTypes.NATURAL_TYPE;
				}
				case 75:
					break;
				case 7: {
					return TaraTypes.RIGHT_PARENTHESIS;
				}
				case 76:
					break;
				case 32: {
					return TaraTypes.LIST;
				}
				case 77:
					break;
				case 14: {
					return TaraTypes.EQUALS;
				}
				case 78:
					break;
				case 10: {
					return TaraTypes.DOT;
				}
				case 79:
					break;
				case 46: {
					return TaraTypes.STRING_TYPE;
				}
				case 80:
					break;
				case 58: {
					return TaraTypes.TERMINAL;
				}
				case 81:
					break;
				case 45: {
					return TaraTypes.NATIVE_TYPE;
				}
				case 82:
					break;
				case 37: {
					return TaraTypes.DATE_TYPE;
				}
				case 83:
					break;
				case 5: {
					return TaraTypes.IDENTIFIER_KEY;
				}
				case 84:
					break;
				case 42: {
					return TaraTypes.EMPTY_REF;
				}
				case 85:
					break;
				case 6: {
					return TaraTypes.LEFT_PARENTHESIS;
				}
				case 86:
					break;
				case 61: {
					return TaraTypes.REQUIRED;
				}
				case 87:
					break;
				case 55: {
					return TaraTypes.FEATURE;
				}
				case 88:
					break;
				case 24: {
					return TaraTypes.NEGATIVE_VALUE_KEY;
				}
				case 89:
					break;
				case 31: {
					return TaraTypes.DSL;
				}
				case 90:
					break;
				case 35: {
					return TaraTypes.ROOT;
				}
				case 91:
					break;
				case 4: {
					return inline();
				}
				case 92:
					break;
				case 26: {
					return TaraTypes.ADDRESS_VALUE;
				}
				case 93:
					break;
				case 51: {
					return TaraTypes.EXTENDS;
				}
				case 94:
					break;
				case 23: {
					yybegin(MULTILINE);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 95:
					break;
				case 57: {
					return TaraTypes.PROPERTY;
				}
				case 96:
					break;
				case 48: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 97:
					break;
				case 9: {
					return TaraTypes.RIGHT_SQUARE;
				}
				case 98:
					break;
				case 17: {
					return TaraTypes.NATURAL_VALUE_KEY;
				}
				case 99:
					break;
				case 16: {
					return semicolon();
				}
				case 100:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 101:
					break;
				case 40: {
					return TaraTypes.INTO;
				}
				case 102:
					break;
				case 41: {
					return TaraTypes.RESOURCE_KEY;
				}
				case 103:
					break;
				case 36: {
					yypushback(1);
					return TaraTypes.DOC_LINE;
				}
				case 104:
					break;
				case 34: {
					return TaraTypes.BOOLEAN_VALUE_KEY;
				}
				case 105:
					break;
				case 21: {
					return TaraTypes.AS;
				}
				case 106:
					break;
				case 20: {
					return TaraTypes.ON;
				}
				case 107:
					break;
				case 27: {
					return TaraTypes.SUB;
				}
				case 108:
					break;
				case 60: {
					return TaraTypes.READONLY;
				}
				case 109:
					break;
				case 56: {
					return TaraTypes.ENCLOSED;
				}
				case 110:
					break;
				case 11: {
					yybegin(QUOTED);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 111:
					break;
				case 52: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 112:
					break;
				case 22: {
					return TaraTypes.IS;
				}
				case 113:
					break;
				case 54: {
					return TaraTypes.MEASURE_TYPE_KEY;
				}
				case 114:
					break;
				case 28: {
					return TaraTypes.USE;
				}
				case 115:
					break;
				case 53: {
					return TaraTypes.INT_TYPE;
				}
				case 116:
					break;
				case 49: {
					return TaraTypes.METAIDENTIFIER_KEY;
				}
				case 117:
					break;
				case 38: {
					return TaraTypes.WORD_KEY;
				}
				case 118:
					break;
				case 18: {
					return TaraTypes.CHARACTER;
				}
				case 119:
					break;
				case 44: {
					return TaraTypes.FACET;
				}
				case 120:
					break;
				case 12: {
					return TaraTypes.COMMA;
				}
				case 121:
					break;
				case 29: {
					return TaraTypes.HAS;
				}
				case 122:
					break;
				case 3: {
					return newlineIndent();
				}
				case 123:
					break;
				case 25: {
				}
				case 124:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						switch (zzLexicalState) {
							case YYINITIAL: {
								return eof();
							}
							case 223:
								break;
							default:
								return null;
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
