/* The following code was generated by JFlex 1.4.3 on 29/04/14 10:21 */

package monet.tara.intellij.metamodel.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import monet.tara.intellij.metamodel.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/04/14 10:21 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/monet/tara/intellij/metamodel/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\57\1\1\1\2\3\0\16\57\4\0\1\1\1\0\1\42\1\0"+
    "\1\56\2\0\1\54\3\0\1\45\1\0\1\26\1\37\1\0\12\55"+
    "\1\40\1\41\1\43\1\0\1\44\2\0\1\56\1\53\1\3\1\51"+
    "\4\56\1\47\4\56\1\50\4\56\1\52\1\56\1\46\1\56\1\31"+
    "\3\56\1\33\1\0\1\34\1\0\1\56\1\0\1\15\1\21\1\6"+
    "\1\27\1\7\1\22\1\17\1\25\1\12\1\56\1\16\1\23\1\13"+
    "\1\5\1\4\1\10\1\56\1\14\1\20\1\11\1\24\1\32\1\56"+
    "\1\30\2\56\1\35\1\0\1\36\1\0\41\57\2\0\4\56\4\0"+
    "\1\56\2\0\1\57\7\0\1\56\4\0\1\56\5\0\27\56\1\0"+
    "\37\56\1\0\u013f\56\31\0\162\56\4\0\14\56\16\0\5\56\11\0"+
    "\1\56\21\0\130\57\5\0\23\57\12\0\1\56\13\0\1\56\1\0"+
    "\3\56\1\0\1\56\1\0\24\56\1\0\54\56\1\0\46\56\1\0"+
    "\5\56\4\0\202\56\1\0\4\57\3\0\105\56\1\0\46\56\2\0"+
    "\2\56\6\0\20\56\41\0\46\56\2\0\1\56\7\0\47\56\11\0"+
    "\21\57\1\0\27\57\1\0\3\57\1\0\1\57\1\0\2\57\1\0"+
    "\1\57\13\0\33\56\5\0\3\56\15\0\4\57\14\0\6\57\13\0"+
    "\32\56\5\0\13\56\16\57\7\0\12\55\4\0\2\56\1\57\143\56"+
    "\1\0\1\56\10\57\1\0\6\57\2\56\2\57\1\0\4\57\2\56"+
    "\12\55\3\56\2\0\1\56\17\0\1\57\1\56\1\57\36\56\33\57"+
    "\2\0\3\56\60\0\46\56\13\57\1\56\u014f\0\3\57\66\56\2\0"+
    "\1\57\1\56\20\57\2\0\1\56\4\57\3\0\12\56\2\57\2\0"+
    "\12\55\21\0\3\57\1\0\10\56\2\0\2\56\2\0\26\56\1\0"+
    "\7\56\1\0\1\56\3\0\4\56\2\0\1\57\1\56\7\57\2\0"+
    "\2\57\2\0\3\57\11\0\1\57\4\0\2\56\1\0\3\56\2\57"+
    "\2\0\12\55\4\56\15\0\3\57\1\0\6\56\4\0\2\56\2\0"+
    "\26\56\1\0\7\56\1\0\2\56\1\0\2\56\1\0\2\56\2\0"+
    "\1\57\1\0\5\57\4\0\2\57\2\0\3\57\13\0\4\56\1\0"+
    "\1\56\7\0\12\55\2\57\3\56\14\0\3\57\1\0\11\56\1\0"+
    "\3\56\1\0\26\56\1\0\7\56\1\0\2\56\1\0\5\56\2\0"+
    "\1\57\1\56\10\57\1\0\3\57\1\0\3\57\2\0\1\56\17\0"+
    "\2\56\2\57\2\0\12\55\1\0\1\56\17\0\3\57\1\0\10\56"+
    "\2\0\2\56\2\0\26\56\1\0\7\56\1\0\2\56\1\0\5\56"+
    "\2\0\1\57\1\56\6\57\3\0\2\57\2\0\3\57\10\0\2\57"+
    "\4\0\2\56\1\0\3\56\4\0\12\55\1\0\1\56\20\0\1\57"+
    "\1\56\1\0\6\56\3\0\3\56\1\0\4\56\3\0\2\56\1\0"+
    "\1\56\1\0\2\56\3\0\2\56\3\0\3\56\3\0\10\56\1\0"+
    "\3\56\4\0\5\57\3\0\3\57\1\0\4\57\11\0\1\57\17\0"+
    "\11\55\11\0\1\56\7\0\3\57\1\0\10\56\1\0\3\56\1\0"+
    "\27\56\1\0\12\56\1\0\5\56\4\0\7\57\1\0\3\57\1\0"+
    "\4\57\7\0\2\57\11\0\2\56\4\0\12\55\22\0\2\57\1\0"+
    "\10\56\1\0\3\56\1\0\27\56\1\0\12\56\1\0\5\56\2\0"+
    "\1\57\1\56\7\57\1\0\3\57\1\0\4\57\7\0\2\57\7\0"+
    "\1\56\1\0\2\56\4\0\12\55\22\0\2\57\1\0\10\56\1\0"+
    "\3\56\1\0\27\56\1\0\20\56\4\0\6\57\2\0\3\57\1\0"+
    "\4\57\11\0\1\57\10\0\2\56\4\0\12\55\22\0\2\57\1\0"+
    "\22\56\3\0\30\56\1\0\11\56\1\0\1\56\2\0\7\56\3\0"+
    "\1\57\4\0\6\57\1\0\1\57\1\0\10\57\22\0\2\57\15\0"+
    "\60\56\1\57\2\56\7\57\4\0\10\56\10\57\1\0\12\55\47\0"+
    "\2\56\1\0\1\56\2\0\2\56\1\0\1\56\2\0\1\56\6\0"+
    "\4\56\1\0\7\56\1\0\3\56\1\0\1\56\1\0\1\56\2\0"+
    "\2\56\1\0\4\56\1\57\2\56\6\57\1\0\2\57\1\56\2\0"+
    "\5\56\1\0\1\56\1\0\6\57\2\0\12\55\2\0\2\56\42\0"+
    "\1\56\27\0\2\57\6\0\12\55\13\0\1\57\1\0\1\57\1\0"+
    "\1\57\4\0\2\57\10\56\1\0\42\56\6\0\24\57\1\0\2\57"+
    "\4\56\4\0\10\57\1\0\44\57\11\0\1\57\71\0\42\56\1\0"+
    "\5\56\1\0\2\56\1\0\7\57\3\0\4\57\6\0\12\55\6\0"+
    "\6\56\4\57\106\0\46\56\12\0\51\56\7\0\132\56\5\0\104\56"+
    "\5\0\122\56\6\0\7\56\1\0\77\56\1\0\1\56\1\0\4\56"+
    "\2\0\7\56\1\0\1\56\1\0\4\56\2\0\47\56\1\0\1\56"+
    "\1\0\4\56\2\0\37\56\1\0\1\56\1\0\4\56\2\0\7\56"+
    "\1\0\1\56\1\0\4\56\2\0\7\56\1\0\7\56\1\0\27\56"+
    "\1\0\37\56\1\0\1\56\1\0\4\56\2\0\7\56\1\0\47\56"+
    "\1\0\23\56\16\0\11\55\56\0\125\56\14\0\u026c\56\2\0\10\56"+
    "\12\0\32\56\5\0\113\56\3\0\3\56\17\0\15\56\1\0\4\56"+
    "\3\57\13\0\22\56\3\57\13\0\22\56\2\57\14\0\15\56\1\0"+
    "\3\56\1\0\2\57\14\0\64\56\40\57\3\0\1\56\3\0\2\56"+
    "\1\57\2\0\12\55\41\0\3\57\2\0\12\55\6\0\130\56\10\0"+
    "\51\56\1\57\126\0\35\56\3\0\14\57\4\0\14\57\12\0\12\55"+
    "\36\56\2\0\5\56\u038b\0\154\56\224\0\234\56\4\0\132\56\6\0"+
    "\26\56\2\0\6\56\2\0\46\56\2\0\6\56\2\0\10\56\1\0"+
    "\1\56\1\0\1\56\1\0\1\56\1\0\37\56\2\0\65\56\1\0"+
    "\7\56\1\0\1\56\3\0\3\56\1\0\7\56\3\0\4\56\2\0"+
    "\6\56\4\0\15\56\5\0\3\56\1\0\7\56\17\0\4\57\32\0"+
    "\5\57\20\0\2\56\23\0\1\56\13\0\4\57\6\0\6\57\1\0"+
    "\1\56\15\0\1\56\40\0\22\56\36\0\15\57\4\0\1\57\3\0"+
    "\6\57\27\0\1\56\4\0\1\56\2\0\12\56\1\0\1\56\3\0"+
    "\5\56\6\0\1\56\1\0\1\56\1\0\1\56\1\0\4\56\1\0"+
    "\3\56\1\0\7\56\3\0\3\56\5\0\5\56\26\0\44\56\u0e81\0"+
    "\3\56\31\0\11\56\6\57\1\0\5\56\2\0\5\56\4\0\126\56"+
    "\2\0\2\57\2\0\3\56\1\0\137\56\5\0\50\56\4\0\136\56"+
    "\21\0\30\56\70\0\20\56\u0200\0\u19b6\56\112\0\u51a6\56\132\0\u048d\56"+
    "\u0773\0\u2ba4\56\u215c\0\u012e\56\2\0\73\56\225\0\7\56\14\0\5\56"+
    "\5\0\1\56\1\57\12\56\1\0\15\56\1\0\5\56\1\0\1\56"+
    "\1\0\2\56\1\0\2\56\1\0\154\56\41\0\u016b\56\22\0\100\56"+
    "\2\0\66\56\50\0\15\56\3\0\20\57\20\0\4\57\17\0\2\56"+
    "\30\0\3\56\31\0\1\56\6\0\5\56\1\0\207\56\2\0\1\57"+
    "\4\0\1\56\13\0\12\55\7\0\32\56\4\0\1\56\1\0\32\56"+
    "\12\0\132\56\3\0\6\56\2\0\6\56\2\0\6\56\2\0\3\56"+
    "\3\0\2\56\3\0\2\56\22\0\3\57\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\20\4\1\1\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\1\6\4\1\1\1\16\1\3\21\4\1\17"+
    "\2\4\1\20\1\0\1\21\6\4\1\0\1\22\1\0"+
    "\22\4\1\23\1\24\5\4\1\25\2\4\1\26\2\4"+
    "\1\27\3\4\1\30\3\4\1\31\1\4\1\0\1\32"+
    "\17\4\1\33\1\0\12\4\1\34\4\4\1\0\2\4"+
    "\1\35\1\36\1\4\1\37\2\4\1\40\3\4\1\41"+
    "\1\4\1\0\1\42\1\43\1\44\1\45\3\4\1\46"+
    "\1\47\1\4\1\50\1\51\1\4\1\52\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\60\0\60\0\60\0\60\0\60\0\u0480\0\u04b0\0\60"+
    "\0\60\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\60"+
    "\0\u04b0\0\60\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0630\0\60\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0120\0\u0120\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u0ba0\0\u1020\0\u1050\0\u0120"+
    "\0\u1080\0\u10b0\0\u0120\0\u10e0\0\u1110\0\u1140\0\u0120\0\u1170"+
    "\0\u11a0\0\u11d0\0\u0120\0\u1200\0\u1230\0\u0120\0\u1260\0\u1290"+
    "\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410"+
    "\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u0120\0\u1530\0\u1560"+
    "\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0"+
    "\0\u1710\0\u0120\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830"+
    "\0\u1860\0\u0120\0\u0120\0\u1890\0\u0120\0\u18c0\0\u18f0\0\u0120"+
    "\0\u1920\0\u1950\0\u1980\0\u0120\0\u19b0\0\u19e0\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u1a10\0\u1a40\0\u1a70\0\u0120\0\u0120\0\u1aa0"+
    "\0\60\0\u0120\0\u1ad0\0\u0120\0\u0120\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\7\1\20"+
    "\1\21\1\22\1\23\2\7\1\24\1\25\2\7\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\7\1\2\61\0\1\3"+
    "\57\0\1\53\1\4\60\0\1\7\1\54\21\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\5\7\1\55"+
    "\15\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\23\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\12\7\1\56\10\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\23\7\1\0\1\7\1\57\2\7\13\0"+
    "\6\7\1\0\3\7\3\0\12\7\1\60\10\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\11\7\1\61"+
    "\11\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\2\7\1\62\5\7\1\63\12\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\21\7\1\64\1\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\1\7\1\65"+
    "\21\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\16\7\1\66\4\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\4\7\1\67\16\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\7\7\1\70\13\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\12\7\1\71"+
    "\10\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\7\7\1\72\2\7\1\73\10\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\12\7\1\74\10\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\55\0\1\75\5\0"+
    "\1\7\1\76\21\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\12\7\1\77\10\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\34\0\1\100\64\0\1\36\16\0"+
    "\42\101\1\102\15\101\55\0\1\52\5\0\7\7\1\103"+
    "\13\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\2\7\1\104\20\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\12\7\1\105\10\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\1\7\1\106\21\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\6\7\1\107"+
    "\14\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\1\7\1\110\21\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\2\111\1\112\55\111\37\0\1\113\15\0\1\52"+
    "\3\0\1\53\61\0\2\7\1\114\20\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\6\7\1\115\14\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\15\7"+
    "\1\116\5\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\6\7\1\117\14\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\3\7\1\120\17\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\21\7\1\121\1\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\6\7"+
    "\1\122\14\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\5\7\1\123\15\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\20\7\1\124\2\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\1\7\1\125\21\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\15\7"+
    "\1\126\5\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\2\7\1\127\20\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\2\7\1\130\20\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\15\7\1\131\5\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\2\7"+
    "\1\132\20\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\20\7\1\133\2\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\15\7\1\134\5\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\37\0\1\113\15\0\1\75"+
    "\5\0\11\7\1\135\11\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\11\7\1\136\11\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\23\7\1\0\1\137"+
    "\3\7\13\0\6\7\1\0\3\7\3\0\6\7\1\140"+
    "\14\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\6\7\1\141\14\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\21\7\1\142\1\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\11\7\1\143\11\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\1\7\1\144"+
    "\21\7\1\0\4\7\13\0\6\7\1\0\3\7\55\0"+
    "\1\145\5\0\3\7\1\146\17\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\7\7\1\147\13\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\4\7\1\150"+
    "\16\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\4\7\1\151\16\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\13\7\1\152\7\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\4\7\1\153\16\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\4\7\1\154"+
    "\16\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\1\7\1\155\21\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\6\7\1\156\14\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\6\7\1\157\14\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\6\7\1\160"+
    "\14\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\4\7\1\161\16\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\14\7\1\162\6\7\1\0\4\7\13\0"+
    "\6\7\1\0\3\7\3\0\4\7\1\163\16\7\1\0"+
    "\4\7\13\0\6\7\1\0\3\7\3\0\12\7\1\164"+
    "\10\7\1\0\4\7\13\0\6\7\1\0\3\7\3\0"+
    "\15\7\1\121\5\7\1\0\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\23\7\1\165\4\7\13\0\6\7\1\0"+
    "\3\7\3\0\23\7\1\0\1\166\3\7\13\0\6\7"+
    "\1\0\3\7\3\0\4\7\1\167\16\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\21\7\1\170\1\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\16\7"+
    "\1\171\4\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\7\7\1\172\13\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\20\7\1\173\2\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\4\7\1\174\16\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\1\7"+
    "\1\175\21\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\2\7\1\176\20\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\12\7\1\177\10\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\2\7\1\200\20\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\11\7"+
    "\1\201\11\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\7\7\1\202\13\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\11\7\1\203\11\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\11\7\1\204\11\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\20\7"+
    "\1\205\2\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\20\7\1\206\2\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\6\0\1\207\54\0\14\7\1\210\6\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\11\7"+
    "\1\211\11\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\20\7\1\212\2\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\2\7\1\213\20\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\4\7\1\214\16\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\5\7"+
    "\1\215\15\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\2\7\1\216\20\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\15\7\1\217\5\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\14\7\1\220\6\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\6\7"+
    "\1\221\14\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\6\7\1\222\14\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\5\7\1\223\15\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\12\7\1\224\10\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\7\7"+
    "\1\225\13\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\4\7\1\226\16\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\4\0\1\227\56\0\4\7\1\230\16\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\12\7"+
    "\1\231\10\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\4\7\1\232\16\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\14\7\1\233\6\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\12\7\1\234\10\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\6\7"+
    "\1\235\14\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\12\7\1\236\10\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\7\7\1\237\13\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\4\7\1\240\16\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\7\7"+
    "\1\241\13\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\20\7\1\242\2\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\3\7\1\243\17\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\3\7\1\244\17\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\6\7"+
    "\1\245\14\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\27\0\1\246\33\0\11\7\1\247\11\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\20\7\1\250\2\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\2\7"+
    "\1\251\20\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\20\7\1\252\2\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\1\7\1\253\14\7\1\254\4\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\1\7"+
    "\1\255\21\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\4\7\1\256\16\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\6\7\1\257\14\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\1\7\1\260\21\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\7\0\1\261"+
    "\53\0\2\7\1\262\20\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7\3\0\20\7\1\263\2\7\1\0\4\7"+
    "\13\0\6\7\1\0\3\7\3\0\2\7\1\264\20\7"+
    "\1\0\4\7\13\0\6\7\1\0\3\7\3\0\2\7"+
    "\1\265\20\7\1\0\4\7\13\0\6\7\1\0\3\7"+
    "\3\0\4\7\1\266\16\7\1\0\4\7\13\0\6\7"+
    "\1\0\3\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\5\11\2\1\2\11\36\1\1\11"+
    "\1\0\1\11\6\1\1\0\1\11\1\0\51\1\1\0"+
    "\21\1\1\0\17\1\1\0\16\1\1\0\12\1\1\11"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1774) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 45: break;
        case 19: 
          { return TaraTypes.VAR;
          }
        case 46: break;
        case 10: 
          { return TaraTypes.COLON;
          }
        case 47: break;
        case 39: 
          { return TaraTypes.ABSTRACT;
          }
        case 48: break;
        case 41: 
          { return TaraTypes.EXTENSION_KEY;
          }
        case 49: break;
        case 12: 
          { return TaraTypes.OPEN_AN;
          }
        case 50: break;
        case 38: 
          { return TaraTypes.MULTIPLE;
          }
        case 51: break;
        case 21: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 52: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 53: break;
        case 35: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 54: break;
        case 16: 
          { return TaraTypes.LIST;
          }
        case 55: break;
        case 13: 
          { return TaraTypes.CLOSE_AN;
          }
        case 56: break;
        case 40: 
          { return TaraTypes.HAS_CODE;
          }
        case 57: break;
        case 27: 
          { return TaraTypes.FINAL;
          }
        case 58: break;
        case 25: 
          { return TaraTypes.BASE_KEY;
          }
        case 59: break;
        case 9: 
          { return TaraTypes.DOT;
          }
        case 60: break;
        case 30: 
          { return TaraTypes.STRING_TYPE;
          }
        case 61: break;
        case 7: 
          { return openBracket();
          }
        case 62: break;
        case 37: 
          { return TaraTypes.OPTIONAL;
          }
        case 63: break;
        case 4: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 64: break;
        case 20: 
          { return TaraTypes.UID_TYPE;
          }
        case 65: break;
        case 15: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 66: break;
        case 24: 
          { return TaraTypes.ROOT;
          }
        case 67: break;
        case 18: 
          { return TaraTypes.DOC_LINE;
          }
        case 68: break;
        case 17: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 69: break;
        case 29: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 70: break;
        case 6: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 71: break;
        case 14: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 72: break;
        case 11: 
          { return semicolon();
          }
        case 73: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 74: break;
        case 23: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 75: break;
        case 44: 
          { return TaraTypes.EXTENSIBLE_KEY;
          }
        case 76: break;
        case 28: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 77: break;
        case 36: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 78: break;
        case 22: 
          { return TaraTypes.CASE_KEY;
          }
        case 79: break;
        case 34: 
          { return TaraTypes.INT_TYPE;
          }
        case 80: break;
        case 8: 
          { return closeBracket();
          }
        case 81: break;
        case 31: 
          { return TaraTypes.CONCEPT_KEY;
          }
        case 82: break;
        case 32: 
          { return TaraTypes.PACKAGE;
          }
        case 83: break;
        case 26: 
          { return TaraTypes.WORD_KEY;
          }
        case 84: break;
        case 42: 
          { return TaraTypes.INTENTION;
          }
        case 85: break;
        case 33: 
          { return TaraTypes.GENERIC;
          }
        case 86: break;
        case 43: 
          { return TaraTypes.SINGLETON;
          }
        case 87: break;
        case 3: 
          { return newlineIndent();
          }
        case 88: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 183: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
