{
	parserClass='monet.tara.intellij.metamodel.parser.TaraParser'
	parserUtilClass="monet.tara.intellij.metamodel.parser.TaraParserUtil"
	psiVisitorName="TaraVisitor"
	extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
	implements='monet.tara.intellij.metamodel.psi.TaraPsiElement'
	psiClassPrefix='Tara'
	psiImplClassSuffix='Impl'
	psiPackage='monet.tara.intellij.metamodel.psi'
	psiImplPackage='monet.tara.intellij.metamodel.psi.impl'

	elementTypeHolderClass='monet.tara.intellij.metamodel.psi.TaraTypes'
	elementTypeClass='monet.tara.intellij.metamodel.psi.TaraElementType'
	tokenTypeClass='monet.tara.intellij.metamodel.psi.TaraTokenType'

	psiImplUtilClass='monet.tara.intellij.metamodel.psi.impl.TaraPsiImplUtil'
}

root ::= NEWLINE* header NEWLINE+ concept?  NEWLINE*

header ::=  packet importStatement*

packet ::= PACKAGE headerReference
importStatement ::= NEWLINE IMPORT_KEY headerReference
{ mixin= 'monet.tara.intellij.metamodel.psi.impl.ImportMixin'
implements='monet.tara.intellij.metamodel.psi.Import'}

concept ::= doc? signature annotations? body?
{ mixin= 'monet.tara.intellij.metamodel.psi.impl.ConceptMixin'
implements='monet.tara.intellij.metamodel.psi.Concept'}

signature::= (CASE_KEY identifier)
         | (CONCEPT_KEY modifier? identifier)
         | (CONCEPT_KEY COLON identifierReference (modifier? identifier)?)
{ pin=1 mixin= 'monet.tara.intellij.metamodel.psi.impl.SignatureMixin'
implements='monet.tara.intellij.metamodel.psi.Signature'}

body ::= NEW_LINE_INDENT (conceptConstituents NEWLINE+)+ DEDENT
{ mixin= 'monet.tara.intellij.metamodel.psi.impl.BodyMixin'
implements='monet.tara.intellij.metamodel.psi.Body'}

private conceptConstituents ::= attribute
		                      | referenceStatement
		                      | word
		                      | concept

referenceStatement::= VAR identifierReference LIST? variableNames
{mixin= 'monet.tara.intellij.metamodel.psi.impl.ReferenceStatementMixin'
implements='monet.tara.intellij.metamodel.psi.ReferenceStatement'}

attribute::= VAR     UID_TYPE IDENTIFIER_KEY (COLON stringValue)?
           | VAR     INT_TYPE (variableNames | IDENTIFIER_KEY COLON integerValue | LIST IDENTIFIER_KEY (COLON integerList)?)
           | VAR  DOUBLE_TYPE (variableNames | IDENTIFIER_KEY COLON doubleValue  | LIST IDENTIFIER_KEY (COLON doubleList)?)
           | VAR NATURAL_TYPE (variableNames | IDENTIFIER_KEY COLON naturalValue | LIST IDENTIFIER_KEY (COLON naturalList)?)
           | VAR BOOLEAN_TYPE (variableNames | IDENTIFIER_KEY COLON booleanValue | LIST IDENTIFIER_KEY (COLON booleanList)?)
           | VAR  STRING_TYPE (variableNames | IDENTIFIER_KEY COLON stringValue | LIST IDENTIFIER_KEY (COLON stringList)?)
{mixin= 'monet.tara.intellij.metamodel.psi.impl.AttributeMixin'
implements='monet.tara.intellij.metamodel.psi.Attribute'}

word::= VAR WORD_KEY IDENTIFIER_KEY NEW_LINE_INDENT (IDENTIFIER_KEY NEWLINE)+ DEDENT
{ mixin= 'monet.tara.intellij.metamodel.psi.impl.WordMixin'
implements='monet.tara.intellij.metamodel.psi.Word'}

stringValue  ::= STRING_VALUE_KEY
booleanValue ::= BOOLEAN_VALUE_KEY
integerValue ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY
doubleValue  ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY | DOUBLE_VALUE_KEY
naturalValue ::= NATURAL_VALUE_KEY

stringList  ::= LEFT_SQUARE STRING_VALUE_KEY+ RIGHT_SQUARE;
booleanList ::= LEFT_SQUARE BOOLEAN_VALUE_KEY+ RIGHT_SQUARE;
integerList ::= LEFT_SQUARE (NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY)+ RIGHT_SQUARE;
doubleList  ::= LEFT_SQUARE (NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY | DOUBLE_VALUE_KEY)+ RIGHT_SQUARE;
naturalList ::= LEFT_SQUARE NATURAL_VALUE_KEY+ RIGHT_SQUARE;

annotations ::= OPEN_AN (GENERIC | MULTIPLE | OPTIONAL | HAS_CODE | INTENTION | extensible | extension | SINGLETON | ROOT)+ CLOSE_AN
{mixin= 'monet.tara.intellij.metamodel.psi.impl.AnnotationsMixin'
implements='monet.tara.intellij.metamodel.psi.Annotations'}

extension ::= EXTENSION_KEY COLON externalReference

extensible ::= EXTENSIBLE_KEY COLON IDENTIFIER_KEY
{pin=1}

variableNames::= IDENTIFIER_KEY (COMMA IDENTIFIER_KEY)*;

modifier::= ABSTRACT
          | FINAL
          | BASE_KEY

doc::= DOC_LINE+
{ mixin= 'monet.tara.intellij.metamodel.psi.impl.DocMixin'
implements='monet.tara.intellij.metamodel.psi.Doc'}


headerReference ::= hierarchy* identifier
{ pin=2
mixin= 'monet.tara.intellij.metamodel.psi.impl.IdentifierReferenceMixin'
implements='monet.tara.intellij.metamodel.psi.HeaderReference'}

identifierReference::= hierarchy* identifier
{pin=2
mixin= 'monet.tara.intellij.metamodel.psi.impl.IdentifierReferenceMixin'
implements='monet.tara.intellij.metamodel.psi.IdentifierReference'}

externalReference ::= hierarchy* identifier
{pin=2
mixin= 'monet.tara.intellij.metamodel.psi.impl.ExternalReferenceMixin'
implements='monet.tara.intellij.metamodel.psi.ExternalReference'}

private hierarchy ::= identifier DOT

identifier::=  IDENTIFIER_KEY
{mixin= 'monet.tara.intellij.metamodel.psi.impl.IdentifierMixin'
implements='monet.tara.intellij.metamodel.psi.Identifier'}