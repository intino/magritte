/* The following code was generated by JFlex 1.4.3 on 29/05/14 9:21 */

package monet.tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import monet.tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/05/14 9:21 from the specification file
 * <tt>/Users/octavio/workspace/tara/intellij/src/monet/tara/intellij/lang/lexer/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\61\1\1\1\2\3\0\16\61\4\0\1\1\1\0\1\44\1\0"+
    "\1\60\2\0\1\56\3\0\1\47\1\0\1\31\1\41\1\0\12\57"+
    "\1\42\1\43\1\45\1\0\1\46\2\0\1\50\1\55\1\3\1\53"+
    "\4\60\1\51\4\60\1\52\3\60\1\33\1\54\3\60\1\32\3\60"+
    "\1\35\1\0\1\36\1\0\1\60\1\0\1\15\1\21\1\6\1\26"+
    "\1\7\1\22\1\17\1\30\1\12\1\60\1\16\1\23\1\13\1\5"+
    "\1\4\1\10\1\25\1\14\1\20\1\11\1\24\1\34\2\60\1\27"+
    "\1\60\1\37\1\0\1\40\1\0\41\61\2\0\4\60\4\0\1\60"+
    "\2\0\1\61\7\0\1\60\4\0\1\60\5\0\27\60\1\0\37\60"+
    "\1\0\u01ca\60\4\0\14\60\16\0\5\60\7\0\1\60\1\0\1\60"+
    "\21\0\160\61\5\60\1\0\2\60\2\0\4\60\10\0\1\60\1\0"+
    "\3\60\1\0\1\60\1\0\24\60\1\0\123\60\1\0\213\60\1\0"+
    "\5\61\2\0\236\60\11\0\46\60\2\0\1\60\7\0\47\60\11\0"+
    "\55\61\1\0\1\61\1\0\2\61\1\0\2\61\1\0\1\61\10\0"+
    "\33\60\5\0\3\60\15\0\4\61\7\0\1\60\4\0\13\61\5\0"+
    "\53\60\25\61\12\57\4\0\2\60\1\61\143\60\1\0\1\60\10\61"+
    "\1\0\6\61\2\60\2\61\1\0\4\61\2\60\12\57\3\60\2\0"+
    "\1\60\17\0\1\61\1\60\1\61\36\60\33\61\2\0\131\60\13\61"+
    "\1\60\16\0\12\57\41\60\11\61\2\60\4\0\1\60\5\0\26\60"+
    "\4\61\1\60\11\61\1\60\3\61\1\60\5\61\22\0\31\60\3\61"+
    "\244\0\4\61\66\60\3\61\1\60\22\61\1\60\7\61\12\60\2\61"+
    "\2\0\12\57\1\0\7\60\1\0\7\60\1\0\3\61\1\0\10\60"+
    "\2\0\2\60\2\0\26\60\1\0\7\60\1\0\1\60\3\0\4\60"+
    "\2\0\1\61\1\60\7\61\2\0\2\61\2\0\3\61\1\60\10\0"+
    "\1\61\4\0\2\60\1\0\3\60\2\61\2\0\12\57\4\60\7\0"+
    "\1\60\5\0\3\61\1\0\6\60\4\0\2\60\2\0\26\60\1\0"+
    "\7\60\1\0\2\60\1\0\2\60\1\0\2\60\2\0\1\61\1\0"+
    "\5\61\4\0\2\61\2\0\3\61\3\0\1\61\7\0\4\60\1\0"+
    "\1\60\7\0\12\57\2\61\3\60\1\61\13\0\3\61\1\0\11\60"+
    "\1\0\3\60\1\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60"+
    "\2\0\1\61\1\60\10\61\1\0\3\61\1\0\3\61\2\0\1\60"+
    "\17\0\2\60\2\61\2\0\12\57\1\0\1\60\17\0\3\61\1\0"+
    "\10\60\2\0\2\60\2\0\26\60\1\0\7\60\1\0\2\60\1\0"+
    "\5\60\2\0\1\61\1\60\7\61\2\0\2\61\2\0\3\61\10\0"+
    "\2\61\4\0\2\60\1\0\3\60\2\61\2\0\12\57\1\0\1\60"+
    "\20\0\1\61\1\60\1\0\6\60\3\0\3\60\1\0\4\60\3\0"+
    "\2\60\1\0\1\60\1\0\2\60\3\0\2\60\3\0\3\60\3\0"+
    "\14\60\4\0\5\61\3\0\3\61\1\0\4\61\2\0\1\60\6\0"+
    "\1\61\16\0\12\57\11\0\1\60\7\0\3\61\1\0\10\60\1\0"+
    "\3\60\1\0\27\60\1\0\12\60\1\0\5\60\3\0\1\60\7\61"+
    "\1\0\3\61\1\0\4\61\7\0\2\61\1\0\2\60\6\0\2\60"+
    "\2\61\2\0\12\57\22\0\2\61\1\0\10\60\1\0\3\60\1\0"+
    "\27\60\1\0\12\60\1\0\5\60\2\0\1\61\1\60\7\61\1\0"+
    "\3\61\1\0\4\61\7\0\2\61\7\0\1\60\1\0\2\60\2\61"+
    "\2\0\12\57\1\0\2\60\17\0\2\61\1\0\10\60\1\0\3\60"+
    "\1\0\51\60\2\0\1\60\7\61\1\0\3\61\1\0\4\61\1\60"+
    "\10\0\1\61\10\0\2\60\2\61\2\0\12\57\12\0\6\60\2\0"+
    "\2\61\1\0\22\60\3\0\30\60\1\0\11\60\1\0\1\60\2\0"+
    "\7\60\3\0\1\61\4\0\6\61\1\0\1\61\1\0\10\61\22\0"+
    "\2\61\15\0\60\60\1\61\2\60\7\61\4\0\10\60\10\61\1\0"+
    "\12\57\47\0\2\60\1\0\1\60\2\0\2\60\1\0\1\60\2\0"+
    "\1\60\6\0\4\60\1\0\7\60\1\0\3\60\1\0\1\60\1\0"+
    "\1\60\2\0\2\60\1\0\4\60\1\61\2\60\6\61\1\0\2\61"+
    "\1\60\2\0\5\60\1\0\1\60\1\0\6\61\2\0\12\57\2\0"+
    "\2\60\42\0\1\60\27\0\2\61\6\0\12\57\13\0\1\61\1\0"+
    "\1\61\1\0\1\61\4\0\2\61\10\60\1\0\44\60\4\0\24\61"+
    "\1\0\2\61\5\60\13\61\1\0\44\61\11\0\1\61\71\0\53\60"+
    "\24\61\1\60\12\57\6\0\6\60\4\61\4\60\3\61\1\60\3\61"+
    "\2\60\7\61\3\60\4\61\15\60\14\61\1\60\1\61\12\57\4\61"+
    "\2\0\46\60\12\0\53\60\1\0\1\60\3\0\u0149\60\1\0\4\60"+
    "\2\0\7\60\1\0\1\60\1\0\4\60\2\0\51\60\1\0\4\60"+
    "\2\0\41\60\1\0\4\60\2\0\7\60\1\0\1\60\1\0\4\60"+
    "\2\0\17\60\1\0\71\60\1\0\4\60\2\0\103\60\2\0\3\61"+
    "\40\0\20\60\20\0\125\60\14\0\u026c\60\2\0\21\60\1\0\32\60"+
    "\5\0\113\60\3\0\3\60\17\0\15\60\1\0\4\60\3\61\13\0"+
    "\22\60\3\61\13\0\22\60\2\61\14\0\15\60\1\0\3\60\1\0"+
    "\2\61\14\0\64\60\40\61\3\0\1\60\3\0\2\60\1\61\2\0"+
    "\12\57\41\0\3\61\2\0\12\57\6\0\130\60\10\0\51\60\1\61"+
    "\1\60\5\0\106\60\12\0\35\60\3\0\14\61\4\0\14\61\12\0"+
    "\12\57\36\60\2\0\5\60\13\0\54\60\4\0\21\61\7\60\2\61"+
    "\6\0\12\57\46\0\27\60\5\61\4\0\65\60\12\61\1\0\35\61"+
    "\2\0\1\61\12\57\6\0\12\57\15\0\1\60\130\0\5\61\57\60"+
    "\21\61\7\60\4\0\12\57\21\0\11\61\14\0\3\61\36\60\12\61"+
    "\3\0\2\60\12\57\6\0\46\60\16\61\14\0\44\60\24\61\10\0"+
    "\12\57\3\0\3\60\12\57\44\60\122\0\3\61\1\0\25\61\4\60"+
    "\1\61\4\60\1\61\15\0\300\60\47\61\25\0\4\61\u0116\60\2\0"+
    "\6\60\2\0\46\60\2\0\6\60\2\0\10\60\1\0\1\60\1\0"+
    "\1\60\1\0\1\60\1\0\37\60\2\0\65\60\1\0\7\60\1\0"+
    "\1\60\3\0\3\60\1\0\7\60\3\0\4\60\2\0\6\60\4\0"+
    "\15\60\5\0\3\60\1\0\7\60\16\0\5\61\32\0\5\61\20\0"+
    "\2\60\23\0\1\60\13\0\5\61\5\0\6\61\1\0\1\60\15\0"+
    "\1\60\20\0\15\60\3\0\32\60\26\0\15\61\4\0\1\61\3\0"+
    "\14\61\21\0\1\60\4\0\1\60\2\0\12\60\1\0\1\60\3\0"+
    "\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0\4\60\1\0"+
    "\13\60\2\0\4\60\5\0\5\60\4\0\1\60\21\0\51\60\u0a77\0"+
    "\57\60\1\0\57\60\1\0\205\60\6\0\4\60\3\61\16\0\46\60"+
    "\12\0\66\60\11\0\1\60\17\0\1\61\27\60\11\0\7\60\1\0"+
    "\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0\7\60\1\0"+
    "\7\60\1\0\7\60\1\0\40\61\57\0\1\60\u01d5\0\3\60\31\0"+
    "\11\60\6\61\1\0\5\60\2\0\5\60\4\0\126\60\2\0\2\61"+
    "\2\0\3\60\1\0\132\60\1\0\4\60\5\0\51\60\3\0\136\60"+
    "\21\0\33\60\65\0\20\60\u0200\0\u19b6\60\112\0\u51cc\60\64\0\u048d\60"+
    "\103\0\56\60\2\0\u010d\60\3\0\20\60\12\57\2\60\24\0\57\60"+
    "\1\61\14\0\2\61\1\0\31\60\10\0\120\60\2\61\45\0\11\60"+
    "\2\0\147\60\2\0\4\60\1\0\2\60\16\0\12\60\120\0\10\60"+
    "\1\61\3\60\1\61\4\60\1\61\27\60\5\61\20\0\1\60\7\0"+
    "\64\60\14\0\2\61\62\60\21\61\13\0\12\57\6\0\22\61\6\60"+
    "\3\0\1\60\4\0\12\57\34\60\10\61\2\0\27\60\15\61\14\0"+
    "\35\60\3\0\4\61\57\60\16\61\16\0\1\60\12\57\46\0\51\60"+
    "\16\61\11\0\3\60\1\61\10\60\2\61\2\0\12\57\6\0\27\60"+
    "\3\0\1\60\1\61\4\0\60\60\1\61\1\60\3\61\2\60\2\61"+
    "\5\60\2\61\1\60\1\61\1\60\30\0\3\60\43\0\6\60\2\0"+
    "\6\60\2\0\6\60\11\0\7\60\1\0\7\60\221\0\43\60\10\61"+
    "\1\0\2\61\2\0\12\57\6\0\u2ba4\60\14\0\27\60\4\0\61\60"+
    "\u2104\0\u012e\60\2\0\76\60\2\0\152\60\46\0\7\60\14\0\5\60"+
    "\5\0\1\60\1\61\12\60\1\0\15\60\1\0\5\60\1\0\1\60"+
    "\1\0\2\60\1\0\2\60\1\0\154\60\41\0\u016b\60\22\0\100\60"+
    "\2\0\66\60\50\0\15\60\3\0\20\61\20\0\7\61\14\0\2\60"+
    "\30\0\3\60\31\0\1\60\6\0\5\60\1\0\207\60\2\0\1\61"+
    "\4\0\1\60\13\0\12\57\7\0\32\60\4\0\1\60\1\0\32\60"+
    "\13\0\131\60\3\0\6\60\2\0\6\60\2\0\6\60\2\0\3\60"+
    "\3\0\2\60\3\0\2\60\22\0\3\61\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\16\4\1\1\3\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\1\6\4\1\1\1\16\1\3\21\4\1\17"+
    "\3\4\1\20\1\0\1\21\6\4\1\0\1\22\1\0"+
    "\23\4\1\23\6\4\1\24\1\4\1\25\2\4\1\26"+
    "\3\4\1\27\4\4\1\30\1\4\1\0\1\31\21\4"+
    "\1\32\1\0\1\4\1\33\11\4\1\34\5\4\1\0"+
    "\3\4\1\35\1\36\1\4\1\37\1\4\1\40\4\4"+
    "\1\41\1\4\1\0\1\4\1\42\1\43\1\44\1\45"+
    "\1\4\1\46\1\47\1\50\1\4\1\51\1\52\1\53"+
    "\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\62"+
    "\0\62\0\62\0\62\0\62\0\u047e\0\u04b0\0\62\0\62"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\62"+
    "\0\u04b0\0\62\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0640\0\62\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\372\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u0c1c\0\u1130\0\372"+
    "\0\u1162\0\u1194\0\372\0\u11c6\0\u11f8\0\u122a\0\372\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\372\0\u1324\0\u1356\0\372\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\372\0\u16da\0\u170c\0\372\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\372\0\u1900\0\u1932"+
    "\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\372"+
    "\0\372\0\u1ac2\0\372\0\u1af4\0\372\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u1bbc\0\372\0\u1bee\0\u1c20\0\u1c52\0\372\0\372\0\372"+
    "\0\372\0\u1c84\0\372\0\372\0\372\0\u1cb6\0\62\0\372"+
    "\0\372\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\6\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\6\1\16\1\17"+
    "\1\20\1\21\5\6\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\6\1\2\63\0\1\3\61\0"+
    "\1\52\1\4\62\0\1\6\1\53\24\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\26\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\12\6\1\54\13\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\11\6"+
    "\1\55\1\56\13\6\1\0\3\6\13\0\6\6\1\0"+
    "\3\6\3\0\11\6\1\57\14\6\1\0\3\6\13\0"+
    "\6\6\1\0\3\6\3\0\2\6\1\60\5\6\1\61"+
    "\15\6\1\0\3\6\13\0\6\6\1\0\3\6\3\0"+
    "\21\6\1\62\4\6\1\0\3\6\13\0\6\6\1\0"+
    "\3\6\3\0\1\6\1\63\2\6\1\64\21\6\1\0"+
    "\3\6\13\0\6\6\1\0\3\6\3\0\16\6\1\65"+
    "\7\6\1\0\3\6\13\0\6\6\1\0\3\6\3\0"+
    "\4\6\1\66\21\6\1\0\3\6\13\0\6\6\1\0"+
    "\3\6\3\0\7\6\1\67\16\6\1\0\3\6\13\0"+
    "\6\6\1\0\3\6\3\0\12\6\1\70\13\6\1\0"+
    "\3\6\13\0\6\6\1\0\3\6\3\0\7\6\1\71"+
    "\2\6\1\72\13\6\1\0\3\6\13\0\6\6\1\0"+
    "\3\6\3\0\12\6\1\73\13\6\1\0\3\6\13\0"+
    "\6\6\1\0\3\6\57\0\1\74\5\0\1\6\1\75"+
    "\24\6\1\0\3\6\13\0\6\6\1\0\3\6\3\0"+
    "\4\6\1\76\21\6\1\0\3\6\13\0\6\6\1\0"+
    "\3\6\3\0\12\6\1\77\13\6\1\0\3\6\13\0"+
    "\6\6\1\0\3\6\36\0\1\100\66\0\1\35\16\0"+
    "\44\101\1\102\15\101\57\0\1\51\5\0\20\6\1\103"+
    "\5\6\1\0\3\6\13\0\6\6\1\0\3\6\3\0"+
    "\2\6\1\104\23\6\1\0\3\6\13\0\6\6\1\0"+
    "\3\6\3\0\12\6\1\105\13\6\1\0\3\6\13\0"+
    "\6\6\1\0\3\6\3\0\1\6\1\106\24\6\1\0"+
    "\3\6\13\0\6\6\1\0\3\6\3\0\6\6\1\107"+
    "\17\6\1\0\3\6\13\0\6\6\1\0\3\6\3\0"+
    "\1\6\1\110\24\6\1\0\3\6\13\0\6\6\1\0"+
    "\3\6\2\111\1\112\57\111\41\0\1\113\15\0\1\51"+
    "\3\0\1\52\63\0\2\6\1\114\23\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\15\6\1\115\10\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\1\6"+
    "\1\116\24\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\3\6\1\117\22\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\21\6\1\120\4\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\6\6\1\121\17\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\5\6"+
    "\1\122\20\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\20\6\1\123\5\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\1\6\1\124\24\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\22\6\1\125\3\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\15\6"+
    "\1\126\10\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\2\6\1\127\23\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\2\6\1\130\23\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\15\6\1\131\10\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\2\6"+
    "\1\132\23\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\20\6\1\133\5\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\15\6\1\134\10\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\41\0\1\113\15\0\1\74"+
    "\5\0\11\6\1\135\14\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\15\6\1\136\10\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\11\6\1\137\14\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\7\6"+
    "\1\140\16\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\6\6\1\141\17\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\6\6\1\142\17\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\21\6\1\143\4\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\11\6"+
    "\1\144\14\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\1\6\1\145\24\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\57\0\1\146\5\0\3\6\1\147\22\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\4\6"+
    "\1\150\21\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\5\6\1\151\20\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\13\6\1\152\12\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\4\6\1\153\21\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\4\6"+
    "\1\154\21\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\1\6\1\155\24\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\6\6\1\156\17\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\6\6\1\157\17\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\21\6"+
    "\1\160\4\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\6\6\1\161\17\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\4\6\1\162\21\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\14\6\1\163\11\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\4\6"+
    "\1\164\21\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\12\6\1\165\13\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\15\6\1\120\10\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\26\6\1\166\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\23\6\1\167\2\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\1\6"+
    "\1\170\24\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\12\6\1\171\13\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\4\6\1\172\21\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\21\6\1\173\4\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\16\6"+
    "\1\174\7\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\7\6\1\175\16\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\20\6\1\176\5\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\4\6\1\177\21\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\4\6"+
    "\1\200\21\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\12\6\1\201\13\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\2\6\1\202\23\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\11\6\1\203\14\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\7\6"+
    "\1\204\16\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\7\6\1\205\16\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\11\6\1\206\14\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\11\6\1\207\14\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\20\6"+
    "\1\210\5\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\20\6\1\211\5\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\5\0\1\212\57\0\21\6\1\213\4\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\15\6"+
    "\1\214\10\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\14\6\1\215\11\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\11\6\1\216\14\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\20\6\1\217\5\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\2\6"+
    "\1\220\23\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\4\6\1\221\21\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\5\6\1\222\20\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\11\6\1\223\14\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\14\6"+
    "\1\224\11\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\6\6\1\225\17\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\6\6\1\226\17\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\5\6\1\227\20\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\11\6"+
    "\1\230\14\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\12\6\1\231\13\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\7\6\1\232\16\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\4\6\1\233\21\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\15\0\1\234"+
    "\47\0\11\6\1\235\14\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\4\6\1\236\21\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\12\6\1\237\13\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\4\6"+
    "\1\240\21\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\14\6\1\241\11\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\12\6\1\242\13\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\6\6\1\243\17\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\6\6"+
    "\1\244\17\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\4\6\1\245\21\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\7\6\1\246\16\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\20\6\1\247\5\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\4\6"+
    "\1\250\21\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\3\6\1\251\22\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\3\6\1\252\22\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\6\6\1\253\17\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\13\0\1\254"+
    "\51\0\3\6\1\255\22\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\11\6\1\256\14\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\20\6\1\257\5\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\2\6"+
    "\1\260\23\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\24\6\1\261\1\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\1\6\1\262\24\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\3\0\4\6\1\263\21\6"+
    "\1\0\3\6\13\0\6\6\1\0\3\6\3\0\23\6"+
    "\1\264\2\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\6\6\1\265\17\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\1\6\1\266\24\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6\7\0\1\267\55\0\4\6"+
    "\1\270\21\6\1\0\3\6\13\0\6\6\1\0\3\6"+
    "\3\0\2\6\1\271\23\6\1\0\3\6\13\0\6\6"+
    "\1\0\3\6\3\0\2\6\1\272\23\6\1\0\3\6"+
    "\13\0\6\6\1\0\3\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\5\11\2\1\2\11\37\1\1\11"+
    "\1\0\1\11\6\1\1\0\1\11\1\0\52\1\1\0"+
    "\23\1\1\0\21\1\1\0\17\1\1\0\12\1\1\11"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 45: break;
        case 19: 
          { return TaraTypes.VAR;
          }
        case 46: break;
        case 10: 
          { return TaraTypes.COLON;
          }
        case 47: break;
        case 40: 
          { return TaraTypes.ABSTRACT;
          }
        case 48: break;
        case 12: 
          { return TaraTypes.OPEN_AN;
          }
        case 49: break;
        case 38: 
          { return TaraTypes.MULTIPLE;
          }
        case 50: break;
        case 20: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 51: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 52: break;
        case 35: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 53: break;
        case 16: 
          { return TaraTypes.LIST;
          }
        case 54: break;
        case 13: 
          { return TaraTypes.CLOSE_AN;
          }
        case 55: break;
        case 26: 
          { return TaraTypes.FINAL;
          }
        case 56: break;
        case 24: 
          { return TaraTypes.BASE_KEY;
          }
        case 57: break;
        case 9: 
          { return TaraTypes.DOT;
          }
        case 58: break;
        case 43: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 59: break;
        case 30: 
          { return TaraTypes.STRING_TYPE;
          }
        case 60: break;
        case 7: 
          { return openBracket();
          }
        case 61: break;
        case 4: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 62: break;
        case 41: 
          { return TaraTypes.HAS_NAME;
          }
        case 63: break;
        case 39: 
          { return TaraTypes.REQUIRED;
          }
        case 64: break;
        case 15: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 65: break;
        case 23: 
          { return TaraTypes.ROOT;
          }
        case 66: break;
        case 18: 
          { return TaraTypes.DOC_LINE;
          }
        case 67: break;
        case 17: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 68: break;
        case 37: 
          { return TaraTypes.PROPERTY;
          }
        case 69: break;
        case 29: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 70: break;
        case 6: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 71: break;
        case 14: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 72: break;
        case 11: 
          { return semicolon();
          }
        case 73: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 74: break;
        case 42: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 75: break;
        case 27: 
          { return TaraTypes.ALIAS_TYPE;
          }
        case 76: break;
        case 22: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 77: break;
        case 28: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 78: break;
        case 36: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 79: break;
        case 21: 
          { return TaraTypes.CASE_KEY;
          }
        case 80: break;
        case 34: 
          { return TaraTypes.INT_TYPE;
          }
        case 81: break;
        case 8: 
          { return closeBracket();
          }
        case 82: break;
        case 31: 
          { return TaraTypes.CONCEPT_KEY;
          }
        case 83: break;
        case 32: 
          { return TaraTypes.PACKAGE;
          }
        case 84: break;
        case 25: 
          { return TaraTypes.WORD_KEY;
          }
        case 85: break;
        case 33: 
          { return TaraTypes.GENERIC;
          }
        case 86: break;
        case 44: 
          { return TaraTypes.SINGLETON;
          }
        case 87: break;
        case 3: 
          { return newlineIndent();
          }
        case 88: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 187: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
