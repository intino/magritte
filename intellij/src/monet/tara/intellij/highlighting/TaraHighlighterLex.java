/* The following code was generated by JFlex 1.4.3 on 24/04/14 16:37 */

package monet.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import monet.tara.intellij.metamodel.psi.TaraTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/04/14 16:37 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/monet/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\55\1\56\1\52\3\0\16\55\4\0\1\56\1\0\1\37\1\0"+
    "\1\54\2\0\1\51\3\0\1\42\1\0\1\25\1\35\1\0\12\53"+
    "\1\36\1\34\1\40\1\0\1\41\2\0\1\54\1\50\1\1\1\46"+
    "\4\54\1\44\4\54\1\45\4\54\1\47\1\54\1\43\1\54\1\30"+
    "\3\54\1\32\1\0\1\33\1\0\1\54\1\0\1\13\1\22\1\4"+
    "\1\26\1\5\1\21\1\15\1\16\1\10\1\54\1\14\1\17\1\11"+
    "\1\3\1\2\1\6\1\54\1\12\1\23\1\7\1\24\1\31\1\54"+
    "\1\27\1\20\1\54\1\34\1\0\1\34\1\0\41\55\2\0\4\54"+
    "\4\0\1\54\2\0\1\55\7\0\1\54\4\0\1\54\5\0\27\54"+
    "\1\0\37\54\1\0\u013f\54\31\0\162\54\4\0\14\54\16\0\5\54"+
    "\11\0\1\54\21\0\130\55\5\0\23\55\12\0\1\54\13\0\1\54"+
    "\1\0\3\54\1\0\1\54\1\0\24\54\1\0\54\54\1\0\46\54"+
    "\1\0\5\54\4\0\202\54\1\0\4\55\3\0\105\54\1\0\46\54"+
    "\2\0\2\54\6\0\20\54\41\0\46\54\2\0\1\54\7\0\47\54"+
    "\11\0\21\55\1\0\27\55\1\0\3\55\1\0\1\55\1\0\2\55"+
    "\1\0\1\55\13\0\33\54\5\0\3\54\15\0\4\55\14\0\6\55"+
    "\13\0\32\54\5\0\13\54\16\55\7\0\12\53\4\0\2\54\1\55"+
    "\143\54\1\0\1\54\10\55\1\0\6\55\2\54\2\55\1\0\4\55"+
    "\2\54\12\53\3\54\2\0\1\54\17\0\1\55\1\54\1\55\36\54"+
    "\33\55\2\0\3\54\60\0\46\54\13\55\1\54\u014f\0\3\55\66\54"+
    "\2\0\1\55\1\54\20\55\2\0\1\54\4\55\3\0\12\54\2\55"+
    "\2\0\12\53\21\0\3\55\1\0\10\54\2\0\2\54\2\0\26\54"+
    "\1\0\7\54\1\0\1\54\3\0\4\54\2\0\1\55\1\54\7\55"+
    "\2\0\2\55\2\0\3\55\11\0\1\55\4\0\2\54\1\0\3\54"+
    "\2\55\2\0\12\53\4\54\15\0\3\55\1\0\6\54\4\0\2\54"+
    "\2\0\26\54\1\0\7\54\1\0\2\54\1\0\2\54\1\0\2\54"+
    "\2\0\1\55\1\0\5\55\4\0\2\55\2\0\3\55\13\0\4\54"+
    "\1\0\1\54\7\0\12\53\2\55\3\54\14\0\3\55\1\0\11\54"+
    "\1\0\3\54\1\0\26\54\1\0\7\54\1\0\2\54\1\0\5\54"+
    "\2\0\1\55\1\54\10\55\1\0\3\55\1\0\3\55\2\0\1\54"+
    "\17\0\2\54\2\55\2\0\12\53\1\0\1\54\17\0\3\55\1\0"+
    "\10\54\2\0\2\54\2\0\26\54\1\0\7\54\1\0\2\54\1\0"+
    "\5\54\2\0\1\55\1\54\6\55\3\0\2\55\2\0\3\55\10\0"+
    "\2\55\4\0\2\54\1\0\3\54\4\0\12\53\1\0\1\54\20\0"+
    "\1\55\1\54\1\0\6\54\3\0\3\54\1\0\4\54\3\0\2\54"+
    "\1\0\1\54\1\0\2\54\3\0\2\54\3\0\3\54\3\0\10\54"+
    "\1\0\3\54\4\0\5\55\3\0\3\55\1\0\4\55\11\0\1\55"+
    "\17\0\11\53\11\0\1\54\7\0\3\55\1\0\10\54\1\0\3\54"+
    "\1\0\27\54\1\0\12\54\1\0\5\54\4\0\7\55\1\0\3\55"+
    "\1\0\4\55\7\0\2\55\11\0\2\54\4\0\12\53\22\0\2\55"+
    "\1\0\10\54\1\0\3\54\1\0\27\54\1\0\12\54\1\0\5\54"+
    "\2\0\1\55\1\54\7\55\1\0\3\55\1\0\4\55\7\0\2\55"+
    "\7\0\1\54\1\0\2\54\4\0\12\53\22\0\2\55\1\0\10\54"+
    "\1\0\3\54\1\0\27\54\1\0\20\54\4\0\6\55\2\0\3\55"+
    "\1\0\4\55\11\0\1\55\10\0\2\54\4\0\12\53\22\0\2\55"+
    "\1\0\22\54\3\0\30\54\1\0\11\54\1\0\1\54\2\0\7\54"+
    "\3\0\1\55\4\0\6\55\1\0\1\55\1\0\10\55\22\0\2\55"+
    "\15\0\60\54\1\55\2\54\7\55\4\0\10\54\10\55\1\0\12\53"+
    "\47\0\2\54\1\0\1\54\2\0\2\54\1\0\1\54\2\0\1\54"+
    "\6\0\4\54\1\0\7\54\1\0\3\54\1\0\1\54\1\0\1\54"+
    "\2\0\2\54\1\0\4\54\1\55\2\54\6\55\1\0\2\55\1\54"+
    "\2\0\5\54\1\0\1\54\1\0\6\55\2\0\12\53\2\0\2\54"+
    "\42\0\1\54\27\0\2\55\6\0\12\53\13\0\1\55\1\0\1\55"+
    "\1\0\1\55\4\0\2\55\10\54\1\0\42\54\6\0\24\55\1\0"+
    "\2\55\4\54\4\0\10\55\1\0\44\55\11\0\1\55\71\0\42\54"+
    "\1\0\5\54\1\0\2\54\1\0\7\55\3\0\4\55\6\0\12\53"+
    "\6\0\6\54\4\55\106\0\46\54\12\0\51\54\7\0\132\54\5\0"+
    "\104\54\5\0\122\54\6\0\7\54\1\0\77\54\1\0\1\54\1\0"+
    "\4\54\2\0\7\54\1\0\1\54\1\0\4\54\2\0\47\54\1\0"+
    "\1\54\1\0\4\54\2\0\37\54\1\0\1\54\1\0\4\54\2\0"+
    "\7\54\1\0\1\54\1\0\4\54\2\0\7\54\1\0\7\54\1\0"+
    "\27\54\1\0\37\54\1\0\1\54\1\0\4\54\2\0\7\54\1\0"+
    "\47\54\1\0\23\54\16\0\11\53\56\0\125\54\14\0\u026c\54\2\0"+
    "\10\54\12\0\32\54\5\0\113\54\3\0\3\54\17\0\15\54\1\0"+
    "\4\54\3\55\13\0\22\54\3\55\13\0\22\54\2\55\14\0\15\54"+
    "\1\0\3\54\1\0\2\55\14\0\64\54\40\55\3\0\1\54\3\0"+
    "\2\54\1\55\2\0\12\53\41\0\3\55\2\0\12\53\6\0\130\54"+
    "\10\0\51\54\1\55\126\0\35\54\3\0\14\55\4\0\14\55\12\0"+
    "\12\53\36\54\2\0\5\54\u038b\0\154\54\224\0\234\54\4\0\132\54"+
    "\6\0\26\54\2\0\6\54\2\0\46\54\2\0\6\54\2\0\10\54"+
    "\1\0\1\54\1\0\1\54\1\0\1\54\1\0\37\54\2\0\65\54"+
    "\1\0\7\54\1\0\1\54\3\0\3\54\1\0\7\54\3\0\4\54"+
    "\2\0\6\54\4\0\15\54\5\0\3\54\1\0\7\54\17\0\4\55"+
    "\32\0\5\55\20\0\2\54\23\0\1\54\13\0\4\55\6\0\6\55"+
    "\1\0\1\54\15\0\1\54\40\0\22\54\36\0\15\55\4\0\1\55"+
    "\3\0\6\55\27\0\1\54\4\0\1\54\2\0\12\54\1\0\1\54"+
    "\3\0\5\54\6\0\1\54\1\0\1\54\1\0\1\54\1\0\4\54"+
    "\1\0\3\54\1\0\7\54\3\0\3\54\5\0\5\54\26\0\44\54"+
    "\u0e81\0\3\54\31\0\11\54\6\55\1\0\5\54\2\0\5\54\4\0"+
    "\126\54\2\0\2\55\2\0\3\54\1\0\137\54\5\0\50\54\4\0"+
    "\136\54\21\0\30\54\70\0\20\54\u0200\0\u19b6\54\112\0\u51a6\54\132\0"+
    "\u048d\54\u0773\0\u2ba4\54\u215c\0\u012e\54\2\0\73\54\225\0\7\54\14\0"+
    "\5\54\5\0\1\54\1\55\12\54\1\0\15\54\1\0\5\54\1\0"+
    "\1\54\1\0\2\54\1\0\2\54\1\0\154\54\41\0\u016b\54\22\0"+
    "\100\54\2\0\66\54\50\0\15\54\3\0\20\55\20\0\4\55\17\0"+
    "\2\54\30\0\3\54\31\0\1\54\6\0\5\54\1\0\207\54\2\0"+
    "\1\55\4\0\1\54\13\0\12\53\7\0\32\54\4\0\1\54\1\0"+
    "\32\54\12\0\132\54\3\0\6\54\2\0\6\54\2\0\6\54\2\0"+
    "\3\54\3\0\2\54\3\0\2\54\22\0\3\55\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\16\2\1\1\2\2\1\3\1\4\1\3"+
    "\1\5\1\6\1\1\1\7\1\10\1\1\6\2\1\1"+
    "\1\11\1\12\1\11\21\2\1\13\2\2\1\14\1\0"+
    "\1\15\6\2\1\0\1\16\1\0\22\2\1\17\1\20"+
    "\1\21\4\2\1\22\5\2\1\23\4\2\1\24\2\2"+
    "\1\0\2\2\1\25\13\2\1\26\3\2\1\0\1\27"+
    "\13\2\1\30\3\2\1\0\2\2\1\31\1\32\1\2"+
    "\1\33\3\2\1\34\3\2\1\35\1\0\1\2\1\36"+
    "\1\37\1\40\4\2\1\41\1\42\1\43\1\2\1\44"+
    "\2\2\1\45\1\46\1\47\1\2\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\57\0\57\0\57\0\57"+
    "\0\u03ac\0\57\0\57\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497"+
    "\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f"+
    "\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\57\0\u03ac\0\57\0\u098c\0\u09bb\0\u09ea"+
    "\0\u0a19\0\u0a48\0\u0a77\0\u0524\0\57\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4"+
    "\0\274\0\274\0\274\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0aa6"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\274\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\274\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142"+
    "\0\274\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b"+
    "\0\u12ba\0\u12e9\0\u1318\0\u1347\0\274\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\274\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\274\0\u1637\0\u1666"+
    "\0\u1695\0\u16c4\0\u16f3\0\u1722\0\274\0\274\0\u1751\0\274"+
    "\0\u1780\0\u17af\0\u17de\0\274\0\u180d\0\u183c\0\u186b\0\274"+
    "\0\u189a\0\u18c9\0\274\0\274\0\274\0\u18f8\0\u1927\0\u1956"+
    "\0\u1985\0\274\0\274\0\57\0\u19b4\0\274\0\u19e3\0\u1a12"+
    "\0\274\0\274\0\274\0\u1a41\0\274";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\5\1\15\1\16\2\5\1\17"+
    "\1\5\1\20\1\5\1\21\2\5\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\5\1\2\1\46\60\0\1\5\1\47\22\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\5\5"+
    "\1\50\16\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\24\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\24\5\1\0\1\5\1\51\2\5\11\0\6\5"+
    "\2\0\3\5\2\0\1\5\1\52\10\5\1\53\11\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\11\5"+
    "\1\54\12\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\55\5\5\1\56\13\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\1\5\1\57\21\5"+
    "\1\60\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\1\5\1\61\22\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\21\5\1\62\2\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\4\5\1\63\17\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\12\5\1\64"+
    "\11\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\7\5\1\65\2\5\1\66\11\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\7\5\1\67\14\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\54\0\1\70\4\0"+
    "\1\5\1\71\22\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\12\5\1\72\11\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\34\0\1\73\23\0\37\74\1\75"+
    "\17\74\53\0\1\45\4\0\7\5\1\76\14\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\2\5\1\77"+
    "\21\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\12\5\1\100\11\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\1\5\1\101\22\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\6\5\1\102\15\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\1\5\1\103"+
    "\22\5\1\0\4\5\11\0\6\5\2\0\3\5\1\0"+
    "\52\104\1\105\4\104\52\0\1\44\41\0\1\106\15\0"+
    "\1\45\61\0\1\46\1\0\2\5\1\107\21\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\6\5\1\110"+
    "\15\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\6\5\1\111\15\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\16\5\1\112\5\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\3\5\1\113\20\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\23\5\1\114"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\6\5"+
    "\1\115\15\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\5\5\1\116\16\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\11\5\1\117\12\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\16\5\1\120\5\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\1\5"+
    "\1\121\22\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\22\5\1\122\1\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\2\5\1\123\21\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\22\5\1\124\1\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\2\5"+
    "\1\125\21\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\16\5\1\126\5\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\2\5\1\127\21\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\36\0\1\106\15\0\1\70"+
    "\4\0\11\5\1\130\12\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\11\5\1\131\12\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\24\5\1\0\1\132"+
    "\3\5\11\0\6\5\2\0\3\5\2\0\6\5\1\133"+
    "\15\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\6\5\1\134\15\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\23\5\1\135\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\11\5\1\136\12\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\1\5\1\137\22\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\54\0\1\140"+
    "\4\0\3\5\1\141\20\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\7\5\1\142\14\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\4\5\1\143\17\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\17\5"+
    "\1\144\4\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\13\5\1\145\10\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\4\5\1\146\17\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\4\5\1\147\17\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\1\5"+
    "\1\150\22\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\5\5\1\151\16\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\6\5\1\152\15\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\6\5\1\153\15\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\6\5"+
    "\1\154\15\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\4\5\1\155\17\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\24\5\1\156\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\12\5\1\157\11\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\22\5\1\114\1\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\14\5"+
    "\1\160\7\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\24\5\1\0\1\161\3\5\11\0\6\5\2\0"+
    "\3\5\2\0\23\5\1\162\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\21\5\1\163\2\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\7\5\1\164\14\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\16\5"+
    "\1\165\5\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\4\5\1\166\17\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\1\5\1\167\22\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\2\5\1\170\21\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\10\5"+
    "\1\171\13\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\12\5\1\172\11\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\2\5\1\173\21\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\11\5\1\174\12\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\15\5"+
    "\1\175\6\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\7\5\1\176\14\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\11\5\1\177\12\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\11\5\1\200\12\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\5\0\1\201"+
    "\53\0\16\5\1\202\5\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\16\5\1\203\5\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\11\5\1\204\12\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\16\5"+
    "\1\205\5\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\206\21\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\4\5\1\207\17\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\5\5\1\210\16\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\2\5"+
    "\1\211\21\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\22\5\1\212\1\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\1\5\1\213\22\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\14\5\1\214\7\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\6\5"+
    "\1\215\15\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\6\5\1\216\15\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\5\5\1\217\16\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\12\5\1\220\11\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\7\5"+
    "\1\221\14\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\3\0\1\222\55\0\4\5\1\223\17\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\12\5\1\224\11\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\4\5"+
    "\1\225\17\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\14\5\1\226\7\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\12\5\1\227\11\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\6\5\1\230\15\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\12\5"+
    "\1\231\11\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\7\5\1\232\14\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\11\5\1\233\12\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\4\5\1\234\17\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\7\5"+
    "\1\235\14\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\16\5\1\236\5\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\3\5\1\237\20\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\3\5\1\240\20\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\27\0\1\241"+
    "\31\0\6\5\1\242\15\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\16\5\1\243\5\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\2\5\1\244\21\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\16\5"+
    "\1\245\5\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\1\5\1\246\17\5\1\247\2\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\5\5\1\250\16\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\1\5"+
    "\1\251\22\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\4\5\1\252\17\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\6\5\1\253\15\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\6\0\1\254\52\0\1\5"+
    "\1\255\22\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\256\21\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\16\5\1\257\5\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\15\5\1\260\6\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\2\5"+
    "\1\261\21\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\262\21\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\4\5\1\263\17\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\7\5\1\264\14\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\3\5"+
    "\1\265\20\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6768];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\4\11\1\1\2\11\37\1\1\11"+
    "\1\0\1\11\6\1\1\0\1\11\1\0\47\1\1\0"+
    "\22\1\1\0\20\1\1\0\16\1\1\0\12\1\1\11"+
    "\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[181];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1776) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 41: break;
        case 21: 
          { return TaraTypes.WORD;
          }
        case 42: break;
        case 15: 
          { return TaraTypes.VAR;
          }
        case 43: break;
        case 6: 
          { return TaraTypes.COLON;
          }
        case 44: break;
        case 34: 
          { return TaraTypes.ABSTRACT;
          }
        case 45: break;
        case 36: 
          { return TaraTypes.EXTENSION_KEY;
          }
        case 46: break;
        case 7: 
          { return TaraTypes.OPEN_AN;
          }
        case 47: break;
        case 33: 
          { return TaraTypes.MULTIPLE;
          }
        case 48: break;
        case 18: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 49: break;
        case 9: 
          { return TokenType.WHITE_SPACE;
          }
        case 50: break;
        case 30: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 51: break;
        case 12: 
          { return TaraTypes.LIST;
          }
        case 52: break;
        case 8: 
          { return TaraTypes.CLOSE_AN;
          }
        case 53: break;
        case 35: 
          { return TaraTypes.HAS_CODE;
          }
        case 54: break;
        case 22: 
          { return TaraTypes.MORPH_KEY;
          }
        case 55: break;
        case 40: 
          { return TaraTypes.POLYMORPHIC_KEY;
          }
        case 56: break;
        case 23: 
          { return TaraTypes.FINAL;
          }
        case 57: break;
        case 5: 
          { return TaraTypes.DOT;
          }
        case 58: break;
        case 24: 
          { return TaraTypes.IMPORT;
          }
        case 59: break;
        case 26: 
          { return TaraTypes.STRING_TYPE;
          }
        case 60: break;
        case 32: 
          { return TaraTypes.OPTIONAL;
          }
        case 61: break;
        case 2: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 62: break;
        case 16: 
          { return TaraTypes.UID_TYPE;
          }
        case 63: break;
        case 11: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 64: break;
        case 20: 
          { return TaraTypes.ROOT;
          }
        case 65: break;
        case 14: 
          { return TaraTypes.DOC_LINE;
          }
        case 66: break;
        case 13: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 67: break;
        case 25: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 68: break;
        case 4: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 69: break;
        case 10: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 70: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 71: break;
        case 19: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 72: break;
        case 39: 
          { return TaraTypes.EXTENSIBLE_KEY;
          }
        case 73: break;
        case 31: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 74: break;
        case 17: 
          { return TaraTypes.INT_TYPE;
          }
        case 75: break;
        case 27: 
          { return TaraTypes.CONCEPT_KEY;
          }
        case 76: break;
        case 28: 
          { return TaraTypes.PACKAGE;
          }
        case 77: break;
        case 37: 
          { return TaraTypes.INTENTION;
          }
        case 78: break;
        case 29: 
          { return TaraTypes.GENERIC;
          }
        case 79: break;
        case 38: 
          { return TaraTypes.SINGLETON;
          }
        case 80: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
