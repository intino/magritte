/* The following code was generated by JFlex 1.4.3 on 14/05/14 12:47 */

package monet.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import monet.tara.intellij.lang.psi.TaraTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/05/14 12:47 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/monet/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\53\1\54\1\51\3\0\16\53\4\0\1\54\1\0\1\36\1\0"+
    "\1\26\2\0\1\50\3\0\1\41\1\0\1\24\1\34\1\0\12\52"+
    "\1\35\1\33\1\37\1\0\1\40\2\0\1\26\1\47\1\1\1\45"+
    "\4\26\1\43\4\26\1\44\4\26\1\46\1\26\1\42\1\26\1\27"+
    "\3\26\1\31\1\0\1\32\1\0\1\26\1\0\1\13\1\17\1\4"+
    "\1\25\1\5\1\20\1\15\1\23\1\10\1\26\1\14\1\21\1\11"+
    "\1\3\1\2\1\6\1\26\1\12\1\16\1\7\1\22\1\30\1\26"+
    "\1\26\2\26\1\33\1\0\1\33\1\0\41\53\2\0\4\26\4\0"+
    "\1\26\2\0\1\53\7\0\1\26\4\0\1\26\5\0\27\26\1\0"+
    "\37\26\1\0\u01ca\26\4\0\14\26\16\0\5\26\7\0\1\26\1\0"+
    "\1\26\21\0\160\53\5\26\1\0\2\26\2\0\4\26\10\0\1\26"+
    "\1\0\3\26\1\0\1\26\1\0\24\26\1\0\123\26\1\0\213\26"+
    "\1\0\5\53\2\0\236\26\11\0\46\26\2\0\1\26\7\0\47\26"+
    "\11\0\55\53\1\0\1\53\1\0\2\53\1\0\2\53\1\0\1\53"+
    "\10\0\33\26\5\0\3\26\15\0\4\53\7\0\1\26\4\0\13\53"+
    "\5\0\53\26\25\53\12\52\4\0\2\26\1\53\143\26\1\0\1\26"+
    "\10\53\1\0\6\53\2\26\2\53\1\0\4\53\2\26\12\52\3\26"+
    "\2\0\1\26\17\0\1\53\1\26\1\53\36\26\33\53\2\0\131\26"+
    "\13\53\1\26\16\0\12\52\41\26\11\53\2\26\4\0\1\26\5\0"+
    "\26\26\4\53\1\26\11\53\1\26\3\53\1\26\5\53\22\0\31\26"+
    "\3\53\244\0\4\53\66\26\3\53\1\26\22\53\1\26\7\53\12\26"+
    "\2\53\2\0\12\52\1\0\7\26\1\0\7\26\1\0\3\53\1\0"+
    "\10\26\2\0\2\26\2\0\26\26\1\0\7\26\1\0\1\26\3\0"+
    "\4\26\2\0\1\53\1\26\7\53\2\0\2\53\2\0\3\53\1\26"+
    "\10\0\1\53\4\0\2\26\1\0\3\26\2\53\2\0\12\52\4\26"+
    "\7\0\1\26\5\0\3\53\1\0\6\26\4\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\53"+
    "\1\0\5\53\4\0\2\53\2\0\3\53\3\0\1\53\7\0\4\26"+
    "\1\0\1\26\7\0\12\52\2\53\3\26\1\53\13\0\3\53\1\0"+
    "\11\26\1\0\3\26\1\0\26\26\1\0\7\26\1\0\2\26\1\0"+
    "\5\26\2\0\1\53\1\26\10\53\1\0\3\53\1\0\3\53\2\0"+
    "\1\26\17\0\2\26\2\53\2\0\12\52\1\0\1\26\17\0\3\53"+
    "\1\0\10\26\2\0\2\26\2\0\26\26\1\0\7\26\1\0\2\26"+
    "\1\0\5\26\2\0\1\53\1\26\7\53\2\0\2\53\2\0\3\53"+
    "\10\0\2\53\4\0\2\26\1\0\3\26\2\53\2\0\12\52\1\0"+
    "\1\26\20\0\1\53\1\26\1\0\6\26\3\0\3\26\1\0\4\26"+
    "\3\0\2\26\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26"+
    "\3\0\14\26\4\0\5\53\3\0\3\53\1\0\4\53\2\0\1\26"+
    "\6\0\1\53\16\0\12\52\11\0\1\26\7\0\3\53\1\0\10\26"+
    "\1\0\3\26\1\0\27\26\1\0\12\26\1\0\5\26\3\0\1\26"+
    "\7\53\1\0\3\53\1\0\4\53\7\0\2\53\1\0\2\26\6\0"+
    "\2\26\2\53\2\0\12\52\22\0\2\53\1\0\10\26\1\0\3\26"+
    "\1\0\27\26\1\0\12\26\1\0\5\26\2\0\1\53\1\26\7\53"+
    "\1\0\3\53\1\0\4\53\7\0\2\53\7\0\1\26\1\0\2\26"+
    "\2\53\2\0\12\52\1\0\2\26\17\0\2\53\1\0\10\26\1\0"+
    "\3\26\1\0\51\26\2\0\1\26\7\53\1\0\3\53\1\0\4\53"+
    "\1\26\10\0\1\53\10\0\2\26\2\53\2\0\12\52\12\0\6\26"+
    "\2\0\2\53\1\0\22\26\3\0\30\26\1\0\11\26\1\0\1\26"+
    "\2\0\7\26\3\0\1\53\4\0\6\53\1\0\1\53\1\0\10\53"+
    "\22\0\2\53\15\0\60\26\1\53\2\26\7\53\4\0\10\26\10\53"+
    "\1\0\12\52\47\0\2\26\1\0\1\26\2\0\2\26\1\0\1\26"+
    "\2\0\1\26\6\0\4\26\1\0\7\26\1\0\3\26\1\0\1\26"+
    "\1\0\1\26\2\0\2\26\1\0\4\26\1\53\2\26\6\53\1\0"+
    "\2\53\1\26\2\0\5\26\1\0\1\26\1\0\6\53\2\0\12\52"+
    "\2\0\2\26\42\0\1\26\27\0\2\53\6\0\12\52\13\0\1\53"+
    "\1\0\1\53\1\0\1\53\4\0\2\53\10\26\1\0\44\26\4\0"+
    "\24\53\1\0\2\53\5\26\13\53\1\0\44\53\11\0\1\53\71\0"+
    "\53\26\24\53\1\26\12\52\6\0\6\26\4\53\4\26\3\53\1\26"+
    "\3\53\2\26\7\53\3\26\4\53\15\26\14\53\1\26\1\53\12\52"+
    "\4\53\2\0\46\26\12\0\53\26\1\0\1\26\3\0\u0149\26\1\0"+
    "\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2\0\51\26\1\0"+
    "\4\26\2\0\41\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0"+
    "\4\26\2\0\17\26\1\0\71\26\1\0\4\26\2\0\103\26\2\0"+
    "\3\53\40\0\20\26\20\0\125\26\14\0\u026c\26\2\0\21\26\1\0"+
    "\32\26\5\0\113\26\3\0\3\26\17\0\15\26\1\0\4\26\3\53"+
    "\13\0\22\26\3\53\13\0\22\26\2\53\14\0\15\26\1\0\3\26"+
    "\1\0\2\53\14\0\64\26\40\53\3\0\1\26\3\0\2\26\1\53"+
    "\2\0\12\52\41\0\3\53\2\0\12\52\6\0\130\26\10\0\51\26"+
    "\1\53\1\26\5\0\106\26\12\0\35\26\3\0\14\53\4\0\14\53"+
    "\12\0\12\52\36\26\2\0\5\26\13\0\54\26\4\0\21\53\7\26"+
    "\2\53\6\0\12\52\46\0\27\26\5\53\4\0\65\26\12\53\1\0"+
    "\35\53\2\0\1\53\12\52\6\0\12\52\15\0\1\26\130\0\5\53"+
    "\57\26\21\53\7\26\4\0\12\52\21\0\11\53\14\0\3\53\36\26"+
    "\12\53\3\0\2\26\12\52\6\0\46\26\16\53\14\0\44\26\24\53"+
    "\10\0\12\52\3\0\3\26\12\52\44\26\122\0\3\53\1\0\25\53"+
    "\4\26\1\53\4\26\1\53\15\0\300\26\47\53\25\0\4\53\u0116\26"+
    "\2\0\6\26\2\0\46\26\2\0\6\26\2\0\10\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\37\26\2\0\65\26\1\0\7\26"+
    "\1\0\1\26\3\0\3\26\1\0\7\26\3\0\4\26\2\0\6\26"+
    "\4\0\15\26\5\0\3\26\1\0\7\26\16\0\5\53\32\0\5\53"+
    "\20\0\2\26\23\0\1\26\13\0\5\53\5\0\6\53\1\0\1\26"+
    "\15\0\1\26\20\0\15\26\3\0\32\26\26\0\15\53\4\0\1\53"+
    "\3\0\14\53\21\0\1\26\4\0\1\26\2\0\12\26\1\0\1\26"+
    "\3\0\5\26\6\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\1\0\13\26\2\0\4\26\5\0\5\26\4\0\1\26\21\0\51\26"+
    "\u0a77\0\57\26\1\0\57\26\1\0\205\26\6\0\4\26\3\53\16\0"+
    "\46\26\12\0\66\26\11\0\1\26\17\0\1\53\27\26\11\0\7\26"+
    "\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26"+
    "\1\0\7\26\1\0\7\26\1\0\40\53\57\0\1\26\u01d5\0\3\26"+
    "\31\0\11\26\6\53\1\0\5\26\2\0\5\26\4\0\126\26\2\0"+
    "\2\53\2\0\3\26\1\0\132\26\1\0\4\26\5\0\51\26\3\0"+
    "\136\26\21\0\33\26\65\0\20\26\u0200\0\u19b6\26\112\0\u51cc\26\64\0"+
    "\u048d\26\103\0\56\26\2\0\u010d\26\3\0\20\26\12\52\2\26\24\0"+
    "\57\26\1\53\14\0\2\53\1\0\31\26\10\0\120\26\2\53\45\0"+
    "\11\26\2\0\147\26\2\0\4\26\1\0\2\26\16\0\12\26\120\0"+
    "\10\26\1\53\3\26\1\53\4\26\1\53\27\26\5\53\20\0\1\26"+
    "\7\0\64\26\14\0\2\53\62\26\21\53\13\0\12\52\6\0\22\53"+
    "\6\26\3\0\1\26\4\0\12\52\34\26\10\53\2\0\27\26\15\53"+
    "\14\0\35\26\3\0\4\53\57\26\16\53\16\0\1\26\12\52\46\0"+
    "\51\26\16\53\11\0\3\26\1\53\10\26\2\53\2\0\12\52\6\0"+
    "\27\26\3\0\1\26\1\53\4\0\60\26\1\53\1\26\3\53\2\26"+
    "\2\53\5\26\2\53\1\26\1\53\1\26\30\0\3\26\43\0\6\26"+
    "\2\0\6\26\2\0\6\26\11\0\7\26\1\0\7\26\221\0\43\26"+
    "\10\53\1\0\2\53\2\0\12\52\6\0\u2ba4\26\14\0\27\26\4\0"+
    "\61\26\u2104\0\u012e\26\2\0\76\26\2\0\152\26\46\0\7\26\14\0"+
    "\5\26\5\0\1\26\1\53\12\26\1\0\15\26\1\0\5\26\1\0"+
    "\1\26\1\0\2\26\1\0\2\26\1\0\154\26\41\0\u016b\26\22\0"+
    "\100\26\2\0\66\26\50\0\15\26\3\0\20\53\20\0\7\53\14\0"+
    "\2\26\30\0\3\26\31\0\1\26\6\0\5\26\1\0\207\26\2\0"+
    "\1\53\4\0\1\26\13\0\12\52\7\0\32\26\4\0\1\26\1\0"+
    "\32\26\13\0\131\26\3\0\6\26\2\0\6\26\2\0\6\26\2\0"+
    "\3\26\3\0\2\26\3\0\2\26\22\0\3\53\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\17\2\1\1\2\2\1\3\1\4\1\3"+
    "\1\5\1\6\1\1\1\7\1\10\1\1\6\2\1\1"+
    "\1\11\1\12\1\11\20\2\1\13\2\2\1\14\1\0"+
    "\1\15\6\2\1\0\1\16\1\0\21\2\1\17\1\20"+
    "\1\21\4\2\1\22\2\2\1\23\1\2\1\24\3\2"+
    "\1\25\3\2\1\26\1\2\1\0\1\27\15\2\1\30"+
    "\1\0\10\2\1\31\4\2\1\0\1\2\1\32\1\33"+
    "\1\2\1\34\1\2\1\35\3\2\1\36\1\2\1\0"+
    "\1\37\1\40\1\41\1\2\1\42\1\43\1\2\1\44"+
    "\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\55\0\55\0\55"+
    "\0\55\0\u03b1\0\55\0\55\0\u03de\0\u040b\0\u0438\0\u0465"+
    "\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd"+
    "\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\55\0\u03b1\0\55\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0519\0\55\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\264"+
    "\0\264\0\264\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0a32\0\u0e10"+
    "\0\u0e3d\0\264\0\u0e6a\0\264\0\u0e97\0\u0ec4\0\u0ef1\0\264"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\264\0\u0fa5\0\u0fd2\0\264\0\u0fff"+
    "\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167"+
    "\0\u1194\0\u11c1\0\u11ee\0\u121b\0\264\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\264\0\u13dd"+
    "\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\264\0\264\0\u14eb"+
    "\0\264\0\u1518\0\264\0\u1545\0\u1572\0\u159f\0\264\0\u15cc"+
    "\0\u15f9\0\264\0\264\0\264\0\u1626\0\264\0\264\0\u1653"+
    "\0\55\0\264\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\5\1\15\1\16\1\17"+
    "\1\20\2\5\1\21\1\22\2\5\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\2\1\47\56\0\1\5\1\50\21\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\5\5\1\51"+
    "\15\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\23\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\12\5\1\52\10\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\12\5\1\53\10\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\11\5\1\54\11\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\2\5\1\55"+
    "\5\5\1\56\12\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\21\5\1\57\1\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\1\5\1\60\21\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\16\5\1\61"+
    "\4\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\4\5\1\62\16\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\7\5\1\63\13\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\12\5\1\64\10\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\7\5\1\65"+
    "\2\5\1\66\10\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\12\5\1\67\10\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\53\0\1\70\3\0\1\5\1\71"+
    "\21\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\12\5\1\72\10\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\33\0\1\73\22\0\36\74\1\75\16\74\52\0"+
    "\1\46\3\0\7\5\1\76\13\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\2\5\1\77\20\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\12\5\1\100"+
    "\10\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\1\5\1\101\21\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\6\5\1\102\14\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\1\5\1\103\21\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\1\0\51\104\1\105"+
    "\3\104\51\0\1\45\37\0\1\106\15\0\1\46\56\0"+
    "\1\47\1\0\2\5\1\107\20\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\6\5\1\110\14\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\15\5\1\111"+
    "\5\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\3\5\1\112\17\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\21\5\1\113\1\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\6\5\1\114\14\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\5\5\1\115"+
    "\15\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\20\5\1\116\2\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\1\5\1\117\21\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\15\5\1\120\5\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\2\5\1\121"+
    "\20\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\2\5\1\122\20\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\15\5\1\123\5\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\2\5\1\124\20\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\20\5\1\125"+
    "\2\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\15\5\1\126\5\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\35\0\1\106\15\0\1\70\3\0\11\5\1\127"+
    "\11\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\11\5\1\130\11\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\23\5\1\0\1\131\3\5\11\0\6\5"+
    "\2\0\2\5\2\0\6\5\1\132\14\5\1\0\4\5"+
    "\11\0\6\5\2\0\2\5\2\0\6\5\1\133\14\5"+
    "\1\0\4\5\11\0\6\5\2\0\2\5\2\0\21\5"+
    "\1\134\1\5\1\0\4\5\11\0\6\5\2\0\2\5"+
    "\2\0\11\5\1\135\11\5\1\0\4\5\11\0\6\5"+
    "\2\0\2\5\2\0\1\5\1\136\21\5\1\0\4\5"+
    "\11\0\6\5\2\0\2\5\53\0\1\137\3\0\3\5"+
    "\1\140\17\5\1\0\4\5\11\0\6\5\2\0\2\5"+
    "\2\0\7\5\1\141\13\5\1\0\4\5\11\0\6\5"+
    "\2\0\2\5\2\0\4\5\1\142\16\5\1\0\4\5"+
    "\11\0\6\5\2\0\2\5\2\0\13\5\1\143\7\5"+
    "\1\0\4\5\11\0\6\5\2\0\2\5\2\0\4\5"+
    "\1\144\16\5\1\0\4\5\11\0\6\5\2\0\2\5"+
    "\2\0\4\5\1\145\16\5\1\0\4\5\11\0\6\5"+
    "\2\0\2\5\2\0\1\5\1\146\21\5\1\0\4\5"+
    "\11\0\6\5\2\0\2\5\2\0\6\5\1\147\14\5"+
    "\1\0\4\5\11\0\6\5\2\0\2\5\2\0\6\5"+
    "\1\150\14\5\1\0\4\5\11\0\6\5\2\0\2\5"+
    "\2\0\6\5\1\151\14\5\1\0\4\5\11\0\6\5"+
    "\2\0\2\5\2\0\4\5\1\152\16\5\1\0\4\5"+
    "\11\0\6\5\2\0\2\5\2\0\14\5\1\153\6\5"+
    "\1\0\4\5\11\0\6\5\2\0\2\5\2\0\4\5"+
    "\1\154\16\5\1\0\4\5\11\0\6\5\2\0\2\5"+
    "\2\0\12\5\1\155\10\5\1\0\4\5\11\0\6\5"+
    "\2\0\2\5\2\0\15\5\1\113\5\5\1\0\4\5"+
    "\11\0\6\5\2\0\2\5\2\0\23\5\1\156\4\5"+
    "\11\0\6\5\2\0\2\5\2\0\23\5\1\0\1\157"+
    "\3\5\11\0\6\5\2\0\2\5\2\0\21\5\1\160"+
    "\1\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\16\5\1\161\4\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\7\5\1\162\13\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\20\5\1\163\2\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\4\5\1\164"+
    "\16\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\1\5\1\165\21\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\12\5\1\166\10\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\2\5\1\167\20\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\11\5\1\170"+
    "\11\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\7\5\1\171\13\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\11\5\1\172\11\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\11\5\1\173\11\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\20\5\1\174"+
    "\2\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\20\5\1\175\2\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\5\0\1\176\51\0\11\5\1\177\11\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\20\5\1\200"+
    "\2\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\2\5\1\201\20\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\4\5\1\202\16\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\5\5\1\203\15\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\2\5\1\204"+
    "\20\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\14\5\1\205\6\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\6\5\1\206\14\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\6\5\1\207\14\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\5\5\1\210"+
    "\15\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\12\5\1\211\10\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\7\5\1\212\13\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\4\5\1\213\16\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\3\0\1\214\53\0"+
    "\12\5\1\215\10\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\4\5\1\216\16\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\14\5\1\217\6\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\12\5\1\220"+
    "\10\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\6\5\1\221\14\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\12\5\1\222\10\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\4\5\1\223\16\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\7\5\1\224"+
    "\13\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\20\5\1\225\2\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\3\5\1\226\17\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\3\5\1\227\17\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\6\5\1\230"+
    "\14\5\1\0\4\5\11\0\6\5\2\0\2\5\26\0"+
    "\1\231\30\0\20\5\1\232\2\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\2\5\1\233\20\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\20\5\1\234"+
    "\2\5\1\0\4\5\11\0\6\5\2\0\2\5\2\0"+
    "\1\5\1\235\21\5\1\0\4\5\11\0\6\5\2\0"+
    "\2\5\2\0\4\5\1\236\16\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\6\5\1\237\14\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\2\0\1\5\1\240"+
    "\21\5\1\0\4\5\11\0\6\5\2\0\2\5\6\0"+
    "\1\241\50\0\2\5\1\242\20\5\1\0\4\5\11\0"+
    "\6\5\2\0\2\5\2\0\2\5\1\243\20\5\1\0"+
    "\4\5\11\0\6\5\2\0\2\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\4\11\1\1\2\11\36\1\1\11"+
    "\1\0\1\11\6\1\1\0\1\11\1\0\47\1\1\0"+
    "\17\1\1\0\15\1\1\0\14\1\1\0\7\1\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 39: break;
        case 15: 
          { return TaraTypes.VAR;
          }
        case 40: break;
        case 6: 
          { return TaraTypes.COLON;
          }
        case 41: break;
        case 35: 
          { return TaraTypes.ABSTRACT;
          }
        case 42: break;
        case 7: 
          { return TaraTypes.OPEN_AN;
          }
        case 43: break;
        case 34: 
          { return TaraTypes.MULTIPLE;
          }
        case 44: break;
        case 18: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 45: break;
        case 9: 
          { return TokenType.WHITE_SPACE;
          }
        case 46: break;
        case 31: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 47: break;
        case 12: 
          { return TaraTypes.LIST;
          }
        case 48: break;
        case 8: 
          { return TaraTypes.CLOSE_AN;
          }
        case 49: break;
        case 36: 
          { return TaraTypes.HAS_CODE;
          }
        case 50: break;
        case 24: 
          { return TaraTypes.FINAL;
          }
        case 51: break;
        case 22: 
          { return TaraTypes.BASE_KEY;
          }
        case 52: break;
        case 5: 
          { return TaraTypes.DOT;
          }
        case 53: break;
        case 37: 
          { return TaraTypes.INTENTION_KEY;
          }
        case 54: break;
        case 27: 
          { return TaraTypes.STRING_TYPE;
          }
        case 55: break;
        case 33: 
          { return TaraTypes.OPTIONAL;
          }
        case 56: break;
        case 2: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 57: break;
        case 16: 
          { return TaraTypes.UID_TYPE;
          }
        case 58: break;
        case 11: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 59: break;
        case 21: 
          { return TaraTypes.ROOT;
          }
        case 60: break;
        case 14: 
          { return TaraTypes.DOC_LINE;
          }
        case 61: break;
        case 13: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 62: break;
        case 26: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 63: break;
        case 4: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 64: break;
        case 10: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 65: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 66: break;
        case 20: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 67: break;
        case 25: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 68: break;
        case 19: 
          { return TaraTypes.CASE_KEY;
          }
        case 69: break;
        case 32: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 70: break;
        case 17: 
          { return TaraTypes.INT_TYPE;
          }
        case 71: break;
        case 28: 
          { return TaraTypes.CONCEPT_KEY;
          }
        case 72: break;
        case 29: 
          { return TaraTypes.PACKAGE;
          }
        case 73: break;
        case 23: 
          { return TaraTypes.WORD_KEY;
          }
        case 74: break;
        case 30: 
          { return TaraTypes.GENERIC;
          }
        case 75: break;
        case 38: 
          { return TaraTypes.SINGLETON;
          }
        case 76: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
