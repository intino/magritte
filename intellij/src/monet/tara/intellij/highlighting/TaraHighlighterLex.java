/* The following code was generated by JFlex 1.4.3 on 13/05/14 12:07 */

package monet.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import monet.tara.intellij.metamodel.psi.TaraTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/05/14 12:07 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/monet/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\54\1\55\1\51\3\0\16\54\4\0\1\55\1\0\1\36\1\0"+
    "\1\53\2\0\1\50\3\0\1\41\1\0\1\24\1\34\1\0\12\52"+
    "\1\35\1\33\1\37\1\0\1\40\2\0\1\53\1\47\1\1\1\45"+
    "\4\53\1\43\4\53\1\44\4\53\1\46\1\53\1\42\1\53\1\27"+
    "\3\53\1\31\1\0\1\32\1\0\1\53\1\0\1\13\1\17\1\4"+
    "\1\25\1\5\1\20\1\15\1\23\1\10\1\53\1\14\1\21\1\11"+
    "\1\3\1\2\1\6\1\53\1\12\1\16\1\7\1\22\1\30\1\53"+
    "\1\26\2\53\1\33\1\0\1\33\1\0\41\54\2\0\4\53\4\0"+
    "\1\53\2\0\1\54\7\0\1\53\4\0\1\53\5\0\27\53\1\0"+
    "\37\53\1\0\u01ca\53\4\0\14\53\16\0\5\53\7\0\1\53\1\0"+
    "\1\53\21\0\160\54\5\53\1\0\2\53\2\0\4\53\10\0\1\53"+
    "\1\0\3\53\1\0\1\53\1\0\24\53\1\0\123\53\1\0\213\53"+
    "\1\0\5\54\2\0\236\53\11\0\46\53\2\0\1\53\7\0\47\53"+
    "\11\0\55\54\1\0\1\54\1\0\2\54\1\0\2\54\1\0\1\54"+
    "\10\0\33\53\5\0\3\53\15\0\4\54\7\0\1\53\4\0\13\54"+
    "\5\0\53\53\25\54\12\52\4\0\2\53\1\54\143\53\1\0\1\53"+
    "\10\54\1\0\6\54\2\53\2\54\1\0\4\54\2\53\12\52\3\53"+
    "\2\0\1\53\17\0\1\54\1\53\1\54\36\53\33\54\2\0\131\53"+
    "\13\54\1\53\16\0\12\52\41\53\11\54\2\53\4\0\1\53\5\0"+
    "\26\53\4\54\1\53\11\54\1\53\3\54\1\53\5\54\22\0\31\53"+
    "\3\54\244\0\4\54\66\53\3\54\1\53\22\54\1\53\7\54\12\53"+
    "\2\54\2\0\12\52\1\0\7\53\1\0\7\53\1\0\3\54\1\0"+
    "\10\53\2\0\2\53\2\0\26\53\1\0\7\53\1\0\1\53\3\0"+
    "\4\53\2\0\1\54\1\53\7\54\2\0\2\54\2\0\3\54\1\53"+
    "\10\0\1\54\4\0\2\53\1\0\3\53\2\54\2\0\12\52\4\53"+
    "\7\0\1\53\5\0\3\54\1\0\6\53\4\0\2\53\2\0\26\53"+
    "\1\0\7\53\1\0\2\53\1\0\2\53\1\0\2\53\2\0\1\54"+
    "\1\0\5\54\4\0\2\54\2\0\3\54\3\0\1\54\7\0\4\53"+
    "\1\0\1\53\7\0\12\52\2\54\3\53\1\54\13\0\3\54\1\0"+
    "\11\53\1\0\3\53\1\0\26\53\1\0\7\53\1\0\2\53\1\0"+
    "\5\53\2\0\1\54\1\53\10\54\1\0\3\54\1\0\3\54\2\0"+
    "\1\53\17\0\2\53\2\54\2\0\12\52\1\0\1\53\17\0\3\54"+
    "\1\0\10\53\2\0\2\53\2\0\26\53\1\0\7\53\1\0\2\53"+
    "\1\0\5\53\2\0\1\54\1\53\7\54\2\0\2\54\2\0\3\54"+
    "\10\0\2\54\4\0\2\53\1\0\3\53\2\54\2\0\12\52\1\0"+
    "\1\53\20\0\1\54\1\53\1\0\6\53\3\0\3\53\1\0\4\53"+
    "\3\0\2\53\1\0\1\53\1\0\2\53\3\0\2\53\3\0\3\53"+
    "\3\0\14\53\4\0\5\54\3\0\3\54\1\0\4\54\2\0\1\53"+
    "\6\0\1\54\16\0\12\52\11\0\1\53\7\0\3\54\1\0\10\53"+
    "\1\0\3\53\1\0\27\53\1\0\12\53\1\0\5\53\3\0\1\53"+
    "\7\54\1\0\3\54\1\0\4\54\7\0\2\54\1\0\2\53\6\0"+
    "\2\53\2\54\2\0\12\52\22\0\2\54\1\0\10\53\1\0\3\53"+
    "\1\0\27\53\1\0\12\53\1\0\5\53\2\0\1\54\1\53\7\54"+
    "\1\0\3\54\1\0\4\54\7\0\2\54\7\0\1\53\1\0\2\53"+
    "\2\54\2\0\12\52\1\0\2\53\17\0\2\54\1\0\10\53\1\0"+
    "\3\53\1\0\51\53\2\0\1\53\7\54\1\0\3\54\1\0\4\54"+
    "\1\53\10\0\1\54\10\0\2\53\2\54\2\0\12\52\12\0\6\53"+
    "\2\0\2\54\1\0\22\53\3\0\30\53\1\0\11\53\1\0\1\53"+
    "\2\0\7\53\3\0\1\54\4\0\6\54\1\0\1\54\1\0\10\54"+
    "\22\0\2\54\15\0\60\53\1\54\2\53\7\54\4\0\10\53\10\54"+
    "\1\0\12\52\47\0\2\53\1\0\1\53\2\0\2\53\1\0\1\53"+
    "\2\0\1\53\6\0\4\53\1\0\7\53\1\0\3\53\1\0\1\53"+
    "\1\0\1\53\2\0\2\53\1\0\4\53\1\54\2\53\6\54\1\0"+
    "\2\54\1\53\2\0\5\53\1\0\1\53\1\0\6\54\2\0\12\52"+
    "\2\0\2\53\42\0\1\53\27\0\2\54\6\0\12\52\13\0\1\54"+
    "\1\0\1\54\1\0\1\54\4\0\2\54\10\53\1\0\44\53\4\0"+
    "\24\54\1\0\2\54\5\53\13\54\1\0\44\54\11\0\1\54\71\0"+
    "\53\53\24\54\1\53\12\52\6\0\6\53\4\54\4\53\3\54\1\53"+
    "\3\54\2\53\7\54\3\53\4\54\15\53\14\54\1\53\1\54\12\52"+
    "\4\54\2\0\46\53\12\0\53\53\1\0\1\53\3\0\u0149\53\1\0"+
    "\4\53\2\0\7\53\1\0\1\53\1\0\4\53\2\0\51\53\1\0"+
    "\4\53\2\0\41\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0"+
    "\4\53\2\0\17\53\1\0\71\53\1\0\4\53\2\0\103\53\2\0"+
    "\3\54\40\0\20\53\20\0\125\53\14\0\u026c\53\2\0\21\53\1\0"+
    "\32\53\5\0\113\53\3\0\3\53\17\0\15\53\1\0\4\53\3\54"+
    "\13\0\22\53\3\54\13\0\22\53\2\54\14\0\15\53\1\0\3\53"+
    "\1\0\2\54\14\0\64\53\40\54\3\0\1\53\3\0\2\53\1\54"+
    "\2\0\12\52\41\0\3\54\2\0\12\52\6\0\130\53\10\0\51\53"+
    "\1\54\1\53\5\0\106\53\12\0\35\53\3\0\14\54\4\0\14\54"+
    "\12\0\12\52\36\53\2\0\5\53\13\0\54\53\4\0\21\54\7\53"+
    "\2\54\6\0\12\52\46\0\27\53\5\54\4\0\65\53\12\54\1\0"+
    "\35\54\2\0\1\54\12\52\6\0\12\52\15\0\1\53\130\0\5\54"+
    "\57\53\21\54\7\53\4\0\12\52\21\0\11\54\14\0\3\54\36\53"+
    "\12\54\3\0\2\53\12\52\6\0\46\53\16\54\14\0\44\53\24\54"+
    "\10\0\12\52\3\0\3\53\12\52\44\53\122\0\3\54\1\0\25\54"+
    "\4\53\1\54\4\53\1\54\15\0\300\53\47\54\25\0\4\54\u0116\53"+
    "\2\0\6\53\2\0\46\53\2\0\6\53\2\0\10\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\37\53\2\0\65\53\1\0\7\53"+
    "\1\0\1\53\3\0\3\53\1\0\7\53\3\0\4\53\2\0\6\53"+
    "\4\0\15\53\5\0\3\53\1\0\7\53\16\0\5\54\32\0\5\54"+
    "\20\0\2\53\23\0\1\53\13\0\5\54\5\0\6\54\1\0\1\53"+
    "\15\0\1\53\20\0\15\53\3\0\32\53\26\0\15\54\4\0\1\54"+
    "\3\0\14\54\21\0\1\53\4\0\1\53\2\0\12\53\1\0\1\53"+
    "\3\0\5\53\6\0\1\53\1\0\1\53\1\0\1\53\1\0\4\53"+
    "\1\0\13\53\2\0\4\53\5\0\5\53\4\0\1\53\21\0\51\53"+
    "\u0a77\0\57\53\1\0\57\53\1\0\205\53\6\0\4\53\3\54\16\0"+
    "\46\53\12\0\66\53\11\0\1\53\17\0\1\54\27\53\11\0\7\53"+
    "\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53"+
    "\1\0\7\53\1\0\7\53\1\0\40\54\57\0\1\53\u01d5\0\3\53"+
    "\31\0\11\53\6\54\1\0\5\53\2\0\5\53\4\0\126\53\2\0"+
    "\2\54\2\0\3\53\1\0\132\53\1\0\4\53\5\0\51\53\3\0"+
    "\136\53\21\0\33\53\65\0\20\53\u0200\0\u19b6\53\112\0\u51cc\53\64\0"+
    "\u048d\53\103\0\56\53\2\0\u010d\53\3\0\20\53\12\52\2\53\24\0"+
    "\57\53\1\54\14\0\2\54\1\0\31\53\10\0\120\53\2\54\45\0"+
    "\11\53\2\0\147\53\2\0\4\53\1\0\2\53\16\0\12\53\120\0"+
    "\10\53\1\54\3\53\1\54\4\53\1\54\27\53\5\54\20\0\1\53"+
    "\7\0\64\53\14\0\2\54\62\53\21\54\13\0\12\52\6\0\22\54"+
    "\6\53\3\0\1\53\4\0\12\52\34\53\10\54\2\0\27\53\15\54"+
    "\14\0\35\53\3\0\4\54\57\53\16\54\16\0\1\53\12\52\46\0"+
    "\51\53\16\54\11\0\3\53\1\54\10\53\2\54\2\0\12\52\6\0"+
    "\27\53\3\0\1\53\1\54\4\0\60\53\1\54\1\53\3\54\2\53"+
    "\2\54\5\53\2\54\1\53\1\54\1\53\30\0\3\53\43\0\6\53"+
    "\2\0\6\53\2\0\6\53\11\0\7\53\1\0\7\53\221\0\43\53"+
    "\10\54\1\0\2\54\2\0\12\52\6\0\u2ba4\53\14\0\27\53\4\0"+
    "\61\53\u2104\0\u012e\53\2\0\76\53\2\0\152\53\46\0\7\53\14\0"+
    "\5\53\5\0\1\53\1\54\12\53\1\0\15\53\1\0\5\53\1\0"+
    "\1\53\1\0\2\53\1\0\2\53\1\0\154\53\41\0\u016b\53\22\0"+
    "\100\53\2\0\66\53\50\0\15\53\3\0\20\54\20\0\7\54\14\0"+
    "\2\53\30\0\3\53\31\0\1\53\6\0\5\53\1\0\207\53\2\0"+
    "\1\54\4\0\1\53\13\0\12\52\7\0\32\53\4\0\1\53\1\0"+
    "\32\53\13\0\131\53\3\0\6\53\2\0\6\53\2\0\6\53\2\0"+
    "\3\53\3\0\2\53\3\0\2\53\22\0\3\54\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\20\2\1\1\2\2\1\3\1\4\1\3"+
    "\1\5\1\6\1\1\1\7\1\10\1\1\6\2\1\1"+
    "\1\11\1\12\1\11\21\2\1\13\2\2\1\14\1\0"+
    "\1\15\6\2\1\0\1\16\1\0\22\2\1\17\1\20"+
    "\1\21\4\2\1\22\2\2\1\23\2\2\1\24\3\2"+
    "\1\25\3\2\1\26\1\2\1\0\1\27\16\2\1\30"+
    "\1\0\11\2\1\31\4\2\1\0\1\2\1\32\1\33"+
    "\1\2\1\34\2\2\1\35\3\2\1\36\1\2\1\0"+
    "\1\37\1\40\1\41\3\2\1\42\1\43\1\2\1\44"+
    "\1\45\1\2\1\46\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\56\0\56"+
    "\0\56\0\56\0\u03f4\0\56\0\56\0\u0422\0\u0450\0\u047e"+
    "\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee"+
    "\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e"+
    "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\u0958\0\u0986\0\56\0\u03f4\0\56\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0564\0\56\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8"+
    "\0\u0dd6\0\u0e04\0\270\0\270\0\270\0\u0e32\0\u0e60\0\u0e8e"+
    "\0\u0ebc\0\u0ac8\0\u0eea\0\u0f18\0\270\0\u0f46\0\u0f74\0\270"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\270\0\u102c\0\u105a\0\u1088\0\270"+
    "\0\u10b6\0\u10e4\0\270\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca"+
    "\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a"+
    "\0\u1368\0\270\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c"+
    "\0\u14aa\0\u14d8\0\u1506\0\u1534\0\270\0\u1562\0\u1590\0\u15be"+
    "\0\u15ec\0\u161a\0\u1648\0\270\0\270\0\u1676\0\270\0\u16a4"+
    "\0\u16d2\0\270\0\u1700\0\u172e\0\u175c\0\270\0\u178a\0\u17b8"+
    "\0\270\0\270\0\270\0\u17e6\0\u1814\0\u1842\0\270\0\270"+
    "\0\u1870\0\56\0\270\0\u189e\0\270\0\270\0\270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\5\1\16\1\17\1\20"+
    "\1\21\2\5\1\22\1\23\2\5\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\5\1\2\1\50\57\0\1\5\1\51\21\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\5\5"+
    "\1\52\15\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\23\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\12\5\1\53\10\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\23\5\1\0\1\5\1\54\2\5"+
    "\11\0\6\5\2\0\3\5\2\0\12\5\1\55\10\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\11\5"+
    "\1\56\11\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\57\5\5\1\60\12\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\21\5\1\61\1\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\1\5"+
    "\1\62\21\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\16\5\1\63\4\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\4\5\1\64\16\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\7\5\1\65\13\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\12\5"+
    "\1\66\10\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\7\5\1\67\2\5\1\70\10\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\12\5\1\71\10\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\53\0\1\72"+
    "\4\0\1\5\1\73\21\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\12\5\1\74\10\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\33\0\1\75\23\0\36\76"+
    "\1\77\17\76\52\0\1\47\4\0\7\5\1\100\13\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\2\5"+
    "\1\101\20\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\12\5\1\102\10\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\1\5\1\103\21\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\6\5\1\104\14\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\1\5"+
    "\1\105\21\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\1\0\51\106\1\107\4\106\51\0\1\46\40\0\1\110"+
    "\15\0\1\47\60\0\1\50\1\0\2\5\1\111\20\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\6\5"+
    "\1\112\14\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\15\5\1\113\5\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\6\5\1\114\14\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\3\5\1\115\17\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\21\5"+
    "\1\116\1\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\6\5\1\117\14\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\5\5\1\120\15\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\20\5\1\121\2\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\1\5"+
    "\1\122\21\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\15\5\1\123\5\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\2\5\1\124\20\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\2\5\1\125\20\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\15\5"+
    "\1\126\5\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\127\20\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\20\5\1\130\2\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\15\5\1\131\5\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\35\0\1\110"+
    "\15\0\1\72\4\0\11\5\1\132\11\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\11\5\1\133\11\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\23\5"+
    "\1\0\1\134\3\5\11\0\6\5\2\0\3\5\2\0"+
    "\6\5\1\135\14\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\6\5\1\136\14\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\21\5\1\137\1\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\11\5\1\140"+
    "\11\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\1\5\1\141\21\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\53\0\1\142\4\0\3\5\1\143\17\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\7\5\1\144"+
    "\13\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\4\5\1\145\16\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\4\5\1\146\16\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\13\5\1\147\7\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\4\5\1\150"+
    "\16\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\4\5\1\151\16\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\1\5\1\152\21\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\6\5\1\153\14\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\6\5\1\154"+
    "\14\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\6\5\1\155\14\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\4\5\1\156\16\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\14\5\1\157\6\5\1\0"+
    "\4\5\11\0\6\5\2\0\3\5\2\0\4\5\1\160"+
    "\16\5\1\0\4\5\11\0\6\5\2\0\3\5\2\0"+
    "\12\5\1\161\10\5\1\0\4\5\11\0\6\5\2\0"+
    "\3\5\2\0\15\5\1\116\5\5\1\0\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\23\5\1\162\4\5\11\0"+
    "\6\5\2\0\3\5\2\0\23\5\1\0\1\163\3\5"+
    "\11\0\6\5\2\0\3\5\2\0\21\5\1\164\1\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\16\5"+
    "\1\165\4\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\7\5\1\166\13\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\20\5\1\167\2\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\4\5\1\170\16\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\1\5"+
    "\1\171\21\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\172\20\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\12\5\1\173\10\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\2\5\1\174\20\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\11\5"+
    "\1\175\11\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\7\5\1\176\13\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\11\5\1\177\11\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\11\5\1\200\11\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\20\5"+
    "\1\201\2\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\20\5\1\202\2\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\5\0\1\203\52\0\11\5\1\204\11\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\20\5"+
    "\1\205\2\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\206\20\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\4\5\1\207\16\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\5\5\1\210\15\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\2\5"+
    "\1\211\20\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\15\5\1\212\5\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\14\5\1\213\6\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\6\5\1\214\14\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\6\5"+
    "\1\215\14\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\5\5\1\216\15\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\12\5\1\217\10\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\7\5\1\220\13\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\4\5"+
    "\1\221\16\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\3\0\1\222\54\0\12\5\1\223\10\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\4\5\1\224\16\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\14\5"+
    "\1\225\6\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\12\5\1\226\10\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\6\5\1\227\14\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\12\5\1\230\10\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\7\5"+
    "\1\231\13\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\4\5\1\232\16\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\7\5\1\233\13\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\20\5\1\234\2\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\3\5"+
    "\1\235\17\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\3\5\1\236\17\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\6\5\1\237\14\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\26\0\1\240\31\0\20\5"+
    "\1\241\2\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\242\20\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\20\5\1\243\2\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\1\5\1\244\14\5"+
    "\1\245\4\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\1\5\1\246\21\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\4\5\1\247\16\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\6\5\1\250\14\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\1\5"+
    "\1\251\21\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\6\0\1\252\51\0\2\5\1\253\20\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\2\0\20\5\1\254\2\5"+
    "\1\0\4\5\11\0\6\5\2\0\3\5\2\0\2\5"+
    "\1\255\20\5\1\0\4\5\11\0\6\5\2\0\3\5"+
    "\2\0\2\5\1\256\20\5\1\0\4\5\11\0\6\5"+
    "\2\0\3\5\2\0\4\5\1\257\16\5\1\0\4\5"+
    "\11\0\6\5\2\0\3\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6348];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\4\11\1\1\2\11\37\1\1\11"+
    "\1\0\1\11\6\1\1\0\1\11\1\0\51\1\1\0"+
    "\20\1\1\0\16\1\1\0\15\1\1\0\11\1\1\11"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraHighlighterLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 41: break;
        case 15: 
          { return TaraTypes.VAR;
          }
        case 42: break;
        case 6: 
          { return TaraTypes.COLON;
          }
        case 43: break;
        case 35: 
          { return TaraTypes.ABSTRACT;
          }
        case 44: break;
        case 37: 
          { return TaraTypes.EXTENSION_KEY;
          }
        case 45: break;
        case 7: 
          { return TaraTypes.OPEN_AN;
          }
        case 46: break;
        case 34: 
          { return TaraTypes.MULTIPLE;
          }
        case 47: break;
        case 18: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 48: break;
        case 9: 
          { return TokenType.WHITE_SPACE;
          }
        case 49: break;
        case 31: 
          { return TaraTypes.NATURAL_TYPE;
          }
        case 50: break;
        case 12: 
          { return TaraTypes.LIST;
          }
        case 51: break;
        case 8: 
          { return TaraTypes.CLOSE_AN;
          }
        case 52: break;
        case 36: 
          { return TaraTypes.HAS_CODE;
          }
        case 53: break;
        case 24: 
          { return TaraTypes.FINAL;
          }
        case 54: break;
        case 22: 
          { return TaraTypes.BASE_KEY;
          }
        case 55: break;
        case 5: 
          { return TaraTypes.DOT;
          }
        case 56: break;
        case 27: 
          { return TaraTypes.STRING_TYPE;
          }
        case 57: break;
        case 33: 
          { return TaraTypes.OPTIONAL;
          }
        case 58: break;
        case 2: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 59: break;
        case 16: 
          { return TaraTypes.UID_TYPE;
          }
        case 60: break;
        case 11: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 61: break;
        case 21: 
          { return TaraTypes.ROOT;
          }
        case 62: break;
        case 14: 
          { return TaraTypes.DOC_LINE;
          }
        case 63: break;
        case 13: 
          { return TaraTypes.STRING_VALUE_KEY;
          }
        case 64: break;
        case 26: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 65: break;
        case 4: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 66: break;
        case 10: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 67: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 68: break;
        case 20: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 69: break;
        case 40: 
          { return TaraTypes.EXTENSIBLE_KEY;
          }
        case 70: break;
        case 25: 
          { return TaraTypes.IMPORT_KEY;
          }
        case 71: break;
        case 19: 
          { return TaraTypes.CASE_KEY;
          }
        case 72: break;
        case 32: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 73: break;
        case 17: 
          { return TaraTypes.INT_TYPE;
          }
        case 74: break;
        case 28: 
          { return TaraTypes.CONCEPT_KEY;
          }
        case 75: break;
        case 29: 
          { return TaraTypes.PACKAGE;
          }
        case 76: break;
        case 23: 
          { return TaraTypes.WORD_KEY;
          }
        case 77: break;
        case 38: 
          { return TaraTypes.INTENTION;
          }
        case 78: break;
        case 30: 
          { return TaraTypes.GENERIC;
          }
        case 79: break;
        case 39: 
          { return TaraTypes.SINGLETON;
          }
        case 80: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
