/* The following code was generated by JFlex 1.4.3 on 13/02/14 12:23 */

package monet.tara.compiler.intellij.metamodel;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import monet.tara.compiler.intellij.psi.TaraTypes;

import java.util.Stack;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/02/14 12:23 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/monet/tara/compiler/intellij/metamodel/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;
	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0
	};
	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\61\1\2\1\4\2\0\1\3\16\61\4\0\1\1\1\0\1\41" +
			"\1\0\1\60\6\0\1\44\1\0\1\26\1\37\1\56\12\57\1\40" +
			"\1\0\1\42\1\0\1\43\1\55\1\0\1\60\1\52\1\5\1\50" +
			"\1\60\1\54\2\60\1\46\4\60\1\47\4\60\1\51\1\53\1\45" +
			"\1\60\1\32\3\60\1\35\1\0\1\36\1\0\1\60\1\0\1\17" +
			"\1\23\1\10\1\27\1\11\1\14\1\30\1\25\1\21\2\60\1\22" +
			"\1\16\1\7\1\6\1\12\1\60\1\15\1\20\1\13\1\24\1\33" +
			"\1\60\1\31\2\60\2\0\1\34\1\0\41\61\2\0\4\60\4\0" +
			"\1\60\2\0\1\61\7\0\1\60\4\0\1\60\5\0\27\60\1\0" +
			"\37\60\1\0\u013f\60\31\0\162\60\4\0\14\60\16\0\5\60\11\0" +
			"\1\60\21\0\130\61\5\0\23\61\12\0\1\60\13\0\1\60\1\0" +
			"\3\60\1\0\1\60\1\0\24\60\1\0\54\60\1\0\46\60\1\0" +
			"\5\60\4\0\202\60\1\0\4\61\3\0\105\60\1\0\46\60\2\0" +
			"\2\60\6\0\20\60\41\0\46\60\2\0\1\60\7\0\47\60\11\0" +
			"\21\61\1\0\27\61\1\0\3\61\1\0\1\61\1\0\2\61\1\0" +
			"\1\61\13\0\33\60\5\0\3\60\15\0\4\61\14\0\6\61\13\0" +
			"\32\60\5\0\13\60\16\61\7\0\12\57\4\0\2\60\1\61\143\60" +
			"\1\0\1\60\10\61\1\0\6\61\2\60\2\61\1\0\4\61\2\60" +
			"\12\57\3\60\2\0\1\60\17\0\1\61\1\60\1\61\36\60\33\61" +
			"\2\0\3\60\60\0\46\60\13\61\1\60\u014f\0\3\61\66\60\2\0" +
			"\1\61\1\60\20\61\2\0\1\60\4\61\3\0\12\60\2\61\2\0" +
			"\12\57\21\0\3\61\1\0\10\60\2\0\2\60\2\0\26\60\1\0" +
			"\7\60\1\0\1\60\3\0\4\60\2\0\1\61\1\60\7\61\2\0" +
			"\2\61\2\0\3\61\11\0\1\61\4\0\2\60\1\0\3\60\2\61" +
			"\2\0\12\57\4\60\15\0\3\61\1\0\6\60\4\0\2\60\2\0" +
			"\26\60\1\0\7\60\1\0\2\60\1\0\2\60\1\0\2\60\2\0" +
			"\1\61\1\0\5\61\4\0\2\61\2\0\3\61\13\0\4\60\1\0" +
			"\1\60\7\0\12\57\2\61\3\60\14\0\3\61\1\0\11\60\1\0" +
			"\3\60\1\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60\2\0" +
			"\1\61\1\60\10\61\1\0\3\61\1\0\3\61\2\0\1\60\17\0" +
			"\2\60\2\61\2\0\12\57\1\0\1\60\17\0\3\61\1\0\10\60" +
			"\2\0\2\60\2\0\26\60\1\0\7\60\1\0\2\60\1\0\5\60" +
			"\2\0\1\61\1\60\6\61\3\0\2\61\2\0\3\61\10\0\2\61" +
			"\4\0\2\60\1\0\3\60\4\0\12\57\1\0\1\60\20\0\1\61" +
			"\1\60\1\0\6\60\3\0\3\60\1\0\4\60\3\0\2\60\1\0" +
			"\1\60\1\0\2\60\3\0\2\60\3\0\3\60\3\0\10\60\1\0" +
			"\3\60\4\0\5\61\3\0\3\61\1\0\4\61\11\0\1\61\17\0" +
			"\11\57\11\0\1\60\7\0\3\61\1\0\10\60\1\0\3\60\1\0" +
			"\27\60\1\0\12\60\1\0\5\60\4\0\7\61\1\0\3\61\1\0" +
			"\4\61\7\0\2\61\11\0\2\60\4\0\12\57\22\0\2\61\1\0" +
			"\10\60\1\0\3\60\1\0\27\60\1\0\12\60\1\0\5\60\2\0" +
			"\1\61\1\60\7\61\1\0\3\61\1\0\4\61\7\0\2\61\7\0" +
			"\1\60\1\0\2\60\4\0\12\57\22\0\2\61\1\0\10\60\1\0" +
			"\3\60\1\0\27\60\1\0\20\60\4\0\6\61\2\0\3\61\1\0" +
			"\4\61\11\0\1\61\10\0\2\60\4\0\12\57\22\0\2\61\1\0" +
			"\22\60\3\0\30\60\1\0\11\60\1\0\1\60\2\0\7\60\3\0" +
			"\1\61\4\0\6\61\1\0\1\61\1\0\10\61\22\0\2\61\15\0" +
			"\60\60\1\61\2\60\7\61\4\0\10\60\10\61\1\0\12\57\47\0" +
			"\2\60\1\0\1\60\2\0\2\60\1\0\1\60\2\0\1\60\6\0" +
			"\4\60\1\0\7\60\1\0\3\60\1\0\1\60\1\0\1\60\2\0" +
			"\2\60\1\0\4\60\1\61\2\60\6\61\1\0\2\61\1\60\2\0" +
			"\5\60\1\0\1\60\1\0\6\61\2\0\12\57\2\0\2\60\42\0" +
			"\1\60\27\0\2\61\6\0\12\57\13\0\1\61\1\0\1\61\1\0" +
			"\1\61\4\0\2\61\10\60\1\0\42\60\6\0\24\61\1\0\2\61" +
			"\4\60\4\0\10\61\1\0\44\61\11\0\1\61\71\0\42\60\1\0" +
			"\5\60\1\0\2\60\1\0\7\61\3\0\4\61\6\0\12\57\6\0" +
			"\6\60\4\61\106\0\46\60\12\0\51\60\7\0\132\60\5\0\104\60" +
			"\5\0\122\60\6\0\7\60\1\0\77\60\1\0\1\60\1\0\4\60" +
			"\2\0\7\60\1\0\1\60\1\0\4\60\2\0\47\60\1\0\1\60" +
			"\1\0\4\60\2\0\37\60\1\0\1\60\1\0\4\60\2\0\7\60" +
			"\1\0\1\60\1\0\4\60\2\0\7\60\1\0\7\60\1\0\27\60" +
			"\1\0\37\60\1\0\1\60\1\0\4\60\2\0\7\60\1\0\47\60" +
			"\1\0\23\60\16\0\11\57\56\0\125\60\14\0\u026c\60\2\0\10\60" +
			"\12\0\32\60\5\0\113\60\3\0\3\60\17\0\15\60\1\0\4\60" +
			"\3\61\13\0\22\60\3\61\13\0\22\60\2\61\14\0\15\60\1\0" +
			"\3\60\1\0\2\61\14\0\64\60\40\61\3\0\1\60\3\0\2\60" +
			"\1\61\2\0\12\57\41\0\3\61\2\0\12\57\6\0\130\60\10\0" +
			"\51\60\1\61\126\0\35\60\3\0\14\61\4\0\14\61\12\0\12\57" +
			"\36\60\2\0\5\60\u038b\0\154\60\224\0\234\60\4\0\132\60\6\0" +
			"\26\60\2\0\6\60\2\0\46\60\2\0\6\60\2\0\10\60\1\0" +
			"\1\60\1\0\1\60\1\0\1\60\1\0\37\60\2\0\65\60\1\0" +
			"\7\60\1\0\1\60\3\0\3\60\1\0\7\60\3\0\4\60\2\0" +
			"\6\60\4\0\15\60\5\0\3\60\1\0\7\60\17\0\4\61\32\0" +
			"\5\61\20\0\2\60\23\0\1\60\13\0\4\61\6\0\6\61\1\0" +
			"\1\60\15\0\1\60\40\0\22\60\36\0\15\61\4\0\1\61\3\0" +
			"\6\61\27\0\1\60\4\0\1\60\2\0\12\60\1\0\1\60\3\0" +
			"\5\60\6\0\1\60\1\0\1\60\1\0\1\60\1\0\4\60\1\0" +
			"\3\60\1\0\7\60\3\0\3\60\5\0\5\60\26\0\44\60\u0e81\0" +
			"\3\60\31\0\11\60\6\61\1\0\5\60\2\0\5\60\4\0\126\60" +
			"\2\0\2\61\2\0\3\60\1\0\137\60\5\0\50\60\4\0\136\60" +
			"\21\0\30\60\70\0\20\60\u0200\0\u19b6\60\112\0\u51a6\60\132\0\u048d\60" +
			"\u0773\0\u2ba4\60\u215c\0\u012e\60\2\0\73\60\225\0\7\60\14\0\5\60" +
			"\5\0\1\60\1\61\12\60\1\0\15\60\1\0\5\60\1\0\1\60" +
			"\1\0\2\60\1\0\2\60\1\0\154\60\41\0\u016b\60\22\0\100\60" +
			"\2\0\66\60\50\0\15\60\3\0\20\61\20\0\4\61\17\0\2\60" +
			"\30\0\3\60\31\0\1\60\6\0\5\60\1\0\207\60\2\0\1\61" +
			"\4\0\1\60\13\0\12\57\7\0\32\60\4\0\1\60\1\0\32\60" +
			"\12\0\132\60\3\0\6\60\2\0\6\60\2\0\6\60\2\0\3\60" +
			"\3\0\2\60\3\0\2\60\22\0\3\61\4\0";
	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();
	private static final String ZZ_ACTION_PACKED_0 =
		"\1\0\1\1\2\2\2\3\12\4\1\1\2\4\1\5" +
			"\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\1" +
			"\10\4\2\1\1\14\2\15\1\0\7\4\1\16\3\4" +
			"\1\17\2\4\1\20\1\0\1\21\10\4\3\0\13\4" +
			"\1\22\1\23\1\24\6\4\1\25\1\0\1\26\3\4" +
			"\1\27\1\4\1\30\3\4\1\0\1\31\4\4\1\32" +
			"\1\33\3\4\1\34\3\4\1\0\12\4\1\0\1\4" +
			"\1\35\1\36\1\4\1\37\5\4\1\0\1\40\1\41" +
			"\1\42\1\4\1\43\1\44\1\4\1\45\1\4\1\46" +
			"\1\47";
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c" +
			"\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc" +
			"\0\u02ee\0\u0320\0\u0352\0\62\0\u0384\0\62\0\62\0\62" +
			"\0\u03b6\0\62\0\62\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0" +
			"\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640" +
			"\0\u0672\0\310\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e" +
			"\0\u07d0\0\u015e\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc" +
			"\0\62\0\u03b6\0\62\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6" +
			"\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86" +
			"\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16" +
			"\0\u0d48\0\u015e\0\u015e\0\u015e\0\u0d7a\0\u0dac\0\u0dde\0\u0e10" +
			"\0\u0e42\0\u0e74\0\62\0\u0ea6\0\u0b22\0\u0ed8\0\u0f0a\0\u0f3c" +
			"\0\u015e\0\u0f6e\0\u015e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u015e" +
			"\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u015e\0\62\0\u1130\0\u1162" +
			"\0\u1194\0\u015e\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0" +
			"\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450" +
			"\0\u1482\0\u14b4\0\u015e\0\u015e\0\u14e6\0\u015e\0\u1518\0\u154a" +
			"\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u015e\0\u015e\0\u015e\0\u1644" +
			"\0\u015e\0\u015e\0\u1676\0\62\0\u16a8\0\u015e\0\u015e";
	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();
	private static final String ZZ_TRANS_PACKED_0 =
		"\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11" +
			"\1\12\2\11\1\13\1\14\1\15\1\16\1\17\4\11" +
			"\1\20\1\21\3\11\1\22\1\23\1\24\1\25\1\26" +
			"\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36" +
			"\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46" +
			"\1\47\1\11\1\2\63\0\1\3\62\0\1\4\60\0" +
			"\1\50\1\51\1\0\1\52\62\0\1\11\1\53\17\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\5\11" +
			"\1\54\13\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\21\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\21\11\1\0\2\11\1\55\2\11\11\0\10\11" +
			"\2\0\3\11\5\0\10\11\1\56\3\11\1\57\4\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\1\11" +
			"\1\60\17\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\17\11\1\61\1\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\13\11\1\62\2\11\1\63\2\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\14\11" +
			"\1\64\4\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\12\11\1\65\6\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\57\0\1\66\7\0\1\11\1\67\17\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\12\11" +
			"\1\70\6\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\36\0\1\71\24\0\1\72\3\0\21\72\1\0\5\72" +
			"\5\0\1\73\3\0\10\72\2\0\3\72\57\0\1\47" +
			"\7\0\14\11\1\74\4\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\2\11\1\75\16\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\12\11\1\76\6\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\1\11" +
			"\1\77\17\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\6\11\1\100\12\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\1\11\1\101\17\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\10\11\1\102\10\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\12\11" +
			"\1\103\6\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\55\0\1\104\61\0\1\105\43\0\1\106\17\0\1\47" +
			"\3\0\1\50\62\0\1\51\64\0\2\11\1\107\16\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\6\11" +
			"\1\110\12\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\6\11\1\111\12\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\1\11\1\112\17\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\2\11\1\113\16\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\1\11" +
			"\1\114\17\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\15\11\1\115\3\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\13\11\1\116\5\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\2\11\1\117\16\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\13\11" +
			"\1\120\5\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\37\0\1\106\17\0\1\66\7\0\10\11\1\121\10\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\10\11" +
			"\1\122\10\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\21\11\1\0\1\123\4\11\11\0\10\11\2\0" +
			"\3\11\5\0\6\11\1\124\12\11\1\0\5\11\11\0" +
			"\10\11\2\0\3\11\5\0\6\11\1\125\12\11\1\0" +
			"\5\11\11\0\10\11\2\0\3\11\5\0\17\11\1\126" +
			"\1\11\1\0\5\11\11\0\10\11\2\0\3\11\5\0" +
			"\10\11\1\127\10\11\1\0\5\11\11\0\10\11\2\0" +
			"\3\11\5\0\1\11\1\130\17\11\1\0\5\11\11\0" +
			"\10\11\2\0\3\11\5\0\17\11\1\131\1\11\1\0" +
			"\5\11\11\0\10\11\2\0\3\11\5\0\15\11\1\132" +
			"\3\11\1\0\5\11\11\0\10\11\2\0\3\11\4\104" +
			"\1\133\55\104\55\105\1\134\4\105\57\0\1\135\7\0" +
			"\3\11\1\136\15\11\1\0\5\11\11\0\10\11\2\0" +
			"\3\11\5\0\14\11\1\137\4\11\1\0\5\11\11\0" +
			"\10\11\2\0\3\11\5\0\4\11\1\140\14\11\1\0" +
			"\5\11\11\0\10\11\2\0\3\11\5\0\11\11\1\141" +
			"\7\11\1\0\5\11\11\0\10\11\2\0\3\11\5\0" +
			"\12\11\1\142\6\11\1\0\5\11\11\0\10\11\2\0" +
			"\3\11\5\0\6\11\1\143\12\11\1\0\5\11\11\0" +
			"\10\11\2\0\3\11\5\0\6\11\1\144\12\11\1\0" +
			"\5\11\11\0\10\11\2\0\3\11\5\0\6\11\1\145" +
			"\12\11\1\0\5\11\11\0\10\11\2\0\3\11\5\0" +
			"\21\11\1\0\1\11\1\146\3\11\11\0\10\11\2\0" +
			"\3\11\5\0\21\11\1\147\5\11\11\0\10\11\2\0" +
			"\3\11\5\0\21\11\1\0\1\150\4\11\11\0\10\11" +
			"\2\0\3\11\5\0\17\11\1\151\1\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\16\11\1\152\2\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\14\11" +
			"\1\153\4\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\15\11\1\154\3\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\4\11\1\155\14\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\13\11\1\131\5\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\55\105\1\134" +
			"\1\156\3\105\5\0\4\11\1\157\14\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\1\11\1\160\17\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\2\11" +
			"\1\161\16\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\15\11\1\162\3\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\14\11\1\163\4\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\10\11\1\164\10\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\15\11" +
			"\1\165\3\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\10\0\1\166\56\0\10\11\1\167\10\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\15\11\1\170\3\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\2\11" +
			"\1\171\16\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\4\11\1\172\14\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\5\11\1\173\13\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\2\11\1\174\16\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\13\11" +
			"\1\175\5\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\5\11\1\176\13\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\12\11\1\177\6\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\4\11\1\200\14\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\6\0\1\201" +
			"\60\0\12\11\1\202\6\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\4\11\1\203\14\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\21\11\1\0\1\11" +
			"\1\204\3\11\11\0\10\11\2\0\3\11\5\0\12\11" +
			"\1\205\6\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\6\11\1\206\12\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\12\11\1\207\6\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\14\11\1\210\4\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\15\11" +
			"\1\211\3\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\3\11\1\212\15\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\6\11\1\213\12\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\27\0\1\214\37\0\15\11" +
			"\1\215\3\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\2\11\1\216\16\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\15\11\1\217\3\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\5\0\16\11\1\220\2\11" +
			"\1\0\5\11\11\0\10\11\2\0\3\11\5\0\4\11" +
			"\1\221\14\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\6\11\1\222\12\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\1\11\1\223\17\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11\11\0\1\224\55\0\15\11" +
			"\1\225\3\11\1\0\5\11\11\0\10\11\2\0\3\11" +
			"\5\0\2\11\1\226\16\11\1\0\5\11\11\0\10\11" +
			"\2\0\3\11\5\0\4\11\1\227\14\11\1\0\5\11" +
			"\11\0\10\11\2\0\3\11";
	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};
	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\1\0\1\11\2\1\1\11\16\1\1\11\1\1\3\11" +
			"\1\1\2\11\16\1\1\0\16\1\1\11\1\0\1\11" +
			"\10\1\3\0\24\1\1\11\1\0\12\1\1\0\6\1" +
			"\1\11\7\1\1\0\12\1\1\0\12\1\1\0\7\1" +
			"\1\11\3\1";
	private static java.io.Reader zzReader = null; // Fake
	/**
	 * the current state of the DFA
	 */
	private int zzState;
	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";
	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;
	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;
	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;
	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;
	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;
	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;
	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;
	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;
	private int yycolumn;
	private Stack<Integer> stack = new Stack<>();

	TaraLexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	TaraLexer(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	private static int[] zzUnpackAction() {
		int[] result = new int[151];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackRowMap() {
		int[] result = new int[151];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static int[] zzUnpackTrans() {
		int[] result = new int[5850];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

  /* user code: */

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackAttribute() {
		int[] result = new int[151];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 1774) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	private int transformToSpaces(CharSequence chain) {
		int value = 0;
		for (int i = 0; i < chain.length(); i++) {
			if (chain.charAt(i) == ('\n')) continue;
			if (chain.charAt(i) == ('\t')) value += 4;
			else value += 1;
		}
		return value;
	}

	private IElementType eof() {
		if (!stack.empty()) {
			stack.pop();
			if (!stack.empty())
				yypushback(yylength());
			return TaraTypes.DEDENT;
		}
		return null;
	}

	private IElementType cleanstack() {
		if (!stack.empty()) {
			stack.pop();
			if (!stack.empty() && isTextDedented(transformToSpaces(yytext())))
				yypushback(yylength());
			return TaraTypes.DEDENT;
		}
		return TokenType.WHITE_SPACE;
	}

	private boolean isTextIndented(int textLength) {
		if (!stack.empty())
			return textLength > (int) stack.peek();
		return false;
	}

	private boolean isTextDedented(int textLength) {
		if (!stack.empty())
			return textLength < (int) stack.peek();
		return false;
	}

	private IElementType calculateIndentationToken() {
		int textLength = transformToSpaces(yytext());
		if (stack.empty() || isTextIndented(textLength)) {
			stack.push(textLength);
			return TaraTypes.INDENT;
		} else if (isTextDedented(textLength)) {
			stack.pop();
			if (isTextDedented(textLength))
				yypushback(yylength());
			return TaraTypes.DEDENT;
		} else
			return TokenType.WHITE_SPACE;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p/>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p/>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p/>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p/>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
			     zzCurrentPosL++) {
				switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
					case '\u000B':
					case '\u000C':
					case '\u0085':
					case '\u2028':
					case '\u2029':
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else {
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn++;
				}
			}

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 13: {
					return calculateIndentationToken();
				}
				case 40:
					break;
				case 3: {
					return cleanstack();
				}
				case 41:
					break;
				case 25: {
					return TaraTypes.WORD;
				}
				case 42:
					break;
				case 18: {
					return TaraTypes.VAR;
				}
				case 43:
					break;
				case 17: {
					return TaraTypes.STRING_VALUE;
				}
				case 44:
					break;
				case 36: {
					return TaraTypes.ABSTRACT;
				}
				case 45:
					break;
				case 6: {
					return TaraTypes.LEFT_BRACKET;
				}
				case 46:
					break;
				case 10: {
					return TaraTypes.OPEN_AN;
				}
				case 47:
					break;
				case 35: {
					return TaraTypes.MULTIPLE;
				}
				case 48:
					break;
				case 2: {
					return TokenType.WHITE_SPACE;
				}
				case 49:
					break;
				case 32: {
					return TaraTypes.NATURAL_TYPE;
				}
				case 50:
					break;
				case 16: {
					return TaraTypes.LIST;
				}
				case 51:
					break;
				case 11: {
					return TaraTypes.CLOSE_AN;
				}
				case 52:
					break;
				case 26: {
					return TaraTypes.BOOLEAN_VALUE;
				}
				case 53:
					break;
				case 37: {
					return TaraTypes.HAS_CODE;
				}
				case 54:
					break;
				case 28: {
					return TaraTypes.FINAL;
				}
				case 55:
					break;
				case 12: {
					return TaraTypes.NATURAL_VALUE;
				}
				case 56:
					break;
				case 8: {
					return TaraTypes.DOT;
				}
				case 57:
					break;
				case 30: {
					return TaraTypes.STRING_TYPE;
				}
				case 58:
					break;
				case 9: {
					return TaraTypes.ASSIGN;
				}
				case 59:
					break;
				case 34: {
					return TaraTypes.OPTIONAL;
				}
				case 60:
					break;
				case 4: {
					return TaraTypes.IDENTIFIER_KEY;
				}
				case 61:
					break;
				case 19: {
					return TaraTypes.UID_TYPE;
				}
				case 62:
					break;
				case 23: {
					return TaraTypes.FROM_KEY;
				}
				case 63:
					break;
				case 24: {
					return TaraTypes.ROOT;
				}
				case 64:
					break;
				case 15: {
					return TaraTypes.NEGATIVE_VALUE;
				}
				case 65:
					break;
				case 21: {
					return TaraTypes.DOC_LINE;
				}
				case 66:
					break;
				case 29: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 67:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 68:
					break;
				case 14: {
					return TaraTypes.AS;
				}
				case 69:
					break;
				case 22: {
					return TaraTypes.DOUBLE_VALUE;
				}
				case 70:
					break;
				case 39: {
					return TaraTypes.EXTENSIBLE;
				}
				case 71:
					break;
				case 7: {
					return TaraTypes.RIGHT_BRACKET;
				}
				case 72:
					break;
				case 33: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 73:
					break;
				case 20: {
					return TaraTypes.INT_TYPE;
				}
				case 74:
					break;
				case 27: {
					return TaraTypes.DOC_BLOCK;
				}
				case 75:
					break;
				case 31: {
					return TaraTypes.CONCEPT_KEY;
				}
				case 76:
					break;
				case 5: {
					return TaraTypes.DEDENT;
				}
				case 77:
					break;
				case 38: {
					return TaraTypes.SINGLETON;
				}
				case 78:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						switch (zzLexicalState) {
							case YYINITIAL: {
								return eof();
							}
							case 152:
								break;
							default:
								return null;
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
