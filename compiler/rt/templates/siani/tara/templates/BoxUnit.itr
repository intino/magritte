def type(model)
	package magritte.boxes;

	import siani.tara.magritte.Box;
	import siani.tara.magritte.Morph;
	import siani.tara.magritte.NativeCode;
	import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
	import java.util.*;
	[import $language+lowercase.*;]
	[import $generatedLanguage+lowercase.*;]

	$importMetric...[$NL]

	public class $name+javaValidName extends Box {
		public static final Box box = new $name();

		@Override
		public Box$[] dependencies() {
			return new Box$[]{[magritte.dsl.$language+javaValidName~Dsl.box]};
		}

		@Override
		public void write() {
			registerTypes();
			$node...[$NL]
		}

		private LocalDateTime asDate(String date) {
			return LocalDateTime.from(DateTimeFormatter.ofPattern("dd/MM/yyyy hh:mm:ss").parse(date));
		}

		private void registerTypes() {
			$register
		}

		$native...[$NL$NL]
	}
end

def type(nodecontainer) trigger(register)
	register$Abstract($type+quoted, $class.class);
end

def type(nodecontainer) type(prototype) trigger(node)
	[proto("$name$plate")][$type...[]][$include...[]][$parameter...[]];
end

def type(nodecontainer) type(terminal_instance) trigger(node)
	[thing("$name$plate")][$type...[]][$include...[]][$parameter...[]];
end
def type(nodecontainer) trigger(node)
	[def("$name$plate")][$type...[]][$include...[]][$parameter...[]];
end

def type(native) trigger(native)
	public static class $className+javaValidName [extends $container] implements [$parentIntention+lowercase.natives.]$interface {
		@Override
		$signature {
			$body
		}
	}
end

def trigger(quoted)
	"$value"
end
