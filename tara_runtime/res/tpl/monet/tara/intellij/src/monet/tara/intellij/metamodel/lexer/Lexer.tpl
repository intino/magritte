/* The following code was generated by JFlex 1.4.3 on 5/03/14 7:55 */

package monet.::projectName::.intellij.metamodel.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import monet.::projectName::.intellij.metamodel.psi.::projectProperName::Types;

import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/03/14 7:55 from the specification file
 * <tt>/Users/oroncal/workspace/::projectName::/intellij/src/monet/::projectName::/intellij/metamodel/lexer/::projectProperName::.flex</tt>
 */
class ::projectProperName::Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\60\1\1\1\2\3\0\16\60\4\0\1\1\1\0\1\43\1\0"+
    "\1\57\2\0\1\55\3\0\1\46\1\0\1\25\1\40\1\0\12\56"+
    "\1\41\1\42\1\44\1\0\1\45\2\0\1\57\1\54\1\3\1\52"+
    "\4\57\1\50\4\57\1\51\4\57\1\53\1\57\1\47\1\57\1\31"+
    "\3\57\1\34\1\0\1\35\1\0\1\57\1\0\1\20\1\23\1\6"+
    "\1\26\1\7\1\22\1\27\1\14\1\17\2\57\1\15\1\12\1\5"+
    "\1\4\1\10\1\57\1\13\1\21\1\11\1\24\1\32\1\33\1\30"+
    "\1\16\1\57\1\36\1\0\1\37\1\0\41\60\2\0\4\57\4\0"+
    "\1\57\2\0\1\60\7\0\1\57\4\0\1\57\5\0\27\57\1\0"+
    "\37\57\1\0\u013f\57\31\0\162\57\4\0\14\57\16\0\5\57\11\0"+
    "\1\57\21\0\130\60\5\0\23\60\12\0\1\57\13\0\1\57\1\0"+
    "\3\57\1\0\1\57\1\0\24\57\1\0\54\57\1\0\46\57\1\0"+
    "\5\57\4\0\202\57\1\0\4\60\3\0\105\57\1\0\46\57\2\0"+
    "\2\57\6\0\20\57\41\0\46\57\2\0\1\57\7\0\47\57\11\0"+
    "\21\60\1\0\27\60\1\0\3\60\1\0\1\60\1\0\2\60\1\0"+
    "\1\60\13\0\33\57\5\0\3\57\15\0\4\60\14\0\6\60\13\0"+
    "\32\57\5\0\13\57\16\60\7\0\12\56\4\0\2\57\1\60\143\57"+
    "\1\0\1\57\10\60\1\0\6\60\2\57\2\60\1\0\4\60\2\57"+
    "\12\56\3\57\2\0\1\57\17\0\1\60\1\57\1\60\36\57\33\60"+
    "\2\0\3\57\60\0\46\57\13\60\1\57\u014f\0\3\60\66\57\2\0"+
    "\1\60\1\57\20\60\2\0\1\57\4\60\3\0\12\57\2\60\2\0"+
    "\12\56\21\0\3\60\1\0\10\57\2\0\2\57\2\0\26\57\1\0"+
    "\7\57\1\0\1\57\3\0\4\57\2\0\1\60\1\57\7\60\2\0"+
    "\2\60\2\0\3\60\11\0\1\60\4\0\2\57\1\0\3\57\2\60"+
    "\2\0\12\56\4\57\15\0\3\60\1\0\6\57\4\0\2\57\2\0"+
    "\26\57\1\0\7\57\1\0\2\57\1\0\2\57\1\0\2\57\2\0"+
    "\1\60\1\0\5\60\4\0\2\60\2\0\3\60\13\0\4\57\1\0"+
    "\1\57\7\0\12\56\2\60\3\57\14\0\3\60\1\0\11\57\1\0"+
    "\3\57\1\0\26\57\1\0\7\57\1\0\2\57\1\0\5\57\2\0"+
    "\1\60\1\57\10\60\1\0\3\60\1\0\3\60\2\0\1\57\17\0"+
    "\2\57\2\60\2\0\12\56\1\0\1\57\17\0\3\60\1\0\10\57"+
    "\2\0\2\57\2\0\26\57\1\0\7\57\1\0\2\57\1\0\5\57"+
    "\2\0\1\60\1\57\6\60\3\0\2\60\2\0\3\60\10\0\2\60"+
    "\4\0\2\57\1\0\3\57\4\0\12\56\1\0\1\57\20\0\1\60"+
    "\1\57\1\0\6\57\3\0\3\57\1\0\4\57\3\0\2\57\1\0"+
    "\1\57\1\0\2\57\3\0\2\57\3\0\3\57\3\0\10\57\1\0"+
    "\3\57\4\0\5\60\3\0\3\60\1\0\4\60\11\0\1\60\17\0"+
    "\11\56\11\0\1\57\7\0\3\60\1\0\10\57\1\0\3\57\1\0"+
    "\27\57\1\0\12\57\1\0\5\57\4\0\7\60\1\0\3\60\1\0"+
    "\4\60\7\0\2\60\11\0\2\57\4\0\12\56\22\0\2\60\1\0"+
    "\10\57\1\0\3\57\1\0\27\57\1\0\12\57\1\0\5\57\2\0"+
    "\1\60\1\57\7\60\1\0\3\60\1\0\4\60\7\0\2\60\7\0"+
    "\1\57\1\0\2\57\4\0\12\56\22\0\2\60\1\0\10\57\1\0"+
    "\3\57\1\0\27\57\1\0\20\57\4\0\6\60\2\0\3\60\1\0"+
    "\4\60\11\0\1\60\10\0\2\57\4\0\12\56\22\0\2\60\1\0"+
    "\22\57\3\0\30\57\1\0\11\57\1\0\1\57\2\0\7\57\3\0"+
    "\1\60\4\0\6\60\1\0\1\60\1\0\10\60\22\0\2\60\15\0"+
    "\60\57\1\60\2\57\7\60\4\0\10\57\10\60\1\0\12\56\47\0"+
    "\2\57\1\0\1\57\2\0\2\57\1\0\1\57\2\0\1\57\6\0"+
    "\4\57\1\0\7\57\1\0\3\57\1\0\1\57\1\0\1\57\2\0"+
    "\2\57\1\0\4\57\1\60\2\57\6\60\1\0\2\60\1\57\2\0"+
    "\5\57\1\0\1\57\1\0\6\60\2\0\12\56\2\0\2\57\42\0"+
    "\1\57\27\0\2\60\6\0\12\56\13\0\1\60\1\0\1\60\1\0"+
    "\1\60\4\0\2\60\10\57\1\0\42\57\6\0\24\60\1\0\2\60"+
    "\4\57\4\0\10\60\1\0\44\60\11\0\1\60\71\0\42\57\1\0"+
    "\5\57\1\0\2\57\1\0\7\60\3\0\4\60\6\0\12\56\6\0"+
    "\6\57\4\60\106\0\46\57\12\0\51\57\7\0\132\57\5\0\104\57"+
    "\5\0\122\57\6\0\7\57\1\0\77\57\1\0\1\57\1\0\4\57"+
    "\2\0\7\57\1\0\1\57\1\0\4\57\2\0\47\57\1\0\1\57"+
    "\1\0\4\57\2\0\37\57\1\0\1\57\1\0\4\57\2\0\7\57"+
    "\1\0\1\57\1\0\4\57\2\0\7\57\1\0\7\57\1\0\27\57"+
    "\1\0\37\57\1\0\1\57\1\0\4\57\2\0\7\57\1\0\47\57"+
    "\1\0\23\57\16\0\11\56\56\0\125\57\14\0\u026c\57\2\0\10\57"+
    "\12\0\32\57\5\0\113\57\3\0\3\57\17\0\15\57\1\0\4\57"+
    "\3\60\13\0\22\57\3\60\13\0\22\57\2\60\14\0\15\57\1\0"+
    "\3\57\1\0\2\60\14\0\64\57\40\60\3\0\1\57\3\0\2\57"+
    "\1\60\2\0\12\56\41\0\3\60\2\0\12\56\6\0\130\57\10\0"+
    "\51\57\1\60\126\0\35\57\3\0\14\60\4\0\14\60\12\0\12\56"+
    "\36\57\2\0\5\57\u038b\0\154\57\224\0\234\57\4\0\132\57\6\0"+
    "\26\57\2\0\6\57\2\0\46\57\2\0\6\57\2\0\10\57\1\0"+
    "\1\57\1\0\1\57\1\0\1\57\1\0\37\57\2\0\65\57\1\0"+
    "\7\57\1\0\1\57\3\0\3\57\1\0\7\57\3\0\4\57\2\0"+
    "\6\57\4\0\15\57\5\0\3\57\1\0\7\57\17\0\4\60\32\0"+
    "\5\60\20\0\2\57\23\0\1\57\13\0\4\60\6\0\6\60\1\0"+
    "\1\57\15\0\1\57\40\0\22\57\36\0\15\60\4\0\1\60\3\0"+
    "\6\60\27\0\1\57\4\0\1\57\2\0\12\57\1\0\1\57\3\0"+
    "\5\57\6\0\1\57\1\0\1\57\1\0\1\57\1\0\4\57\1\0"+
    "\3\57\1\0\7\57\3\0\3\57\5\0\5\57\26\0\44\57\u0e81\0"+
    "\3\57\31\0\11\57\6\60\1\0\5\57\2\0\5\57\4\0\126\57"+
    "\2\0\2\60\2\0\3\57\1\0\137\57\5\0\50\57\4\0\136\57"+
    "\21\0\30\57\70\0\20\57\u0200\0\u19b6\57\112\0\u51a6\57\132\0\u048d\57"+
    "\u0773\0\u2ba4\57\u215c\0\u012e\57\2\0\73\57\225\0\7\57\14\0\5\57"+
    "\5\0\1\57\1\60\12\57\1\0\15\57\1\0\5\57\1\0\1\57"+
    "\1\0\2\57\1\0\2\57\1\0\154\57\41\0\u016b\57\22\0\100\57"+
    "\2\0\66\57\50\0\15\57\3\0\20\60\20\0\4\60\17\0\2\57"+
    "\30\0\3\57\31\0\1\57\6\0\5\57\1\0\207\57\2\0\1\60"+
    "\4\0\1\57\13\0\12\56\7\0\32\57\4\0\1\57\1\0\32\57"+
    "\12\0\132\57\3\0\6\57\2\0\6\57\2\0\6\57\2\0\3\57"+
    "\3\0\2\57\3\0\2\57\22\0\3\60\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\15\4\1\1\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\1\6\4\1\1\1\16\1\3\12\4\1\17"+
    "\4\4\1\20\2\4\1\21\1\0\1\22\6\4\1\0"+
    "\1\23\1\0\2\4\1\24\14\4\1\25\1\26\5\4"+
    "\1\27\4\4\1\30\2\4\1\31\1\0\3\4\1\32"+
    "\11\4\1\33\1\4\1\0\2\4\1\34\12\4\1\0"+
    "\4\4\1\35\1\36\1\4\1\37\4\4\1\0\2\4"+
    "\1\40\1\41\1\42\1\43\2\4\1\44\1\45\1\46"+
    "\3\4\1\47\1\50\1\4\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\61\0\61\0\61"+
    "\0\61\0\61\0\u0405\0\u0436\0\61\0\61\0\u0467\0\u0498"+
    "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620"+
    "\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u0157\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\61\0\u0436\0\61\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u05be\0\61\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0157\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0157\0\u0157\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0ab8\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0157\0\u0f50\0\u0f81\0\u0157\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u1045\0\u0157\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u0157\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u0157\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u0157\0\u0157\0\u15d2\0\u0157\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u0157\0\u0157\0\u0157\0\u0157\0\u175a"+
    "\0\u178b\0\u0157\0\61\0\u0157\0\u17bc\0\u17ed\0\u181e\0\u0157"+
    "\0\u0157\0\u184f\0\u0157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\3\10\1\17\1\20"+
    "\1\21\2\10\1\22\3\10\1\23\1\24\1\10\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\10\1\2\62\0\1\3\60\0\1\50"+
    "\1\4\61\0\1\10\1\51\20\10\1\0\6\10\13\0"+
    "\6\10\1\0\3\10\3\0\5\10\1\52\14\10\1\0"+
    "\6\10\13\0\6\10\1\0\3\10\3\0\4\10\1\53"+
    "\15\10\1\0\6\10\13\0\6\10\1\0\3\10\3\0"+
    "\22\10\1\0\6\10\13\0\6\10\1\0\3\10\3\0"+
    "\22\10\1\0\2\10\1\54\3\10\13\0\6\10\1\0"+
    "\3\10\3\0\1\10\1\55\20\10\1\0\6\10\13\0"+
    "\6\10\1\0\3\10\3\0\10\10\1\56\11\10\1\0"+
    "\6\10\13\0\6\10\1\0\3\10\3\0\1\10\1\57"+
    "\17\10\1\60\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\1\10\1\61\20\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\15\10\1\62\4\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\16\10\1\63\1\10"+
    "\1\64\1\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\14\10\1\65\5\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\14\10\1\66\1\67\4\10\1\0"+
    "\6\10\13\0\6\10\1\0\3\10\56\0\1\70\5\0"+
    "\1\10\1\71\20\10\1\0\6\10\13\0\6\10\1\0"+
    "\3\10\3\0\15\10\1\72\4\10\1\0\6\10\13\0"+
    "\6\10\1\0\3\10\35\0\1\73\65\0\1\33\16\0"+
    "\43\74\1\75\15\74\56\0\1\47\5\0\14\10\1\76"+
    "\5\10\1\0\6\10\13\0\6\10\1\0\3\10\3\0"+
    "\2\10\1\77\17\10\1\0\6\10\13\0\6\10\1\0"+
    "\3\10\3\0\15\10\1\100\4\10\1\0\6\10\13\0"+
    "\6\10\1\0\3\10\3\0\1\10\1\101\20\10\1\0"+
    "\6\10\13\0\6\10\1\0\3\10\3\0\6\10\1\102"+
    "\13\10\1\0\6\10\13\0\6\10\1\0\3\10\3\0"+
    "\1\10\1\103\20\10\1\0\6\10\13\0\6\10\1\0"+
    "\3\10\2\104\1\105\56\104\40\0\1\106\15\0\1\47"+
    "\3\0\1\50\62\0\2\10\1\107\17\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\6\10\1\110\13\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\22\10"+
    "\1\0\5\10\1\111\13\0\6\10\1\0\3\10\3\0"+
    "\6\10\1\112\13\10\1\0\6\10\13\0\6\10\1\0"+
    "\3\10\3\0\12\10\1\113\7\10\1\0\6\10\13\0"+
    "\6\10\1\0\3\10\3\0\21\10\1\114\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\10\10\1\115\11\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\12\10"+
    "\1\116\7\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\1\10\1\117\20\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\16\10\1\120\3\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\16\10\1\121\3\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\2\10"+
    "\1\122\17\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\2\10\1\123\17\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\12\10\1\124\7\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\40\0\1\106\15\0\1\70"+
    "\5\0\10\10\1\125\11\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\10\10\1\126\11\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\22\10\1\0\1\127"+
    "\5\10\13\0\6\10\1\0\3\10\3\0\6\10\1\130"+
    "\13\10\1\0\6\10\13\0\6\10\1\0\3\10\3\0"+
    "\6\10\1\131\13\10\1\0\6\10\13\0\6\10\1\0"+
    "\3\10\3\0\21\10\1\132\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\10\10\1\133\11\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\1\10\1\134\20\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\56\0\1\135"+
    "\5\0\3\10\1\136\16\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\14\10\1\137\5\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\4\10\1\140\15\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\13\10"+
    "\1\141\6\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\4\10\1\142\15\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\5\10\1\143\14\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\6\10\1\144\13\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\6\10"+
    "\1\145\13\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\22\10\1\146\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\6\10\1\147\13\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\22\10\1\0\1\10\1\150\4\10"+
    "\13\0\6\10\1\0\3\10\3\0\15\10\1\151\4\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\16\10"+
    "\1\114\3\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\22\10\1\0\1\152\5\10\13\0\6\10\1\0"+
    "\3\10\3\0\4\10\1\153\15\10\1\0\6\10\13\0"+
    "\6\10\1\0\3\10\3\0\21\10\1\154\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\20\10\1\155\1\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\14\10"+
    "\1\156\5\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\12\10\1\157\7\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\4\10\1\160\15\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\1\10\1\161\20\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\2\10"+
    "\1\162\17\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\7\10\1\163\12\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\11\10\1\164\10\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\14\10\1\165\5\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\6\0\1\166"+
    "\55\0\10\10\1\167\11\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\12\10\1\170\7\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\12\10\1\171\7\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\22\10"+
    "\1\0\1\10\1\172\4\10\13\0\6\10\1\0\3\10"+
    "\3\0\10\10\1\173\11\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\12\10\1\174\7\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\2\10\1\175\17\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\4\10"+
    "\1\176\15\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\5\10\1\177\14\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\2\10\1\200\17\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\16\10\1\201\3\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\1\10"+
    "\1\202\20\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\5\10\1\203\14\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\4\0\1\204\57\0\15\10\1\205\4\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\4\10"+
    "\1\206\15\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\4\10\1\207\15\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\15\10\1\210\4\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\4\10\1\211\15\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\22\10"+
    "\1\0\1\10\1\212\4\10\13\0\6\10\1\0\3\10"+
    "\3\0\15\10\1\213\4\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\6\10\1\214\13\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\15\10\1\215\4\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\14\10"+
    "\1\216\5\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\10\10\1\217\11\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\12\10\1\220\7\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\26\0\1\221\35\0\3\10"+
    "\1\222\16\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\6\10\1\223\13\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\10\10\1\224\11\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\12\10\1\225\7\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\2\10"+
    "\1\226\17\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\12\10\1\227\7\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\20\10\1\230\1\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\5\10\1\231\14\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\4\10"+
    "\1\232\15\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\7\0\1\233\54\0\6\10\1\234\13\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\1\10\1\235\20\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\12\10"+
    "\1\236\7\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\11\10\1\237\10\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10\3\0\2\10\1\240\17\10\1\0\6\10"+
    "\13\0\6\10\1\0\3\10\3\0\4\10\1\241\15\10"+
    "\1\0\6\10\13\0\6\10\1\0\3\10\3\0\14\10"+
    "\1\242\5\10\1\0\6\10\13\0\6\10\1\0\3\10"+
    "\3\0\3\10\1\243\16\10\1\0\6\10\13\0\6\10"+
    "\1\0\3\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\5\11\2\1\2\11\34\1\1\11"+
    "\1\0\1\11\6\1\1\0\1\11\1\0\37\1\1\0"+
    "\17\1\1\0\15\1\1\0\14\1\1\0\11\1\1\11"+
    "\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null:TokenType.WHITE_SPACE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType openBracket() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

    private IElementType closeBracket() {
       if (queue.isEmpty()) {
            blockManager.closeBracket(yytext().length());
            storeTokens();
        }
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  ::projectProperName::Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ::projectProperName::Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1774) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return ::projectProperName::Types.LEFT_SQUARE;
          }
        case 42: break;
        case 21: 
          { return ::projectProperName::Types.VAR;
          }
        case 43: break;
        case 38: 
          { return ::projectProperName::Types.ABSTRACT;
          }
        case 44: break;
        case 12: 
          { return ::projectProperName::Types.OPEN_AN;
          }
        case 45: break;
        case 36: 
          { return ::projectProperName::Types.MULTIPLE;
          }
        case 46: break;
        case 23: 
          { return ::projectProperName::Types.DOUBLE_VALUE_KEY;
          }
        case 47: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 48: break;
        case 33: 
          { return ::projectProperName::Types.NATURAL_TYPE;
          }
        case 49: break;
        case 17: 
          { return ::projectProperName::Types.LIST;
          }
        case 50: break;
        case 13: 
          { return ::projectProperName::Types.CLOSE_AN;
          }
        case 51: break;
        case 37: 
          { return ::projectProperName::Types.HAS_CODE;
          }
        case 52: break;
        case 27: 
          { return ::projectProperName::Types.MORPH_KEY;
          }
        case 53: break;
        case 41: 
          { return ::projectProperName::Types.POLYMORPHIC_KEY;
          }
        case 54: break;
        case 28: 
          { return ::projectProperName::Types.FINAL;
          }
        case 55: break;
        case 9: 
          { return ::projectProperName::Types.DOT;
          }
        case 56: break;
        case 30: 
          { return ::projectProperName::Types.STRING_TYPE;
          }
        case 57: break;
        case 10: 
          { return ::projectProperName::Types.ASSIGN;
          }
        case 58: break;
        case 7: 
          { return openBracket();
          }
        case 59: break;
        case 35: 
          { return ::projectProperName::Types.OPTIONAL;
          }
        case 60: break;
        case 4: 
          { return ::projectProperName::Types.IDENTIFIER_KEY;
          }
        case 61: break;
        case 22: 
          { return ::projectProperName::Types.UID_TYPE;
          }
        case 62: break;
        case 16: 
          { return ::projectProperName::Types.NEGATIVE_VALUE_KEY;
          }
        case 63: break;
        case 25: 
          { return ::projectProperName::Types.ROOT;
          }
        case 64: break;
        case 19: 
          { return ::projectProperName::Types.DOC_LINE;
          }
        case 65: break;
        case 18: 
          { return ::projectProperName::Types.STRING_VALUE_KEY;
          }
        case 66: break;
        case 29: 
          { return ::projectProperName::Types.DOUBLE_TYPE;
          }
        case 67: break;
        case 6: 
          { return ::projectProperName::Types.RIGHT_SQUARE;
          }
        case 68: break;
        case 14: 
          { return ::projectProperName::Types.NATURAL_VALUE_KEY;
          }
        case 69: break;
        case 11: 
          { return semicolon();
          }
        case 70: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 71: break;
        case 20: 
          { return ::projectProperName::Types.NEW;
          }
        case 72: break;
        case 24: 
          { return ::projectProperName::Types.BOOLEAN_VALUE_KEY;
          }
        case 73: break;
        case 15: 
          { return ::projectProperName::Types.AS;
          }
        case 74: break;
        case 40: 
          { return ::projectProperName::Types.EXTENSIBLE;
          }
        case 75: break;
        case 34: 
          { return ::projectProperName::Types.BOOLEAN_TYPE;
          }
        case 76: break;
        case 32: 
          { return ::projectProperName::Types.INT_TYPE;
          }
        case 77: break;
        case 8: 
          { return closeBracket();
          }
        case 78: break;
        case 31: 
          { return ::projectProperName::Types.CONCEPT_KEY;
          }
        case 79: break;
        case 26: 
          { return ::projectProperName::Types.WORD_KEY;
          }
        case 80: break;
        case 39: 
          { return ::projectProperName::Types.SINGLETON;
          }
        case 81: break;
        case 3: 
          { return newlineIndent();
          }
        case 82: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 164: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
