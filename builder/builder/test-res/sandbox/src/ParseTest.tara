dsl Proteo

use Store

Concept Process
	var date from is final
	var date to is final
	var function:Execution execute = 'executeProcess(self);' is private
	Concept Task
		var word:TimeScale scale is final
		has Agent

Facet Conditional on Process

Concept Source
	var function:Generator generate
	has Source
	sub CSV
		var resource file
		var string[] metadata is private
		var integer lastReadLine = -1 is private
		var function:Generator generate = 'generateLinesForInstant(self, instant, scale);' is private
		var function:InstantCreator instantFrom
	sub Listener
		var string path
		var function:ActionRegistry register
		var function:Generator generate
	sub WebService
		var string uri
		var function:Generator generate
	sub Database
		var string uri
		var string user
		var string password
		var function:Generator generate
	sub Bot
		var function:Generator generate


MetaConcept Agent

	sub Builder
		var Source[] sources is terminal
		var Record type is concept
		var function:ExecutionOnInstant execute

	sub Mounter
		var function:ExecutionOnInstant execute

	sub Validator
		Concept Rule

	sub Cleaner
		var Record record is concept
		var function:Execution execute = 'self.model().components(self.record().layerClass()).forEach(Layer::remove)' is private

	sub Reporter
		var string path is final
		var function:ActionRegistry register

Concept Categorization
	var Member member is concept
	var string label
	var word:{Static Dynamic} mode = Static
	var function:FactGrouper group is private
		---
		Category nullCategory = new Category(null);
		Map<Category, List<Fact>> collect = facts.parallelStream()
				.collect(groupingBy(f -> findCategory(f, categories).orElse(nullCategory), toList()));
		collect.remove(nullCategory);
		return collect
		---

	has Categorization
	Concept Category
		var string label
		var function:CategoryChecker check
		var Category parent
		has Category

Facet Automatic on Categorization
	var function:Attribute attribute is final
	var function:CategoryLinker link = 'null' is terminal
	Concept Category extends Categorization.Category
		var function:CategoryChecker check ='AutomaticCategoryChecker.check(self, record);'
		var string[] memberNames = empty is private

Facet Political on Categorization
	var resource:{geojson} regions
	var function:RegionsReader readRegions = 'new GeoJsonReader().read(self.regions())' is private

Facet Taxonomic on Categorization
	Concept Category extends Categorization.Category
		var function:CategoryChecker check ='TaxonomyChecker.check(self, record);'

Concept Metric
	Concept Unit
		var string label = 'self._simpleName()' is native
		var function:Converter convert is final

Concept Indicator
	var Fact fact is concept
	var function:Attribute attribute
	var word:Aggregation aggregation
	var word[]:TimeScale scales
	var Categorization[] dimensions = empty
	var Metric.Unit unit

Concept Role
	var string user
	var date from
	var date to = ""

MetaConcept Record
	sub Member
		var string label is terminal
		has Member

	sub Fact
		var integer:{items} size = 1 is terminal
		var word:{Sum Max Min} aggregation = Sum is terminal

	sub Event
		var string label is terminal
		var date instant is terminal
		var word[]:TimeScale visibility is terminal

	sub Assertion
		var date instant is terminal


Concept Bucket
	var date instant is terminal
	var word:Measure measure is terminal
	var word:TimeScale scale is terminal
	has Fact
	has Event
	has Assertion


Facet Geolocated on Member
	var double x is terminal
	var double y is terminal


Facet Dynamic on Member
	var date created is terminal final
	var boolean alive = true


//TAFAT


!!Simulation
Concept:{1..1} Simulation
	var date from is final
	var date to is final
	var integer seed = -1
	var integer times = 1
	has Assertion
	has Trace
	has Stop

Concept Output
	var function:Action init is private final
	var function:Action process is private final
	var function:Action terminate is private final

MetaConcept Agent
	has Knol

Facet Listener on Agent
	var function:Message receiveMessage

MetaConcept Entity
	has Entity
	has Agent:{0..*}
	MetaConcept Feature into feature
		has Feature

MetaFacet Aspect on Entity
	has TableFunction is final

MetaFacet Behavior is abstract
	var integer step = 1 is terminal
	var integer timeout = 0
	var function:Check checkStep is final
		--
		if (self.timeout() == 0) {
			self.timeout(self.step() - 1)
			return true;
		}
		self.timeout(self.timeout() - 1)
		return false;
		--
	MetaConcept Start is final into feature prototype
		var function:Action start is final
	MetaConcept Knol is final into prototype feature
		has Knol
	has PeriodicActivity
	has Action is final
	has ConditionalAction is final
	has EquationSystem is final
	has StateChart is final
	has Task is final
	has TableFunction is final
	has Job is final
	has Map is final

MetaFacet Behavior on Entity
MetaFacet Behavior on Agent

MetaFacet FmuModel is abstract
	var string fmuPath is terminal
	var double step = 0.01 is terminal
	Concept Input
		var string fmuVariableName
		var function:Write write
	Concept Output
		var string fmuVariableName
		var function:Read read

MetaFacet FmuModel on Entity
MetaFacet FmuModel on Agent

MetaConcept Knol
	has Knol

Facet Parallelizable on Behavior

Concept Event
	var date instant
	var function:Action execute

Concept:{0..1} Profiling
	var integer seed = -1
	Concept Profiler
		var function:Profile execute

MetaConcept PeriodicActivity is abstract
	var function:Execute execute is final

MetaConcept Action extends PeriodicActivity into prototype feature
	var function:Action action
	var function:Execute execute = 'self.action()' is final

MetaConcept ConditionalAction extends PeriodicActivity into prototype feature
	var function:Check condition = 'true'
	var function:Action action
	var function:Execute execute = 'if (self.condition()) self.action()' is final

MetaConcept EquationSystem is prototype
	var word:{Euler} solver = Euler
	var double step = 0.1
	MetaConcept Element into feature
		var function:Function calculus
		var double value = 0 is terminal
		sub Stock:{0..1}
		sub Flow:{0..1}

MetaConcept StateChart extends PeriodicActivity into prototype feature
	var function:Execute execute = 'update(self, step)' is final
	var string message = ""
	var function:Message receiveMessage = 'self.message(message);if(self.current() != null) self.current().receiveMessage(message)' is final
	var StateChart current = empty
	MetaConcept State extends StateChart
		MetaConcept Action
			var function:Action action is final
			sub EntryAction
			sub ExitAction
			sub PeriodicAction
	MetaConcept Transition
		var State from is final
		var State to is final
		var function:Action action = ' '
		MetaConcept:{1..1} Trigger
			var function:CheckTransition check
			sub Condition >var function:CheckTransition check
			sub TimeBased
				var date when = "" is private
				var function:CheckTransition check = '!self.when().isAfter(getDateTime())' is private
				var function:Action activate is private
				sub Timeout
					var function:Action activate = 'self.when(getDateTime().plusSeconds(self.timeout()))'
					var function:Timeout timeout is final
				sub After
					var function:Action activate = 'self.when(getDateTime().plusSeconds(self.fixedTime()))'
					var integer:Time fixedTime is final
				sub Rate
					var function:Action activate = 'self.when(getDateTime().plusSeconds(self.unit() / self.times()))'
					var integer:{times} times;var integer unit
			sub Message
				var string expectedMessage
				var function:CheckTransition check = 'self._owner(StateChart.class).message().equals(self.expectedMessage())'

MetaConcept Task into prototype feature
	var word[]:DayOfWeek days = Monday Tuesday Wednesday Thursday Friday Saturday Sunday
	var date scheduledDate = ""
	var function:Check check = '!self.scheduledDate().isAfter(getDateTime())' is final
	var function:Action program = 'self.scheduledDate(scheduledDate(self))' is final
	MetaConcept:{1..1} Start
		var time start is final
		var integer:Time deviation = 0 minute
	MetaConcept:{0..1} Finish
		sub End
			var time end is final
			var integer:Time deviation = 0 minute
		sub Duration
			var integer:Time duration is final
			var integer:Time deviation = 0 minute
	has Task
	has JobAction
	MetaConcept Action
		var function:Action action is final
		sub StartAction
		sub RecurrentAction
		sub EndAction

Concept JobAction is feature
	var Job[] job is final
	sub StartJob
	sub RecurrentJob
	sub EndJob

Concept Job is feature
	Concept:{0..1} Start
		var integer:Time start is final
		var integer:Time deviation = 0 minute
	Concept:{0..1} Duration
		var integer:Time duration is final
		var integer:Time deviation = 0 minute
	has Job
	has JobAction
	Concept Action
		var function:Action action
		sub StartAction
		sub RecurrentAction
		sub EndAction

MetaConcept TableFunction into prototype feature
	MetaConcept:{0..1} Interpolation
		sub NoneInterpolation
		sub LinearInterpolation
		sub PolynomialInterpolation
		sub SplineInterpolation
		sub StepInterpolation
	MetaConcept:{0..1} Extrapolation
		sub NoneExtrapolation
		sub CustomExtrapolation > var function:Function extrapolationFunction
		sub NearestPointExtrapolation
		sub RepeatSeriesExtrapolation
		sub LinearExtrapolation
		sub PolynomialExtrapolation
		sub SplineExtrapolation
		sub StepExtrapolation
	MetaConcept Data
		var double[] input
		var double output
	var function:Calculate get = '0' is terminal

Concept Map
	var function:Get get = '0' is final
	Concept Entry >var string key;var double value


Concept:{0..1} UserInterface
	var string data = 'buildJson(self)' is native private
	var string values = 'values(self)' is native private
	var string title
	var resource:{jpg png} logo
	var integer port = 8080
	Concept GraphicalComponent
		var string title
		var function:BuildJson data is private
		var function:BuildJson values is private

		sub Heatmap
			var function:BuildJson data = 'tafat.natives.userinterface.heatmap.Data.buildJson(self) as JsonElement' is private
			var function:BuildJson values = 'tafat.natives.userinterface.heatmap.Values.values(self)' is private
			var resource:{jpg png} background
			var word:Color color
			Concept Region
				var function:BuildJson data is private
				var double value is native
				var integer zIndex = 1
				sub Square
					var function:BuildJson data = 'tafat.natives.userinterface.heatmap.square.Data.buildJson(self)' is private
					var integer top
					var integer left
					var integer width
					var integer height
				sub Circle
					var function:BuildJson data = 'tafat.natives.userinterface.heatmap.circle.Data.buildJson(self)' is private
					var integer centerX
					var integer centerY
					var integer diameter

		sub LineChart
			var function:BuildJson data = 'tafat.natives.userinterface.linechart.Data.buildJson(self);' is private
			var function:BuildJson values = 'tafat.natives.userinterface.linechart.Values.values(self)' is private
			Concept Line
				var function:BuildJson data = 'tafat.natives.userinterface.linechart.line.Data.buildJson(self);' is private
				var string label
				var double value is native