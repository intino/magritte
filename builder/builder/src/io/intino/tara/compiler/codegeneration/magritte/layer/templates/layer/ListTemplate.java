package io.intino.tara.compiler.codegeneration.magritte.layer.templates.layer;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class ListTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((allTypes("owner", "variable", "multiple")), not(anyTypes("reactive", "inherited", "volatile", "overriden")), (trigger("list"))).output(literal("map.put(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(");")),
				rule().condition((allTypes("owner", "variable", "multiple")), not(anyTypes("inherited", "volatile", "overriden")), (trigger("list"))).output(literal("map.put(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" != null ? new java.util.ArrayList(java.util.Collections.singletonList(this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(")) : java.util.Collections.emptyList());")),
				rule().condition((allTypes("reference", "owner", "variable")), not(anyTypes("inherited", "volatile", "overriden")), (trigger("list"))).output(literal("map.put(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" != null ? new java.util.ArrayList(java.util.Collections.singletonList(this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(")) : java.util.Collections.emptyList());")),
				rule().condition((allTypes("owner", "function", "variable")), not(anyTypes("inherited", "volatile", "overriden")), (trigger("list"))).output(literal("map.put(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" != null ? new java.util.ArrayList(java.util.Collections.singletonList(this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(")) : java.util.Collections.emptyList());")),
				rule().condition((allTypes("owner", "variable")), not(anyTypes("inherited", "volatile", "overriden")), (trigger("list"))).output(literal("map.put(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList(java.util.Collections.singletonList(this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(")));")),
				rule().condition((allTypes("variable", "multiple", "metatype")), not(anyTypes("inherited", "volatile", "overriden")), (trigger("list"))).output(literal("map.put(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("());")),
				rule().condition((allTypes("variable", "metatype")), (anyTypes("reactive", "function")), not(anyTypes("inherited", "volatile", "overriden")), (trigger("list"))).output(literal("map.put(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList(java.util.Collections.singletonList(io.intino.tara.magritte.utils.NativeExtractor.extract(\"")).output(mark("name")).output(literal("\", _")).output(mark("containerName", "FirstLowerCase")).output(literal("))));")),
				rule().condition((allTypes("variable", "metatype")), not(anyTypes("inherited", "volatile", "overriden")), (trigger("list"))).output(literal("map.put(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList(java.util.Collections.singletonList(this._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("())));")),
				rule().condition((allTypes("single", "owner", "node")), not(anyTypes("instance", "inherited", "overriden")), (trigger("list"))).output(literal("if (")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" != null) nodes.add(this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".core$());")),
				rule().condition((allTypes("owner", "node")), not(anyTypes("instance", "inherited", "overriden")), (trigger("list"))).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List.stream().forEach(c -> nodes.add(c.core$()));")),
				rule().condition((allTypes("single", "owner", "node")), not(anyTypes("instance", "inherited", "overriden")), (trigger("componentlist"))).output(literal("if (")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" != null) components.add(this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".core$());")),
				rule().condition((allTypes("owner", "node")), not(anyTypes("instance", "inherited", "overriden")), (trigger("componentlist"))).output(literal("new java.util.ArrayList<>(")).output(mark("name", "toCamelCase", "toCamelCase", "FirstLowerCase")).output(literal("List).forEach(c -> components.add(c.core$()));")),
				rule().condition((type("node")), (trigger("list"))),
				rule().condition((type("node")), (trigger("componentlist")))
		);
	}
}