def type(Layer & decorable)
	package $package+javaValidName+lowercase;

	public class [$abstract ]$name+javaValidName+FirstUpperCase extends Abstract$name+javaValidName+FirstUpperCase {

		public $name+javaValidName+FirstUpperCase(io.intino.tara.magritte.Node node) {
			super(node);
		}
	}
end

def type(Layer)
	package $package+javaValidName+lowercase;

	import $workingPackage+javaValidName+lowercase.*;
	[$imports...[$NL]
	]

	$node
end

def type(single & owner) !type(overriden | instance) trigger(add)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+FirstLowerCase+javaValidName = node.as($qn+reference.class);
end

def type(owner) !type(overriden | instance) trigger(add)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+toCamelCase+FirstLowerCase~List.add(node.as($qn+reference.class));
end

def type(overriden) trigger(add)
end

def type(single & owner) !type(overriden | instance) trigger(remove)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+FirstLowerCase+javaValidName = null;
end

def type(owner) !type(overriden | instance) trigger(remove)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+toCamelCase+FirstLowerCase~List.remove(node.as($qn+reference.class));
end

def type(overriden) trigger(remove)
end

def type(node) !type(final | instance | abstract) trigger(new)
    public $qn+reference $name+FirstLowerCase+javaValidName($variable+parameters...[, ]) {
        $qn+reference newElement = core$$().graph().concept($qn+reference.class).createNode(this.name, core$$()).as($qn+reference.class);
		$variable+assign...[$NL]
        return newElement;
    }
end

def type(node) !type(single | final | instance | abstract | overriden) trigger(clear)
    public void $name+FirstLowerCase+javaValidWord(java.util.function.Predicate<$qn+reference> filter) {
		new java.util.ArrayList<>($name+FirstLowerCase~List()).stream().filter(filter).forEach(io.intino.tara.magritte.Layer::delete$$);
	}
end

def type(node & create) !type(final | instance) trigger(new)
    public $qn+reference $name+FirstLowerCase+javaValidName($variable+parameters...[, ]) {
        $qn+reference newElement = core$$().graph().concept($qn+reference.class).createNode(this.name, core$$()).as($qn+reference.class);
		$variable+assign...[$NL]
        return newElement;
    }
end

def type(node & create) !type(single | final | instance) trigger(clear)
    public void $name+FirstLowerCase+javaValidWord(java.util.function.Predicate<$qn+reference> filter) {
		new java.util.ArrayList<>($name+FirstLowerCase~List()).stream().filter(filter).forEach(io.intino.tara.magritte.Layer::delete$$);
	}
end

def type(node & owner) trigger(new)
end
def type(node & owner) trigger(clear)
end

def type(availableFacet) attribute(variable) trigger(availableFacet)
	public $qn+reference as$name+FirstUpperCase() {
		return a$$($qn+reference.class);
	}

	public $qn+reference as$name+FirstUpperCase([$variable+parameters...[, ]]) {
		$qn+reference newElement = core$$().addFacet($qn+reference.class);
		$variable+assign...[$NL]
        return newElement;
    }

    public boolean is$name+FirstUpperCase() {
    	return core$$().is($qn+reference.class);
    }

    public void remove$name+FirstUpperCase() {
		core$$().removeFacet($qn+reference.class);
    }
end

def type(availableFacet) trigger(availableFacet)
	public $qn+reference as$name+FirstUpperCase() {
		io.intino.tara.magritte.Layer as = a$$($qn+reference.class);
		return as != null ? ($qn+reference) as : [$abstract?core$$().addFacet($qn+reference.class)];
	}

	public boolean is$name+FirstUpperCase() {
		return core$$().is($qn+reference.class);
	}
end

def type(core) trigger(asCore)
	public $qn+reference as$name() {
		return ($qn+reference) a$$($qn+reference.class);
	}
end

def type(facetTarget) !type(overriden) trigger(facet)
	if (layer instanceof $qn+reference) _$name+FirstLowerCase = ($qn+reference) layer;
end

def type(constraint) trigger(facet)
	if (layer instanceof $qn+reference) _$name+FirstLowerCase = ($qn+reference) layer;
end

def trigger(decorable)
	Abstract
end

def !type(target) type(nodeimpl) !type(instance) trigger(Node)
	public[ $inner][ $abstract] class $decorable$name+javaValidName+FirstUpperCase[ extends $parent? extends io.intino.tara.magritte.Layer][ implements $flag+tag...[, ]] {
		$variable+declaration...[$NL][
		$node+declaration...[$NL]][
		$facetTarget+declaration...[$NL]][
		$constraint+declaration...[$NL]][
		$metaType][
		$metaFacet...[$NL]]

		public $decorable$name+javaValidName+FirstUpperCase(io.intino.tara.magritte.Node node) {
			super(node);[
			_metaType = a$$($metaType+typeInit.class);][
			_$metaFacet+name = a$$($metaFacet+typeInit.class);]
		}[

		$variable+getter...[$NL$NL]][

		$variable+setter...[$NL$NL]][

		$node+getter...[$NL$NL]][

		$node+setter...[$NL$NL]][

		$availableFacet...[$NL$NL]][
		$asCore][

		protected java.util.List<io.intino.tara.magritte.Node> componentList$$() {
			java.util.Set<io.intino.tara.magritte.Node> components = new java.util.LinkedHashSet<>(super.componentList$$());
			$node+componentList...[$NL]
			return new java.util.ArrayList<>(components);
		}]

		@Override
		protected java.util.Map<java.lang.String, java.util.List<?>> variables$$() {
			java.util.Map<String, java.util.List<?>> map = new java.util.LinkedHashMap<>($parent+var);
			$variable+list...[$NL]
			return map;
		}[

		@Override
		protected void addNode$$(io.intino.tara.magritte.Node node) {
			super.addNode$$(node);
			$node+add...[$NL]
		}][

		@Override
        protected void removeNode$$(io.intino.tara.magritte.Node node) {
            super.removeNode$$(node);
            $node+remove...[$NL]
        }]

		@Override
		protected void load$$(java.lang.String name, java.util.List<?> values) {
			super.load$$(name, values);[
			$facetTarget+init][
			$metaType+metaTypeLoad][
			$metaFacet+metaFacetLoad][
			$variable+init...[$NL~else ]]
		}

		@Override
		protected void set$$(java.lang.String name, java.util.List<?> values) {
			super.set$$(name, values);[
			$facetTarget+set][
			$metaType+metaTypeSet][
			$metaFacet+metaFacetSet][
			$variable+set...[$NL~else ]]
		}[

		@Override
		protected void sync$$(io.intino.tara.magritte.Layer layer) {
			super.sync$$(layer);
		    $facetTarget+facet...[$NL~else ]
		    $constraint+facet...[$NL~else ]
		}]
		[
		public Create create() {
			return new Create(null);
		}

		public Create create(java.lang.String name) {
			return new Create(name);
		}

		public class Create $parentName+parentCreate {
			$parentSuper+parentvariable

			public Create(java.lang.String name) {
				$parentSuper+parentinit
			}

			$node+new...[$NL$NL]
			$create+new...[$NL$NL]
		}]
		[
		public Clear clear() {
			return new Clear();
		}

		public class Clear $parentClearName+parentClear {
			$node+clear...[$NL$NL]
		}
		][
		$node...[$NL]
		]
		public $workingPackage+javaValidName+lowerCase.$generatedLanguage+javaValidName+FirstUpperCase~Graph graph() {
			return ($workingPackage+javaValidName+lowerCase.$generatedLanguage+javaValidName+FirstUpperCase~Graph) core$$().graph().as($workingPackage+javaValidName+lowerCase.$generatedLanguage+javaValidName+FirstUpperCase~Graph.class);
		}
	}

end

def trigger(parentCreate)
	extends $value.Create
end

def trigger(parentClear)
	extends $value.Clear
end

def type(metaFacet) trigger(name)
	$name+javaValidName+FirstLowerCase
end

def type(metaFacet) trigger(typeInit)
	$type
end

def trigger(typeInit)
	$value
end

def attribute(true) trigger(parentinit)
	super(name);
end

def attribute(false) trigger(parentinit)
	this.name = name;
end

def attribute(true) trigger(parentvariable)
end

def attribute(false) trigger(parentvariable)
	protected final java.lang.String name;
end

def trigger(metaTypeLoad)
	core$$().load(_metaType, name, values);
end

def trigger(metaTypeSet)
	core$$().set(_metaType, name, values);
end

def trigger(metaFacetLoad)
	core$$().load(_$name+FirstLowerCase, name, values);
end

def trigger(metaFacetSet)
	core$$().set(_$name+FirstLowerCase, name, values);
end

def trigger(metaType)
	protected $value _metaType;
end

def trigger(metaFacet)
	protected $type _$name+FirstLowerCase;
end

def trigger(tag)
	io.intino.tara.magritte.tags.$value+lowerCase+FirstUpperCase
end

def attribute(Layer) trigger(var)

end

def trigger(var)
	super.variables$$()
end
def attribute(true) trigger(inner)
	static
end

def attribute(true) trigger(abstract)
	abstract
end
