def type(graph)
	package $workingPackage+LowerCase;

	import io.intino.tara.magritte.Graph;

	public class GraphView extends io.intino.tara.magritte.GraphView {

		protected io.intino.tara.magritte.Graph graph;
		$node+declaration...[$NL]

		public GraphView(io.intino.tara.magritte.Graph graph) {
			this.graph = graph;
			this.graph.i18n().register("$name");
		}

		public void update() {
			$node+update...[$NL]
		}

		@Override
		protected void addNode(io.intino.tara.magritte.Node node) {
			$node+add...[$NL]
		}

		@Override
		protected void removeNode(io.intino.tara.magritte.Node node) {
			$node+remove...[$NL]
		}

		public String message(String language, String key, Object... parameters) {
			return graph.i18n().message(language, key, parameters);
		}

		public java.net.URL resourceAsMessage(String language, String key) {
			return graph.loadResource(graph.i18n().message(language, key));
		}

		public java.util.Map<String,String> keysIn(String language) {
			return graph.i18n().wordsIn(language);
		}

		public io.intino.tara.magritte.Concept concept(String concept) {
			return graph.concept(concept);
		}

		public io.intino.tara.magritte.Concept concept(java.lang.Class<? extends io.intino.tara.magritte.Layer> layerClass) {
			return graph.concept(layerClass);
		}

		public java.util.List<io.intino.tara.magritte.Concept> conceptList() {
			return graph.conceptList();
		}

		public java.util.stream.Stream<io.intino.tara.magritte.Concept> conceptList(java.util.function.Predicate<io.intino.tara.magritte.Concept> filter) {
			return graph.conceptList(filter);
		}

		public io.intino.tara.magritte.Node load(String node) {
			return graph.load(node);
		}

		public void loadPaths(String... paths) {
			graph.loadPaths(paths);
		}

		public void savePath(String... paths) {
			graph.save(paths);
		}

		public void saveAll(String... excludedPaths) {
			graph.saveAll(excludedPaths);
		}


		$node+getter...[$NL$NL]

		$node+filter...[$NL$NL]

		public io.intino.tara.magritte.Graph graph() {
			return graph;
		}

		public Create create() {
			return new Create("Misc", null);
		}

		public Create create(String path) {
			return new Create(path, null);
		}

		public Create create(String path, String name) {
			return new Create(path, name);
		}

		public Create clear() {
			return new Clear();
		}

		public class Create {
			private final String path;
			private final String name;

			public Create(String path, String name) {
				this.path = path;
				this.name = name;
			}

			$node+new...[$NL$NL]
		}

		public class Clear {
			$node+clear...[$NL$NL]
		}
	}
end

def type(instance) trigger(add)
	if(node.id().equals("$generatedLanguage#$name")) this.$name+firstLowercase+javaValidWord = node.as($conceptLayer+reference.class);
end

def type(single) !type(instance) trigger(add)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+firstLowercase+javaValidWord = node.as($qn+reference.class);
end

def !type(instance) trigger(add)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+firstLowercase~List.add(node.as($qn+reference.class));
end

def trigger(add)
end

def type(instance) trigger(remove)
	if(node.id().equals("$generatedLanguage#$name")) this.$name+firstLowercase+javaValidWord = null;
end

def type(single) !type(instance) trigger(remove)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+firstLowercase+javaValidWord = null;
end

def !type(instance) trigger(remove)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+firstLowercase~List.remove(node.as($qn+reference.class));
end

def trigger(remove)
end

def type(node & instance) trigger(declaration)
	private $conceptLayer $name+firstLowerCase+javaValidWord;
end

def type(node & single) trigger(declaration)
	private $qn+reference $name+firstLowerCase+javaValidWord;
end

def type(node) trigger(declaration)
	private java.util.List<$qn+reference> $name+firstLowerCase~List;
end

def type(node & instance) trigger(update)
    java.util.List<io.intino.tara.magritte.Node> $name+firstLowerCase+javaValidWord~List = this.graph.rootList(r -> r.id().equals("$generatedLanguage#$name"));
    if(!$name+firstLowerCase+javaValidWord~List.isEmpty()) this.$name+firstLowercase+javaValidWord = $name+firstLowerCase+javaValidWord~List.get(0).as($conceptLayer.class);
end

def type(node & single) trigger(update)
	$name+firstLowerCase = this.graph.rootList($qn+reference.class).stream().findFirst().orElse(null);
end

def type(node) trigger(update)
	$name+firstLowerCase~List = this.graph.rootList($qn+reference.class);
end

def type(node & instance) trigger(getter)
	public $conceptLayer $name+firstLowerCase+javaValidWord() {
		return $name+firstLowerCase+javaValidWord;
	}
end

def type(node & single) trigger(getter)
	public $qn+reference $name+firstLowerCase+javaValidWord() {
		return $name+firstLowerCase+javaValidWord;
	}
end

def type(node) trigger(getter)
	public java.util.List<$qn+reference> $name+firstLowerCase~List() {
		return $name+firstLowerCase~List;
	}
end

def type(node) !type(single | instance) trigger(filter)
	public java.util.stream.Stream<$qn+reference> $name+firstLowerCase~List(java.util.function.Predicate<$qn+reference> filter) {
		return $name+firstLowerCase~List.stream().filter(filter);
	}

	public $qn+reference $name+firstLowerCase+javaValidWord(int index) {
		return $name+firstLowerCase~List.get(index);
	}
end

def type(node & concept) !type(final | abstract | component | instance) trigger(new)
	public $qn+reference $name+firstLowerCase+javaValidWord([$variable+parameters...[, ]]) {
		$qn+reference newElement = GraphView.this.graph.createRoot($qn+reference.class, path, name).as($qn+reference.class);
		$variable+assign...[$NL]
		return newElement;
	}
end

def type(node & concept) !type(single | final | abstract | component | instance) trigger(clear)
	public void $name+firstLowerCase+javaValidWord(java.util.function.Predicate<$qn+reference>... filters) {
		new java.util.ArrayList<>(GraphView.this.$name+firstLowerCase+javaValidWord~List()).forEach(io.intino.tara.magritte.Layer::delete);
	}
end