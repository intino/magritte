def type(graph)
	package $workingPackage+LowerCase;

	import io.intino.tara.magritte.Graph;

	public class AbstractGraph extends io.intino.tara.magritte.GraphWrapper {

		protected io.intino.tara.magritte.Graph graph;
		$node+declaration...[$NL]

		public AbstractGraph(io.intino.tara.magritte.Graph graph) {
			this.graph = graph;
			this.graph.i18n().register("$name");
		}

		public AbstractGraph(io.intino.tara.magritte.Graph graph, AbstractGraph wrapper) {
			this.graph = graph;
			this.graph.i18n().register("$name");
			$node+clone...[$NL]
		}

		public <T extends GraphWrapper> T a$(Class<T> t) {
			return this.core$().as(t);
		}

        @Override
		public void update() {
			$node+update...[$NL]
		}

		@Override
		protected void addNode$$(io.intino.tara.magritte.Node node) {
			$node+add...[$NL]
		}

		@Override
		protected void removeNode$$(io.intino.tara.magritte.Node node) {
			$node+remove...[$NL]
		}

		public java.net.URL resourceAsMessage$$(String language, String key) {
			return graph.loadResource(graph.i18n().message(language, key));
		}

		$node+getter...[$NL$NL]

		$node+filter...[$NL$NL]

		public io.intino.tara.magritte.Graph core$$() {
			return graph;
		}

		public io.intino.tara.magritte.utils.I18n i18n$$() {
			return graph.i18n();
		}

		public Create create() {
			return new Create("Misc", null);
		}

		public Create create(String stash) {
			return new Create(stash, null);
		}

		public Create create(String stash, String name) {
			return new Create(stash, name);
		}

		public Clear clear() {
			return new Clear();
		}

		public class Create {
			private final String stash;
			private final String name;

			public Create(String stash, String name) {
				this.stash = stash;
				this.name = name;
			}[

			$node+new...[$NL$NL]]
		}

		public class Clear {[
		    $node+clear...[$NL$NL]]
		}
	}
end

def type(instance) trigger(add)
	if(node.id().equals("$generatedLanguage#$name")) this.$name+FirstLowerCase+javaValidWord = node.as($conceptLayer+reference.class);
end

def type(single) !type(instance) trigger(add)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+FirstLowerCase+javaValidWord = node.as($qn+reference.class);
end

def !type(instance) trigger(add)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+FirstLowerCase~List.add(node.as($qn+reference.class));
end

def trigger(add)
end

def type(instance) trigger(remove)
	if(node.id().equals("$generatedLanguage#$name")) this.$name+FirstLowerCase+javaValidWord = null;
end

def type(single) !type(instance) trigger(remove)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+FirstLowerCase+javaValidWord = null;
end

def !type(instance) trigger(remove)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+FirstLowerCase~List.remove(node.as($qn+reference.class));
end

def trigger(remove)
end

def type(node & instance) trigger(declaration)
	private $conceptLayer $name+FirstLowerCase+javaValidWord;
end

def type(node & single) trigger(declaration)
	private $qn+reference $name+FirstLowerCase+javaValidWord;
end

def type(node) trigger(declaration)
	private java.util.List<$qn+reference> $name+FirstLowerCase~List;
end

def type(node & instance) trigger(update)
	io.intino.tara.magritte.Node $name+FirstLowerCase+javaValidWord~Node = this.graph.load("$generatedLanguage+FirstUpperCase#$name");
	if($name+FirstLowerCase+javaValidWord~Node != null) this.$name+FirstLowerCase+javaValidWord = $name+FirstLowerCase+javaValidWord~Node.as($conceptLayer.class);
end

def type(node & single) trigger(update)
	$name+FirstLowerCase = this.graph.rootList($qn+reference.class).stream().findFirst().orElse(null);
end

def type(node) trigger(update)
	$name+FirstLowerCase~List = this.graph.rootList($qn+reference.class);
end

def type(node) type(instance | single) trigger(clone)
	this.$name+FirstLowerCase+javaValidWord = wrapper.$name+FirstLowerCase+javaValidWord;
end

def type(node) trigger(clone)
	this.$name+FirstLowerCase~List = new java.util.ArrayList<>(wrapper.$name+FirstLowerCase~List);
end

def type(node & instance) trigger(getter)
	public $conceptLayer $name+FirstLowerCase+javaValidWord() {
		return $name+FirstLowerCase+javaValidWord;
	}
end

def type(node & single) trigger(getter)
	public $qn+reference $name+FirstLowerCase+javaValidWord() {
		return $name+FirstLowerCase+javaValidWord;
	}
end

def type(node) trigger(getter)
	public java.util.List<$qn+reference> $name+FirstLowerCase~List() {
		return $name+FirstLowerCase~List;
	}
end

def type(node) !type(single | instance) trigger(filter)
	public java.util.stream.Stream<$qn+reference> $name+FirstLowerCase~List(java.util.function.Predicate<$qn+reference> filter) {
		return $name+FirstLowerCase~List.stream().filter(filter);
	}

	public $qn+reference $name+FirstLowerCase+javaValidWord(int index) {
		return $name+FirstLowerCase~List.get(index);
	}
end

def type(node & concept) !type(final | abstract | component | instance) trigger(new)
	public $qn+reference $name+FirstLowerCase+javaValidWord([$variable+parameters...[, ]]) {
		$qn+reference newElement = AbstractGraph.this.graph.createRoot($qn+reference.class, stash, name).a$$($qn+reference.class);
		$variable+assign...[$NL]
		return newElement;
	}
end

def type(node & concept) !type(single | final | abstract | component | instance) trigger(clear)
	public void $name+FirstLowerCase+javaValidWord(java.util.function.Predicate<$qn+reference> filter) {
		new java.util.ArrayList<>(AbstractGraph.this.$name+FirstLowerCase+javaValidWord~List()).stream().filter(filter).forEach(io.intino.tara.magritte.Layer::delete$$);
	}
end