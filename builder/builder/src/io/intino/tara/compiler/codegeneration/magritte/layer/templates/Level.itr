def type(platform)
	package $workingPackage+lowercase;

	import Graph;

	public class $generatedLanguage+javaValidName+FirstUpperCase~Platform extends $workingPackage+lowercase.GraphWrapper implements Platform {

		public $generatedLanguage+javaValidName~Platform(Graph graph) {
			super(graph);
		}

		public void execute(String... args) {
			// Insert execute code here
		}
	}
end

def type(application & ontology)
	package $workingPackage+lowercase;

	import Graph;

	public class $generatedLanguage+javaValidName+FirstUpperCase~Application extends $workingPackage+lowercase.GraphWrapper implements Application {

		public $generatedLanguage+javaValidName~Application(Graph graph) {
			super(graph);
			// Insert code here
		}

		public void execute(String... args) {
			// Insert code here
		}
	}
end

def type(application)
	package $workingPackage+lowercase;

	import Graph;

	public class $generatedLanguage+javaValidName+FirstUpperCase~Application extends $workingPackage+lowercase.GraphWrapper implements Application {

		public $generatedLanguage+javaValidName+FirstUpperCase~Application(Graph graph) {
			super(graph);
			// Insert code here
		}
	}
end

def type(launcher & ontology)
	import Graph;

	public class Main {

		public static void main(String$[$] args) {
			Graph graph = $dynamic~Graph.load().wrap($language+lowerCase.$language+firstUpperCase~Application.class);
			graph.application().execute(args);
		}
	}
end

def type(launcher)
	import Graph;

	public class Main {

		public static void main(String$[$] args) {
			Graph graph = $dynamic~Graph.load().wrap($language+lowerCase.$language+firstUpperCase~Application.class, $metaLanguage+lowerCase.$metaLanguage+firstUpperCase~Platform.class);
			graph.platform().execute(args);
		}
	}
end

