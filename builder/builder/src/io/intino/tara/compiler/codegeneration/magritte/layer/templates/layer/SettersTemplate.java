package io.intino.tara.compiler.codegeneration.magritte.layer.templates.layer;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class SettersTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((allTypes("outdefined", "variable", "multiple", "word")), (attribute("externalclass")), not(anyTypes("owner", "reactive", "inherited", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.List<")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("externalClass")).output(literal("> values) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(values);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("outdefined", "variable", "multiple", "word")), not(anyTypes("owner", "reactive", "inherited", "concept", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.List<")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal("> values) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(values);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("outdefined", "variable", "word")), (attribute("externalclass")), not(anyTypes("owner", "reactive", "inherited", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("externalClass")).output(literal(" value) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("outdefined", "variable", "word")), not(anyTypes("owner", "reactive", "inherited", "concept", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal(" value) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("variable", "word")), not(anyTypes("owner", "reactive", "multiple", "final")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("qn", "reference")).output(literal(".")).output(mark("name", "FirstUpperCase", "javaValidName", "reference")).output(literal(" value) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("resource", "variable")), not(anyTypes("owner", "reactive", "multiple", "final")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("type", "variableType")).output(literal(" value, String destiny) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(value, destiny);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\npublic ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.io.InputStream stream, String destiny) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(stream, destiny);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("reactive", "variable")), not(anyTypes("owner", "inherited", "concept", "multiple", "final", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(io.intino.tara.magritte.Expression<")).output(mark("type", "fullType", "reference")).output(literal("> value) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("function", "variable")), not(anyTypes("owner", "inherited", "concept", "multiple", "final", "overriden")), (trigger("setter"))),
				rule().condition((type("variable")), not(anyTypes("owner", "reactive", "resource", "concept", "function", "multiple", "final", "word")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("type", "variableType")).output(literal(" value) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("concept", "variable")), not(type("multiple")), not(type("owner")), not(type("function")), not(type("reactive")), not(type("final")), not(type("word")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(io.intino.tara.magritte.Concept value) {\n\tthis._")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("outdefined", "variable", "word")), not(anyTypes("inherited", "multiple", "final", "overriden", "target")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("workingPackage", "LowerCase")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal(" value) {\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = value;\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("outdefined", "variable", "multiple", "word")), not(anyTypes("inherited", "overriden", "target")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.List<")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal("> values) {\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = values;\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("variable", "word")), not(anyTypes("reactive", "inherited", "multiple", "final", "overriden", "target")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(expression().output(mark("qn", "reference")).output(literal("."))).output(mark("name", "FirstUpperCase", "javaValidName", "reference")).output(literal(" value) {\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = value;\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("resource", "variable")), not(anyTypes("reactive", "inherited", "multiple", "final", "overriden", "target")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("type", "fulltype", "reference")).output(literal(" url, String destination) {\n\tif (url == null) this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = null;\n\telse this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = graph().core$().save(url, destination, this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(", core$());\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\npublic ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.io.InputStream stream, String destination) {\n\tif (stream == null) this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = null;\n\telse this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = graph().core$().save(stream, destination, this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(", core$());\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("resource", "variable", "multiple")), not(anyTypes("reactive", "inherited", "final", "overriden", "target")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" add")).output(mark("name", "FirstUpperCase")).output(literal("(")).output(mark("type", "fulltype", "reference")).output(literal(" url, String destination) {\n\t")).output(mark("type", "fulltype", "reference")).output(literal(" newElement = graph().core$().save(url, destination, null, core$());\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".add(newElement);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\npublic ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" add")).output(mark("name", "FirstUpperCase")).output(literal("(java.io.InputStream stream, String destination) {\n\t")).output(mark("type", "fulltype", "reference")).output(literal(" newElement = graph().core$().save(stream, destination, null, core$());\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".add(newElement);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\npublic java.io.OutputStream add")).output(mark("name", "FirstUpperCase", "javaValidName")).output(literal("(String destination) {\n\t")).output(mark("type", "fulltype", "reference")).output(literal(" newElement = graph().core$().save((java.io.InputStream)null, destination, null, core$());\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".add(newElement);\n\ttry {\n\t\treturn newElement.openConnection().getOutputStream();\n\t} catch(java.io.IOException e) {\n\t\tjava.util.logging.Logger.getGlobal().severe(e.getMessage());\n\t\treturn null;\n\t}\n}")),
				rule().condition((allTypes("reactive", "variable")), not(anyTypes("inherited", "concept", "multiple", "final", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(io.intino.tara.magritte.Expression<")).output(mark("type", "fullType", "reference")).output(literal("> value) {\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = io.intino.tara.magritte.loaders.FunctionLoader.load(value, this, io.intino.tara.magritte.Expression.class);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("function", "variable")), not(anyTypes("inherited", "concept", "multiple", "final", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("workingPackage", "LowerCase")).output(literal(".functions.")).output(mark("rule", "interfaceClass")).output(literal(" value) {\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = io.intino.tara.magritte.loaders.FunctionLoader.load(")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(", this, ")).output(mark("workingPackage", "LowerCase")).output(literal(".functions.")).output(mark("rule", "interfaceClass")).output(literal(".class);\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((type("variable")), not(anyTypes("reactive", "inherited", "concept", "function", "multiple", "final", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("type", "variableType")).output(literal(" value) {\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(" = value;\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("reference", "owner", "concept", "variable", "multiple")), not(anyTypes("reactive", "inherited", "final", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.List<io.intino.tara.magritte.Concept> value) {\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName", "FirstLowerCase")).output(literal(" = value;\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((allTypes("reference", "owner", "concept", "variable")), not(anyTypes("reactive", "inherited", "final", "multiple", "overriden")), (trigger("setter"))).output(literal("public ")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(io.intino.tara.magritte.Concept value) {\n\tthis.")).output(mark("name", "FirstLowerCase", "javaValidName", "FirstLowerCase")).output(literal(" = value;\n\treturn (")).output(mark("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")),
				rule().condition((type("node")), (trigger("setter")))
		);
	}
}