package io.intino.tara.compiler.codegeneration.magritte.layer.templates.layer;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class InitTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("facettarget")), (type("overriden")), (trigger("init"))).output(literal("_")).output(mark("name", "FirstLowerCase")).output(literal(".core$().load(_")).output(mark("name", "FirstLowerCase")).output(literal(", name, values);")),
				rule().condition((allTypes("owner", "outdefined", "variable", "multiple", "word")), not(anyTypes("reactive", "inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.WordLoader.load(values, ")).output(mark("workingPackage", "LowerCase")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal(".class, this);")),
				rule().condition((allTypes("owner", "outdefined", "variable", "word")), not(anyTypes("reactive", "inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.WordLoader.load(values, ")).output(mark("workingPackage", "LowerCase")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal(".class, this).get(0);")),
				rule().condition((allTypes("owner", "variable", "multiple", "word")), not(anyTypes("reactive", "inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.WordLoader.load(values, ")).output(mark("type")).output(literal(".class, this);")),
				rule().condition((allTypes("owner", "variable", "word")), not(anyTypes("reactive", "inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.WordLoader.load(values, ")).output(mark("type")).output(literal(".class, this).get(0);")),
				rule().condition((allTypes("owner", "reactive", "variable")), not(anyTypes("inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.FunctionLoader.load(values, this, io.intino.tara.magritte.Expression.class).get(0);")),
				rule().condition((allTypes("owner", "objectvariable", "variable", "multiple")), not(anyTypes("inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.ObjectLoader.load(values,")).output(mark("type", "withoutGeneric")).output(literal(".class, this);")),
				rule().condition((allTypes("owner", "objectvariable", "variable")), not(anyTypes("inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.ObjectLoader.load(values,")).output(mark("type", "withoutGeneric")).output(literal(".class, this).get(0);")),
				rule().condition((allTypes("owner", "function", "variable")), not(anyTypes("inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.FunctionLoader.load(values, this, ")).output(mark("workingPackage")).output(literal(".functions.")).output(mark("rule", "interfaceClass")).output(literal(".class).get(0);")),
				rule().condition((allTypes("owner", "variable", "multiple")), not(anyTypes("inherited", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.")).output(mark("type")).output(literal("Loader.load(values, this);")),
				rule().condition((allTypes("owner", "variable")), not(anyTypes("inherited", "concept", "multiple", "overriden")), (trigger("init"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.tara.magritte.loaders.")).output(mark("type")).output(literal("Loader.load(values, this).get(0);"))
		);
	}
}