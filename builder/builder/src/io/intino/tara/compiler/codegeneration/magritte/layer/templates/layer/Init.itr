def type(facetTarget) type(overriden) trigger(init)
	_$name+firstLowerCase.node().load(_$name+firstLowerCase, name, values);
end

def type(variable & word & multiple & outDefined & owner) !type(inherited | overriden | reactive) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.WordLoader.load(values, $workingPackage+LowerCase.rules.$rule+externalWordClass.class, this);
end

def type(variable & word & outDefined & owner) !type(inherited | overriden | reactive) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.WordLoader.load(values, $workingPackage+LowerCase.rules.$rule+externalWordClass.class, this).get(0);
end

def type(variable & word & multiple & owner) !type(inherited | overriden | reactive) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.WordLoader.load(values, $type.class, this);
end

def type(variable & word & owner) !type(inherited | overriden | reactive) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.WordLoader.load(values, $type.class, this).get(0);
end

def type(variable & reactive & owner) !type(inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.FunctionLoader.load(values, this, io.intino.tara.magritte.Expression.class).get(0);
end

def type(variable & objectVariable & owner) !type(inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.ObjectLoader.load(values,$type+withoutGeneric.class, this).get(0);
end

def type(variable & function & owner) !type(inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.FunctionLoader.load(values, this, $workingPackage.functions.$rule+interfaceClass~.class).get(0);
end

def type(variable & owner & multiple) type(time | date) !type(concept | inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.$type~Loader.load(values, this);
end

def type(variable & owner) type(time | date) !type(concept | multiple | inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.$type~Loader.load(values, this).get(0);
end

def type(variable & resource & owner) !type(multiple | concept | inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.ResXLoader.load(values, this).get(0);
end

def type(variable & resource & owner & multiple) !type(inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.ResXLoader.load(values, this);
end

def type(variable & owner & multiple) !type(inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.$type~Loader.load(values, this);
end

def type(variable & owner) !type(multiple | concept | inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+javaValidName+firstLowerCase+javaValidWord = io.intino.tara.magritte.loaders.$type~Loader.load(values, this).get(0);
end