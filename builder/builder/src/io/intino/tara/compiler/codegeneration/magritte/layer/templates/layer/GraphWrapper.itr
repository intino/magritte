def type(graph)
	package $workingPackage+LowerCase;

	import Graph;

	public class GraphWrapper extends GraphWrapper {

		protected Graph graph;
		$node+declaration...[$NL]

		public GraphWrapper(Graph graph) {
			this.graph = graph;
			this.graph.i18n().register("$name");
		    update();
		}

		protected void update() {
			$node+update...[$NL]
		}

		@Override
		protected void addNode(Node node) {
			$node+add...[$NL]
		}

		@Override
		protected void removeNode(Node node) {
			$node+remove...[$NL]
		}

		public String message(String language, String key, Object... parameters) {
			return graph.i18n().message(language, key, parameters);
		}

		public java.net.URL resourceAsMessage(String language, String key) {
			return graph.loadResource(graph.i18n().message(language, key));
		}

		public java.util.Map<String,String> keysIn(String language) {
			return graph.i18n().wordsIn(language);
		}

		public Concept concept(String concept) {
			return graph.concept(concept);
		}

		public Concept concept(java.lang.Class<? extends Layer> layerClass) {
			return graph.concept(layerClass);
		}

		public java.util.List<Concept> conceptList() {
			return graph.conceptList();
		}

		public java.util.List<Concept> conceptList(java.util.function.Predicate<Concept> predicate) {
			return graph.conceptList(predicate);
		}

		public Node createRoot(Concept concept, String namespace) {
			return graph.createRoot(concept, namespace);
		}

		public <T extends Layer> T createRoot(java.lang.Class<T> layerClass, String namespace) {
			return graph.createRoot(layerClass, namespace);
		}

		public Node createRoot(String concept, String namespace) {
			return graph.createRoot(concept, namespace);
		}

		public <T extends Layer> T createRoot(java.lang.Class<T> layerClass, String namespace, String id) {
			return graph.createRoot(layerClass, namespace, id);
		}

		public Node createRoot(String concept, String namespace, String id) {
			return graph.createRoot(concept, namespace, id);
		}

		public Node createRoot(Concept concept, String namespace, String id) {
			return graph.createRoot(concept, namespace, id);
		}

		$node+getter...[$NL$NL]

		$node+filter...[$NL$NL]

		public Graph graph() {
			return graph;
		}

		public Create create() {
			return new Create("Misc", null);
		}

		public Create create(String namespace) {
			return new Create(namespace, null);
		}

		public Create create(String namespace, String name) {
			return new Create(namespace, name);
		}

		public class Create {
			private final String namespace;
			private final String name;

			public Create(String namespace, String name) {
				this.namespace = namespace;
				this.name = name;
			}

			$node+new...[$NL$NL]

		}


	}
end

def type(single) !type(instance) trigger(add)
	if (node.is("$qn+noPackage+withDollar")) this.$name+firstLowercase+javaValidWord = node.as($qn+reference.class);
end

def !type(instance) trigger(add)
	if (node.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.add(node.as($qn+reference.class));
end

def trigger(add)
end

def type(single) !type(instance) trigger(remove)
	if (node.is("$qn+noPackage+withDollar")) this.$name+firstLowercase+javaValidWord = null;
end

def !type(instance) trigger(remove)
	if (node.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.remove(node.as($qn+reference.class));
end

def trigger(remove)
end

def type(node & instance) trigger(declaration)
    private $conceptLayer $name+firstLowerCase+javaValidWord;
end

def type(node & single) trigger(declaration)
    private $qn+reference $name+firstLowerCase+javaValidWord;
end

def type(node) trigger(declaration)
    private java.util.List<$qn+reference> $name+firstLowerCase~List;
end

def type(node & instance) trigger(update)
    $name+firstLowerCase = this.graph.rootList(r -> r.name().equals("$name")).get(0).as($conceptLayer.class);
end

def type(node & single) trigger(update)
    $name+firstLowerCase = this.graph.rootList($qn+reference.class).stream().findFirst().orElse(null);
end

def type(node) trigger(update)
    $name+firstLowerCase~List = this.graph.rootList($qn+reference.class);
end

def type(node & instance) trigger(getter)
    public $conceptLayer $name+firstLowerCase+javaValidWord() {
        return $name+firstLowerCase+javaValidWord;
    }
end

def type(node & single) trigger(getter)
    public $qn+reference $name+firstLowerCase+javaValidWord() {
        return $name+firstLowerCase+javaValidWord;
    }
end

def type(node) trigger(getter)
    public java.util.List<$qn+reference> $name+firstLowerCase~List() {
        return $name+firstLowerCase~List;
    }
end

def type(node) !type(single | instance) trigger(filter)
    public java.util.List<$qn+reference> $name+firstLowerCase~List(java.util.function.Predicate<$qn+reference> predicate) {
        return $name+firstLowerCase~List.stream().filter(predicate).collect(java.util.stream.Collectors.toList());
    }

    public $qn+reference $name+firstLowerCase+javaValidWord(int index) {
		return $name+firstLowerCase~List.get(index);
	}
end

def type(node & concept) !type(final | abstract | component | instance) trigger(new)
	public $qn+reference $name+firstLowerCase+javaValidWord([$variable+parameters...[, ]]) {
		$qn+reference newElement = GraphWrapper.this.graph.createRoot($qn+reference.class, namespace, name).as($qn+reference.class);
		$variable+assign...[$NL]
		return newElement;
	}
end