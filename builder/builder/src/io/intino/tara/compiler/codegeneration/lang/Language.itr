def type(Model)
	package tara.dsl;

	import io.intino.tara.lang.model.Tag;

	import java.util.Locale;
	import static io.intino.tara.lang.semantics.constraints.RuleFactory.*;

	public class $name+reference+FirstUpperCase extends io.intino.tara.dsl.Tara {
		public $name+reference+FirstUpperCase() {
			$node+super...[$NL]
			$root+call...[$NL]
		}

		$root+method...[$NL]

		@Override
		public String languageName() {
			return "$name+FirstUpperCase";
		}

		@Override
	    public Locale locale() {
	        return $locale;
	    }

	    @Override
	    public boolean isTerminalLanguage() {
	        return $terminal;
	    }

		@Override
		public String metaLanguage() {
			return $metaLanguage+quoted;
		}
	}
end

def type(instance) trigger(super)
	declare($qn+quoted, java.util.Arrays.asList($nodeType...[, ]), $path+quoted);
end

def type(node) trigger(super)
	def("$name").with(context([$nodeType])[.$constraints][.$assumptions][.$doc]);
end

def trigger(call)
	Root$number.load(this);
end

def trigger(method)
	private static class Root$number {
		private static void load($language+reference+firstUpperCase self) {
			$node...[$NL]
		}
	}
end

def type(instance) trigger(node)
	self.declare($qn+quoted, java.util.Arrays.asList($nodeType...[, ]), $path+quoted);
end

def type(node) trigger(node)
	self.def("$name").with(self.context([$nodeType])[.$constraints][.$assumptions][.$doc]);
end

def type(nodeType) trigger(nodeType)
	$type+quoted...[, ]
end

def trigger(constraints)
	has([$constraint...[, ]])
end

def type(constraint) type(component) trigger(constraint)
	component($type+quoted, java.util.Arrays.asList($size...[, ])[, $tags...[, ]])
end

def type(constraint) type(parameter) type(reference) trigger(constraint)
	parameter("$name", "$type", ["$aspect"?""], $size, $position, "$scope", [$rule?null][, $tags...[, ]])
end

def type(constraint) type(parameter) trigger(constraint)
	parameter("$name", $type+primitive, ["$aspect"?""], $size, $position, "$scope", [$rule?null][, $tags...[, ]])
end

def type(constraint) type(metaAspect) trigger(constraint)
	metaAspect("$value"[, $with+quoted...[, ]])
end

def type(constraint) type(aspect) trigger(constraint)
	aspect("$value"[, $terminal?, false][, $required?, false], new String$[]{$with+quoted...[, ]}, new String$[]{$without+quoted...[, ]})[.has($constraint...[, ])]
end

def type(constraint) type(oneOf) trigger(constraint)
	oneOf(java.util.Arrays.asList($rule...[, ]), [$constraint...[, ]])
end

def type(constraint) type(redefine) trigger(constraint)
	redefine($name+quoted, $supertype+quoted)
end

def trigger(constraint)
	$this()
end

def trigger(tags)
	io.intino.tara.lang.model.Tag.$this
end

def type(customRule & metric) trigger(rule)
	$qn.$default
end

def type(nativecustomwordrule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.WordRule(java.util.Arrays.asList($words+quoted...[, ])[, $externalWordClass+quoted])
end

def type(customrule) trigger(rule)
	new $qn()
end

def type(rule & customRule) trigger(size)
	new $qn()
end

def type(rule & size) trigger(size)
	new io.intino.tara.lang.model.rules.Size($min, $max[, $into+size])
end

def type(rule & size) trigger(rule)
	new io.intino.tara.lang.model.rules.Size($min, $max[, $into+size])
end

def type(nativeObjectRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.NativeObjectRule("$type")
end

def type(nativeReferenceRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.NativeReferenceRule(java.util.Arrays.asList($allowedReferences+quoted...[, ]))
end

def type(nativerule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.NativeRule("$interfaceClass", "$signature", java.util.Arrays.asList($imports+quoted...[, ]))
end

def type(wordrule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.WordRule(java.util.Arrays.asList($words+quoted...[, ])[, $externalWordClass+quoted])
end

def type(referenceRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.ReferenceRule(java.util.Arrays.asList($allowedReferences+quoted...[, ]))
end

def type(doubleRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.DoubleRule($min+cast, $max+cast, "$metric")
end

def type(integerRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.IntegerRule($min, $max, "$metric")
end

def type(dateRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.DateRule([$parameters+quoted,])
end

def type(instantRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.InstantRule([$parameters+quoted,])
end

def type(fileRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.FileRule(java.util.Arrays.asList($extensions+quoted...[, ]))
end

def type(stringRule) trigger(rule)
	new io.intino.tara.lang.model.rules.variable.StringRule($regex+quoted)
end

def trigger(rule)
	null
end

def attribute(this:Infinity) trigger(cast)
	Double.POSITIVE_INFINITY
end
def attribute(this:-Infinity) trigger(cast)
	Double.NEGATIVE_INFINITY
end
def !attribute(this:-Infinity) !attribute(this:Infinity) trigger(cast)
	$this
end

def type(assumptions) trigger(assumptions)
	assume($assumption...[, ])
end

def type(doc) trigger(doc)
	doc($layer+quoted, $file+quoted, $line, $doc+quoted)
end

def type(stashNodeName) trigger(assumption)
	stashNodeName("$value+withDollar")
end

def trigger(assumption)
	is$this+toCamelCase()
end

def trigger(quoted)
	"$this"
end

def trigger(primitive)
	io.intino.tara.lang.model.Primitive.$this+UpperCase
end

def trigger(locale) attribute(this:es)
	new Locale("es", "Spain", "es_ES")
end

def trigger(locale) attribute(this:en)
	Locale.ENGLISH
end