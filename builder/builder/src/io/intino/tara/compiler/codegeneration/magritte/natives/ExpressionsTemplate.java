package io.intino.tara.compiler.codegeneration.magritte.natives;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class ExpressionsTemplate extends Template {

	protected ExpressionsTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new ExpressionsTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "function & java"))).add(literal("package ")).add(mark("workingPackage", "javaValidName", "lowercase", "javaValidWord")).add(literal(".natives")).add(expression().add(literal(".")).add(mark("package", "javaValidName", "lowercase", "javaValidWord"))).add(literal(";\n\n")).add(expression().add(mark("imports").multiple("\n"))).add(literal("\n\n/**")).add(mark("qn")).add(literal("#")).add(mark("file")).add(literal("#")).add(mark("line")).add(literal("#")).add(mark("column")).add(literal("**/\npublic class ")).add(mark("name", "javaValidName", "javaValidWord")).add(literal("_")).add(mark("uid")).add(literal(" implements ")).add(expression().add(mark("scope", "javaValidName", "lowercase", "javaValidWord")).add(literal(".functions."))).add(mark("rule", "firstUpperCase")).add(literal(", io.intino.tara.magritte.Function {\n\tprivate ")).add(mark("nativeContainer", "reference")).add(literal(" self;\n\n\t@Override\n\t")).add(mark("signature")).add(literal(" {\n\t\t")).add(mark("body")).add(literal("\n\t}\n\n\t@Override\n\tpublic void self(io.intino.tara.magritte.Layer context) {\n\t\tself = (")).add(mark("nativeContainer", "reference")).add(literal(") context;\n\t}\n\n\t@Override\n\tpublic Class<? extends io.intino.tara.magritte.Layer> selfClass() {\n\t\treturn ")).add(mark("nativeContainer", "reference")).add(literal(".class;\n\t}\n}")),
			rule().add((condition("type", "java")), not(condition("type", "function"))).add(literal("package ")).add(mark("workingPackage", "javaValidName", "lowercase", "javaValidWord")).add(literal(".natives")).add(expression().add(literal(".")).add(mark("package", "javaValidName", "lowercase", "javaValidWord"))).add(literal(";\n\n")).add(expression().add(mark("imports").multiple("\n"))).add(literal("\n\n/**")).add(mark("qn")).add(literal("#")).add(mark("file")).add(literal("#")).add(mark("line")).add(literal("#")).add(mark("column")).add(literal("**/\npublic class ")).add(mark("name", "javaValidName")).add(literal("_")).add(mark("uid")).add(literal(" implements io.intino.tara.magritte.Expression<")).add(mark("type")).add(literal("> {\n\tprivate ")).add(mark("nativeContainer", "reference")).add(literal(" self;\n\n\t@Override\n\tpublic ")).add(mark("type")).add(literal(" value() {\n\t\t")).add(expression().add(mark("return")).add(literal(" "))).add(mark("body")).add(literal("\n\t}\n\n\t@Override\n\tpublic void self(io.intino.tara.magritte.Layer context) {\n\t\tself = (")).add(mark("nativeContainer", "reference")).add(literal(") context;\n\t}\n\n\t@Override\n\tpublic Class<? extends io.intino.tara.magritte.Layer> selfClass() {\n\t\treturn ")).add(mark("nativeContainer", "reference")).add(literal(".class;\n\t}\n}")),
			rule().add((condition("type", "function & groovy"))).add(literal("package ")).add(mark("workingPackage", "lowercase", "javaValidName", "javaValidWord")).add(literal(".natives")).add(expression().add(literal(".")).add(mark("package", "javaValidName", "lowercase", "javaValidWord"))).add(literal("\n\n")).add(expression().add(mark("imports").multiple("\n"))).add(literal("\n\n/**")).add(mark("qn")).add(literal("#")).add(mark("file")).add(literal("#")).add(mark("line")).add(literal("#")).add(mark("column")).add(literal("**/\nclass ")).add(mark("name", "javaValidName", "javaValidWord")).add(literal("_")).add(mark("uid")).add(literal(" implements ")).add(expression().add(mark("scope", "lowercase")).add(literal(".functions."))).add(mark("rule", "firstUpperCase")).add(literal(", io.intino.tara.magritte.Function {\n\tprivate ")).add(mark("nativeContainer", "reference")).add(literal(" self\n\n\t")).add(mark("signature")).add(literal(" {\n\t\t")).add(mark("body")).add(literal("\n\t}\n\n\tpublic void self(io.intino.tara.magritte.Layer context) {\n\t\tself = (")).add(mark("nativeContainer", "reference")).add(literal(") context\n\t}\n\n\tpublic Class<? extends io.intino.tara.magritte.Layer> selfClass() {\n\t\treturn ")).add(mark("nativeContainer", "reference")).add(literal(".class\n\t}\n}")),
			rule().add((condition("type", "groovy")), not(condition("type", "function"))).add(literal("package ")).add(mark("workingPackage", "javaValidName", "lowercase", "javaValidWord")).add(literal(".natives")).add(expression().add(literal(".")).add(mark("package", "javaValidName", "lowercase", "javaValidWord"))).add(literal(";\n\n")).add(expression().add(mark("imports").multiple("\n"))).add(literal("\n\n/**")).add(mark("qn")).add(literal("#")).add(mark("file")).add(literal("#")).add(mark("line")).add(literal("#")).add(mark("column")).add(literal("**/\nclass ")).add(mark("name", "javaValidName")).add(literal("_")).add(mark("uid")).add(literal(" implements io.intino.tara.magritte.Expression<")).add(mark("type")).add(literal("> {\n\tprivate ")).add(mark("nativeContainer", "reference")).add(literal(" self;\n\n\tpublic ")).add(mark("type")).add(literal(" value() {\n\t\t")).add(expression().add(mark("return")).add(literal(" "))).add(mark("body")).add(literal("\n\t}\n\n\tpublic void self(io.intino.tara.magritte.Layer context) {\n\t\tself = (")).add(mark("nativeContainer", "reference")).add(literal(") context;\n\t}\n\n\tpublic Class<? extends io.intino.tara.magritte.Layer> selfClass() {\n\t\treturn ")).add(mark("nativeContainer", "reference")).add(literal(".class;\n\t}\n}")),
			rule().add((condition("type", "function & kotlin"))).add(literal("package ")).add(mark("workingPackage", "javaValidName", "lowercase", "javaValidWord")).add(literal(".natives")).add(expression().add(literal(".")).add(mark("package", "javaValidName", "lowercase", "javaValidWord"))).add(literal("\n\n")).add(expression().add(mark("imports", "removeStatic").multiple("\n"))).add(literal("\n\n/**")).add(mark("qn")).add(literal("#")).add(mark("file")).add(literal("#")).add(mark("line")).add(literal("#")).add(mark("column")).add(literal("**/\nclass ")).add(mark("name", "javaValidName")).add(literal("_")).add(mark("uid")).add(literal(" : ")).add(expression().add(mark("scope", "lowercase")).add(literal(".functions."))).add(mark("rule", "firstUpperCase")).add(literal(", io.intino.tara.magritte.Function {\n\tinternal var self: ")).add(mark("nativeContainer", "reference")).add(literal("? = null\n\n\t")).add(mark("signature")).add(literal(" {\n\t\t")).add(mark("body")).add(literal("\n\t}\n\n\toverride fun self(context: io.intino.tara.magritte.Layer) {\n\t\tself = context as ")).add(mark("nativeContainer", "reference")).add(literal("\n\t}\n\n\toverride fun selfClass(): Class<out io.intino.tara.magritte.Layer> {\n\t\treturn ")).add(mark("nativeContainer", "reference")).add(literal("::class.java\n\t}\n}")),
			rule().add((condition("type", "kotlin"))).add(literal("package ")).add(mark("workingPackage", "javaValidName", "lowercase", "javaValidWord")).add(literal(".natives")).add(expression().add(literal(".")).add(mark("package", "javaValidName", "lowercase", "javaValidWord"))).add(literal(";\n\n")).add(expression().add(mark("imports", "removeStatic").multiple("\n"))).add(literal("\n\n/**")).add(mark("qn")).add(literal("#")).add(mark("file")).add(literal("#")).add(mark("line")).add(literal("#")).add(mark("column")).add(literal("**/\nclass ")).add(mark("name", "javaValidName")).add(literal("_")).add(mark("uid")).add(literal(" : io.intino.tara.magritte.Expression<")).add(mark("type")).add(literal("> {\n\tinternal var self: ")).add(mark("nativeContainer", "reference")).add(literal("? = null\n\n\toverride fun value():")).add(mark("type")).add(literal(" {\n\t\t")).add(mark("body")).add(literal("\n\t}\n\n\toverride fun self(context: io.intino.tara.magritte.Layer) {\n\t\tself = context as ")).add(mark("nativeContainer", "reference")).add(literal("\n\t}\n\n\toverride fun selfClass(): Class<out io.intino.tara.magritte.Layer> {\n\t\treturn ")).add(mark("nativeContainer", "reference")).add(literal("::class.java\n\t}\n}")),
			rule().add(not(condition("type", "list")), (condition("trigger", "type"))).add(mark("value", "javaType")),
			rule().add((condition("type", "list")), (condition("trigger", "type"))).add(literal("java.util.List<")).add(mark("value", "javaType")).add(literal(">")),
			rule().add((condition("value", "instant")), (condition("trigger", "javaType"))).add(literal("java.time.Instant")),
			rule().add((condition("value", "date")), (condition("trigger", "javaType"))).add(literal("Date")),
			rule().add((condition("value", "time")), (condition("trigger", "javaType"))).add(literal("java.time.LocalTime")),
			rule().add((condition("value", "resource")), (condition("trigger", "javaType"))).add(literal("java.net.URL"))
		);
		return this;
	}
}