package io.intino.tara.compiler.codegeneration.magritte.layer.templates.layer;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class GettersTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((allTypes("outdefined", "variable", "multiple", "final", "word")), not(anyTypes("owner", "inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(_")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "javaValidName")).output(literal("());\n}")),
				rule().condition((allTypes("outdefined", "variable", "multiple", "word")), (attribute("externalclass")), not(anyTypes("owner", "inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("externalClass")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("outdefined", "variable", "multiple", "word")), not(anyTypes("owner", "inherited", "concept", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("outdefined", "variable", "word")), (attribute("externalclass")), not(anyTypes("owner", "inherited", "concept", "overriden")), (trigger("getter"))).output(literal("public ")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("externalClass")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("outdefined", "variable", "word")), not(anyTypes("owner", "inherited", "concept", "overriden")), (trigger("getter"))).output(literal("public ")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("variable", "multiple", "word")), (anyTypes("metatype", "target")), not(anyTypes("owner", "concept")), (attribute("name")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("qn", "reference")).output(literal(".")).output(mark("name", "FirstUpperCase", "javaValidName", "reference")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("variable", "word")), (anyTypes("metatype", "target")), not(anyTypes("owner", "concept")), (attribute("name")), (trigger("getter"))).output(literal("public ")).output(mark("qn", "reference")).output(literal(".")).output(mark("name", "FirstUpperCase", "javaValidName", "reference")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("variable", "multiple", "final")), (anyTypes("metatype", "target")), not(anyTypes("owner", "concept")), (attribute("name")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(_")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("());\n}\n\npublic ")).output(mark("type", "fullType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")),
				rule().condition((type("variable")), not(anyTypes("owner", "concept")), (anyTypes("metatype", "target")), (attribute("name")), (type("multiple")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}\n\npublic ")).output(mark("type", "fullType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")),
				rule().condition((allTypes("function", "variable")), (anyTypes("metatype", "target")), not(type("owner")), (attribute("name")), (trigger("getter"))).output(literal("public ")).output(mark("returnType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("parameters")).output(literal(")")).output(expression().output(literal(" throws ")).output(mark("exception").multiple(", "))).output(literal(" {\n\t")).output(mark("returnType", "isReturn")).output(literal(" _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("parameters", "WithOutType")).output(literal(");\n}")),
				rule().condition((allTypes("concept", "variable", "multiple", "final", "target")), (attribute("name")), not(allTypes("owner", "inherited")), (trigger("getter"))).output(literal("public java.util.List<io.intino.tara.magritte.Concept> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(_")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("());\n}\n\npublic io.intino.tara.magritte.Concept ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")),
				rule().condition((allTypes("concept", "variable", "multiple", "target")), (attribute("name")), not(allTypes("owner", "inherited")), (trigger("getter"))).output(literal("public java.util.List<io.intino.tara.magritte.Concept> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}\n\npublic io.intino.tara.magritte.Concept ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")),
				rule().condition((type("variable")), (type("concept")), not(type("owner")), (type("target")), (attribute("name")), not(type("inherited")), (trigger("getter"))).output(literal("public io.intino.tara.magritte.Concept ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("variable", "target")), not(anyTypes("owner", "concept")), (attribute("name")), (trigger("getter"))).output(literal("public ")).output(mark("type", "variableType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("containerName", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("node", "instance")), (attribute("name")), (trigger("getter"))).output(literal("public ")).output(mark("conceptLayer", "reference")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _metaType.")).output(mark("type", "FirstLowerCase")).output(literal("(o -> o.name$().equals(\"")).output(mark("name")).output(literal("\")).get(0);\n}")),
				rule().condition((allTypes("single", "node", "target")), (attribute("name")), not(anyTypes("owner", "instance", "inherited")), (trigger("getter"))).output(literal("public ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(mark("targetContainer", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("node", "final", "target")), (attribute("name")), not(anyTypes("owner", "instance", "inherited")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn java.util.Collections.unmodifiableList((java.util.List<")).output(mark("qn", "reference")).output(literal(">) _")).output(mark("targetContainer", "FirstLowerCase")).output(literal(".")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List());\n}\n\npublic ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List(int index) {\n\treturn _")).output(mark("targetContainer", "FirstLowerCase")).output(literal(".")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List().get(index);\n}")),
				rule().condition((allTypes("node", "target")), (attribute("name")), not(anyTypes("owner", "instance", "inherited")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn (java.util.List<")).output(mark("qn", "reference")).output(literal(">) _")).output(mark("targetContainer", "FirstLowerCase")).output(literal(".")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List();\n}\n\npublic ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List(int index) {\n\treturn _")).output(mark("targetContainer", "FirstLowerCase")).output(literal(".")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List().get(index);\n}")),
				rule().condition((allTypes("node", "target")), (attribute("name")), not(anyTypes("owner", "single", "instance")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn (java.util.List<")).output(mark("qn", "reference")).output(literal(">) _")).output(mark("targetContainer", "FirstLowerCase")).output(literal(".")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List();\n}\n\npublic ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List(int index) {\n\treturn _")).output(mark("targetContainer", "FirstLowerCase")).output(literal(".")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List().get(index);\n}")),
				rule().condition((allTypes("single", "node", "target")), (attribute("name")), not(anyTypes("owner", "instance")), (trigger("getter"))).output(literal("public ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn (")).output(mark("qn", "reference")).output(literal(") _")).output(mark("targetContainer", "FirstLowerCase")).output(literal(".")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")),
				rule().condition((allTypes("reference", "reactive", "concept", "variable", "multiple")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<io.intino.tara.magritte.Concept> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(");\n}")),
				rule().condition((allTypes("reference", "reactive", "concept", "variable")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public io.intino.tara.magritte.Concept ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".value();\n}")),
				rule().condition((allTypes("reference", "concept", "variable", "multiple")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<io.intino.tara.magritte.Concept> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(");\n}")),
				rule().condition((allTypes("reference", "concept", "variable")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public io.intino.tara.magritte.Concept ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn this.")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")),
				rule().condition((allTypes("outdefined", "variable", "multiple", "final", "word")), not(anyTypes("inherited", "overriden", "target")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(");\n}")),
				rule().condition((allTypes("outdefined", "variable", "multiple", "word")), not(anyTypes("reactive", "inherited", "overriden", "target")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")),
				rule().condition((allTypes("outdefined", "variable", "word")), not(anyTypes("reactive", "inherited", "multiple")), (trigger("getter"))).output(literal("public ")).output(mark("workingPackage")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")),
				rule().condition((allTypes("variable", "multiple", "final", "word")), not(anyTypes("outdefined", "inherited", "overriden", "target")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("type", "reference")).output(literal("> ")).output(mark("name", "javaValidName", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(mark("name", "javaValidName")).output(literal(");\n}")),
				rule().condition((allTypes("variable", "multiple", "word")), not(anyTypes("reactive", "outdefined", "inherited", "overriden", "target")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("type", "reference")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")),
				rule().condition((allTypes("variable", "word")), not(anyTypes("reactive", "outdefined", "inherited", "overriden")), (trigger("getter"))).output(literal("public ")).output(mark("type")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")),
				rule().condition((allTypes("reactive", "variable", "multiple")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".value();\n}")),
				rule().condition((allTypes("reactive", "variable")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public ")).output(mark("type", "variableType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".value();\n}")),
				rule().condition((allTypes("function", "variable")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public ")).output(mark("returnType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(mark("parameters")).output(literal(")")).output(expression().output(literal(" throws ")).output(mark("exception").multiple(", "))).output(literal(" {\n\t")).output(mark("returnType", "isReturn")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".")).output(mark("methodName")).output(literal("(")).output(mark("parameters", "WithoutType")).output(literal(");\n}")),
				rule().condition(not(attribute("this", "void")), (trigger("isreturn"))).output(literal("return")),
				rule().condition((attribute("this", "void")), (trigger("isreturn"))),
				rule().condition((allTypes("owner", "variable", "multiple")), not(anyTypes("outdefined", "inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}\n\npublic ")).output(mark("type", "fullType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".get(index);\n}\n\npublic java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(mark("type", "fullType")).output(literal("> predicate) {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")),
				rule().condition((allTypes("owner", "variable", "multiple", "final")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(");\n}\n\npublic ")).output(mark("type", "fullType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".get(index);\n}\n\npublic java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(mark("type", "fullType")).output(literal("> predicate) {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")),
				rule().condition((allTypes("owner", "variable", "multiple")), not(anyTypes("reactive", "inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}\n\npublic ")).output(mark("type", "fullType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(".get(index);\n}\n\npublic java.util.List<")).output(mark("type", "fullType")).output(literal("> ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(mark("type", "fullType")).output(literal("> predicate) {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")),
				rule().condition((allTypes("owner", "variable")), not(anyTypes("reactive", "inherited", "overriden")), (trigger("getter"))).output(literal("public ")).output(mark("type", "variableType")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")),
				rule().condition((allTypes("single", "owner", "node")), not(anyTypes("inherited", "overriden")), (trigger("getter"))).output(literal("public ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")),
				rule().condition((allTypes("owner", "node", "overriden")), not(type("single")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("containerName", "FirstLowerCase", "javaValidName")).output(mark("name", "FirstUpperCase")).output(literal("List() {\n\treturn new io.intino.tara.magritte.utils.ProxyList<>(")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List, ")).output(mark("qn", "reference")).output(literal(".class);\n}\n\npublic ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("containerName", "FirstLowerCase")).output(mark("name", "FirstUpperCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(mark("containerName", "FirstLowerCase", "javaValidName")).output(mark("name", "FirstUpperCase")).output(literal("List().get(index);\n}\n\npublic java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("containerName", "FirstLowerCase", "javaValidName")).output(mark("name", "FirstUpperCase")).output(literal("List(java.util.function.Predicate<")).output(mark("qn", "reference")).output(literal("> predicate) {\n\treturn ")).output(mark("containerName", "FirstLowerCase", "javaValidName")).output(mark("name", "FirstUpperCase")).output(literal("List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")),
				rule().condition((allTypes("owner", "node", "final")), not(anyTypes("single", "inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn java.util.Collections.unmodifiableList(")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List);\n}\n\npublic ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List.get(index);\n}\n\npublic java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List(java.util.function.Predicate<")).output(mark("qn", "reference")).output(literal("> predicate) {\n\treturn ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")),
				rule().condition((allTypes("owner", "node")), not(anyTypes("single", "inherited", "overriden")), (trigger("getter"))).output(literal("public java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn java.util.Collections.unmodifiableList(")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List);\n}\n\npublic ")).output(mark("qn", "reference")).output(literal(" ")).output(mark("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List.get(index);\n}\n\npublic java.util.List<")).output(mark("qn", "reference")).output(literal("> ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List(java.util.function.Predicate<")).output(mark("qn", "reference")).output(literal("> predicate) {\n\treturn ")).output(mark("name", "toCamelCase", "FirstLowerCase")).output(literal("List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}"))
		);
	}
}