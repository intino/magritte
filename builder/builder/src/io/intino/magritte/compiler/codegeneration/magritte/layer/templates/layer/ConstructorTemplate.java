package io.intino.magritte.compiler.codegeneration.magritte.layer.templates.layer;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class ConstructorTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((allTypes("Variable", "word", "multiple")), (type("owner")), not(type("inherited")), (attribute("words")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Arrays.asList(")).output(mark("wordValues", "quoted").multiple(", ")).output(literal(")));")),
				rule().condition((allTypes("Variable", "word")), (type("owner")), not(anyTypes("inherited", "empty")), (attribute("values")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Arrays.asList(")).output(mark("wordValues", "quoted").multiple(", ")).output(literal(")));")),
				rule().condition((allTypes("Variable", "reactive")), (type("owner")), not(anyTypes("inherited", "empty")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Collections.singletonList(")).output(mark("workingPackage")).output(literal(".natives.")).output(mark("package")).output(literal(".")).output(mark("name", "javaValidName")).output(literal("_")).output(mark("uid")).output(literal(".class.getName())));")),
				rule().condition((allTypes("Variable", "function")), (type("owner")), not(anyTypes("inherited", "empty")), (attribute("body")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Collections.singletonList(")).output(mark("workingPackage")).output(literal(".natives.")).output(mark("package")).output(literal(".")).output(mark("name", "javaValidName")).output(literal("_")).output(mark("uid")).output(literal(".class.getName())));")),
				rule().condition((allTypes("Variable", "date")), (type("owner")), not(anyTypes("inherited", "empty")), (attribute("values")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Arrays.asList(")).output(mark("values", "quoted").multiple(", ")).output(literal(")));")),
				rule().condition((allTypes("Variable", "time")), (type("owner")), not(anyTypes("inherited", "empty")), (attribute("values")), not(type("multiple")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\",  new java.util.ArrayList<>(java.util.Arrays.asList(")).output(mark("values", "quoted").multiple(", ")).output(literal(")));")),
				rule().condition((allTypes("Variable", "double", "multiple")), (type("owner")), not(anyTypes("inherited", "empty")), (attribute("values")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Arrays.asList(new Double[] {")).output(mark("values").multiple(", ")).output(literal("})));")),
				rule().condition((allTypes("Variable", "double")), (type("owner")), not(anyTypes("inherited", "empty")), (attribute("values")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Collections.singletonList((double) ")).output(mark("values")).output(literal(")));")),
				rule().condition((allTypes("Variable", "reference")), (type("owner")), not(anyTypes("inherited", "empty")), (attribute("values")), (type("multiple")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Arrays.asList(graph().concept(\"")).output(mark("type")).output(literal("\"))));")),
				rule().condition((allTypes("Variable", "resource")), (type("owner")), not(anyTypes("inherited", "empty")), (attribute("values")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", io.intino.magritte.framework.loaders.StringLoader.load(Arrays.asList(")).output(mark("values", "quoted").multiple(", ")).output(literal(")));")),
				rule().condition((allTypes("Variable", "owner")), not(anyTypes("inherited", "empty")), (attribute("values")), (trigger("constructor"))).output(literal("_load(\"")).output(mark("name", "FirstLowerCase")).output(literal("\", new java.util.ArrayList<>(java.util.Arrays.asList(")).output(mark("values").multiple(", ")).output(literal(")));"))
		);
	}
}