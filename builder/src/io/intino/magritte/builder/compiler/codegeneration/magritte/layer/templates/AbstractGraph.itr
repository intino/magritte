rule type(graph)
	package $workingPackage+LowerCase;

	import io.intino.magritte.framework.Graph;

	public class AbstractGraph extends io.intino.magritte.framework.GraphWrapper {
		protected io.intino.magritte.framework.Graph graph;
		$node+declaration...[$NL]

		private java.util.Map<String, Indexer> _index = _fillIndex();

		public AbstractGraph(io.intino.magritte.framework.Graph graph) {
			this.graph = graph;
			this.graph.i18n().register("$name");
		}

		public AbstractGraph(io.intino.magritte.framework.Graph graph, AbstractGraph wrapper) {
			this.graph = graph;
			this.graph.i18n().register("$name");
			$node+clone...[$NL]
		}

		public <T extends io.intino.magritte.framework.GraphWrapper> T a$$(Class<T> t) {
			return this.core$$().as(t);
		}

        @Override
		public void update() {
			this._index.values().forEach(v -> v.clear());
			graph.rootList().forEach(r -> addNode$$(r));
		}

		@Override
		protected void addNode$$(io.intino.magritte.framework.Node node) {
			for (io.intino.magritte.framework.Concept c : node.conceptList()) if (this._index.containsKey(c.id())) this._index.get(c.id()).add(node);
			if (this._index.containsKey(node.id())) this._index.get(node.id()).add(node);
		}

		@Override
		protected void removeNode$$(io.intino.magritte.framework.Node node) {
			for (io.intino.magritte.framework.Concept c : node.conceptList()) if (this._index.containsKey(c.id())) this._index.get(c.id()).remove(node);
			if (this._index.containsKey(node.id())) this._index.get(node.id()).remove(node);
		}

		public java.net.URL resourceAsMessage$$(String language, String key) {
			return graph.loadResource(graph.i18n().message(language, key));
		}

		$node+getter...[$NL$NL]

		$node+filter...[$NL$NL]

		public io.intino.magritte.framework.Graph core$$() {
			return graph;
		}

		public io.intino.magritte.framework.utils.I18n i18n$$() {
			return graph.i18n();
		}

		public Create create() {
			return new Create("Misc", null);
		}

		public Create create(String stash) {
			return new Create(stash, null);
		}

		public Create create(String stash, String name) {
			return new Create(stash, name);
		}

		public Clear clear() {
			return new Clear();
		}

		public class Create {
			private final String stash;
			private final String name;

			public Create(String stash, String name) {
				this.stash = stash;
				this.name = name;
			}

			<<$node+new...[$NL$NL]>>
		}

		public class Clear {
		    <<$node+clear...[$NL$NL]>>
		}


		private java.util.HashMap<String, Indexer> _fillIndex() {
			java.util.HashMap<String, Indexer> map = new java.util.HashMap<>();
			<<$node+put...[$NL]>>
			return map;
		}

		public static io.intino.magritte.io.model.Stash[] _language() {
			return new io.intino.magritte.io.model.Stash[]{<<$parentPackage.AbstractGraph._language()[0], >>stash()};
		}

		private static io.intino.magritte.io.model.Stash stash() {
			String content = $stash+call;
			return io.intino.magritte.io.StashDeserializer.stashFrom(java.util.Base64.getDecoder().decode(content));
		}

		$stash+stashMethod

		public static class Indexer {
			Add add;
			Remove remove;
			IndexClear clear;

			public Indexer(Add add, Remove remove, IndexClear clear) {
				this.add = add;
				this.remove = remove;
				this.clear = clear;
			}

			void add(io.intino.magritte.framework.Node node) {
				this.add.add(node);
			}

			void remove(io.intino.magritte.framework.Node node) {
				this.remove.remove(node);
			}

			void clear() {
				this.clear.clear();
			}
		}

		interface Add {
			void add(io.intino.magritte.framework.Node node);
		}

		interface Remove {
			void remove(io.intino.magritte.framework.Node node);
		}

		interface IndexClear {
			void clear();
		}
	}

rule type(stash) and trigger(call)
	$part+methodCall...[ + ]

rule trigger(methodCall)
	stash$index()

rule type(stash) and trigger(stashMethod)
	$part+method...[$NL$NL]

rule trigger(method)
	private static String stash$index() {
		return "$code";
	}

rule type(instance) and trigger(put)
	map.put("$generatedLanguage+FirstUpperCase#$name", new Indexer(node -> $name+FirstLowerCase+javaValidWord = node.as($conceptLayer+reference.class), node -> $name+FirstLowerCase+javaValidWord = null, () -> $name+FirstLowerCase+javaValidWord = null));

rule not type(instance) and type(single) and  trigger(put)
	map.put("$stashQn+noPackage+withDollar", new Indexer(node -> $name+FirstLowerCase+javaValidWord = node.as($qn+reference.class), node -> $name+FirstLowerCase+javaValidWord = null, () -> $name+FirstLowerCase+javaValidWord = null));

rule not type(instance) and trigger(put)
	map.put("$stashQn+noPackage+withDollar", new Indexer(node -> $name+FirstLowerCase~List.add(node.as($qn+reference.class)), node -> $name+FirstLowerCase~List.remove(node.as($qn+reference.class)), () -> $name+FirstLowerCase~List.clear()));

rule trigger(add)

rule type(node, instance) and trigger(declaration)
	private $conceptLayer $name+FirstLowerCase+javaValidWord;

rule type(node, single) and trigger(declaration)
	private $qn+reference $name+FirstLowerCase+javaValidWord;

rule type(node) and trigger(declaration)
	private java.util.List<$qn+reference> $name+FirstLowerCase~List = new java.util.ArrayList<>();

rule type(node, instance) and trigger(update)
	io.intino.magritte.framework.Node $name+FirstLowerCase+javaValidWord~Node = this.graph.load("$generatedLanguage+FirstUpperCase#$name");
	if ($name+FirstLowerCase+javaValidWord~Node != null) this.$name+FirstLowerCase+javaValidWord = $name+FirstLowerCase+javaValidWord~Node.as($conceptLayer.class);

rule type(node, single) and trigger(update)
	$name+FirstLowerCase = this.graph.rootList($qn+reference.class).stream().findFirst().orElse(null);

rule type(node) and trigger(update)
	$name+FirstLowerCase~List = this.graph.rootList($qn+reference.class);

rule type(node) and (type(instance) or type(single)) and trigger(clone)
	this.$name+FirstLowerCase+javaValidWord = wrapper.$name+FirstLowerCase+javaValidWord;

rule type(node) and trigger(clone)
	this.$name+FirstLowerCase~List = new java.util.ArrayList<>(wrapper.$name+FirstLowerCase~List);

rule type(node, instance) and trigger(getter)
	public $conceptLayer $name+FirstLowerCase+javaValidWord() {
		return $name+FirstLowerCase+javaValidWord;
	}

rule type(node, single) and trigger(getter)
	public $qn+reference $name+FirstLowerCase+javaValidWord() {
		return $name+FirstLowerCase+javaValidWord;
	}

rule type(node) and trigger(getter)
	public java.util.List<$qn+reference> $name+FirstLowerCase~List() {
		return $name+FirstLowerCase~List;
	}

rule type(node) and not (type(single) or type(instance)) and trigger(filter)
	public java.util.stream.Stream<$qn+reference> $name+FirstLowerCase~List(java.util.function.Predicate<$qn+reference> filter) {
		return $name+FirstLowerCase~List.stream().filter(filter);
	}

	public $qn+reference $name+FirstLowerCase+javaValidWord(int index) {
		return $name+FirstLowerCase~List.get(index);
	}

rule type(node, concept) and not (type(final) or type(abstract) or type(component) or type(instance)) and trigger(new)
	public $qn+reference $name+FirstLowerCase+javaValidWord(<<$variable+parameters...[, ]>>) {
		$qn+reference newElement = AbstractGraph.this.graph.createRoot($qn+reference.class, stash, this.name).a$$($qn+reference.class);
		<<$variable+assign...[$NL]>>
		return newElement;
	}

rule type(node, concept) and not (type(single) or type(final) or type(abstract) or type(component) or type(instance)) and trigger(clear)
	public void $name+FirstLowerCase+javaValidWord(java.util.function.Predicate<$qn+reference> filter) {
		new java.util.ArrayList<>(AbstractGraph.this.$name+FirstLowerCase+javaValidWord~List()).stream().filter(filter).forEach(io.intino.magritte.framework.Layer::delete$$);
	}

rule trigger(quoted)
	"$this"