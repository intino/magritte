package io.intino.magritte.builder.compiler.codegeneration.magritte.layer.templates.layer;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class SetTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((allTypes("aspect", "overriden")), (trigger("set"))).output(literal("_")).output(mark("name", "FirstLowerCase")).output(literal(".core$().set(_")).output(mark("name", "FirstLowerCase")).output(literal(", name, values);")),
				rule().condition((allTypes("variable", "word", "outDefined", "owner", "multiple")), not(anyTypes("inherited", "overriden", "reactive")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase")).output(literal(" = new java.util.ArrayList<>((java.util.List<")).output(mark("workingPackage", "LowerCase")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal(">) values);")),
				rule().condition((allTypes("variable", "word", "multiple", "owner")), not(anyTypes("inherited", "overriden", "reactive")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase")).output(literal(" = new java.util.ArrayList<>((java.util.List<")).output(mark("type")).output(literal(">) values);")),
				rule().condition((allTypes("variable", "word")), (type("outDefined")), not(anyTypes("inherited", "overriden", "reactive")), (type("owner")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = (")).output(mark("workingPackage", "LowerCase")).output(literal(".rules.")).output(mark("rule", "externalWordClass")).output(literal(") values.get(0);")),
				rule().condition((allTypes("variable", "word", "owner")), not(anyTypes("inherited", "overriden", "reactive")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = (")).output(mark("type")).output(literal(") values.get(0);")),
				rule().condition((allTypes("variable", "reactive", "owner")), not(anyTypes("inherited", "overriden")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.magritte.framework.loaders.FunctionLoader.load(values.get(0), this, io.intino.magritte.framework.Expression.class);")),
				rule().condition((allTypes("variable", "function", "owner")), not(anyTypes("inherited", "overriden")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = io.intino.magritte.framework.loaders.FunctionLoader.load(values.get(0), this, ")).output(mark("workingPackage")).output(literal(".functions.")).output(mark("rule", "interfaceClass")).output(literal(".class);")),
				rule().condition((allTypes("variable", "time", "multiple", "owner")), not(anyTypes("inherited", "overriden", "reactive")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = new java.util.ArrayList<>((List<java.time.LocalTime>) values);")),
				rule().condition((allTypes("variable", "multiple", "owner")), not(anyTypes("inherited", "overriden", "reactive")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = new java.util.ArrayList<>((java.util.List<")).output(mark("type", "fullType")).output(literal(">) values);")),
				rule().condition((allTypes("variable", "owner")), not(anyTypes("multiple", "concept", "inherited", "overriden", "reactive")), (trigger("set"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name", "FirstLowerCase")).output(literal("\")) this.")).output(mark("name", "javaValidName", "FirstLowerCase", "javaValidWord")).output(literal(" = (")).output(mark("type", "fullType")).output(literal(") values.get(0);"))
		);
	}
}