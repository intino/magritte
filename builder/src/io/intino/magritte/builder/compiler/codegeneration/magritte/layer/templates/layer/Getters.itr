def type(Variable & word & outDefined & multiple & final) !type(inherited | overriden | owner) trigger(getter)
	public java.util.List<$workingPackage.rules.$rule+externalWordClass> $name+FirstLowerCase+javaValidName() {
		return java.util.Collections.unmodifiableList(_$containerName+FirstLowerCase.$name+javaValidName());
	}
end

def type(Variable & word & outDefined & multiple) attribute(externalClass) !type(inherited | overriden | owner) trigger(getter)
	public java.util.List<$workingPackage.rules.$externalClass> $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+javaValidName();
	}
end

def type(Variable & word & outDefined & multiple) !type(inherited | overriden | owner | concept) trigger(getter)
	public java.util.List<$workingPackage.rules.$rule+externalWordClass> $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+javaValidName();
	}
end

def type(Variable & word & outDefined) attribute(externalClass) !type(inherited | overriden | owner | concept) trigger(getter)
	public $workingPackage.rules.$externalClass $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end

def type(Variable & word & outDefined) !type(inherited | overriden | owner | concept) trigger(getter)
	public $workingPackage.rules.$rule+externalWordClass $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end

def type(Variable & word & multiple) type(target | metaType) !type(owner | concept) attribute(name) trigger(getter)
	public java.util.List<$qn+reference.$name+FirstUpperCase+javaValidName+reference> $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end

def type(Variable & Word) type(target | metaType) !type(owner | concept) attribute(name) trigger(getter)
	public $qn+reference.$name+FirstUpperCase+javaValidName+reference $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end

def type(Variable & multiple & final) type(target | metaType) !type(owner | concept) attribute(name) trigger(getter)
	public java.util.List<$type+lowercase+fullType> $name+FirstLowerCase+javaValidName() {
		return java.util.Collections.unmodifiableList(_$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName());
	}

	public $type+lowercase+fullType $name+FirstLowerCase+javaValidName(int index) {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName().get(index);
	}
end

def type(Variable & reference) type(target | metaType) attribute(name) type(multiple) trigger(getter)
	public java.util.List<$type+reference> $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}

	public $type+reference $name+FirstLowerCase+javaValidName(int index) {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName().get(index);
	}
end

def type(Variable) !type(owner | concept) type(target | metaType) attribute(name) type(multiple) trigger(getter)
	public java.util.List<$type+lowercase+fullType> $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}

	public $type+lowercase+fullType $name+FirstLowerCase+javaValidName(int index) {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName().get(index);
	}
end

def type(Variable & function) type(target | metaType) !type(owner) attribute(name) trigger(getter)
	public $returnType $name+FirstLowerCase+javaValidName($parameters)[ throws $exception...[, ]] {
		$returnType+isReturn _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName($parameters+WithOutType);
	}
end

def type(Variable & concept & multiple & target & final) attribute(name) !type(inherited & owner) trigger(getter)
	public java.util.List<io.intino.magritte.framework.Concept> $name+FirstLowerCase+javaValidName() {
		return java.util.Collections.unmodifiableList(_$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName());
	}

	public io.intino.magritte.framework.Concept $name+FirstLowerCase+javaValidName(int index) {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName().get(index);
	}
end

def type(Variable & concept & multiple & target) attribute(name) !type(inherited & owner) trigger(getter)
	public java.util.List<io.intino.magritte.framework.Concept> $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}

	public io.intino.magritte.framework.Concept $name+FirstLowerCase+javaValidName(int index) {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName().get(index);
	}
end

def type(Variable) type(concept) !type(owner) type(target) attribute(name) !type(inherited) trigger(getter)
	public io.intino.magritte.framework.Concept $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end

def type(Variable & target & reference) !type(owner | concept) attribute(name) trigger(getter)
	public $type+reference $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end

def type(Variable & target) !type(owner | concept) attribute(name) trigger(getter)
	public $type+lowerCase+variableType $name+FirstLowerCase+javaValidName() {
		return _$containerName+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end

def type(Node & instance) attribute(name) trigger(getter)
	public $conceptLayer+reference $name+FirstLowerCase+javaValidName() {
		return _metaType.$type+FirstLowerCase(o -> o.name$$().equals("$name")).get(0);
	}
end

def type(Node & single & target) attribute(name) !type(owner | inherited | instance) trigger(getter)
	public $qn+reference $name+FirstLowerCase+javaValidName() {
		return _$targetContainer+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end

def type(Node & target & final) attribute(name) !type(owner | inherited | instance) trigger(getter)
	public java.util.List<$qn+reference> $name+toCamelCase+FirstLowerCase~List() {
		return java.util.Collections.unmodifiableList((java.util.List<$qn+reference>) _$targetContainer+FirstLowerCase.$name+toCamelCase+FirstLowerCase~List());
	}

	public $qn+reference $name+toCamelCase+FirstLowerCase~List(int index) {
		return _$targetContainer+FirstLowerCase.$name+toCamelCase+FirstLowerCase~List().get(index);
	}
end

def type(Node & target) attribute(name) !type(owner | inherited | instance) trigger(getter)
	public java.util.List<$qn+reference> $name+toCamelCase+FirstLowerCase~List() {
		return (java.util.List<$qn+reference>) _$targetContainer+FirstLowerCase.$name+toCamelCase+FirstLowerCase~List();
	}

	public $qn+reference $name+toCamelCase+FirstLowerCase~List(int index) {
		return _$targetContainer+FirstLowerCase.$name+toCamelCase+FirstLowerCase~List().get(index);
	}
end

def type(Node & target) attribute(name) !type(owner | instance | single) trigger(getter)
	public java.util.List<$qn+reference> $name+toCamelCase+FirstLowerCase~List() {
		return (java.util.List<$qn+reference>) _$targetContainer+FirstLowerCase.$name+toCamelCase+FirstLowerCase~List();
	}

	public $qn+reference $name+toCamelCase+FirstLowerCase~List(int index) {
		return _$targetContainer+FirstLowerCase.$name+toCamelCase+FirstLowerCase~List().get(index);
	}
end

def type(Node & target & single) attribute(name) !type(owner | instance) trigger(getter)
	public $qn+reference $name+FirstLowerCase+javaValidName() {
		return ($qn+reference) _$targetContainer+FirstLowerCase.$name+FirstLowerCase+javaValidName();
	}
end



----- OWN GETTERS -----

def type(variable & reference & concept & multiple & reactive) !type(inherited | overriden) trigger(getter)
	public java.util.List<io.intino.magritte.framework.Concept> $name+FirstLowerCase+javaValidName() {
		return java.util.Collections.unmodifiableList($name+FirstLowerCase+javaValidName);
	}
end

def type(variable & reference & concept & reactive) !type(inherited | overriden) trigger(getter)
	public io.intino.magritte.framework.Concept $name+FirstLowerCase+javaValidName() {
		return this.$name+FirstLowerCase+javaValidName.value();
	}
end


def type(variable & reference & concept & multiple) !type(inherited | overriden) trigger(getter)
	public java.util.List<io.intino.magritte.framework.Concept> $name+FirstLowerCase+javaValidName() {
		return java.util.Collections.unmodifiableList($name+FirstLowerCase+javaValidName);
	}
end

def type(variable & reference & concept) !type(inherited | overriden) trigger(getter)
	public io.intino.magritte.framework.Concept $name+FirstLowerCase+javaValidName() {
		return this.$name+FirstLowerCase+javaValidName;
	}
end

def type(variable & word & outDefined & multiple & final) !type(inherited | overriden | target | overriden) trigger(getter)
	public java.util.List<$workingPackage.rules.$rule+externalWordClass> $name+FirstLowerCase+javaValidName() {
		return java.util.Collections.unmodifiableList($name+FirstLowerCase+javaValidName);
	}
end

def type(variable & word & outDefined & multiple) !type(inherited | overriden | target | reactive) trigger(getter)
	public java.util.List<$workingPackage.rules.$rule+externalWordClass> $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}
end

def type(variable & word & outDefined) !type(inherited | reactive | multiple) trigger(getter)
	public $workingPackage.rules.$rule+externalWordClass $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}
end

def type(variable & word & multiple & final) !type(target | outDefined | inherited | overriden) trigger(getter)
	public java.util.List<$type+reference> $name+javaValidName+javaValidName() {
		return java.util.Collections.unmodifiableList($name+javaValidName);
	}
end

def type(variable & word & multiple) !type(target | outDefined | inherited | overriden | reactive) trigger(getter)
	public java.util.List<$type+reference> $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}
end

def type(variable & word) !type(outDefined | inherited | overriden | reactive) trigger(getter)
	public $type $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}
end

def type(variable & reactive & multiple) !type(inherited | overriden) trigger(getter)
	public java.util.List<$type+fullType+reference> $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName.value();
	}
end

def type(variable & reactive) !type(inherited | overriden) trigger(getter)
	public $type+fullType+reference $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName.value();
	}
end

def type(variable & function) !type(inherited | overriden) trigger(getter)
	public $returnType $name+FirstLowerCase+javaValidName($parameters)[ throws $exception...[, ]] {
		$returnType+isReturn $name+FirstLowerCase+javaValidName.$methodName($parameters+WithoutType);
	}
end

def !attribute(this:void) trigger(isReturn)
	return
end

def attribute(this:void) trigger(isReturn)
end

def type(Variable & multiple & owner & reference) !type(inherited | overriden | outdefined) trigger(getter)
	public java.util.List<$type+reference> $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}

	public $type+reference $name+FirstLowerCase+javaValidName(int index) {
		return $name+FirstLowerCase+javaValidName.get(index);
	}

	public java.util.List<$type+reference> $name+FirstLowerCase+javaValidName(java.util.function.Predicate<$type+reference> predicate) {
		return $name+FirstLowerCase+javaValidName().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Variable & multiple & owner) !type(inherited | overriden | outdefined) trigger(getter)
	public java.util.List<$type+lowercase+fullType> $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}

	public $type+lowercase+fullType $name+FirstLowerCase+javaValidName(int index) {
		return $name+FirstLowerCase+javaValidName.get(index);
	}

	public java.util.List<$type+lowercase+fullType> $name+FirstLowerCase+javaValidName(java.util.function.Predicate<$type+lowercase+fullType> predicate) {
		return $name+FirstLowerCase+javaValidName().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Variable & multiple & owner & final) !type(inherited | overriden) trigger(getter)
	public java.util.List<$type+lowercase+fullType> $name+FirstLowerCase+javaValidName() {
		return java.util.Collections.unmodifiableList($name+FirstLowerCase+javaValidName);
	}

	public $type+lowercase+fullType $name+FirstLowerCase+javaValidName(int index) {
		return $name+FirstLowerCase+javaValidName.get(index);
	}

	public java.util.List<$type+lowercase+fullType> $name+FirstLowerCase+javaValidName(java.util.function.Predicate<$type+lowercase+fullType> predicate) {
		return $name+FirstLowerCase+javaValidName().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Variable & multiple & owner) !type(inherited | overriden | reactive) trigger(getter)
	public java.util.List<$type+lowercase+fullType> $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}

	public $type+lowercase+fullType $name+FirstLowerCase+javaValidName(int index) {
		return $name+FirstLowerCase+javaValidName.get(index);
	}

	public java.util.List<$type+lowercase+fullType> $name+FirstLowerCase+javaValidName(java.util.function.Predicate<$type+lowercase+fullType> predicate) {
		return $name+FirstLowerCase+javaValidName().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(variable & owner) type(reference | objectVariable) !type(inherited | overriden| reactive) trigger(getter)
	public $type+reference $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}
end

def type(Variable & owner) !type(inherited | overriden | reactive) trigger(getter)
	public $type+lowerCase+variableType $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}
end

def type(Node & single & owner) !type(inherited | overriden) trigger(getter)
	public $qn+reference $name+FirstLowerCase+javaValidName() {
		return $name+FirstLowerCase+javaValidName;
	}
end

def type(Node & owner & overriden) !type(single) trigger(getter)
	public java.util.List<$qn+reference> $containerName+FirstLowerCase+javaValidName~$name+FirstUpperCase~List() {
		return new io.intino.magritte.framework.utils.ProxyList<>($name+toCamelCase+FirstLowerCase~List, $qn+reference.class);
	}

	public $qn+reference $containerName+FirstLowerCase$name+FirstUpperCase+javaValidName(int index) {
		return $containerName+FirstLowerCase+javaValidName~$name+FirstUpperCase~List().get(index);
	}

	public java.util.List<$qn+reference> $containerName+FirstLowerCase+javaValidName~$name+FirstUpperCase~List(java.util.function.Predicate<$qn+reference> predicate) {
		return $containerName+FirstLowerCase+javaValidName~$name+FirstUpperCase~List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Node & owner & final) !type(single | inherited | overriden) trigger(getter)
	public java.util.List<$qn+reference> $name+toCamelCase+FirstLowerCase~List() {
		return java.util.Collections.unmodifiableList($name+toCamelCase+FirstLowerCase~List);
	}

	public $qn+reference $name+FirstLowerCase+javaValidName(int index) {
		return $name+toCamelCase+FirstLowerCase~List.get(index);
	}

	public java.util.List<$qn+reference> $name+toCamelCase+FirstLowerCase~List(java.util.function.Predicate<$qn+reference> predicate) {
		return $name+toCamelCase+FirstLowerCase~List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}

	public $qn+reference $name+toCamelCase+FirstLowerCase+javaValidName(java.util.function.Predicate<$qn+reference> predicate) {
		return $name+toCamelCase+FirstLowerCase~List().stream().filter(predicate).findFirst().orElse(null);
	}
end

def type(Node & owner) !type(single | inherited | overriden) trigger(getter)
	public java.util.List<$qn+reference> $name+toCamelCase+FirstLowerCase~List() {
		return java.util.Collections.unmodifiableList($name+toCamelCase+FirstLowerCase~List);
	}

	public $qn+reference $name+FirstLowerCase+javaValidName(int index) {
		return $name+toCamelCase+FirstLowerCase~List.get(index);
	}

	public java.util.List<$qn+reference> $name+toCamelCase+FirstLowerCase~List(java.util.function.Predicate<$qn+reference> predicate) {
		return $name+toCamelCase+FirstLowerCase~List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}

	public $qn+reference $name+toCamelCase+FirstLowerCase+javaValidName(java.util.function.Predicate<$qn+reference> predicate) {
		return $name+toCamelCase+FirstLowerCase~List().stream().filter(predicate).findFirst().orElse(null);
	}
end