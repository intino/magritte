rule type(Layer, decorable)
	package $package+javaValidName+lowercase<<.$container+lowercase>>;

	public <<$abstract>> class $name+javaValidName+FirstUpperCase extends Abstract$name+javaValidName+FirstUpperCase {
		public $name+javaValidName+FirstUpperCase(io.intino.magritte.framework.Node node) {
			super(node);
		}

		<<$decorableNode...[$NL$NL]>>
	}


rule trigger(decorableNode)
	public static <<$abstract>> class $name+javaValidName+FirstUpperCase extends Abstract$name+javaValidName+FirstUpperCase {
		public $name+javaValidName+FirstUpperCase(io.intino.magritte.framework.Node node) {
			super(node);
		}

		<<$decorableNode...[$NL$NL]>>
	}

rule type(Layer)
	package $package+javaValidName+lowercase;

	import $workingPackage+javaValidName+lowercase.*;
	<<$imports...[$NL]>>

	$node

rule type(single, owner) and not (type(overriden) or type(instance) or type(inherited)) and trigger(add)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+FirstLowerCase+javaValidName = node.as($qn+reference.class);

rule type(owner) and not (type(overriden) or type(instance) or type(inherited)) and trigger(add)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+toCamelCase+FirstLowerCase~List.add(node.as($qn+reference.class));

rule type(overriden) and trigger(add)

rule type(single, owner) and not (type(overriden) or type(instance) or type(inherited)) and trigger(remove)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+FirstLowerCase+javaValidName = null;

rule type(owner) and not (type(overriden) or type(instance) or type(inherited)) and trigger(remove)
	if (node.is("$stashQn+noPackage+withDollar")) this.$name+toCamelCase+FirstLowerCase~List.remove(node.as($qn+reference.class));

rule type(overriden) and trigger(remove)

rule type(node) and not (type(aspect) or type(final) or type(instance) or type(generalization)or type(inherited)) and trigger(new)
	public $qn+reference $name+FirstLowerCase+javaValidName($variable+parameters...[, ]) {
		$qn+reference newElement = core$$().graph().concept($qn+reference.class).createNode(this.name, core$$()).as($qn+reference.class);
		$variable+assign...[$NL]
		return newElement;
	}

rule type(node) and not (type(aspect) or type(single) or type(final) or type(instance) or type(generalization) or type(overriden)or type(inherited)) and trigger(clear)
	public void $name+FirstLowerCase+javaValidWord(java.util.function.Predicate<$qn+reference> filter) {
		new java.util.ArrayList<>($name+FirstLowerCase~List()).stream().filter(filter).forEach(io.intino.magritte.framework.Layer::delete$$);
	}

rule type(node, create) and not (type(aspect) or type(final) or type(instance)or type(inherited)) and trigger(new)
	public $qn+reference $name+FirstLowerCase+javaValidName($variable+parameters...[, ]) {
		$qn+reference newElement = core$$().graph().concept($qn+reference.class).createNode(this.name, core$$()).as($qn+reference.class);
		$variable+assign...[$NL]
		return newElement;
	}

rule type(node, create) and not (type(single) or type(final) or type(instance) or type(inherited)) and trigger(clear)
	public void $name+FirstLowerCase+javaValidWord(java.util.function.Predicate<$qn+reference> filter) {
		new java.util.ArrayList<>($name+FirstLowerCase~List()).stream().filter(filter).forEach(io.intino.magritte.framework.Layer::delete$$);
	}

rule type(node, owner) and trigger(new)


rule type(node, owner) and trigger(clear)

rule type(availableAspect) and not type(generalization) and attribute(variable) and trigger(availableAspect)
	public $qn as$name+FirstUpperCase() {
		return a$$($qn+reference.class);
	}

	public $qn as$name+FirstUpperCase(<<$variable+parameters...[, ]>>) {
		$qn+reference newElement = core$$().addAspect($qn+reference.class);
		$variable+assign...[$NL]
		return newElement;
	}

	public boolean is$name+FirstUpperCase() {
		return core$$().is($qn+reference.class);
	}

	public void remove$name+FirstUpperCase() {
		core$$().removeAspect($qn+reference.class);
	}

rule type(availableAspect) and not type(generalization) and trigger(availableAspect)

	public $qn+reference as$name+FirstUpperCase() {
		io.intino.magritte.framework.Layer as = a$$($qn+reference.class);
		return as != null ? ($qn+reference) as : core$$().addAspect($qn+reference.class);
	}

	public boolean is$name+FirstUpperCase() {
		return core$$().is($qn+reference.class);
	}

	public void remove$name+FirstUpperCase() {
		core$$().removeAspect($qn+reference.class);
	}

rule type(availableAspect) and trigger(availableAspect)
	public $qn+reference as$name+FirstUpperCase() {
		return a$$($qn+reference.class);
	}

	public boolean is$name+FirstUpperCase() {
		return core$$().is($qn+reference.class);
	}

rule type(core) and trigger(core)
	public $qn+reference as$name() {
		return ($qn+reference) a$$($qn+reference.class);
	}

rule type(aspect) and not type(overriden) and trigger(aspectAssign)
	if (layer instanceof $qn+reference) _$name+FirstLowerCase = ($qn+reference) layer;

rule type(constraint) and trigger(aspectAssign)
	if (layer instanceof $qn+reference) _$name+FirstLowerCase = ($qn+reference) layer;

rule trigger(decorable)
	Abstract

rule not type(target) and type(nodeimpl) and not type(instance) and not type(inherited) and trigger(Node)
	public<< $inner>><< $abstract>> class $decorable<<$name+javaValidName+FirstUpperCase>><< extends $parent? extends io.intino.magritte.framework.Layer>><< implements $flag+tag...[, ]>> {
		<<$variable+declaration...[$NL]>>
		<<$node+declaration...[$NL]>>
		<<$aspect+declaration...[$NL]>>
		<<$constraint+declaration...[$NL]>>
		<<$metaType>>
		<<$metaAspect...[$NL]>>

		public $decorable$name+javaValidName+FirstUpperCase(io.intino.magritte.framework.Node node) {
			super(node);
			<<_metaType = a$$($metaType+typeInit.class);>>
			<<_$metaAspect+name = a$$($metaAspect+typeInit.class);>>
		}

		<<$variable+getter...[$NL$NL]>>

		<<$variable+setter...[$NL$NL]>>

		<<$node+getter...[$NL$NL]>>

		<<$node+setter...[$NL$NL]>>

		<<$availableAspect...[$NL$NL]>>

		<<$core>>

		<<protected java.util.List<io.intino.magritte.framework.Node> componentList$$() {
			java.util.Set<io.intino.magritte.framework.Node> components = new java.util.LinkedHashSet<>(super.componentList$$());
			$node+componentList...[$NL]
			return new java.util.ArrayList<>(components);
		}>>

		@Override
		protected java.util.Map<java.lang.String, java.util.List<?>> variables$$() {
			java.util.Map<java.lang.String, java.util.List<?>> map = new java.util.LinkedHashMap<>($parent+var);
			<<$variable+list...[$NL]>>
			return map;
		}

		<<@Override
		protected void addNode$$(io.intino.magritte.framework.Node node) {
			super.addNode$$(node);
			$node+add...[$NL]
		}>>

		<<@Override
		protected void removeNode$$(io.intino.magritte.framework.Node node) {
			super.removeNode$$(node);
			$node+remove...[$NL]
		}>>

		@Override
		protected void load$$(java.lang.String name, java.util.List<?> values) {
			super.load$$(name, values);
			<<$aspect+init>>
			<<$metaType+metaTypeLoad>>
			<<$metaAspect+metaAspectLoad>>
			<<$variable+init...[$NL~else ]>>
		}

		@Override
		protected void set$$(java.lang.String name, java.util.List<?> values) {
			super.set$$(name, values);
			<<$aspect+set>>
			<<$metaType+metaTypeSet>>
			<<$metaAspect+metaAspectSet>>
			<<$variable+set...[$NL~else ]>>
		}

		<<@Override
		protected void sync$$(io.intino.magritte.framework.Layer layer) {
			super.sync$$(layer);
			$aspect+aspectAssign...[$NL~else ]
			$constraint+aspectAssign...[$NL~else ]
		}>>

		<<public Create create() {
			return new Create(null);
		}

		public Create create(java.lang.String name) {
			return new Create(name);
		}

		public class Create $parentName+parentCreate {
			$parentSuper+parentvariable

			public Create(java.lang.String name) {
				$parentSuper+parentinit
			}

			$node+new...[$NL$NL]
			$create+new...[$NL$NL]
		}>>

		<<public Clear clear() {
			return new Clear();
		}

		public class Clear $parentClearName+parentClear {
			$node+clear...[$NL$NL]
		}>>

		<<$node...[$NL]>>

		public $workingPackage+javaValidName+lowerCase.$generatedLanguage+javaValidName+FirstUpperCase~Graph graph() {
			return ($workingPackage+javaValidName+lowerCase.$generatedLanguage+javaValidName+FirstUpperCase~Graph) core$$().graph().as($workingPackage+javaValidName+lowerCase.$generatedLanguage+javaValidName+FirstUpperCase~Graph.class);
		}
	}

rule trigger(parentCreate)
	extends $this.Create

rule trigger(parentClear)
	extends $this.Clear

rule type(metaAspect) and trigger(name)
	$name+javaValidName+FirstLowerCase

rule type(metaAspect) and trigger(typeInit)
	$type

rule trigger(typeInit)
	$this

rule attribute(this, true) and trigger(parentinit)
	super(name);

rule attribute(this, false) and trigger(parentinit)
	this.name = name;

rule attribute(this, true) and trigger(parentvariable)

rule attribute(this, false) and trigger(parentvariable)
	protected final java.lang.String name;

rule trigger(metaTypeLoad)
	core$$().load(_metaType, name, values);

rule trigger(metaTypeSet)
	core$$().set(_metaType, name, values);

rule trigger(metaAspectLoad)
	core$$().load(_$name+FirstLowerCase, name, values);

rule trigger(metaAspectSet)
	core$$().set(_$name+FirstLowerCase, name, values);

rule trigger(metaType)
	protected $this _metaType;

rule trigger(metaAspect)
	protected $type _$name+FirstLowerCase;

rule trigger(tag)
	io.intino.magritte.framework.tags.$this+lowerCase+FirstUpperCase

rule attribute(Layer) and trigger(var)


rule trigger(var)
	super.variables$$()
rule attribute(this, true) and trigger(inner)
	static

rule attribute(this, true) and trigger(abstract)
	abstract