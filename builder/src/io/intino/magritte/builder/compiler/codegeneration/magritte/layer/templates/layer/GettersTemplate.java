package io.intino.magritte.builder.compiler.codegeneration.magritte.layer.templates.layer;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class GettersTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(all(all(allTypes("Variable", "word", "outDefined", "multiple", "final"), not(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(_")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "javaValidName")).output(literal("());\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Variable", "word", "outDefined", "multiple"), attribute("externalclass")), not(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("externalClass")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "word", "outDefined", "multiple"), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")), allTypes("concept")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Variable", "word", "outDefined"), attribute("externalclass")), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")), allTypes("concept")))), trigger("getter"))).output(literal("public ")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("externalClass")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "word", "outDefined"), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")), allTypes("concept")))), trigger("getter"))).output(literal("public ")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(all(all(allTypes("Variable", "word", "multiple"), any(allTypes("target"), allTypes("metaType"))), not(any(allTypes("owner"), allTypes("concept")))), attribute("name")), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("qn", "reference")).output(literal(".")).output(placeholder("name", "FirstUpperCase", "javaValidName", "reference")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(all(all(allTypes("Variable", "Word"), any(allTypes("target"), allTypes("metaType"))), not(any(allTypes("owner"), allTypes("concept")))), attribute("name")), trigger("getter"))).output(literal("public ")).output(placeholder("qn", "reference")).output(literal(".")).output(placeholder("name", "FirstUpperCase", "javaValidName", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(all(all(allTypes("Variable", "multiple", "final"), any(allTypes("target"), allTypes("metaType"))), not(any(allTypes("owner"), allTypes("concept")))), attribute("name")), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(_")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("());\n}\n\npublic ")).output(placeholder("type", "lowercase", "fullType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")));
		rules.add(rule().condition(all(all(all(all(allTypes("Variable", "reference"), any(allTypes("target"), allTypes("metaType"))), attribute("name")), allTypes("multiple")), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "reference")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}\n\npublic ")).output(placeholder("type", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")));
		rules.add(rule().condition(all(all(all(all(all(allTypes("Variable"), not(any(allTypes("owner"), allTypes("concept")))), any(allTypes("target"), allTypes("metaType"))), attribute("name")), allTypes("multiple")), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}\n\npublic ")).output(placeholder("type", "lowercase", "fullType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Variable", "function"), any(allTypes("target"), allTypes("metaType"))), not(all(allTypes("owner"), attribute("name")))), trigger("getter"))).output(literal("public ")).output(placeholder("returnType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("parameters")).output(literal(")")).output(expression().output(literal(" throws ")).output(placeholder("exception").multiple(", "))).output(literal(" {\n\t")).output(placeholder("returnType", "isReturn")).output(literal(" _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("parameters", "WithOutType")).output(literal(");\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Variable", "concept", "multiple", "target", "final"), attribute("name")), not(allTypes("inherited", "owner"))), trigger("getter"))).output(literal("public java.util.List<io.intino.magritte.framework.Concept> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(_")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("());\n}\n\npublic io.intino.magritte.framework.Concept ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Variable", "concept", "multiple", "target"), attribute("name")), not(allTypes("inherited", "owner"))), trigger("getter"))).output(literal("public java.util.List<io.intino.magritte.framework.Concept> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}\n\npublic io.intino.magritte.framework.Concept ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().get(index);\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable"), allTypes("concept")), not(all(all(all(all(allTypes("owner"), allTypes("target")), attribute("name")), not(allTypes("inherited"))), trigger("getter"))))).output(literal("public io.intino.magritte.framework.Concept ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Variable", "target", "reference"), not(any(allTypes("owner"), allTypes("concept")))), attribute("name")), trigger("getter"))).output(literal("public ")).output(placeholder("type", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Variable", "target"), not(any(allTypes("owner"), allTypes("concept")))), attribute("name")), trigger("getter"))).output(literal("public ")).output(placeholder("type", "lowerCase", "variableType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("Node", "instance"), attribute("name")), trigger("getter"))).output(literal("public ")).output(placeholder("conceptLayer", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _metaType.")).output(placeholder("type", "FirstLowerCase")).output(literal("(o -> o.name$().equals(\"")).output(placeholder("name")).output(literal("\")).get(0);\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Node", "single", "target"), attribute("name")), not(any(any(allTypes("owner"), allTypes("inherited")), allTypes("instance")))), trigger("getter"))).output(literal("public ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn _")).output(placeholder("targetContainer", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Node", "target", "final"), attribute("name")), not(any(any(allTypes("owner"), allTypes("inherited")), allTypes("instance")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn java.util.Collections.unmodifiableList((java.util.List<")).output(placeholder("qn", "reference")).output(literal(">) _")).output(placeholder("targetContainer", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List());\n}\n\npublic ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List(int index) {\n\treturn _")).output(placeholder("targetContainer", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List().get(index);\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Node", "target"), attribute("name")), not(any(any(allTypes("owner"), allTypes("inherited")), allTypes("instance")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn (java.util.List<")).output(placeholder("qn", "reference")).output(literal(">) _")).output(placeholder("targetContainer", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List();\n}\n\npublic ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List(int index) {\n\treturn _")).output(placeholder("targetContainer", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List().get(index);\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Node", "target"), attribute("name")), not(any(any(allTypes("owner"), allTypes("instance")), allTypes("single")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn (java.util.List<")).output(placeholder("qn", "reference")).output(literal(">) _")).output(placeholder("targetContainer", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List();\n}\n\npublic ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List(int index) {\n\treturn _")).output(placeholder("targetContainer", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List().get(index);\n}")));
		rules.add(rule().condition(all(all(all(allTypes("Node", "target", "single"), attribute("name")), not(any(allTypes("owner"), allTypes("instance")))), trigger("getter"))).output(literal("public ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn (")).output(placeholder("qn", "reference")).output(literal(") _")).output(placeholder("targetContainer", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "reference", "concept", "multiple", "reactive"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public java.util.List<io.intino.magritte.framework.Concept> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(");\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "reference", "concept", "reactive"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public io.intino.magritte.framework.Concept ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn this.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".value();\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "reference", "concept", "multiple"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public java.util.List<io.intino.magritte.framework.Concept> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(");\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "reference", "concept"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public io.intino.magritte.framework.Concept ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn this.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "word", "outDefined", "multiple", "final"), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("target")), allTypes("overriden")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(");\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "word", "outDefined", "multiple"), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("target")), allTypes("reactive")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "word", "outDefined"), not(any(any(allTypes("inherited"), allTypes("reactive")), allTypes("multiple")))), trigger("getter"))).output(literal("public ")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "word", "multiple", "final"), not(any(any(any(allTypes("target"), allTypes("outDefined")), allTypes("inherited")), allTypes("overriden")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "reference")).output(literal("> ")).output(placeholder("name", "javaValidName", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(placeholder("name", "javaValidName")).output(literal(");\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "word", "multiple"), not(any(any(any(any(allTypes("target"), allTypes("outDefined")), allTypes("inherited")), allTypes("overriden")), allTypes("reactive")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "reference")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "word"), not(any(any(any(allTypes("outDefined"), allTypes("inherited")), allTypes("overriden")), allTypes("reactive")))), trigger("getter"))).output(literal("public ")).output(placeholder("type")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "reactive", "multiple"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "fullType", "reference")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".value();\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "reactive"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public ")).output(placeholder("type", "fullType", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".value();\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "function"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public ")).output(placeholder("returnType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("parameters")).output(literal(")")).output(expression().output(literal(" throws ")).output(placeholder("exception").multiple(", "))).output(literal(" {\n\t")).output(placeholder("returnType", "isReturn")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".")).output(placeholder("methodName")).output(literal("(")).output(placeholder("parameters", "WithoutType")).output(literal(");\n}")));
		rules.add(rule().condition(all(not(attribute("", "void")), trigger("isreturn"))).output(literal("return")));
		rules.add(rule().condition(all(attribute("", "void"), trigger("isreturn"))));
		rules.add(rule().condition(all(all(allTypes("Variable", "multiple", "owner", "reference"), not(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("outdefined")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "reference")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}\n\npublic ")).output(placeholder("type", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".get(index);\n}\n\npublic java.util.List<")).output(placeholder("type", "reference")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(placeholder("type", "reference")).output(literal("> predicate) {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "multiple", "owner"), not(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("outdefined")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}\n\npublic ")).output(placeholder("type", "lowercase", "fullType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".get(index);\n}\n\npublic java.util.List<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> predicate) {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "multiple", "owner", "final"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn java.util.Collections.unmodifiableList(")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(");\n}\n\npublic ")).output(placeholder("type", "lowercase", "fullType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".get(index);\n}\n\npublic java.util.List<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> predicate) {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "multiple", "owner"), not(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("reactive")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}\n\npublic ")).output(placeholder("type", "lowercase", "fullType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".get(index);\n}\n\npublic java.util.List<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(placeholder("type", "lowercase", "fullType")).output(literal("> predicate) {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(all(all(allTypes("variable", "owner"), any(allTypes("reference"), allTypes("objectVariable"))), not(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("reactive")))), trigger("getter"))).output(literal("public ")).output(placeholder("type", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "owner"), not(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("reactive")))), trigger("getter"))).output(literal("public ")).output(placeholder("type", "lowerCase", "variableType")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")));
		rules.add(rule().condition(all(all(allTypes("Node", "single", "owner"), not(any(allTypes("inherited"), allTypes("overriden")))), trigger("getter"))).output(literal("public ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("() {\n\treturn ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(";\n}")));
		rules.add(rule().condition(all(all(allTypes("Node", "owner", "overriden"), not(allTypes("single"))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("containerName", "FirstLowerCase", "javaValidName")).output(placeholder("name", "FirstUpperCase")).output(literal("List() {\n\treturn new io.intino.magritte.framework.utils.ProxyList<>(")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List, ")).output(placeholder("qn", "reference")).output(literal(".class);\n}\n\npublic ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("containerName", "FirstLowerCase")).output(placeholder("name", "FirstUpperCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(placeholder("containerName", "FirstLowerCase", "javaValidName")).output(placeholder("name", "FirstUpperCase")).output(literal("List().get(index);\n}\n\npublic java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("containerName", "FirstLowerCase", "javaValidName")).output(placeholder("name", "FirstUpperCase")).output(literal("List(java.util.function.Predicate<")).output(placeholder("qn", "reference")).output(literal("> predicate) {\n\treturn ")).output(placeholder("containerName", "FirstLowerCase", "javaValidName")).output(placeholder("name", "FirstUpperCase")).output(literal("List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}")));
		rules.add(rule().condition(all(all(allTypes("Node", "owner", "final"), not(any(any(allTypes("single"), allTypes("inherited")), allTypes("overriden")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn java.util.Collections.unmodifiableList(")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List);\n}\n\npublic ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List.get(index);\n}\n\npublic java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List(java.util.function.Predicate<")).output(placeholder("qn", "reference")).output(literal("> predicate) {\n\treturn ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}\n\npublic ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "toCamelCase", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(placeholder("qn", "reference")).output(literal("> predicate) {\n\treturn ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List().stream().filter(predicate).findFirst().orElse(null);\n}")));
		rules.add(rule().condition(all(all(allTypes("Node", "owner"), not(any(any(allTypes("single"), allTypes("inherited")), allTypes("overriden")))), trigger("getter"))).output(literal("public java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List() {\n\treturn java.util.Collections.unmodifiableList(")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List);\n}\n\npublic ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(int index) {\n\treturn ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List.get(index);\n}\n\npublic java.util.List<")).output(placeholder("qn", "reference")).output(literal("> ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List(java.util.function.Predicate<")).output(placeholder("qn", "reference")).output(literal("> predicate) {\n\treturn ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}\n\npublic ")).output(placeholder("qn", "reference")).output(literal(" ")).output(placeholder("name", "toCamelCase", "FirstLowerCase", "javaValidName")).output(literal("(java.util.function.Predicate<")).output(placeholder("qn", "reference")).output(literal("> predicate) {\n\treturn ")).output(placeholder("name", "toCamelCase", "FirstLowerCase")).output(literal("List().stream().filter(predicate).findFirst().orElse(null);\n}")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}