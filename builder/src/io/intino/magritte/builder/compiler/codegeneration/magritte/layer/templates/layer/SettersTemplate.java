package io.intino.magritte.builder.compiler.codegeneration.magritte.layer.templates.layer;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class SettersTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(all(all(all(allTypes("variable", "word", "outDefined", "multiple"), attribute("externalclass")), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")), allTypes("reactive")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.List<")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("externalClass")).output(literal("> values) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(values);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "word", "outDefined", "multiple"), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")), allTypes("reactive")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.List<")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal("> values) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(values);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(all(allTypes("variable", "word", "outDefined"), attribute("externalclass")), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")), allTypes("reactive")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("externalClass")).output(literal(" value) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "word", "outDefined"), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("owner")), allTypes("reactive")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal(" value) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "word"), not(any(any(any(any(allTypes("multiple"), allTypes("owner")), allTypes("reactive")), allTypes("final")), allTypes("reactive")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("qn", "reference")).output(literal(".")).output(placeholder("name", "FirstUpperCase", "javaValidName", "reference")).output(literal(" value) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "resource"), not(any(any(any(allTypes("multiple"), allTypes("owner")), allTypes("reactive")), allTypes("final")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("type", "variableType")).output(literal(" value, String destiny) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(value, destiny);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\npublic ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.io.InputStream stream, String destiny) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(stream, destiny);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "reactive"), not(any(any(any(any(allTypes("owner"), allTypes("inherited")), allTypes("overriden")), allTypes("multiple")), allTypes("final")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(io.intino.magritte.framework.Expression<")).output(placeholder("type", "fullType", "reference")).output(literal("> value) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "function"), not(any(any(any(any(allTypes("owner"), allTypes("inherited")), allTypes("overriden")), allTypes("multiple")), allTypes("final")))), trigger("setter"))));
		rules.add(rule().condition(all(all(allTypes("variable"), not(any(any(any(any(any(any(allTypes("multiple"), allTypes("owner")), allTypes("function")), allTypes("resource")), allTypes("reactive")), allTypes("final")), allTypes("word")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("type", "variableType")).output(literal(" value) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(all(all(all(all(all(allTypes("variable", "Concept"), not(allTypes("multiple"))), not(allTypes("owner"))), not(allTypes("function"))), not(allTypes("reactive"))), not(allTypes("final"))), not(allTypes("Word"))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(io.intino.magritte.framework.Concept value) {\n\tthis._")).output(placeholder("containerName", "FirstLowerCase")).output(literal(".")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(value);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\n----- OWN SETTERS -----")));
		rules.add(rule().condition(all(all(allTypes("variable", "word", "outDefined"), not(any(any(any(any(allTypes("target"), allTypes("inherited")), allTypes("overriden")), allTypes("multiple")), allTypes("final")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("workingPackage", "LowerCase")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal(" value) {\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = value;\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "word", "outDefined", "multiple"), not(any(any(allTypes("target"), allTypes("inherited")), allTypes("overriden")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.List<")).output(placeholder("workingPackage")).output(literal(".rules.")).output(placeholder("rule", "externalWordClass")).output(literal("> values) {\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = values;\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "word"), not(any(any(any(any(any(allTypes("target"), allTypes("inherited")), allTypes("overriden")), allTypes("multiple")), allTypes("final")), allTypes("reactive")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(expression().output(placeholder("qn", "reference")).output(literal("."))).output(placeholder("name", "FirstUpperCase", "javaValidName", "reference")).output(literal(" value) {\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = value;\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "resource"), not(any(any(any(any(any(allTypes("target"), allTypes("inherited")), allTypes("overriden")), allTypes("reactive")), allTypes("multiple")), allTypes("final")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("type", "fulltype", "reference")).output(literal(" url, String destination) {\n\tif (url == null) this.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = null;\n\telse this.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = graph().core$().save(url, destination, this.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(", core$());\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\npublic ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.io.InputStream stream, String destination) {\n\tif (stream == null) this.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = null;\n\telse this.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = graph().core$().save(stream, destination, this.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(", core$());\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "resource", "multiple"), not(any(any(any(any(allTypes("target"), allTypes("inherited")), allTypes("overriden")), allTypes("reactive")), allTypes("final")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" add")).output(placeholder("name", "FirstUpperCase")).output(literal("(")).output(placeholder("type", "fulltype", "reference")).output(literal(" url, String destination) {\n\t")).output(placeholder("type", "fulltype", "reference")).output(literal(" newElement = graph().core$().save(url, destination, null, core$());\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".add(newElement);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\npublic ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" add")).output(placeholder("name", "FirstUpperCase")).output(literal("(java.io.InputStream stream, String destination) {\n\t")).output(placeholder("type", "fulltype", "reference")).output(literal(" newElement = graph().core$().save(stream, destination, null, core$());\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".add(newElement);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}\n\npublic java.io.OutputStream add")).output(placeholder("name", "FirstUpperCase", "javaValidName")).output(literal("(String destination) {\n\t")).output(placeholder("type", "fulltype", "reference")).output(literal(" newElement = graph().core$().save((java.io.InputStream)null, destination, null, core$());\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(".add(newElement);\n\ttry {\n\t\treturn newElement.openConnection().getOutputStream();\n\t} catch(java.io.IOException e) {\n\t\tjava.util.logging.Logger.getGlobal().severe(e.getMessage());\n\t\treturn null;\n\t}\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "reactive"), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("multiple")), allTypes("final")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(io.intino.magritte.framework.Expression<")).output(placeholder("type", "fullType", "reference")).output(literal("> value) {\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = io.intino.magritte.framework.loaders.FunctionLoader.load(value, this, io.intino.magritte.framework.Expression.class);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable", "function"), not(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("multiple")), allTypes("final")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("workingPackage", "LowerCase")).output(literal(".functions.")).output(placeholder("rule", "interfaceClass")).output(literal(" value) {\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = io.intino.magritte.framework.loaders.FunctionLoader.load(")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(", this, ")).output(placeholder("workingPackage", "LowerCase")).output(literal(".functions.")).output(placeholder("rule", "interfaceClass")).output(literal(".class);\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("Variable"), not(any(any(any(any(any(allTypes("inherited"), allTypes("overriden")), allTypes("function")), allTypes("reactive")), allTypes("multiple")), allTypes("final")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(")).output(placeholder("type", "variableType")).output(literal(" value) {\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal(" = value;\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "reference", "concept", "multiple", "owner"), not(any(any(any(allTypes("final"), allTypes("inherited")), allTypes("overriden")), allTypes("reactive")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(java.util.List<io.intino.magritte.framework.Concept> value) {\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName", "FirstLowerCase")).output(literal(" = value;\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(all(allTypes("variable", "reference", "concept", "owner"), not(any(any(any(any(allTypes("final"), allTypes("inherited")), allTypes("overriden")), allTypes("multiple")), allTypes("reactive")))), trigger("setter"))).output(literal("public ")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(" ")).output(placeholder("name", "FirstLowerCase", "javaValidName")).output(literal("(io.intino.magritte.framework.Concept value) {\n\tthis.")).output(placeholder("name", "FirstLowerCase", "javaValidName", "FirstLowerCase")).output(literal(" = value;\n\treturn (")).output(placeholder("container", "FirstUpperCase", "javaValidName")).output(literal(") this;\n}")));
		rules.add(rule().condition(all(allTypes("Mogram"), trigger("setter"))));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}