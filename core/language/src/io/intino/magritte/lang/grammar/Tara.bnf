	{
	parserClass='io.intino.magritte.plugin.lang.parser.TaraParser'
	parserUtilClass="io.intino.magritte.plugin.lang.parser.TaraParserUtil"
	psiVisitorName="TaraVisitor"
	extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
	implements='io.intino.magritte.plugin.lang.psi.TaraPsiElement'
	psiClassPrefix='Tara'
	psiImplClassSuffix='Impl'
	psiPackage='io.intino.magritte.plugin.lang.psi'
	psiImplPackage='io.intino.magritte.plugin.lang.psi.impl'

	elementTypeHolderClass='io.intino.magritte.plugin.lang.psi.TaraTypes'
	elementTypeClass='io.intino.magritte.plugin.lang.psi.TaraElementType'
	tokenTypeClass='io.intino.magritte.plugin.lang.psi.TaraTokenType'

	psiImplUtilClass='io.intino.magritte.plugin.lang.psi.impl.TaraPsiUtil'
}

root ::=COMMENT? NEWLINE* (dslDeclaration NEWLINE+)? imports? (node NEWLINE+)*

dslDeclaration ::= DSL headerReference

imports ::= (anImport NEWLINE*)+

anImport ::= USE headerReference NEWLINE {
	mixin= 'io.intino.magritte.plugin.lang.psi.impl.ImportMixin'
    implements='io.intino.magritte.plugin.lang.psi.Import'
}

doc ::= (DOC_LINE NEWLINE?)+ {
	mixin= 'io.intino.magritte.plugin.lang.psi.impl.DocMixin'
	implements='io.intino.magritte.plugin.lang.psi.Doc'
}

node ::= doc? signature body? {
	pin = 2
	mixin= 'io.intino.magritte.plugin.lang.psi.impl.NodeMixin'
	implements='io.intino.magritte.plugin.lang.psi.TaraPsiElement, io.intino.tara.lang.model.Node, com.intellij.openapi.util.Iconable, com.intellij.pom.Navigatable'
}

signature::= (subNode | (metaIdentifier ruleContainer* parameters? identifier? aspects? parent?)) (constraint? tags?)  {
	pin = 1
	mixin= 'io.intino.magritte.plugin.lang.psi.impl.SignatureMixin'
	implements='io.intino.magritte.plugin.lang.psi.Signature'
}

private subNode ::= SUB ruleContainer* parameters? identifier aspects?
{pin = 1}

private parent ::= EXTENDS identifierReference
{pin = 1}

parameters ::= LEFT_PARENTHESIS (parameter (COMMA parameter)*)? RIGHT_PARENTHESIS {
	pin = 1
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.ParametersMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Parameters'
}

parameter ::= (identifier EQUALS)? value {
    pin = 2
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.ParameterMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Valued, io.intino.tara.lang.model.Parameter, com.intellij.pom.Navigatable'
}

aspects ::= AS aspectApply+
{pin = 1}

aspectApply ::= metaIdentifier parameters? {
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.AspectApplyMixin'
    implements = 'io.intino.magritte.plugin.lang.psi.TaraPsiElement, io.intino.tara.lang.model.Aspect, com.intellij.pom.Navigatable'
}

body ::= (NEW_LINE_INDENT NEWLINE? | INLINE) (nodeConstituents NEWLINE+)+ DEDENT {
	pin = 1
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.BodyMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Body'
}

private nodeConstituents ::= varInit | variable | node | nodeReference

nodeReference ::= HAS ruleContainer* identifierReference tags? {
	pin = 1
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.NodeReferenceMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.TaraPsiElement, io.intino.tara.lang.model.Node, com.intellij.pom.Navigatable'
}

variable ::= doc? VAR variableType sizeRange? ruleContainer? identifier (EQUALS value)? flags? bodyValue? {
	pin = 2
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.VariableMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.TaraPsiElement, io.intino.tara.lang.model.Variable, io.intino.tara.plugin.lang.psi.Valued, com.intellij.openapi.util.Iconable, com.intellij.pom.Navigatable, com.intellij.psi.PsiNamedElement'
}
bodyValue ::= NEW_LINE_INDENT (stringValue | expression) NEWLINE? DEDENT {
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.ValueMixin'
    implements = 'io.intino.magritte.plugin.lang.psi.TaraPsiElement, io.intino.tara.plugin.lang.psi.Value'
}

variableType::= FUNCTION_TYPE
                | INT_TYPE
                | LONG_TYPE
                | DOUBLE_TYPE
                | BOOLEAN_TYPE
                | STRING_TYPE
                | DATE_TYPE
                | INSTANT_TYPE
                | TIME_TYPE
                | WORD_TYPE
                | OBJECT_TYPE
                | RESOURCE_TYPE
                | identifierReference

sizeRange ::= LEFT_SQUARE size? RIGHT_SQUARE
size ::= NATURAL_VALUE_KEY | listRange

listRange ::= (NATURAL_VALUE_KEY | STAR) DOT DOT (NATURAL_VALUE_KEY | STAR)

ruleContainer ::= COLON rule
{pin=1}

rule ::= (LEFT_CURLY (identifier+ | ((range | stringValue) metric?) | metric) RIGHT_CURLY) | (identifierReference CLASS_TYPE?){
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.RuleMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Rule, io.intino.tara.plugin.lang.psi.TaraPsiElement'
}

range ::= (doubleValue | integerValue | STAR) (DOT DOT (doubleValue | integerValue | STAR))?

value ::= stringValue+
        | booleanValue+
        | tupleValue+
        | integerValue+ metric?
        | doubleValue+  metric?
        | expression+
        | emptyField
        | identifierReference+
        | methodReference+
{
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.ValueMixin'
    implements = 'io.intino.magritte.plugin.lang.psi.Value, io.intino.tara.plugin.lang.psi.TaraPsiElement'
}

methodReference ::= AT identifierReference
{pin = 1}

stringValue ::= (QUOTE_BEGIN CHARACTER* QUOTE_END) {
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.StringMixin'
    implements = 'io.intino.magritte.plugin.lang.psi.StringValue, io.intino.tara.plugin.lang.psi.TaraPsiElement'
}

expression  ::= (EXPRESSION_BEGIN CHARACTER* EXPRESSION_END) {
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.ExpressionMixin'
    implements = 'io.intino.magritte.plugin.lang.psi.Expression, io.intino.tara.plugin.lang.psi.TaraPsiElement'
}

booleanValue    ::= BOOLEAN_VALUE_KEY
tupleValue      ::= stringValue COLON doubleValue
integerValue    ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY
doubleValue     ::= NATURAL_VALUE_KEY | NEGATIVE_VALUE_KEY | DOUBLE_VALUE_KEY
metric          ::= identifier | METRIC_VALUE_KEY

constraint::= WITH identifierReference (COMMA identifierReference)*
{pin = 1}

tags ::= flags? annotations? {
	pin = 1
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.TagsMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Tags'
}

flags::= IS flag+ {
	pin = 1
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.FlagsMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Flags'
}

flag ::= ABSTRACT | TERMINAL | PRIVATE | REACTIVE | COMPONENT
	| FEATURE | ENCLOSED | FINAL | CONCEPT | VOLATILE | REQUIRED | DECORABLE | DIVINE {
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.FlagMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Flag'
}

annotations ::= INTO annotation+ {
	pin = 1
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.AnnotationsMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Annotations'
}

annotation ::= COMPONENT | FEATURE | ENCLOSED {
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.AnnotationMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Annotation'
}

varInit ::= identifier ((EQUALS value) | bodyValue) {
    pin = 2
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.VarInitMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Valued, io.intino.tara.lang.model.Parameter'
}

emptyField ::= EMPTY_REF

headerReference ::= hierarchy* identifier {
	pin = 2
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.IdentifierReferenceMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.HeaderReference'
}

identifierReference ::= hierarchy* identifier {
	pin = 2
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.IdentifierReferenceMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.IdentifierReference'
}

private hierarchy ::= identifier (DOT | PLUS)
{pin = 2}

identifier ::=  IDENTIFIER_KEY {
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.IdentifierMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.Identifier'
}

metaIdentifier ::= METAIDENTIFIER_KEY | IDENTIFIER_KEY {
	mixin = 'io.intino.magritte.plugin.lang.psi.impl.MetaIdentifierMixin'
	implements = 'io.intino.magritte.plugin.lang.psi.MetaIdentifier'
}
