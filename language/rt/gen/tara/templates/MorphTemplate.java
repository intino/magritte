package tara.templates;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class MorphTemplate extends Template {

	protected MorphTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new MorphTemplate(Locale.ENGLISH, CRLF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "Morph"))).add(literal("package ")).add(mark("package", "lowercase")).add(literal(";\n\nimport tara.magritte.Morph;\nimport tara.magritte.Node;\n\nimport java.time.LocalDateTime;\nimport java.util.*;\n\n")).add(mark("node")),
			rule().add((condition("type", "Variable")), (condition("type", "Word")), (condition("type", "Multiple")), (condition("trigger", "declaration"))).add(literal("protected ")).add(mark("type", "firstUpperCase")).add(literal("[] ")).add(mark("name")).add(literal("List;\n\npublic enum ")).add(mark("name", "firstUpperCase")).add(literal(" {\n    ")).add(mark("words").multiple(", ")).add(literal(";\n}")),
			rule().add((condition("type", "Variable")), (condition("type", "Word")), (condition("trigger", "declaration"))).add(literal("protected ")).add(mark("type", "firstUpperCase")).add(literal(" ")).add(mark("name")).add(literal(";\n\npublic enum ")).add(mark("name", "firstUpperCase")).add(literal(" {\n    ")).add(mark("words").multiple(", ")).add(literal(";\n}")),
			rule().add((condition("type", "Variable")), (condition("type", "multiple")), (condition("trigger", "declaration"))).add(literal("protected java.util.List<")).add(mark("type", "variableTypeList", "reference")).add(literal("> ")).add(mark("name", "firstLowerCase")).add(literal("List = new java.util.ArrayList<>();")),
			rule().add((condition("type", "Variable")), (condition("type", "Native")), (condition("trigger", "declaration"))).add(literal("protected ")).add(mark("generatedLanguage")).add(literal(".natives.")).add(mark("contract", "javaValidName")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal(";")),
			rule().add((condition("type", "Variable")), (condition("trigger", "declaration"))).add(literal("protected ")).add(mark("type", "variableType", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal(";")),
			rule().add((condition("type", "Node")), (condition("type", "single")), (condition("trigger", "declaration"))).add(literal("protected ")).add(mark("name", "javaValidName")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal(";")),
			rule().add((condition("trigger", "declaration"))).add(literal("protected java.util.List<")).add(mark("name", "reference")).add(literal("> ")).add(mark("name", "firstLowerCase")).add(literal("List;")),
			rule().add((condition("type", "Variable")), (condition("Slot", "value")), (condition("type", "multiple")), (condition("trigger", "init"))).add(literal("set(\"")).add(mark("name", "firstLowerCase")).add(literal("\", java.util.Arrays.asList(")).add(mark("value").multiple(", ")).add(literal("));")),
			rule().add((condition("type", "Variable")), (condition("type", "native")), (condition("trigger", "init"))).add(literal("set(\"")).add(mark("name", "firstLowerCase")).add(literal("\", new ")).add(mark("contract", "javaValidName")).add(literal("_")).add(mark("uid")).add(literal("());")),
			rule().add((condition("type", "Variable")), (condition("Slot", "value")), (condition("trigger", "init"))).add(literal("set(\"")).add(mark("name", "firstLowerCase")).add(literal("\", ")).add(mark("value")).add(literal(");")),
			rule().add((condition("type", "Variable")), (condition("trigger", "init"))),
			rule().add((condition("type", "Variable")), (condition("type", "multiple")), (condition("trigger", "constructor"))).add(literal("set(\"")).add(mark("name", "firstLowerCase")).add(literal("\", ((")).add(mark("container", "javaValidName")).add(literal(") morph).")).add(mark("name", "firstLowerCase")).add(literal("List);")),
			rule().add((condition("type", "Variable")), (condition("trigger", "constructor"))).add(literal("set(\"")).add(mark("name", "firstLowerCase")).add(literal("\", ((")).add(mark("container", "javaValidName")).add(literal(") morph).")).add(mark("name", "firstLowerCase")).add(literal(");")),
			rule().add((condition("type", "Variable")), (condition("type", "multiple")), (condition("type", "Word")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("type")).add(literal("[] ")).add(mark("name")).add(literal("List() {\n    return ")).add(mark("name")).add(literal("List;\n}\n\npublic void ")).add(mark("name")).add(literal("(")).add(mark("type")).add(literal("... values) {\n    ")).add(mark("name")).add(literal("List = values;\n}")),
			rule().add((condition("type", "Variable")), (condition("type", "Word")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("type")).add(literal(" ")).add(mark("name")).add(literal("() {\n    return ")).add(mark("name")).add(literal(";\n}\n\npublic void ")).add(mark("name")).add(literal("(")).add(mark("type")).add(literal(" values) {\n    ")).add(mark("name")).add(literal(" = values;\n}")),
			rule().add((condition("type", "Variable")), (condition("type", "multiple")), (condition("trigger", "getter"))).add(literal("public java.util.List<")).add(mark("type", "variableTypeList")).add(literal("> ")).add(mark("name", "firstLowerCase")).add(literal("List() {\n    return ")).add(mark("name", "firstLowerCase")).add(literal("List;\n}\n\npublic ")).add(mark("type", "variableTypeList")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("(int index) {\n    return ")).add(mark("name", "firstLowerCase")).add(literal("List.get(index);\n}")),
			rule().add((condition("type", "variable")), (condition("type", "native")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("generatedLanguage")).add(literal(".natives.")).add(mark("contract", "javaValidName")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return ")).add(mark("name", "firstLowerCase")).add(literal(";\n}")),
			rule().add((condition("type", "Variable")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("type", "variableType")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return ")).add(mark("name", "firtLowercase")).add(literal(";\n}")),
			rule().add((condition("type", "Node")), (condition("type", "single")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("name", "javaValidName")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return ")).add(mark("name", "firstLowercase")).add(literal(";\n}")),
			rule().add((condition("type", "Node")), (condition("trigger", "getter"))).add(literal("public java.util.List<")).add(mark("name", "javaValidName")).add(literal("> ")).add(mark("name", "firstLowerCase")).add(literal("List() {\n    return ")).add(mark("name", "firstLowerCase")).add(literal("List;\n}\n\npublic ")).add(mark("name", "javaValidName")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("(int index) {\n    return ")).add(mark("name", "firstLowerCase")).add(literal("List.get(index);\n}")),
			rule().add((condition("type", "single")), (condition("trigger", "add"))).add(literal("if (component.is(\"")).add(mark("name")).add(literal("\")) ")).add(mark("name", "firstLowercase")).add(literal(" = component.morph(")).add(mark("name", "javaValidName")).add(literal(".class);")),
			rule().add((condition("trigger", "add"))).add(literal("if (component.is(\"")).add(mark("name")).add(literal("\")) ")).add(mark("name", "firstLowercase")).add(literal("List.add(component.morph(")).add(mark("name", "javaValidName")).add(literal(".class));")),
			rule().add((condition("type", "variable")), (condition("type", "word")), (condition("type", "multiple")), (condition("trigger", "set"))).add(literal("if(name.equalsIgnoreCase(\"")).add(mark("name", "firstLowercase")).add(literal("\")) ")).add(mark("name", "firstLowercase")).add(literal("List = (")).add(mark("type")).add(literal("[]) object;")),
			rule().add((condition("type", "variable")), (condition("type", "word")), (condition("trigger", "set"))).add(literal("if(name.equalsIgnoreCase(\"")).add(mark("name", "firstLowercase")).add(literal("\")) ")).add(mark("name", "firstLowercase")).add(literal(" = (")).add(mark("type")).add(literal(") object;")),
			rule().add((condition("type", "variable")), (condition("type", "native")), (condition("trigger", "set"))).add(literal("if(name.equalsIgnoreCase(\"")).add(mark("name", "firstLowercase")).add(literal("\")) ")).add(mark("name", "firstLowercase")).add(literal(" = (")).add(mark("generatedLanguage")).add(literal(".natives.")).add(mark("contract", "javaValidName")).add(literal(") object;")),
			rule().add((condition("type", "variable")), (condition("type", "multiple")), (condition("trigger", "set"))).add(literal("if(name.equalsIgnoreCase(\"")).add(mark("name", "firstLowercase")).add(literal("\")) ")).add(mark("name", "firstLowercase")).add(literal("List = (java.util.List<")).add(mark("type", "variableTypeList")).add(literal(">) object;")),
			rule().add((condition("type", "variable")), (condition("trigger", "set"))).add(literal("if(name.equalsIgnoreCase(\"")).add(mark("name", "firstLowercase")).add(literal("\")) ")).add(mark("name", "firstLowercase")).add(literal(" = (")).add(mark("type", "variableType")).add(literal(") object;")),
			rule().add((condition("value", "date")), (condition("trigger", "variableType"))).add(literal("LocalDateTime")),
			rule().add((condition("value", "integer")), (condition("trigger", "variableType"))).add(literal("int")),
			rule().add((condition("value", "integer")), (condition("trigger", "variableTypeList"))).add(literal("Integer")),
			rule().add((condition("value", "natural")), (condition("trigger", "variableTypeList"))).add(literal("Integer")),
			rule().add((condition("value", "double")), (condition("trigger", "variableTypeList"))).add(literal("Double")),
			rule().add((condition("value", "measure")), (condition("trigger", "variableType"))).add(literal("double")),
			rule().add((condition("value", "natural")), (condition("trigger", "variableType"))).add(literal("int")),
			rule().add((condition("value", "string")), (condition("trigger", "variableType"))).add(literal("String")),
			rule().add((condition("type", "Variable")), (condition("type", "multiple")), (condition("trigger", "list"))).add(literal("map.put(\"")).add(mark("name", "firstLowerCase")).add(literal("List\",")).add(mark("name", "firstLowerCase")).add(literal("List);")),
			rule().add((condition("type", "Variable")), (condition("trigger", "list"))).add(literal("map.put(\"")).add(mark("name", "firstLowerCase")).add(literal("\",")).add(mark("name", "firstLowerCase")).add(literal(");")),
			rule().add((condition("type", "Node")), (condition("type", "single")), (condition("trigger", "list"))).add(literal("if(")).add(mark("name", "firstLowerCase")).add(literal(" != null) nodes.add(")).add(mark("name", "firstLowerCase")).add(literal(".node());")),
			rule().add((condition("type", "Node")), (condition("trigger", "list"))).add(mark("name", "firstLowerCase")).add(literal("List.stream().forEach(c -> nodes.add(c.node()));")),
			rule().add((condition("type", "native")), (condition("Slot", "body")), (condition("trigger", "native"))).add(literal("public static class ")).add(mark("contract", "javaValidName")).add(literal("_")).add(mark("uid")).add(literal(" implements ")).add(expression().add(mark("generatedLanguage", "lowercase")).add(literal(".natives."))).add(mark("contract", "firstUpperCase")).add(literal(", tara.magritte.NativeCode  {\n\t")).add(mark("nativeContainer")).add(literal(" $;\n\t@Override\n\t")).add(mark("signature")).add(literal(" {\n\t\t")).add(mark("body")).add(literal("\n\t}\n\n    @Override\n    public void set(Morph context) {\n        $ = (")).add(mark("nativeContainer")).add(literal(") context;\n    }\n\n    @Override\n    public Class<? extends Morph> $Class() {\n        return ")).add(mark("nativeContainer")).add(literal(".class;\n    }\n}")),
			rule().add((condition("trigger", "native"))),
			rule().add((condition("type", "nodeimpl")), (condition("trigger", "node"))).add(literal("public")).add(expression().add(literal(" ")).add(mark("inner"))).add(expression().add(literal(" ")).add(mark("abstract"))).add(literal(" class ")).add(mark("name", "javaValidName")).add(literal(" ")).add(mark("parent")).add(literal(" {\n\t")).add(mark("variable", "declaration").multiple("\n")).add(literal("\n\t")).add(mark("node", "declaration").multiple("\n")).add(literal("\n\tpublic ")).add(mark("name", "javaValidName")).add(literal("(Node node) {\n        super(node);\n        ")).add(mark("variable", "init").multiple("\n")).add(literal("|:\n    }\n    public ")).add(mark("name", "javaValidName")).add(literal("(Morph morph, Node node) {\n        super(morph, node);\n        ")).add(mark("variable", "constructor").multiple("\n")).add(literal("|:\n    }\n\t")).add(mark("variable", "getter").multiple("\n\n")).add(literal("|:\n    ")).add(mark("node", "getter").multiple("\n\n")).add(literal("|:\n    ")).add(expression().add(literal("@Override")).add(literal("\n")).add(literal("    protected void add(Node component) {")).add(literal("\n")).add(literal("        ")).add(mark("node", "add").multiple("\n else ")).add(literal("\n")).add(literal("    }"))).add(literal("\n    ")).add(expression().add(literal("@Override")).add(literal("\n")).add(literal("    protected void set(String name, Object object) {")).add(literal("\n")).add(literal("        ")).add(mark("variable", "set").multiple("\n else ")).add(literal("\n")).add(literal("    }"))).add(literal("\n    ")).add(expression().add(literal("@Override")).add(literal("\n")).add(literal("    public java.util.List<Node> _components() {")).add(literal("\n")).add(literal("        java.util.Set<Node> nodes = new java.util.HashSet<>();")).add(literal("\n")).add(literal("        ")).add(mark("node", "list").multiple("\n")).add(literal("\n")).add(literal("        return new java.util.ArrayList(nodes);")).add(literal("\n")).add(literal("    }"))).add(literal("\n    ")).add(expression().add(literal("@Override")).add(literal("\n")).add(literal("    public java.util.Map<String, Object> _variables() {")).add(literal("\n")).add(literal("        java.util.Map<String, Object> map = new java.util.LinkedHashMap<>(")).add(mark("parent", "var")).add(literal(");")).add(literal("\n")).add(literal("        ")).add(mark("variable", "list").multiple("\n")).add(literal("|:")).add(literal("\n")).add(literal("        return map;")).add(literal("\n")).add(literal("    }"))).add(literal("\n\t")).add(mark("variable", "native").multiple("\n")).add(literal("|:\n\t")).add(mark("parameter", "native").multiple("\n")).add(literal("|:\n\t")).add(mark("node").multiple("\n")).add(literal("|:\n}")),
			rule().add((condition("value", "Morph")), (condition("trigger", "var"))),
			rule().add((condition("trigger", "var"))).add(literal("super._variables()")),
			rule().add((condition("value", "true")), (condition("trigger", "inner"))).add(literal("static")),
			rule().add((condition("value", "false")), (condition("trigger", "inner"))),
			rule().add((condition("value", "true")), (condition("trigger", "abstract"))).add(literal("abstract")),
			rule().add((condition("value", "false")), (condition("trigger", "abstract"))),
			rule().add((condition("trigger", "parent")), (condition("slot", "value"))).add(literal("extends ")).add(mark("value", "reference")),
			rule().add((condition("trigger", "node")))
		);
		return this;
	}
}