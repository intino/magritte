def type(Morph)
	package $package+lowercase;

	import tara.magritte.Morph;
	import tara.magritte.Node;

	import java.time.LocalDateTime;
    import java.util.*;

	$node
end
----- DECLARATION -----
def type(Variable) type(Word) type(Multiple) trigger(declaration)
    protected $type+firstUpperCase$[$] $name~List;

	public enum $name+firstUpperCase {
        $words...[, ];
    }
end


def type(Variable) type(Word) trigger(declaration)
    protected $type+firstUpperCase $name;

    public enum $name+firstUpperCase {
        $words...[, ];
    }
end

def type(Variable) type(multiple) trigger(declaration)
    protected java.util.List<$type+variableTypeList+reference> $name+firstLowerCase~List = new java.util.ArrayList<>();
end

def type(Variable) type(Native) trigger(declaration)
    protected $generatedLanguage.natives.$contract+javaValidName $name+firstLowerCase;
end

def type(Variable) trigger(declaration)
    protected $type+variableType+reference $name+firstLowerCase;
end

def type(Node) type(single) trigger(declaration)
    protected $name+javaValidName $name+firstLowerCase;
end

def trigger(declaration)
    protected java.util.List<$name+reference> $name+firstLowerCase~List;
end
----- INIT -----
def type(Variable) Slot(value) type(multiple) trigger(init)
    set("$name+firstLowerCase", java.util.Arrays.asList($value...[, ]));
end

def type(Variable) type(native) trigger(init)
    set("$name+firstLowerCase", new $contract+javaValidName_$uid());
end

def type(Variable) Slot(value) trigger(init)
    set("$name+firstLowerCase", $value);
end

def type(Variable) trigger(init)
end
----- CONSTRUCTOR -----
def type(Variable) type(multiple) trigger(constructor)
    set("$name+firstLowerCase", (($container+javaValidName) morph).$name+firstLowerCase~List);
end

def type(Variable) trigger(constructor)
    set("$name+firstLowerCase", (($container+javaValidName) morph).$name+firstLowerCase);
end

----- GETTERS -----

def type(Variable) type(multiple) type(Word) trigger(getter)
    public $type$[] $name~List() {
        return $name~List;
    }

	public void $name($type~... values) {
        $name~List = values;
    }
end

def type(Variable) type(Word) trigger(getter)
    public $type $name() {
        return $name;
    }

    public void $name($type values) {
        $name = values;
    }
end

def type(Variable) type(multiple) trigger(getter)
    public java.util.List<$type+variableTypeList> $name+firstLowerCase~List() {
        return $name+firstLowerCase~List;
    }

    public $type+variableTypeList $name+firstLowerCase(int index) {
        return $name+firstLowerCase~List.get(index);
    }
end

def type(variable) type(native) trigger(getter)
    public $generatedLanguage.natives.$contract+javaValidName $name+firstLowerCase() {
        return $name+firstLowerCase;
    }
end

def type(Variable) trigger(getter)
    public $type+variableType $name+firstLowerCase() {
        return $name+firtLowercase;
    }
end

def type(Node) type(single) trigger(getter)
    public $name+javaValidName $name+firstLowerCase() {
        return $name+firstLowercase;
    }
end

def type(Node) trigger(getter)
    public java.util.List<$name+javaValidName> $name+firstLowerCase~List() {
        return $name+firstLowerCase~List;
    }

    public $name+javaValidName $name+firstLowerCase(int index) {
        return $name+firstLowerCase~List.get(index);
    }
end

def type(single) trigger(add)
    if (component.is("$name")) $name+firstLowercase = component.morph($name+javaValidName.class);
end

def trigger(add)
    if (component.is("$name")) $name+firstLowercase~List.add(component.morph($name+javaValidName.class));
end
----- SET -----
def type(variable) type(word) type(multiple) trigger(set)
    if(name.equalsIgnoreCase("$name+firstLowercase")) $name+firstLowercase~List = ($type$[]) object;
end

def type(variable) type(word) trigger(set)
    if(name.equalsIgnoreCase("$name+firstLowercase")) $name+firstLowercase = ($type) object;
end

def type(variable) type(native) trigger(set)
    if(name.equalsIgnoreCase("$name+firstLowercase")) $name+firstLowercase = ($generatedLanguage.natives.$contract+javaValidName) object;
end

def type(variable) type(multiple) trigger(set)
    if(name.equalsIgnoreCase("$name+firstLowercase")) $name+firstLowercase~List = (java.util.List<$type+variableTypeList>) object;
end

def type(variable) trigger(set)
    if(name.equalsIgnoreCase("$name+firstLowercase")) $name+firstLowercase = ($type+variableType) object;
end

def value(date) trigger(variableType)
	LocalDateTime
end

def value(integer) trigger(variableType)
	int
end

def value(integer) trigger(variableTypeList)
	Integer
end

def value(natural) trigger(variableTypeList)
	Integer
end

def value(double) trigger(variableTypeList)
	Double
end

def value(measure) trigger(variableType)
	double
end

def value(natural) trigger(variableType)
	int
end

def value(string) trigger(variableType)
	String
end

def type(Variable) type(multiple) trigger(list)
    map.put("$name+firstLowerCase~List",$name+firstLowerCase~List);
end

def type(Variable) trigger(list)
    map.put("$name+firstLowerCase",$name+firstLowerCase);
end

def type(Node) type(single) trigger(list)
    if($name+firstLowerCase != null) nodes.add($name+firstLowerCase.node());
end

def type(Node) trigger(list)
    $name+firstLowerCase~List.stream().forEach(c -> nodes.add(c.node()));
end

def type(native) Slot(body) trigger(native)
	public static class $contract+javaValidName_$uid implements [$generatedLanguage+lowercase.natives.]$contract+firstUpperCase, tara.magritte.NativeCode  {
		$nativeContainer $$;
		@Override
		$signature {
			$body
		}

        @Override
        public void set(Morph context) {
            $$ = ($nativeContainer) context;
        }

        @Override
        public Class<? extends Morph> $$Class() {
            return $nativeContainer.class;
        }
	}
end

def trigger(native)
end

--------------- NODE -------------------
def type(nodeimpl) trigger(node)
	public[ $inner][ $abstract] class $name+javaValidName $parent {
		$variable+declaration...[$NL]
		$node+declaration...[$NL]
		public $name+javaValidName(Node node) {
            super(node);
            $variable+init...[$NL]|:
        }
        public $name+javaValidName(Morph morph, Node node) {
            super(morph, node);
            $variable+constructor...[$NL]|:
        }
		$variable+getter...[$NL$NL]|:
        $node+getter...[$NL$NL]|:
        [@Override
        protected void add(Node component) {
            $node+add...[$NL else ]
        }]
        [@Override
        protected void set(String name, Object object) {
            $variable+set...[$NL else ]
        }]
        [@Override
        public java.util.List<Node> _components() {
            java.util.Set<Node> nodes = new java.util.HashSet<>();
            $node+list...[$NL]
            return new java.util.ArrayList(nodes);
        }]
        [@Override
        public java.util.Map<String, Object> _variables() {
            java.util.Map<String, Object> map = new java.util.LinkedHashMap<>($parent+var);
            $variable+list...[$NL]|:
            return map;
        }]
		$variable+native...[$NL]|:
		$parameter+native...[$NL]|:
		$node...[$NL]|:
	}
end

def value(Morph) trigger(var)

end
def trigger(var)
	super._variables()
end
def value(true) trigger(inner)
	static
end
def value(false) trigger(inner)
end

def value(true) trigger(abstract)
	abstract
end
def value(false) trigger(abstract)
end

def trigger(parent) slot(value)
	extends $value+reference
end

def trigger(node)
end
