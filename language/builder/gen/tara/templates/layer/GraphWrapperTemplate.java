package tara.templates.layer;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class GraphWrapperTemplate extends Template {

	protected GraphWrapperTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new GraphWrapperTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "graph"))).add(literal("package ")).add(mark("name", "LowerCase")).add(literal(";\n\nimport tara.magritte.Graph;\n\nimport java.util.List;\n\npublic class GraphWrapper extends tara.magritte.GraphWrapper {\n\n\tprotected Graph graph;\n\t")).add(mark("node", "declaration").multiple("\n")).add(literal("\n\n\tpublic GraphWrapper(Graph graph) {\n\t\tthis.graph = graph;\n\t\tthis.graph.i18n().register(\"")).add(mark("name")).add(literal("\");\n\t    update();\n\t}\n\n\tprotected void update() {\n\t\t")).add(mark("node", "update").multiple("\n")).add(literal("\n\t}\n\n\t@Override\n\tprotected void addNode(tara.magritte.Node node) {\n\t\t")).add(mark("node", "add").multiple("\n")).add(literal("\n\t}\n\n\t@Override\n\tprotected void removeNode(tara.magritte.Node node) {\n\t\t")).add(mark("node", "remove").multiple("\n")).add(literal("\n\t}\n\n\tpublic String message(String language, String key, Object... parameters) {\n\t\treturn graph.i18n().message(language, key, parameters);\n\t}\n\n\tpublic java.net.URL resourceAsMessage(String language, String key) {\n\t\treturn graph.loadResource(graph.i18n().message(language, key));\n\t}\n\n\tpublic java.util.Map<String,String> keysIn(String language) {\n\t\treturn graph.i18n().wordsIn(language);\n\t}\n\n\tpublic tara.magritte.Concept concept(String concept) {\n\t\treturn graph.concept(concept);\n\t}\n\n\tpublic tara.magritte.Concept concept(java.lang.Class<? extends tara.magritte.Layer> layerClass) {\n\t\treturn graph.concept(layerClass);\n\t}\n\n\tpublic List<tara.magritte.Concept> conceptList() {\n\t\treturn graph.conceptList();\n\t}\n\n\tpublic List<tara.magritte.Concept> conceptList(java.util.function.Predicate<tara.magritte.Concept> predicate) {\n\t\treturn graph.conceptList(predicate);\n\t}\n\n\tpublic tara.magritte.Node createRoot(tara.magritte.Concept concept, String namespace) {\n\t\treturn graph.createRoot(concept, namespace);\n\t}\n\n\tpublic <T extends tara.magritte.Layer> T createRoot(java.lang.Class<T> layerClass, String namespace) {\n\t\treturn graph.createRoot(layerClass, namespace);\n\t}\n\n\tpublic tara.magritte.Node createRoot(String concept, String namespace) {\n\t\treturn graph.createRoot(concept, namespace);\n\t}\n\n\tpublic <T extends tara.magritte.Layer> T createRoot(java.lang.Class<T> layerClass, String namespace, String id) {\n\t\treturn graph.createRoot(layerClass, namespace, id);\n\t}\n\n\tpublic tara.magritte.Node createRoot(String concept, String namespace, String id) {\n\t\treturn graph.createRoot(concept, namespace, id);\n\t}\n\n\tpublic tara.magritte.Node createRoot(tara.magritte.Concept concept, String namespace, String id) {\n\t\treturn graph.createRoot(concept, namespace, id);\n\t}\n\n\t")).add(mark("node", "getter").multiple("\n\n")).add(literal("\n\n\t")).add(mark("node", "filter").multiple("\n\n")).add(literal("\n\n\tpublic Create create() {\n\t\treturn new Create(\"Misc\", null);\n\t}\n\n\tpublic Create create(String namespace) {\n\t\treturn new Create(namespace, null);\n\t}\n\n\tpublic Create create(String namespace, String name) {\n\t\treturn new Create(namespace, name);\n\t}\n\n\tpublic class Create {\n\t\tprivate final String namespace;\n\t\tprivate final String name;\n\n\t\tpublic Create(String namespace, String name) {\n\t\t\tthis.namespace = namespace;\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t")).add(mark("node", "new").multiple("\n\n")).add(literal("\n\n\t}\n\n\n}")),
			rule().add((condition("type", "single")), not(condition("type", "instance")), (condition("trigger", "add"))).add(literal("if (node.is(\"")).add(mark("qn", "noPackage", "withDollar")).add(literal("\")) this.")).add(mark("name", "firstLowercase", "javaValidWord")).add(literal(" = node.as(")).add(mark("qn", "reference")).add(literal(".class);")),
			rule().add(not(condition("type", "instance")), (condition("trigger", "add"))).add(literal("if (node.is(\"")).add(mark("qn", "noPackage", "withDollar")).add(literal("\")) this.")).add(mark("name", "firstLowercase")).add(literal("List.add(node.as(")).add(mark("qn", "reference")).add(literal(".class));")),
			rule().add((condition("trigger", "add"))),
			rule().add((condition("type", "single")), not(condition("type", "instance")), (condition("trigger", "remove"))).add(literal("if (node.is(\"")).add(mark("qn", "noPackage", "withDollar")).add(literal("\")) this.")).add(mark("name", "firstLowercase", "javaValidWord")).add(literal(" = null;")),
			rule().add(not(condition("type", "instance")), (condition("trigger", "remove"))).add(literal("if (node.is(\"")).add(mark("qn", "noPackage", "withDollar")).add(literal("\")) this.")).add(mark("name", "firstLowercase")).add(literal("List.remove(node.as(")).add(mark("qn", "reference")).add(literal(".class));")),
			rule().add((condition("trigger", "remove"))),
			rule().add((condition("type", "node & instance")), (condition("trigger", "declaration"))).add(literal("private ")).add(mark("conceptLayer")).add(literal(" ")).add(mark("name", "firstLowerCase", "javaValidWord")).add(literal(";")),
			rule().add((condition("type", "node & single")), (condition("trigger", "declaration"))).add(literal("private ")).add(mark("qn", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase", "javaValidWord")).add(literal(";")),
			rule().add((condition("type", "node")), (condition("trigger", "declaration"))).add(literal("private List<")).add(mark("qn", "reference")).add(literal("> ")).add(mark("name", "firstLowerCase")).add(literal("List;")),
			rule().add((condition("type", "node & instance")), (condition("trigger", "update"))).add(mark("name", "firstLowerCase")).add(literal(" = this.graph.rootList(r -> r.name().equals(\"")).add(mark("name")).add(literal("\")).get(0).as(")).add(mark("conceptLayer")).add(literal(".class);")),
			rule().add((condition("type", "node & single")), (condition("trigger", "update"))).add(mark("name", "firstLowerCase")).add(literal(" = this.graph.rootList(")).add(mark("qn", "reference")).add(literal(".class).stream().findFirst().orElse(null);")),
			rule().add((condition("type", "node")), (condition("trigger", "update"))).add(mark("name", "firstLowerCase")).add(literal("List = this.graph.rootList(")).add(mark("qn", "reference")).add(literal(".class);")),
			rule().add((condition("type", "node & instance")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("conceptLayer")).add(literal(" ")).add(mark("name", "firstLowerCase", "javaValidWord")).add(literal("() {\n    return ")).add(mark("name", "firstLowerCase", "javaValidWord")).add(literal(";\n}")),
			rule().add((condition("type", "node & single")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("qn", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase", "javaValidWord")).add(literal("() {\n    return ")).add(mark("name", "firstLowerCase", "javaValidWord")).add(literal(";\n}")),
			rule().add((condition("type", "node")), (condition("trigger", "getter"))).add(literal("public List<")).add(mark("qn", "reference")).add(literal("> ")).add(mark("name", "firstLowerCase")).add(literal("List() {\n    return ")).add(mark("name", "firstLowerCase")).add(literal("List;\n}")),
			rule().add((condition("type", "node")), not(condition("type", "single | instance")), (condition("trigger", "filter"))).add(literal("public List<")).add(mark("qn", "reference")).add(literal("> ")).add(mark("name", "firstLowerCase")).add(literal("List(java.util.function.Predicate<")).add(mark("qn", "reference")).add(literal("> predicate) {\n    return ")).add(mark("name", "firstLowerCase")).add(literal("List.stream().filter(predicate).collect(java.util.stream.Collectors.toList());\n}\n\npublic ")).add(mark("qn", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase", "javaValidWord")).add(literal("(int index) {\n\treturn ")).add(mark("name", "firstLowerCase")).add(literal("List.get(index);\n}")),
			rule().add((condition("type", "node & concept")), not(condition("type", "final | feature | component | instance")), (condition("trigger", "new"))).add(literal("public ")).add(mark("qn", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase", "javaValidWord")).add(literal("(")).add(expression().add(mark("variable", "parameters").multiple(", "))).add(literal(") {\n\t")).add(mark("qn", "reference")).add(literal(" newElement = GraphWrapper.this.graph.createRoot(")).add(mark("qn", "reference")).add(literal(".class, namespace, name).as(")).add(mark("qn", "reference")).add(literal(".class);\n\t")).add(mark("variable", "assign").multiple("\n")).add(literal("\n\treturn newElement;\n}"))
		);
		return this;
	}
}