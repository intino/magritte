def type(Model)
	package tara.dsl;

	import tara.language.model.Tag;

	import java.util.Locale;
	import static tara.language.semantics.constraints.RuleFactory.*;

	public class $name extends Tara {
		public $name() {
			$node...[$NL]
		}

		@Override
		public String languageName() {
			return "$name";
		}

		@Override
	    public Locale locale() {
	        return $locale;
	    }

	    @Override
	    public boolean isTerminalLanguage() {
	        return $terminal;
	    }
	}

end

def type(node) trigger(node)
	in("$name").def(context([$nodeType])[.$allows][.$requires][.$assumptions][.$doc]);
end

def type(nodeType) trigger(nodeType)
	$type+quoted...[, ]
end

def type(allows) trigger(allows)
	allow([$allow...[, ]])
end

def type(allow) type(multiple) trigger(allow)
	multiple($type+quoted[, $tags...[, ]])
end

def type(allow) type(single) trigger(allow)
	single($type+quoted[, $tags...[, ]])
end


def type(allow) type(parameter) type(reference) trigger(allow)
	parameter("$name", $multiple, ["$default"?null], $position, [$rule|null][, $annotations+quoted...[, ]])
end

def type(allow) type(parameter) trigger(allow)
	parameter("$name", "$type", $multiple, ["$default"?null], $position, [$rule|null][, $annotations+quoted...[, ]])
end

def type(allow) type(facet) trigger(allow)
	facet("$value"[, $terminal][, $with+quoted...[, ]])[.require($require...[, ])][.allow($allow...[, ])]
end

def trigger(allow)
	$value()
end

def type(requires) trigger(requires)
	require([$require...[, ]])
end

def type(require) type(oneOf) trigger(require)
	oneOf([$require...[, ]])
end

def type(require) type(redefine) trigger(require)
	redefine($name+quoted, $supertype+quoted)
end

def type(require) type(multiple) trigger(require)
	_multiple($type+quoted[, $tags+quoted...[, ]])
end

def type(require) type(single) trigger(require)
	_single($type+quoted[, $tags+quoted...[, ]])
end

def trigger(tags)
	Tag.$value
end

def type(require) !type(parameter) type(none) trigger(require)
	_noneIncludes()
end

def type(require) type(parameter) type(none) trigger(require)
	_noneParameter()
end

def type(require) type(parameter) type(reference) trigger(require)
	_parameter("$name", new String$[]{$types+quoted...[, ]}, $multiple, ["$default"?null], $position, [$rule|null][, $annotations+quoted...[, ]])
end

def type(require) type(parameter) trigger(require)
	_parameter("$name", "$type", $multiple, ["$default"?null], $position, [$rule|null][, $annotations+quoted...[, ]])
end

def type(rule & native) trigger(rule)
	new tara.lang.model.NativeRule($interface, $signature, $language)
end

def type(rule & word) trigger(rule)
	new tara.lang.model.WordRule($allowedReferences...[, ])
end

def type(rule & reference) trigger(rule)
	new tara.lang.model.ReferenceRule($allowedReferences...[, ])
end

def type(rule & custom) trigger(rule)
	new $qn($parameters)
end

def type(rule) type(double) trigger(rule)
	new tara.lang.model.DoubleRule($min, $max, "$metric")
end

def type(rule) type(integer) trigger(rule)
	new tara.lang.model.IntegerRule($min, $max, "$metric")
end

def type(rule & date) trigger(rule)
	new tara.lang.model.DateRule($parameters)
end

def type(rule & file) trigger(rule)
	new tara.lang.model.DateRule($extensions...[, ])
end

def type(rule & string) trigger(rule)
	new tara.lang.model.DateRule($regex)
end

def trigger(require)
	_$value()
end

def type(assumptions) trigger(assumptions)
	assume($assumption...[, ])
end

def type(doc) trigger(doc)
	doc($file+quoted, $line, $doc+quoted)
end

def trigger(assumption)
	is$value+toCamelCase()
end

def trigger(quoted)
	"$value"
end

def trigger(locale) value(es)
	new Locale("es", "Spain", "es_ES")
end

def trigger(locale) value(en)
	Locale.ENGLISH
end