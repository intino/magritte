def type(Layer)
	package $package+lowercase;

	import $generatedLanguage+lowercase.*;

	import java.util.*;

	$node
end
----- DECLARATION -----
def type(Variable) type(Word) type(multiple) type(owner) !type(outDefined) !type(inherited) trigger(declaration)
	protected List<$type+firstUpperCase> $name = new java.util.ArrayList<>();

	public enum $name+firstUpperCase {
		$words...[, ];
	}
end

def type(Variable) type(Word) type(multiple) type(owner) type(OutDefined) !type(inherited) trigger(declaration)
	protected List<$generatedLanguage+LowerCase.words.$contract+firstUpperCase> $name = new java.util.ArrayList<>();
end

def type(Variable) type(Word) type(owner) type(outDefined) !type(inherited) trigger(declaration)
	protected $generatedLanguage+LowerCase.words.$contract+firstUpperCase $name;
end

def type(Variable) type(Word) type(owner) !type(OutDefined) !type(inherited) trigger(declaration)
	protected $type+firstUpperCase $name;

	public enum $name+firstUpperCase {
		$words...[, ];
	}
end

def type(Variable) type(owner) type(fromDefinition) type(multiple) !type(inherited) !type(overriden) trigger(declaration)
	protected java.util.List<tara.magritte.Definition> $name+firstLowerCase = new java.util.ArrayList<>();
end

def type(Variable) type(owner) type(fromDefinition) !type(multiple) !type(inherited) !type(overriden) trigger(declaration)
	protected tara.magritte.Definition $name+firstLowerCase;
end

----- DECLARATION.REFERENCE -----

def type(Variable) type(owner) !type(fromDefinition) type(reference) type(multiple) !type(inherited) !type(overriden) trigger(declaration)
	protected java.util.List<tara.magritte.Reference> $name+firstLowerCase = new java.util.ArrayList<>();
end

def type(Variable) type(owner) !type(fromDefinition) type(multiple) !type(inherited) !type(overriden) trigger(declaration)
	protected java.util.List<$type+variableTypeList+reference> $name+firstLowerCase = new java.util.ArrayList<>();
end
def type(Variable) type(owner) !type(fromDefinition) type(reference) !type(inherited) !type(overriden) trigger(declaration)
	protected tara.magritte.Reference $name+firstLowerCase;
end
---------------------------------

def type(Variable) type(Native) type(owner) !type(inherited) !type(overriden)  trigger(declaration)
	protected $generatedLanguage+LowerCase.natives.$contract+javaValidName $name+firstLowerCase;
end

def type(Variable) !type(fromDefinition) type(multiple) type(owner) !type(inherited) !type(overriden) trigger(declaration)
	protected java.util.List<$type+variableTypeList+reference> $name+firstLowerCase = new java.util.ArrayList<>();
end

def type(Variable) !type(fromDefinition) !type(multiple) type(owner) !type(inherited) !type(overriden) trigger(declaration)
	protected $type+reference+variableType $name+firstLowerCase;
end

def type(Node) type(owner) !type(inherited) !type(overriden) type(single) trigger(declaration)
	protected $qn+reference $name+firstLowerCase;
end

def type(Node) type(owner) !type(inherited) !type(overriden) trigger(declaration)
	protected java.util.List<$qn+reference> $name+firstLowerCase~List = new java.util.ArrayList<>();
end

def type(facetTarget) trigger(declaration)
	protected final $qn+reference _$name+firstLowerCase;
end

def type(constraint) trigger(declaration)
	protected final $qn+reference _$name+firstLowerCase;
end

----- CONSTRUCTOR -----
def type(facetTarget) trigger(constructor)
	_$name+firstLowercase = _declaration.as($qn+reference.class);
end

def type(constraint) trigger(constructor)
	_$name+firstLowercase = _declaration.as($qn+reference.class);
end

def type(Variable) type(owner) !type(inherited) Slot(wordValues) type(word) type(multiple) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($wordValues+quoted...[, ])));
end

def type(Variable) type(owner) !type(inherited) Slot(values) type(word) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($wordValues+quoted...[, ])));
end

def type(Variable) type(owner) !type(inherited) type(native) Slot(body) trigger(constructor)
	_load("$name+firstLowerCase", $generatedLanguage.natives.$generatedLanguage+firstUpperCase~Natives.$name+javaValidName_$uid.class.getName());
end
def type(Variable) type(owner) type(date) !type(inherited) Slot(values) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($values+quoted...[, ])));
end

def type(Variable) type(owner) type(time) !type(inherited) Slot(values) !type(multiple) trigger(constructor)
	_load("$name+firstLowerCase",  new java.util.ArrayList<>(java.util.Arrays.asList($values+quoted...[, ])));
end

def type(Variable) type(owner) type(double) !type(inherited) Slot(values) type(multiple) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList(new Double$[$] {$values...[, ]})));
end

def type(Variable) type(owner) !type(inherited) Slot(values) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($values...[, ])));
end

----- EXTERNAL GETTERS -----

def type(Variable) !type(owner) type(target) slot(name) !type(inherited) type(Word) type(multiple) trigger(getter)
	public java.util.List<$qn+reference.$type> $name() {
		return _$containerName+firstLowerCase.$name();
	}
end

def type(Variable) !type(owner) type(target) slot(name) !type(inherited) type(Word) trigger(getter)
	public $qn+reference.$type+firstUpperCase $name() {
		return _$containerName+firstLowerCase.$name();
	}
end

def type(Variable) !type(owner) type(target) slot(name) !type(inherited) type(multiple) trigger(getter)
	public java.util.List<$type+variableTypeList> $name+firstLowerCase() {
		return _$containerName+firstLowerCase.$name+firstLowerCase();
	}

	public $type+variableTypeList $name+firstLowerCase(int index) {
		return _$containerName+firstLowerCase.$name+firstLowerCase().get(index);
	}
end

def type(Variable) !type(owner) type(target) slot(name) !type(inherited) type(native) trigger(getter)
	public $returnType $name+firstLowerCase($parameters) {
		$returnType+return _$containerName+firstLowerCase.$name+firstLowerCase($parameters+WithOutType);
	}
end

def type(Variable) !type(owner) type(target) slot(name) !type(inherited) trigger(getter)
	public $type+variableType $name+firstLowerCase() {
		return _$containerName+firstLowerCase.$name+firstLowerCase();
	}
end

def type(Node) type(target) type(single) slot(name) !type(owner) !type(inherited) trigger(getter)
	public $qn+reference $name+firstLowerCase() {
		return _$targetContainer+firstLowerCase.$name+firstLowercase();
	}
end

def type(Node) type(target) !type(owner) slot(name) !type(inherited) trigger(getter)
	public java.util.List<$qn+reference> $name+firstLowerCase~List() {
		return _$targetContainer+firstLowerCase.$name+firstLowerCase~List();
	}

	public $qn+reference $name+firstLowerCase(int index) {
		return _$targetContainer+firstLowerCase.$name+firstLowerCase~List().get(index);
	}
end

----- OWN GETTERS -----

def type(Variable) !type(target) type(Word) !type(outDefined) !type(inherited) !type(overriden) type(multiple) trigger(getter)
	public java.util.List<$type> $name() {
		return $name;
	}
end

def type(Variable) type(Word) !type(outDefined) !type(inherited) trigger(getter)
	public $type $name() {
		return $name;
	}
end

def type(Variable) !type(target) type(Word) type(outDefined) !type(inherited) !type(overriden) type(multiple) trigger(getter)
	public java.util.List<$generatedLanguage.words.$contract+firstUpperCase> $name+firstLowerCase() {
		return $name;
	}
end

def type(Variable) type(Word) !type(outDefined) type(inherited) trigger(getter)
	public $generatedLanguage.words.$contract+firstUpperCase $name() {
		return $name;
	}
end

def type(variable) type(native) !type(inherited) !type(overriden) trigger(getter)
	public $returnType $name+firstLowerCase($parameters) {
		$returnType+return $name+firstLowerCase.$methodName($parameters+WithoutType);
	}
end
def !value(void) trigger(return)
	return
end

def value(void) trigger(return)
end
------------ REFERENCES -------------
def type(Variable) type(reference) type(fromDefinition) type(multiple) !type(inherited) !type(overriden) trigger(getter)
	public java.util.List<tara.magritte.Definition> $name+firstLowerCase() {
		return $name+firtLowercase;
	}
end

def type(Variable) type(reference) type(fromDefinition) !type(inherited) !type(overriden) trigger(getter)
	public tara.magritte.Definition $name+firstLowerCase() {
		return $name+firtLowercase;
	}
end

def type(Variable) type(reference) type(multiple) !type(inherited) !type(overriden) trigger(getter)
	public List<$type+variableType> $name+firstLowerCase() {
		return $name+firtLowercase.stream().map(r -> r.declaration().as($type+variableType.class)).collect(java.util.stream.Collectors.toList());
	}
end

def type(Variable) type(reference) !type(inherited) !type(overriden) trigger(getter)
	public $type+variableType $name+firstLowerCase() {
		return $name+firtLowercase.declaration().as($type+reference.class);
	}
end

------------
def type(Variable) type(multiple) type(owner) !type(inherited) !type(overriden) trigger(getter)
	public java.util.List<$type+variableTypeList> $name+firstLowerCase() {
		return $name+firstLowerCase;
	}

	public $type+variableTypeList $name+firstLowerCase(int index) {
		return $name+firstLowerCase.get(index);
	}
end

def type(Variable) type(owner) !type(inherited) !type(overriden) trigger(getter)
	public $type+variableType $name+firstLowerCase() {
		return $name+firstLowercase;
	}
end

def type(Node) type(owner) !type(inherited) type(single) trigger(getter)
	public $qn+reference $name+firstLowerCase() {
		return $name+firstLowercase;
	}
end

def type(Node) type(owner) !type(inherited) trigger(getter)
	public java.util.List<$qn+reference> $name+firstLowerCase~List() {
		return $name+firstLowerCase~List;
	}

	public $qn+reference $name+firstLowerCase(int index) {
		return $name+firstLowerCase~List.get(index);
	}
end

----- EXTERNAL SETTERS -----

def type(Variable) !type(multiple) !type(owner) !type(readOnly) type(Word) trigger(setter)
	public void $name($qn+reference.$type+firstUpperCase value) {
		this._$containerName+firstLowerCase.$name+firstLowerCase(value);
	}
end

def type(variable) type(native) !type(multiple) !type(owner) !type(readOnly)  trigger(setter)
	public void $name+firstLowerCase($generatedLanguage+LowerCase.natives.$contract+javaValidName value) {
		this._$containerName+firstLowerCase.$name+firstLowerCase(value);
	}
end

def type(Variable) !type(multiple) !type(owner) !type(readOnly) trigger(setter)
	public void $name+firstLowerCase($type+variableType value) {
		this._$containerName+firstLowerCase.$name+firstLowerCase(value);
	}
end

----- OWN SETTERS -----

def type(Variable) type(Word) type(outDefined) !type(target) !type(inherited) !type(overriden) !type(multiple) !type(readOnly) trigger(setter)
	public void $name+firstLowerCase($generatedLanguage+LowerCase.words.$contract+javaValidName value) {
		this.$name+firstLowerCase = value;
	}
end

def type(Variable) !type(target) !type(inherited) !type(overriden) !type(multiple) !type(readOnly) type(Word) trigger(setter)
	public void $name+firstLowerCase([$qn+reference.]$type+firstUpperCase value) {
		this.$name+firstLowerCase = value;
	}
end
---- SETTER.REFERENCE-----
def type(Variable) type(reference) !type(fromDefinition) !type(inherited) !type(overriden) !type(multiple) !type(readOnly) trigger(setter)
	public void $name+firstLowerCase($type+variableType value) {
		this.$name+firtLowercase = new tara.magritte.Reference(value._declaration().name(), _declaration.ownerWith(tara.magritte.Model.class));
	}
end
-------------------

def type(variable) !type(inherited) !type(fromDefinition) !type(overriden) !type(multiple) !type(readOnly) type(native) trigger(setter)
	public void $name+firstLowerCase($generatedLanguage+LowerCase.natives.$contract+javaValidName value) {
		this.$name+firstLowerCase = value;
	}
end

def type(Variable) !type(inherited) !type(fromDefinition) !type(overriden) !type(multiple) !type(readOnly) trigger(setter)
	public void $name+firstLowerCase($type+variableType value) {
		this.$name+firstLowerCase = value;
	}
end

----- ADD -----
def type(single)  type(owner) trigger(add)
	if (component.is("$qn+noPackage+withDollar")) $name+firstLowercase = component.as($name+javaValidName.class);
end

def type(owner) trigger(add)
	if (component.is("$qn+noPackage+withDollar")) $name+firstLowercase~List.add(component.as($name+javaValidName.class));
end
----- INIT LOAD-----
def type(variable) type(multiple) type(outDefined) !type(inherited) !type(overriden) type(owner) type(word)  trigger(init)
	if(name.equalsIgnoreCase("$name")) $name+firstLowercase = ((java.util.List<java.lang.String>) object).stream().
		map(o -> $generatedLanguage+LowerCase.words.$contract+firstUpperCase.valueOf(o.toString())).
		collect(java.util.stream.Collectors.toList());
end

def type(variable) type(multiple) !type(inherited) !type(overriden) type(owner) type(word) trigger(init)
	if(name.equalsIgnoreCase("$name")) $name+firstLowercase = ((java.util.List<String>) object).stream().
		map(o -> $type.valueOf(o.toString())).
		collect(java.util.stream.Collectors.toList());
end

def type(variable) type(outDefined) !type(inherited) !type(overriden) type(owner) type(word) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = $generatedLanguage+LowerCase.words.$contract+firstUpperCase.valueOf(((java.util.List<Object>) object).get(0).toString());
end

def type(variable) !type(inherited) !type(overriden) type(owner) type(word) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = $type.valueOf(((java.util.List<Object>) object).get(0).toString());
end

----- INIT.REFERENCE -----

def type(variable) !type(inherited) type(fromDefinition) !type(overriden) type(owner) type(multiple) type(reference) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = ((java.util.List<java.lang.Object>) object).stream().map(o -> _declaration.ownerWith(tara.magritte.Model.class).definitionOf(o.toString())).collect(java.util.stream.Collectors.toList());
end

def type(variable) !type(inherited) type(fromDefinition) !type(overriden) type(owner) type(reference) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase =
	((java.util.List<java.lang.Object>) object).stream().map(o -> _declaration.ownerWith(tara.magritte.Model.class).definitionOf(o.toString())).collect(java.util.stream.Collectors.toList()).get(0);
end

def type(variable) !type(inherited) !type(fromDefinition) !type(overriden) type(owner) type(multiple) type(reference) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = ((java.util.List<Object>) object).stream().map(o -> new tara.magritte.Reference(o.toString(), _declaration.ownerWith(tara.magritte.Model.class))).collect(java.util.stream.Collectors.toList());
end

def type(variable) !type(inherited) !type(fromDefinition) !type(overriden) type(owner) type(reference) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = new tara.magritte.Reference((String) object, _declaration.ownerWith(tara.magritte.Model.class));
end
-------------------------

def type(variable) !type(inherited) !type(overriden) type(owner) type(native) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = ($generatedLanguage.natives.$contract+javaValidName) _link(tara.magritte.loaders.NativeCodeLoader.nativeCodeOf((String) object));
end

def type(variable) type(time) type(multiple) !type(inherited) !type(overriden) type(owner) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = tara.magritte.loaders.DateLoader.asTime((java.util.List<String>) object);
end

def type(variable) type(time) !type(inherited) !type(overriden) type(owner) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = tara.magritte.loaders.DateLoader.asTime(((java.util.List<String>) object).get(0));
end

def type(variable) type(date) type(multiple) !type(inherited) !type(overriden) type(owner) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = tara.magritte.loaders.DateLoader.asDate((java.util.List<String>) object);
end

def type(variable) type(date) !type(inherited) !type(overriden) type(owner) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = tara.magritte.loaders.DateLoader.asDate(((java.util.List<String>)object).get(0));
end

def type(variable) type(owner) type(multiple) !type(inherited) !type(overriden) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = (java.util.List<$type+variableTypeList>) object;
end

def type(variable) type(measure) !type(multiple) !type(inherited) !type(overriden) type(owner) trigger(init)
	if (name.equalsIgnoreCase("$name")) this.$name = $generatedLanguage.metrics.$contract.valueOf(object.toString().split(" ")$[1]).value(java.lang.Double.parseDouble(object.toString().split(" ")$[0]));
end

def type(variable) type(measure) !type(inherited) !type(overriden) type(owner) trigger(init)
	if (name.equalsIgnoreCase("$name")) this.$name = (List<java.lang.Object>) object).stream()
		.map(o -> $generatedLanguage.metrics.$contract.valueOf(o.toString().split(" ")$[1]).value(java.lang.Double.parseDouble(o.toString().split(" ")$[0]))).collect(java.util.streams.Collectors.toList());
end

def type(variable) type(double) !type(multiple) !type(inherited) !type(overriden) type(owner) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = java.lang.Double.parseDouble(((java.util.List<Object>)object).get(0).toString());
end

def type(variable) !type(multiple) !type(fromDefinition) !type(inherited) !type(overriden) type(owner) trigger(init)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = ((java.util.List<$type+variableTypeList>) object).get(0);
end

----- SET -----
def type(variable) type(word) type(multiple) !type(inherited) !type(overriden) type(outDefined) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name")) $name+firstLowercase = new ArrayList<>((java.util.List<$generatedLanguage+LowerCase.words.$contract+firstUpperCase>)object);
end

def type(variable) type(word) type(multiple) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name")) $name+firstLowercase = new ArrayList<>((java.util.List<$type>)object);
end

def type(variable) type(word) type(outDefined) !type(inherited) !type(overriden) type(owner)  trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) $name+firstLowercase = (($generatedLanguage+LowerCase.words.$contract+firstUpperCase)object);
end

def type(variable) type(word) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) $name+firstLowercase = (($type)object);
end

def type(variable) type(native) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) $name+firstLowercase = ($generatedLanguage.natives.$contract+javaValidName) _link((tara.magritte.NativeCode) object);
end

----- SET.REFERENCE -----
def type(variable) type(reference) type(fromDefinition) type(multiple) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = new java.util.ArrayList<>((java.util.List<tara.magritte.Definition>) object);
end

def type(variable) type(reference) type(fromDefinition) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = (tara.magritte.Definition) object;
end

def type(variable) !type(inherited) !type(fromDefinition) !type(overriden) type(owner) type(multiple) type(reference) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = ((java.util.List<Object>)object).stream().map(o -> new tara.magritte.Reference(o.toString(), _declaration.ownerWith(tara.magritte.Model.class))).collect(java.util.stream.Collectors.toList());
end

def type(variable) !type(inherited) !type(fromDefinition) !type(overriden) type(owner) type(reference) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = new tara.magritte.Reference((String) object, _declaration.ownerWith(tara.magritte.Model.class));
end
-------------------------
def type(variable) type(time) type(multiple) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = new ArrayList<>((List<java.time.LocalTime>) object);
end

def type(variable) type(time) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = (java.time.LocalTime) object;
end

def type(variable) type(date) type(multiple) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = new ArrayList<>((List<java.time.LocalDateTime>) object);
end

def type(variable) type(date) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = (java.time.LocalDateTime) object;
end

def type(variable) type(measure) !type(multiple) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = (double) object;
end

def type(variable) type(double) !type(multiple) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = (double) object;
end

def type(variable) type(owner) !type(fromDefinition) type(multiple) !type(inherited) !type(overriden) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = new ArrayList<>((java.util.List<$type+variableTypeList>) object);
end

def type(variable) !type(multiple) !type(fromDefinition) !type(inherited) !type(overriden) type(owner) trigger(set)
	if(name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = ($type+variableType) object;
end
-------------------------
def value(date) trigger(variableType)
	java.time.LocalDateTime
end

def value(time) trigger(variableType)
	java.time.LocalTime
end

def value(Double) trigger(variableType)
	double
end

def value(integer) trigger(variableType)
	int
end

def value(file) trigger(variableType)
	java.net.URI
end

def value(boolean) trigger(variableTypeList)
	Boolean
end

def value(integer) trigger(variableTypeList)
	Integer
end

def value(natural) trigger(variableTypeList)
	Integer
end

def value(double) trigger(variableTypeList)
	Double
end

def value(string) trigger(variableTypeList)
	String
end

def value(file) trigger(variableTypeList)
	java.net.URI
end


def value(measure) trigger(variableType)
	double
end

def value(natural) trigger(variableType)
	int
end

def value(string) trigger(variableType)
	String
end

def trigger(quoted)
	"$value"
end

def type(Variable) !type(inherited) !type(overriden) type(owner) type(multiple) trigger(list)
	map.put("$name+firstLowerCase",$name+firstLowerCase);
end

def type(Variable) !type(inherited) !type(overriden) type(owner) trigger(list)
	map.put("$name+firstLowerCase",$name+firstLowerCase);
end

def type(Node) !type(inherited) !type(overriden) !type(overriden) type(owner) type(single) trigger(list)
	if($name+firstLowerCase != null) declarations.add($name+firstLowerCase._declaration());
end

def type(Node) !type(inherited) !type(overriden) type(owner) trigger(list)
	$name+firstLowerCase~List.stream().forEach(c -> declarations.add(c._declaration()));
end

def trigger(typeInit)
	$value
end

def trigger(typeDeclaration)
	$value _metaType;
end

def trigger(typeDeclaration)
	tara.magritte.annotations.$value;
end

--------------- NODE -------------------
def !type(target) type(nodeimpl) trigger(node)
	public[ $inner][ $abstract] class $name+javaValidName [extends $parent?extends tara.magritte.Layer] [implements $annotations+annotation...[, ]] {
		$variable+declaration...[$NL]|:
		$node+declaration...[$NL]|:
		$facetTarget+declaration...[$NL]|:
		$constraint+declaration...[$NL]|:
		$typeDeclaration|:
		public $name+javaValidName(tara.magritte.Declaration declaration) {
			super(declaration);
			$variable+constructor...[$NL]|:
			$facetTarget+constructor...[$NL]|:
			$constraint+constructor...[$NL]|:
			[_metaType = declaration.as($typeDeclaration+typeInit.class);]
		}
		$variable+getter...[$NL$NL]|:
		$variable+setter...[$NL$NL]|:
		$node+getter...[$NL$NL]|:
		[@Override
		protected void _addComponent(tara.magritte.Declaration component) {
			$node+add...[$NL]
		}]
		[@Override
		protected void _load(String name, java.lang.Object object) {
			super._load(name, object);
			$variable+init...[$NL else ]
		}]
		[@Override
		protected void _set(String name, java.lang.Object object) {
			super._set(name, object);
			$variable+set...[$NL else ]
		}]
		[@Override
		public java.util.List<tara.magritte.Declaration> _components() {
			java.util.Set<tara.magritte.Declaration> declarations = new java.util.LinkedHashSet<>();
			$node+list...[$NL]
			return new java.util.ArrayList(declarations);
		}]
		[@Override
		public java.util.Map<String, java.lang.Object> _variables() {
			java.util.Map<String, Object> map = new java.util.LinkedHashMap<>($parent+var);
			$variable+list...[$NL]|:
			return map;
		}]
		$node...[$NL]|:
	}
end

def value(Layer) trigger(var)

end
def trigger(var)
	super._variables()
end
def value(true) trigger(inner)
	static
end

def value(true) trigger(abstract)
	abstract
end
