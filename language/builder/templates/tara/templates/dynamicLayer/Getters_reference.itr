def type(Variable & reference) !type(concept) type(multiple) !type(inherited) !type(overriden) trigger(getter)
	public List<$type+variableType> $name+firstLowerCase() {
		return new tara.magritte.utils.ReferenceList<>($name+firtLowercase, $type+variableType.class);
	}

	public List<$type+reference> $name+firstLowerCase~List(java.util.function.Predicate<$type+reference> predicate) {
		return $name+firstLowerCase~List.stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Variable & reference) !type(concept) !type(inherited) !type(overriden) trigger(getter)
	public $type+variableType $name+firstLowerCase() {
		return $name+firtLowercase.instance() == null ? null : $name+firtLowercase.instance().as($type+reference.class);
	}
end
