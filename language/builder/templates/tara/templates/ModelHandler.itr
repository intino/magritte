def type(model)
	package $name+LowerCase;

	import tara.magritte.Model;

	import java.util.List;

	public class ModelHandler extends tara.magritte.ModelWrapper {

		protected Model model;
		$node+declaration...[$NL]

		public ModelHandler(Model model) {
			this.model = model;
		    $node+assign...[$NL]
		}[

		@Override
        protected void addInstance(tara.magritte.Instance instance) {
            super.addInstance(instance);
            $node+add...[$NL]
        }][

        @Override
        protected void removeInstance(tara.magritte.Instance instance) {
            super.removeInstance(instance);
            $node+remove...[$NL]
        }]

		$node+getter...[$NL$NL]
		$node+filter...[$NL$NL]
		$node+new...[$NL$NL]
	}
end

def type(single & owner) !type(overriden) trigger(add)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase = instance.as($qn+reference.class);
end

def type(owner) !type(overriden) trigger(add)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.add(instance.as($qn+reference.class));
end

def type(overriden) trigger(add)
end

def type(single & owner) !type(overriden) trigger(remove)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase = null;
end

def type(owner) !type(overriden) trigger(remove)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.remove(instance.as($qn+reference.class));
end

def type(overriden) trigger(remove)
end

def type(node) type(single) trigger(declaration)
    private $qn+reference $name+firstLowerCase;
end

def type(node) trigger(declaration)
    private List<$qn+reference> $name+firstLowerCase~List;
end

def type(node) type(single) trigger(assign)
    $name+firstLowerCase = model.components($qn+reference.class).stream().findFirst().orElse(null);
end

def type(node) trigger(assign)
    $name+firstLowerCase~List = model.components($qn+reference.class);
end

def type(node) type(single) trigger(getter)
    public $qn+reference $name+firstLowerCase() {
        return $name+firstLowerCase;
    }
end

def type(node) trigger(getter)
    public List<$qn+reference> $name+firstLowerCase~List() {
        return $name+firstLowerCase~List;
    }
end

def type(node) !type(single) trigger(filter)
    public List<$qn+reference> $name+firstLowerCase~List(Predicate predicate) {
        return $name+firstLowerCase~List.stream.filter(predicate).collect(java.util.Collectors.toList());
    }
end

def type(node) !type(final) !type(single) trigger(new)
    public $qn+reference new$name+firstUpperCase() {
        return $name+firstLowerCase~List;
    }
end

def type(node) !type(final) type(single) trigger(new)
    public $qn+reference new$name+firstUpperCase() {
        return $name+firstLowerCase~List;
    }
end