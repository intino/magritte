def type(Variable) type(owner) !type(inherited) Slot(wordValues) type(word) type(multiple) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($wordValues+quoted...[, ])));
end

def type(Variable) type(owner) !type(inherited) Slot(values) type(word) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($wordValues+quoted...[, ])));
end

def type(Variable) type(native) type(owner) !type(inherited) trigger(constructor)
	_load("$name+firstLowerCase", $generatedLanguage.natives.$package.$name+javaValidName_$uid.class.getName());
end

def type(Variable) type(owner) !type(inherited) type(function) Slot(body) trigger(constructor)
	_load("$name+firstLowerCase", $generatedLanguage.natives.$package.$name+javaValidName_$uid.class.getName());
end

def type(Variable) type(owner) type(date) !type(inherited) Slot(values) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($values+quoted...[, ])));
end

def type(Variable) type(owner) type(time) !type(inherited) Slot(values) !type(multiple) trigger(constructor)
	_load("$name+firstLowerCase",  new java.util.ArrayList<>(java.util.Arrays.asList($values+quoted...[, ])));
end

def type(Variable) type(owner) type(double) !type(inherited) Slot(values) type(multiple) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList(new Double$[$] {$values...[, ]})));
end

def type(Variable) type(owner) type(reference) !type(inherited) Slot(values) type(multiple) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList(_model().conceptOf("$type"))));
end

def type(Variable) type(owner) type(measure) !type(inherited) Slot(values) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($values+quoted...[, ])));
end

def type(Variable) type(owner) !type(inherited) Slot(values) trigger(constructor)
	_load("$name+firstLowerCase", new java.util.ArrayList<>(java.util.Arrays.asList($values...[, ])));
end