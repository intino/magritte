def type(facetTarget) type(overriden) trigger(set)
	_$name+firstLowerCase.node().set(_$name+firstLowerCase, name, values);
end

def type(variable & word) type(multiple) !type(inherited) !type(overriden) type(outDefined) type(owner) trigger(set)
	if (name.equalsIgnoreCase("$name")) this.$name+firstLowercase = new ArrayList<>((java.util.List<$generatedLanguage+LowerCase.rules.$rule+externalWordClass>) values);
end

def type(variable & word & multiple) !type(inherited) !type(overriden) type(owner) trigger(set)
	if (name.equalsIgnoreCase("$name")) this.$name+firstLowercase = new ArrayList<>((java.util.List<$type>) values);
end

def type(variable & word) type(outDefined) !type(inherited) !type(overriden) type(owner)  trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = ($generatedLanguage+LowerCase.rules.$rule+externalWordClass) values.get(0);
end

def type(variable & word) type(owner) !type(inherited) !type(overriden) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = ($type) values.get(0);
end

def type(variable & reactive) type(owner) !type(inherited) !type(overriden) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = tara.magritte.loaders.FunctionLoader.load(values.get(0), this, tara.magritte.Expression.class);
end

def type(variable & function) !type(inherited) !type(overriden) type(owner) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = tara.magritte.loaders.FunctionLoader.load(values.get(0), this, $generatedLanguage.functions.$rule+interfaceClass.class);
end

def type(variable & time & multiple) !type(inherited) !type(overriden) type(owner) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = new java.util.ArrayList<>((List<java.time.LocalTime>) values);
end

def type(variable & multiple & owner) !type(inherited) !type(overriden) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = new ArrayList<>((java.util.List<$type+variableTypeList>) values);
end

def type(variable) !type(multiple | concept) !type(inherited) !type(overriden) type(owner) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = ($type+variableTypeList) values.get(0);
end