def type(Layer)
	package $package+lowercase;

	import $generatedLanguage+lowercase.*;
	[$imports...[$NL]
	]
	import java.util.*;

	$node
end

def type(single) type(owner) trigger(add)
	if (component.is("$qn+noPackage+withDollar")) this.$name+firstLowercase = component.as($qn+reference.class);
end

def type(owner) trigger(add)
	if (component.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.add(component.as($qn+reference.class));
end

def type(facetTarget) trigger(facet)
	if (layer instanceof $qn+reference) _$name+firstLowerCase = ($qn+reference) layer;
end

def type(constraint) trigger(facet)
	if (layer instanceof $qn+reference) _$name+firstLowerCase = ($qn+reference) layer;
end

def !type(target) type(nodeimpl) trigger(Node)
	public[ $inner][ $abstract] class $name+javaValidName[ extends $parent? extends tara.magritte.Layer][ implements $annotations+annotation...[, ]] {
		$variable+declaration...[$NL]|:
		$node+declaration...[$NL]|:
		$facetTarget+declaration...[$NL]|:
		$constraint+declaration...[$NL]|:
		$typeDeclaration|:

		public $name+javaValidName(tara.magritte.Declaration declaration) {
			super(declaration);[
			$variable+constructor...[$NL]]
			[_metaType = declaration.as($typeDeclaration+typeInit.class);]
		}[

		$variable+getter...[$NL$NL]][

		$variable+setter...[$NL$NL]][

		$node+getter...[$NL$NL]][

		@Override
		protected void _addComponent(tara.magritte.Declaration component) {
			$node+add...[$NL]
		}][

		@Override
		protected void _load(String name, java.lang.Object object) {
			super._load(name, object);
			$variable+init...[$NL~else ]
		}][

		@Override
		protected void _set(String name, java.lang.Object object) {
			super._set(name, object);
			$variable+set...[$NL~else ]
		}][

		@Override
		public void _facet(tara.magritte.Layer layer) {
		   $facetTarget+facet...[$NL~else ]
		   $constraint+facet...[$NL~else ]
		}][

		@Override
		public java.util.List<tara.magritte.Declaration> _components() {
			java.util.Set<tara.magritte.Declaration> declarations = new java.util.LinkedHashSet<>();
			$node+list...[$NL]
			return new java.util.ArrayList<>(declarations);
		}][

		@Override
		public java.util.Map<String, java.lang.Object> _variables() {
			java.util.Map<String, Object> map = new java.util.LinkedHashMap<>($parent+var);
			$variable+list...[$NL]|:
			return map;
		}][

		$node...[$NL]]

		public $generatedLanguage+lowerCase.$generatedLanguage+firstUpperCase~$ModelType $ModelType+lowerCase() {
			return (($generatedLanguage+lowerCase.$generatedLanguage+firstUpperCase~$ModelType) _model().$ModelType+firstLowerCase());
		}
	}

end

def trigger(typeInit)
	$value
end

def trigger(typeDeclaration)
	$value _metaType;
end

def trigger(typeDeclaration)
	tara.magritte.annotations.$value;
end

def value(Layer) trigger(var)

end

def trigger(var)
	super._variables()
end
def value(true) trigger(inner)
	static
end

def value(true) trigger(abstract)
	abstract
end
