def type(Layer)
	package $package+lowercase;

	import $generatedLanguage+lowercase.*;
	[$imports...[$NL]
	]
	import java.util.*;

	$node
end

def type(single & owner) !type(overriden) trigger(add)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase = instance.as($qn+reference.class);
end

def type(owner) !type(overriden) trigger(add)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.add(instance.as($qn+reference.class));
end

def type(overriden) trigger(add)
end

def type(single & owner) !type(overriden) trigger(remove)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase = null;
end

def type(owner) !type(overriden) trigger(remove)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.remove(instance.as($qn+reference.class));
end

def type(overriden) trigger(remove)
end

def type(overriden) trigger(add)
end

def type(facetTarget) trigger(facet)
	if (layer instanceof $qn+reference) _$name+firstLowerCase = ($qn+reference) layer;
end

def type(constraint) trigger(facet)
	if (layer instanceof $qn+reference) _$name+firstLowerCase = ($qn+reference) layer;
end

def !type(target) type(nodeimpl) trigger(Node)
	public[ $inner][ $abstract] class $name+javaValidName[ extends $parent? extends tara.magritte.Layer][ implements $flag+tag...[, ]] {
		$variable+declaration...[$NL][
		$node+declaration...[$NL]][
		$facetTarget+declaration...[$NL]][
		$constraint+declaration...[$NL]][
		$typeInstance]

		public $name+javaValidName(tara.magritte.Instance instance) {
			super(instance);
			[_metaType = instance.as($typeInstance+typeInit.class);]
		}[

		$variable+getter...[$NL$NL]][

		$variable+setter...[$NL$NL]][

		$node+getter...[$NL$NL]][
		$node+setter...[$NL$NL]][

		@Override
		protected void _addInstance(tara.magritte.Instance instance) {
			super._addInstance(instance);
			$node+add...[$NL]
		}][

		@Override
        protected void _removeInstance(tara.magritte.Instance instance) {
            super._removeInstance(instance);
            $node+remove...[$NL]
        }]

		@Override
		protected void _load(String name, java.util.List<?> objects) {
			super._load(name, objects);
			$typeInstance+typeInstanceLoad
			$variable+init...[$NL~else ]
		}

		@Override
		protected void _set(String name, java.util.List<?> objects) {
			super._set(name, objects);[
			$typeInstance+typeInstanceLoad][
			$variable+set...[$NL~else ]]
		}[

		@Override
		public void _facet(tara.magritte.Layer layer) {
			super._facet(layer);
		   $facetTarget+facet...[$NL~else ]
		   $constraint+facet...[$NL~else ]
		}][

		@Override
		public java.util.List<tara.magritte.Instance> _instances() {
			java.util.Set<tara.magritte.Instance> instances = new java.util.LinkedHashSet<>(super._instances());
			$node+list...[$NL]
			return new java.util.ArrayList<>(instances);
		}][

		public List<tara.magritte.Instance> _features() {
			java.util.Set<tara.magritte.Instance> features = new java.util.LinkedHashSet<>(super._features());
        	$node+featureList...[$NL]
			return new java.util.ArrayList<>(features);
        }][

        public List<tara.magritte.Instance> _components() {
			java.util.Set<tara.magritte.Instance> components = new java.util.LinkedHashSet<>(super._components());
			$node+componentList...[$NL]
			return new java.util.ArrayList<>(components);
        }]

		@Override
		public java.util.Map<String, java.util.List<?>> _variables() {
			java.util.Map<String, java.util.List<?>> map = new java.util.LinkedHashMap<>($parent+var);
			$variable+list...[$NL]|:
			return map;
		}[

		$node...[$NL]]

		public $generatedLanguage+lowerCase.$generatedLanguage+firstUpperCase~$ModelType _$ModelType+lowerCase() {
			return (($generatedLanguage+lowerCase.$generatedLanguage+firstUpperCase~$ModelType) _model().$ModelType+firstLowerCase());
		}
	}

end

def trigger(typeInit)
	$value
end

def trigger(typeInstanceLoad)
	_instance().load(_metaType, name, objects);
end

def trigger(typeInstance)
	$value _metaType;
end

def trigger(tag)
	tara.magritte.tags.$value+lowerCase+FirstUpperCase
end

def value(Layer) trigger(var)

end

def trigger(var)
	super._variables()
end
def value(true) trigger(inner)
	static
end

def value(true) trigger(abstract)
	abstract
end
