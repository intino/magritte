def type(model)
	package $name+LowerCase;

	import tara.magritte.Model;

	import java.util.List;

	public class ModelHandler extends tara.magritte.ModelWrapper {

		protected Model model;
		$node+list...[$NL]

		public ModelHandler(Model model) {
			this.model = model;
		    $node+assign...[$NL]
		}

		@Override
        protected void addInstance(tara.magritte.Instance instance) {
            $node+add...[$NL]
        }

        @Override
        protected void removeInstance(tara.magritte.Instance instance) {
            $node+remove...[$NL]
        }

		$node+getter...[$NL$NL]
		$node+filter...[$NL$NL]
		$node+new...[$NL$NL]
	}
end

def type(single) trigger(add)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase = instance.as($qn+reference.class);
end

def trigger(add)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.add(instance.as($qn+reference.class));
end

def trigger(add)
end

def type(single) trigger(remove)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase = null;
end

def trigger(remove)
	if (instance.is("$qn+noPackage+withDollar")) this.$name+firstLowercase~List.remove(instance.as($qn+reference.class));
end

def trigger(remove)
end

def type(node & single) trigger(list)
    private $qn+reference $name+firstLowerCase;
end

def type(node) trigger(list)
    private List<$qn+reference> $name+firstLowerCase~List;
end

def type(node & single) trigger(assign)
    $name+firstLowerCase = model.components($qn+reference.class).stream().findFirst().orElse(null);
end

def type(node) trigger(assign)
    $name+firstLowerCase~List = model.components($qn+reference.class);
end

def type(node & single) trigger(getter)
    public $qn+reference $name+firstLowerCase() {
        return $name+firstLowerCase;
    }
end

def type(node) trigger(getter)
    public List<$qn+reference> $name+firstLowerCase~List() {
        return $name+firstLowerCase~List;
    }
end

def type(node) !type(single) trigger(filter)
    public List<$qn+reference> $name+firstLowerCase~List(java.util.function.Predicate<$qn+reference> predicate) {
        return $name+firstLowerCase~List.stream().filter(predicate).collect(java.util.stream.Collectors.toList());
    }
end

def type(node & concept) !type(final) trigger(new)
	public $qn+reference new$name+firstUpperCase(String _spacename, String _name[, $variable+parameters...[, ]]) {
		$qn+reference newElement = model.newMain($qn+reference.class, _spacename, _name).as($qn+reference.class);
        [newElement.$variable+assign...[$NL$TAB~newElement.]]
		return newElement;

	}
    public $qn+reference new$name+firstUpperCase(String _spacename[, $variable+parameters...[, ]]) {
        $qn+reference newElement = model.newMain($qn+reference.class, _spacename).as($qn+reference.class);
        [newElement.$variable+assign...[$NL$TAB~newElement.]]
        return newElement;
    }
end