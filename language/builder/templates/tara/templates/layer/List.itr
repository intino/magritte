
def type(Variable & multiple & owner) !type(inherited) !type(overriden) trigger(list)
	map.put("$name+firstLowerCase", $name+firstLowerCase+javaValidWord);
end

def type(Variable & reference & owner) !type(inherited) !type(overriden) trigger(list)
	map.put("$name+firstLowerCase", this.$name+firstLowerCase+javaValidWord != null ? new java.util.ArrayList(java.util.Collections.singletonList($name+firstLowerCase+javaValidWord)) : java.util.Collections.emptyList());
end

def type(Variable & function & owner) !type(inherited) !type(overriden) trigger(list)
	map.put("$name+firstLowerCase", this.$name+firstLowerCase+javaValidWord != null ? new java.util.ArrayList(java.util.Collections.singletonList($name+firstLowerCase+javaValidWord)) : java.util.Collections.emptyList());
end

def type(Variable & owner) !type(inherited) !type(overriden) trigger(list)
	map.put("$name+firstLowerCase", new java.util.ArrayList(java.util.Collections.singletonList($name+firstLowerCase+javaValidWord)));
end

def type(Variable & metaType & multiple) !type(inherited) !type(overriden) trigger(list)
	map.put("$name+firstLowerCase", _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord());
end

def type(Variable & metaType) type(function | reactive) !type(inherited) !type(overriden) trigger(list)
	map.put("$name+firstLowerCase", new java.util.ArrayList(java.util.Collections.singletonList(tara.magritte.utils.NativeExtractor.extract("$name", _$containerName+firstLowerCase))));
end

def type(Variable & metaType) !type(inherited) !type(overriden) trigger(list)
	map.put("$name+firstLowerCase", new java.util.ArrayList(java.util.Collections.singletonList(_$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord())));
end

def type(Node & single & owner) !type(inherited) !type(overriden) !type(overriden) trigger(list)
	if ($name+firstLowerCase+javaValidWord != null) instances.add($name+firstLowerCase+javaValidWord.instance());
end

def type(Node) !type(inherited) !type(overriden) type(owner) trigger(list)
	$name+firstLowerCase~List.stream().forEach(c -> instances.add(c.instance()));
end

def type(Node & single & feature & owner) !type(inherited) !type(overriden) trigger(featureList)
	if ($name+firstLowerCase+javaValidWord != null) features.add($name+firstLowerCase+javaValidWord.instance());
end

def type(Node & feature & owner) !type(inherited) !type(overriden) trigger(featureList)
	$name+firstLowerCase~List.stream().forEach(c -> features.add(c.instance()));
end

def type(Node & single & owner) !type(feature) !type(inherited) !type(overriden) trigger(componentList)
	if ($name+firstLowerCase+javaValidWord != null) components.add($name+firstLowerCase+javaValidWord.instance());
end

def type(Node & owner) !type(feature) !type(inherited) !type(overriden) trigger(componentList)
	$name+firstLowerCase~List.stream().forEach(c -> components.add(c.instance()));
end

def type(Node) trigger(list)
end

def type(Node) trigger(featurelist)
end

def type(Node) trigger(componentlist)
end