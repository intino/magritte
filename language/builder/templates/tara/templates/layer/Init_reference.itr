def type(variable & reference & multiple & concept) !type(inherited | reactive) !type(overriden) type(owner) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = tara.magritte.loaders.ConceptLoader.load(values, this);
end

def type(variable & reference & concept & owner) !type(inherited | reactive | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = tara.magritte.loaders.ConceptLoader.load(values, this).get(0);
end

def type(variable & reference & multiple & owner) !type(concept | reactive | inherited | overriden) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = tara.magritte.loaders.NodeLoader.load(values,  $type+reference.class, this);
end

def type(variable & reference) !type(concept | reactive) !type(inherited) !type(overriden) type(owner) trigger(init)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowerCase+javaValidWord = tara.magritte.loaders.NodeLoader.load(values, $type+reference.class, this).get(0);
end