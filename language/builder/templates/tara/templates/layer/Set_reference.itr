def type(variable & reference & definition & multiple & owner) !type(inherited & overriden) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = new java.util.ArrayList<>((java.util.List<tara.magritte.Definition>) object);
end

def type(variable & reference & definition & owner) !type(inherited & overriden) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = (tara.magritte.Definition) object;
end

def type(variable & reference & multiple & owner)  !type(definition & inherited & overriden) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = ((java.util.List<Object>) object).stream().
		 map(o -> _declaration.ownerWith(tara.magritte.Model.class).loadDeclaration(((tara.magritte.Layer) object)._declaration().name()).as($type+reference.class)).collect(java.util.stream.Collectors.toList());
end

def type(variable) type(reference) !type(definition) !type(inherited) !type(overriden) type(owner) trigger(set)
	if (name.equalsIgnoreCase("$name+firstLowercase")) this.$name+firstLowercase = _declaration.ownerWith(tara.magritte.Model.class).loadDeclaration(((tara.magritte.Layer) object)._declaration().name()).as($type+reference.class);
end