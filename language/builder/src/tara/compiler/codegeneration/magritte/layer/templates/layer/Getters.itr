def type(Variable & Word & outDefined & multiple & final) !type(inherited | overriden | owner) trigger(getter)
	public java.util.List<$generatedLanguage.rules.$rule+externalWordClass> $name+firstLowerCase+javaValidWord() {
		return java.util.Collections.unmodifiableList(_$containerName+firstLowerCase.$name+javaValidWord());
	}
end

def type(Variable & Word & outDefined & multiple) slot(externalClass) !type(inherited | overriden | owner) trigger(getter)
	public java.util.List<$language.rules.$externalClass> $name+firstLowerCase+javaValidWord() {
		return _$containerName+firstLowerCase.$name+javaValidWord();
	}
end

def type(Variable & Word & outDefined & multiple) !type(inherited | overriden | owner | concept) trigger(getter)
	public java.util.List<$generatedLanguage.rules.$rule+externalWordClass> $name+firstLowerCase+javaValidWord() {
		return _$containerName+firstLowerCase.$name+javaValidWord();
	}
end

def type(Variable & Word & outDefined) slot(externalClass) !type(inherited | overriden | owner | concept) trigger(getter)
	public $language.rules.$externalClass $name+firstLowerCase+javaValidWord() {
		return _$containerName+firstLowerCase.$name+javaValidWord();
	}
end

def type(Variable & Word & outDefined) !type(inherited | overriden | owner | concept) trigger(getter)
	public $generatedLanguage.rules.$rule+externalWordClass $name+firstLowerCase+javaValidWord() {
		return _$containerName+firstLowerCase.$name+javaValidWord();
	}
end

def type(Variable & Word & multiple) type(target | metaType) !type(owner | concept) slot(name) trigger(getter)
	public java.util.List<$qn+reference.$name+javaValidWord+reference> $name+javaValidWord() {
		return _$containerName+firstLowerCase.$name+javaValidWord();
	}
end

def type(Variable & Word) type(target | metaType) !type(owner | concept) slot(name) trigger(getter)
	public $qn+reference.$name+javaValidWord+reference $name+javaValidWord() {
		return _$containerName+firstLowerCase.$name+javaValidWord();
	}
end

def type(Variable & multiple & final) type(target | metaType) !type(owner | concept) slot(name) trigger(getter)
	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord() {
		return java.util.Collections.unmodifiableList(_$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord());
	}

	public $type+variableTypeList $name+firstLowerCase+javaValidWord(int index) {
		return _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord().get(index);
	}
end

def type(Variable) !type(owner | concept) type(target | metaType) slot(name) type(multiple) trigger(getter)
	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord() {
		return _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord();
	}

	public $type+variableTypeList $name+firstLowerCase+javaValidWord(int index) {
		return _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord().get(index);
	}
end

def type(Variable & function) type(target | metaType) !type(owner) slot(name) trigger(getter)
	public $returnType $name+firstLowerCase+javaValidWord($parameters) {
		$returnType+isReturn _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord($parameters+WithOutType);
	}
end

def type(Variable & concept & multiple & target & final) slot(name) !type(inherited & owner) trigger(getter)
	public java.util.List<tara.magritte.Concept> $name+firstLowerCase+javaValidWord() {
		return java.util.Collections.unmodifiableList(_$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord());
	}

	public tara.magritte.Concept $name+firstLowerCase+javaValidWord(int index) {
		return _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord().get(index);
	}
end

def type(Variable & concept & multiple & target) slot(name) !type(inherited & owner) trigger(getter)
	public java.util.List<tara.magritte.Concept> $name+firstLowerCase+javaValidWord() {
		return _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord();
	}

	public tara.magritte.Concept $name+firstLowerCase+javaValidWord(int index) {
		return _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord().get(index);
	}
end

def type(Variable) type(concept) !type(owner) type(target) slot(name) !type(inherited) trigger(getter)
	public tara.magritte.Concept $name+firstLowerCase+javaValidWord() {
		return _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord();
	}
end


def type(Variable & target) !type(owner | concept) slot(name) trigger(getter)
	public $type+variableType $name+firstLowerCase+javaValidWord() {
		return _$containerName+firstLowerCase.$name+firstLowerCase+javaValidWord();
	}
end


def type(Node & instance) slot(name) trigger(getter)
	public $conceptLayer+reference $name+firstLowerCase+javaValidWord() {
		return _metaType.$type+firstLowerCase(o -> o.name().equals("$name")).get(0);
	}
end

def type(Node & single & target) slot(name) !type(owner | inherited | instance) trigger(getter)
	public $qn+reference $name+firstLowerCase+javaValidWord() {
		return _$targetContainer+firstLowerCase.$name+firstLowerCase+javaValidWord();
	}
end

def type(Node & target & final) slot(name) !type(owner | inherited | instance) trigger(getter)
	public java.util.List<$qn+reference> $name+firstLowerCase~List() {
		return java.util.Collections.unmodifiableList((java.util.List<$qn+reference>) _$targetContainer+firstLowerCase.$name+firstLowerCase~List());
	}

	public $qn+reference $name+firstLowerCase~List(int index) {
		return _$targetContainer+firstLowerCase.$name+firstLowerCase~List().get(index);
	}
end

def type(Node & target) slot(name) !type(owner | inherited | instance) trigger(getter)
	public java.util.List<$qn+reference> $name+firstLowerCase~List() {
		return (java.util.List<$qn+reference>) _$targetContainer+firstLowerCase.$name+firstLowerCase~List();
	}

	public $qn+reference $name+firstLowerCase~List(int index) {
		return _$targetContainer+firstLowerCase.$name+firstLowerCase~List().get(index);
	}
end

def type(Node & target) slot(name) !type(owner | instance | single) trigger(getter)
	public java.util.List<$qn+reference> $name+firstLowerCase~List() {
		return (java.util.List<$qn+reference>) _$targetContainer+firstLowerCase.$name+firstLowerCase~List();
	}

	public $qn+reference $name+firstLowerCase~List(int index) {
		return _$targetContainer+firstLowerCase.$name+firstLowerCase~List().get(index);
	}
end

def type(Node & target & single) slot(name) !type(owner | instance) trigger(getter)
	public $qn+reference $name+firstLowerCase() {
		return ($qn+reference) _$targetContainer+firstLowerCase.$name+firstLowerCase();
	}
end



----- OWN GETTERS -----

def type(Variable & reference & concept & multiple) !type(inherited | overriden) trigger(getter)
	public java.util.List<tara.magritte.Concept> $name+firstLowerCase+javaValidWord() {
		return java.util.Collections.unmodifiableList($name+javaValidWord+firtLowercase);
	}
end

def type(Variable & reference & concept) !type(inherited | overriden) trigger(getter)
	public tara.magritte.Concept $name+firstLowerCase+javaValidWord() {
		return $name+javaValidWord+firtLowercase;
	}
end

def type(Variable & Word & outDefined & multiple & final) !type(inherited | overriden | target) trigger(getter)
	public java.util.List<$generatedLanguage.rules.$rule+externalWordClass> $name+firstLowerCase+javaValidWord() {
		return java.util.Collections.unmodifiableList($name+javaValidWord);
	}
end

def type(Variable & Word & outDefined & multiple) !type(inherited | overriden | target) trigger(getter)
	public java.util.List<$generatedLanguage.rules.$rule+externalWordClass> $name+firstLowerCase+javaValidWord() {
		return $name+javaValidWord;
	}
end

def type(Variable & word & outDefined) !type(inherited) trigger(getter)
	public $generatedLanguage.rules.$rule+externalWordClass $name+javaValidWord() {
		return $name+javaValidWord;
	}
end

def type(Variable & word & multiple & final) !type(target | outDefined | inherited | overriden) trigger(getter)
	public java.util.List<$type+reference> $name+javaValidWord() {
		return java.util.Collections.unmodifiableList($name+javaValidWord);
	}
end

def type(Variable & word & multiple) !type(target | outDefined | inherited | overriden) trigger(getter)
	public java.util.List<$type+reference> $name+javaValidWord() {
		return $name+javaValidWord;
	}
end

def type(Variable & word) !type(outDefined | inherited | overriden) trigger(getter)
	public $type $name+javaValidWord() {
		return $name+javaValidWord;
	}
end

def type(variable & reactive & multiple) !type(inherited | overriden) trigger(getter)
	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord() {
		return $name+firstLowerCase+javaValidWord.value();
	}
end

def type(variable & reactive) !type(inherited | overriden) trigger(getter)
	public $type+variableType $name+firstLowerCase+javaValidWord() {
		return $name+firstLowerCase+javaValidWord.value();
	}
end

def type(variable & function) !type(inherited | overriden) trigger(getter)
	public $returnType $name+firstLowerCase+javaValidWord($parameters) {
		$returnType+isReturn $name+firstLowerCase+javaValidWord.$methodName($parameters+WithoutType);
	}
end

def !value(void) trigger(isReturn)
	return
end

def value(void) trigger(isReturn)
end

def type(Variable & multiple & owner) !type(inherited | overriden | outdefined) trigger(getter)
	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord() {
		return $name+firstLowerCase+javaValidWord;
	}

	public $type+variableTypeList $name+firstLowerCase+javaValidWord(int index) {
		return $name+firstLowerCase+javaValidWord.get(index);
	}

	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord(java.util.function.Predicate<$type+variableTypeList> predicate) {
		return $name+firstLowerCase+javaValidWord().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Variable & multiple & owner & final) !type(inherited | overriden) trigger(getter)
	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord() {
		return java.util.Collections.unmodifiableList($name+firstLowerCase+javaValidWord);
	}

	public $type+variableTypeList $name+firstLowerCase+javaValidWord(int index) {
		return $name+firstLowerCase+javaValidWord.get(index);
	}

	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord(java.util.function.Predicate<$type+variableTypeList> predicate) {
		return $name+firstLowerCase+javaValidWord().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Variable & multiple & owner) !type(inherited | overriden) trigger(getter)
	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord() {
		return $name+firstLowerCase+javaValidWord;
	}

	public $type+variableTypeList $name+firstLowerCase+javaValidWord(int index) {
		return $name+firstLowerCase+javaValidWord.get(index);
	}

	public java.util.List<$type+variableTypeList> $name+firstLowerCase+javaValidWord(java.util.function.Predicate<$type+variableTypeList> predicate) {
		return $name+firstLowerCase+javaValidWord().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Variable & owner) !type(inherited | overriden) trigger(getter)
	public $type+variableType $name+firstLowerCase+javaValidWord() {
		return $name+firstLowerCase+javaValidWord;
	}
end

def type(Node & single & owner) !type(inherited | overriden) trigger(getter)
	public $qn+reference $name+firstLowerCase+javaValidWord() {
		return $name+firstLowerCase+javaValidWord;
	}
end

def type(Node & owner) !type(single) type(overriden) trigger(getter)
	public java.util.List<$qn+reference> $containerName+firstLowercase$name+firstUpperCase~List() {
		return new tara.magritte.utils.ProxyList<>($name+firstLowerCase~List, $qn+reference.class);
	}

	public $qn+reference $containerName$name+firstLowerCase+javaValidWord(int index) {
		return $containerName+firstLowercase$name+firstUpperCase~List().get(index);
	}

	public java.util.List<$qn+reference> $containerName+firstLowercase$name+firstUpperCase~List(java.util.function.Predicate<$qn+reference> predicate) {
		return $containerName+firstLowercase$name+firstUpperCase~List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Node & owner & final) !type(single | inherited) trigger(getter)
	public java.util.List<$qn+reference> $name+firstLowerCase~List() {
		return java.util.Collections.unmodifiableList($name+firstLowerCase~List);
	}

	public $qn+reference $name+firstLowerCase+javaValidWord(int index) {
		return $name+firstLowerCase~List.get(index);
	}

	public java.util.List<$qn+reference> $name+firstLowerCase~List(java.util.function.Predicate<$qn+reference> predicate) {
		return $name+firstLowerCase~List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end

def type(Node & owner) !type(single | inherited) trigger(getter)
	public java.util.List<$qn+reference> $name+firstLowerCase~List() {
		return $name+firstLowerCase~List;
	}

	public $qn+reference $name+firstLowerCase+javaValidWord(int index) {
		return $name+firstLowerCase~List.get(index);
	}

	public java.util.List<$qn+reference> $name+firstLowerCase~List(java.util.function.Predicate<$qn+reference> predicate) {
		return $name+firstLowerCase~List().stream().filter(predicate).collect(java.util.stream.Collectors.toList());
	}
end