defrule type(Box)
package magritte.editors;

import magritte.Model;
$importFacet...[$NL]

import static magritte.Annotation.*;
$importMetric...[$NL]

public class $name extends Box {

    public static void load(Model model) {
        new $name(model).load();
    }

    private $name(Model model) {
        super(model);
    }

    @Override
    protected void loadDependencies() {
        [$dependency...[$NL].load(model());]
    }

    @Override
    protected void loadNodes() {
        $node...[$NL]
    }
}
endrule

defrule type(Node) trigger(node)
[$relation();]def(["$name"]); $nodeType...[$NL][ $facet][ $address][ $annotation...[$NL]][ $parent]$variable+set...[$NL]\
    $reference\
    $node...[$NL]\
[$back()]\
endrule

defrule trigger(import)
$value.load(model());
endrule

defrule trigger(address)
address($value);
endrule

defrule type(nodeType) trigger(nodeType)
type("$name"[,$NL$target]);
endrule

defrule type(target) !type(intention) trigger(target)
$target...[, $NL]
endrule

defrule type(facetApply) trigger(facet)
type("$name"[, $apply]);
endrule

defrule trigger(parent)
parent("$value");
endrule

defrule type(reference) type(aggregated) trigger(reference)
add().def();type("$type");
endrule

defrule type(reference) trigger(reference)
def();$parent

endrule

defrule type(Variable) type(target) type(measure) !type(List) slot-name(defaultValue) trigger(set)
set("!$node:$name<$target", $measureValue.value($defaultValue));
endrule

defrule type(Variable) type(target) !type(List) slot-name(defaultValue) trigger(set)
set("!$node:$name<$target", $defaultValue);
endrule

defrule type(Variable) type(reference) slot-name(variableValue) trigger(set)
set("$name", node("$variableValue"));
endrule

defrule type(Variable) type(string) !type(List) slot-name(variableValue) trigger(set)
set("$name", "$variableValue");
endrule

defrule type(Variable) type(resource) !type(List) slot-name(variableValue) trigger(set)
set("$name", resource("$variableValue"));
endrule

defrule type(Variable) type(List) slot-name(variableValue) trigger(set)
set("$name", $variableValue);
endrule

defrule type(Variable) slot-name(variableValue)  trigger(set)
set("$name", $variableValue);
endrule

defrule type(Annotation) trigger(annotation)
[set($value+CamelCase...[, ]);]
endrule

defrule trigger(variableValue) slot-type(date)
new Date($value~L)
endrule

defrule trigger(variableValue) slot-type(coordinate)
Coordinate.of($value)
endrule