defrule type(Morph)
package $package+lowercase;

[import $import...[;$NL]]\
import magritte.types.*;
import magritte.wrappers.Morph;
import magritte.morphs.*;
$imports...[$NL]

$node
endrule


defrule type(Word) trigger(wordInstantiation)
public static enum $name+camelCase {$words+FirstUpperCase...[, ]}


endrule

defrule type(Word) type(List) trigger(getter)
public $name+reference$[] get$name+camelCase() {
	return Enumerate.cardinal((int) get("$name+lowerCamelCase"), $name+CamelCase.values());
}

endrule

defrule type(Word) !type(List) trigger(getter)
public $name+reference get$name+camelCase() {
	return Enumerate.cardinal((int) get("$name"), $name+reference.values());
}

endrule

defrule type(Word) type(List) trigger(setter)
public void set$name+camelCase($name+camelCase~... values) {
    set("$name", Enumerate.ordinal(values));
}

endrule

defrule type(Word) !type(List) trigger(setter)
public void set$name+camelCase($name+camelCase value) {
    set("$name", Enumerate.ordinal(value));
}

endrule

defrule type(Variable) type(Date) !type(Word) trigger(getter)
public TimeInstant $name+lowerCamelCase() {
    return TimeInstant.value((long) get("$name"));
}

endrule

defrule type(Variable) type(Measure) !type(Word) trigger(getter)
public double $name+lowerCamelCase() {
    return get("$name");
}

endrule

defrule type(Variable) type(Resource) !type(Word) trigger(getter)
public Resource $name+lowerCamelCase() {
    return get("$name");
}

endrule

defrule type(Variable) type(Attribute) trigger(getter)
public java.lang.$type+CamelCase $name+lowerCamelCase() {
    return get("$name");
}

endrule

defrule type(Variable) !type(Word) trigger(getter)
public $type+reference $name+lowerCamelCase() {
    return get("$name");
}

endrule

defrule type(Variable) type(Resource) !type(list) !type(readonly) !type(Word) trigger(setter)
public void set$name+camelCase(Resource value) {
    set("$name", value);
}

endrule

defrule type(Variable) type(Date) !type(readonly) !type(Word) trigger(setter)
public void set$name+camelCase(TimeInstant value) {
    set("$name", value);
}

endrule

defrule type(Variable) type(Measure) !type(readonly) !type(Word) trigger(setter)
public void set$name+camelCase(double $name+lowerCamelCase) {
    set("$name", $name+lowerCamelCase);
}

endrule

defrule type(Variable) !type(readonly) !type(Word) type(List) trigger(setter)
public void set$name+camelCase($type+reference$[] $name+lowerCamelCase) {
    set("$name", $name+lowerCamelCase);
}

endrule

defrule type(Variable) type(Attribute) !type(readonly) !type(Word) !type(List) trigger(setter)
public void set$name+camelCase(java.lang.$type+CamelCase value) {
    set("$name", value);
}

endrule

defrule type(Variable) !type(readonly) !type(Word) !type(List) trigger(setter)
public void set$name+camelCase($type+reference value) {
    set("$name", value);
}

endrule

defrule trigger(parent) slot-name(value)
extends $value+reference
endrule

defrule type(node) !type(aggregated) type(single) trigger(component)
public $name+reference $name+firstLowerCase() {
    return components($name+reference.class)$[0];
}

endrule

defrule type(node) !type(aggregated) !type(single) trigger(component)
public $qn+reference$[] $name+firstLowerCase+plural() {
    return components($qn+reference.class);
}

endrule

defrule type(node) type(aggregated) trigger(holding)
public $name+firstUpperCase$[] $name+firstLowerCase() {
    return holdings($name+firstUpperCase.class);
}

public $name+firstUpperCase add$name+firstUpperCase(magritte.wrappers.Definition definition) {
    return addNode(definition.node()).with($name+firstUpperCase.class);
}

endrule

defrule type(declarednode) type(intention) !type(metafacet) type(facet) trigger(node)
public[$inner static] class $name+firstUpperCase $parent implements $project+lowercase.intentions.$name+firstUpperCase~Intention {
\
    public $project+lowercase.intentions.$name+camelCase~Intention extension() {
        return extensions($project+lowercase.intentions.$name+firstUpperCase~Intention.class)$[0];
    }
\
	$variable+wordInstantiation...[$NL]\
    $variable+getter...[$NL]\

    $variable+setter...[$NL]\

    $node+component...[$NL]\
    $node+holding...[$NL]\
}

endrule

defrule type(declarednode) type(intention) !type(facet) type(metafacet) trigger(node)
public[$inner static] class $name+firstUpperCase $parent implements $project+lowercase.intentions.$name+firstUpperCase~Intention {
\
    public $project+lowercase.intentions.$name+camelCase~Intention$[] extensions() {
        return extensions($project+lowercase.intentions.$name+firstUpperCase~Intention.class);
    }
\
	$variable+wordInstantiation...[$NL]\
    $variable+getter...[$NL]\

    $variable+setter...[$NL]\

    $node+component...[$NL]\
\
    $node+holding...[$NL]\
}

endrule

defrule type(declarednode) trigger(node)
public[$inner static] class $name+firstUpperCase $parent {
\
	[$aggregable
	public Definition$[$] aggregables() {
        return definition().aggregables();
    }]
\
	$variable+wordInstantiation...[$NL]\
    $variable+getter...[$NL]\

    $variable+setter...[$NL]\

    $node+component...[$NL]\

    $node+holding...[$NL]\
}

endrule