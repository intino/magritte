defrule type(Morph)
package magritte.morphs[.$package+lowercase];

[import $import...[;$NL]]\
import magritte.Node;
import magritte.Set;
import magritte.helpers.Enumerate;
import magritte.morphs.Morph;
import magritte.primitives.*;
import java.util.Date;

$node
endrule


defrule type(Word) trigger(wordInstantiation)
public static enum $name+camelCase {$words+FirstUpperCase...[, ]}

endrule

defrule type(Word) type(List) trigger(getter)
public $name+reference$[] get$name+camelCase() {
	return Enumerate.cardinal(get("$name+lowerCamelCase", int$[].class), $name+CamelCase.values());
}

endrule

defrule type(Word) !type(List) trigger(getter)
public $name+reference get$name+camelCase() {
	return Enumerate.cardinal(get("$name", int.class), $name+reference.values());
}

endrule

defrule type(Word) type(List) trigger(setter)
public void set$name+camelCase($name+camelCase~... values) {
    set("$name", Enumerate.ordinal(values));
}

endrule

defrule type(Word) !type(List) trigger(setter)
public void set$name+camelCase($name+camelCase value) {
    set("$name", Enumerate.ordinal(value));
}

endrule

defrule type(Variable) !type(Word) trigger(getter)
public $type+reference get$name+camelCase() {
    return get("$name", $type+reference.class);
}

endrule

defrule type(Variable) !type(Word) trigger(setter)
public void set$name+camelCase($type+reference value) {
    set("$name", value);
}

endrule

defrule type(Variable) !type(Word) type(List) trigger(setter)
public void set$name+camelCase($type+camelCase) {
    set("$name", $type+camelCase.class);
}

endrule

defrule type(declarednode) trigger(node)
public [$inner ]class $name+camelCase extends Morph {

	public $name+camelCase(Node node) {
        super(node);
    }

	$variable+wordInstantiation...[$NL]\
    $variable+getter...[$NL]\

    $variable+setter...[$NL]\

    public class $name+camelCase~Definition extends Definition {

        public $name+camelCase~Definition(Node node) {
            super(node);
        }

        @Override
        public Node produce(Node target) {
            return super.produce(target);
        }
    }
    $node...[$NL]\

}
endrule