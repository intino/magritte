defrule type(Morph)
package $package+lowercase;

[import $import...[;$NL]]\
import magritte.types.*;
import magritte.wraps.Morph;
import magritte.wraps.Type;
$imports...[$NL]

$node
endrule


defrule type(Word) trigger(wordInstantiation)
public static enum $name+firstUpperCase {$words+FirstUpperCase...[, ]}


endrule

defrule type(Word) type(List) trigger(getter)
public $name+reference$[] get$name+firstUpperCase() {
	return Enumerate.cardinal((Integer) get("$name+firstLowerCase"), $name+firstUpperCase.values());
}

endrule

defrule type(Word) !type(List) trigger(getter)
public $name+reference get$name+firstUpperCase() {
	return Enumerate.cardinal((int) definition().get("$name+firstLowerCase"), $name+firstUpperCase.values());
}

endrule

defrule type(Word) type(List) trigger(setter)
public void set$name+firstUpperCase($name+firstUpperCase~... values) {
    set("$name", Enumerate.ordinal(values));
}

endrule

defrule type(Word) !type(List) trigger(setter)
public void set$name+firstUpperCase($name+firstUpperCase value) {
    set("$name", Enumerate.ordinal(value));
}

endrule

defrule type(Variable) type(Date) !type(Word) trigger(getter)
public TimeInstant $name+firstLowerCase() {
    return TimeInstant.value((Long) get("$name"));
}

endrule

defrule type(Variable) type(Measure) !type(Word) trigger(getter)
public double $name+firstLowerCase() {
    return get("$name");
}

endrule

defrule type(Variable) type(Native) !type(Word) trigger(getter)
public $name+reference $name+firstLowerCase() {
    return Type.natives($name+reference.class)$[0$];
}


endrule

defrule type(Variable) type(file) !type(Word) trigger(getter)
public Resource $name+firstLowerCase() {
    return resource(get("value", int.class));
}

endrule

defrule type(Variable) !type(Word) trigger(getter)
public $type+reference $name+firstLowerCase() {
    return get("$name", $type+reference.class);
}

endrule

defrule type(Variable) type(file) !type(list) !type(readonly) !type(Word) trigger(setter)
public void set$name+firstUpperCase(Resource value) {
    set("value", value.id());
}

endrule

defrule type(Variable) type(Date) !type(readonly) !type(Word) trigger(setter)
public void set$name+firstUpperCase(TimeInstant value) {
    set("$name", value);
}

endrule

defrule type(Variable) type(Measure) !type(readonly) !type(Word) trigger(setter)
public void set$name+firstUpperCase(double $name+firstLowerCase) {
    set("$name", $name+firstLowerCase);
}

endrule

defrule type(Variable) !type(readonly) !type(Native) !type(Word) type(List) trigger(setter)
public void set$name+firstUpperCase($type+reference$[] $name+firstLowerCase) {
    set("$name", $name+firstLowerCase);
}

endrule

defrule type(Variable) !type(Native) !type(reference) !type(readonly) !type(Word) !type(List) trigger(setter)
public void set$name+firstUpperCase(java.lang.$type+firstUpperCase value) {
    set("$name", value);
}

endrule

defrule type(Variable) !type(readonly) !type(Word) !type(Native) !type(List) trigger(setter)
public void set$name+firstUpperCase($type+reference value) {
    set("$name", value);
}

endrule

defrule trigger(parent) slot-name(value)
extends $value+reference
endrule

defrule type(nodeReference) type(Feature) trigger(component)
public $name+reference $name+firstLowerCase() {
    return definition().feature($name+reference.class);
}

endrule

defrule type(nodeReference) !type(Feature) !type(aggregated) type(single) trigger(component)
public $name+reference $name+firstLowerCase() {
    return components($name+reference.class)$[0];
}

endrule

defrule type(nodeReference) !type(Feature) !type(aggregated) !type(single) trigger(component)
public $name+reference$[] $name+firstLowerCase+plural() {
    return components($name+reference.class);
}

public $name+reference $name+firstLowerCase(int index) {
    return $name+firstLowerCase+plural()$[index$];
}

endrule

defrule type(nodeReference) !type(Feature) type(aggregated) trigger(component)
public $name+firstUpperCase$[] $name+firstLowerCase() {
    return holdings($name+firstUpperCase.class);
}

public $name+firstUpperCase add$name+firstUpperCase(magritte.wrappers.Definition definition) {
    return addNode(definition.node()).with($name+firstUpperCase.class);
}

endrule

defrule type(nodeimpl) type(intention) !type(facetInstance) type(facet) trigger(node)
public[$inner static] class $name+firstUpperCase $parent implements $project+lowercase.intentions.$name+firstUpperCase~Intention {
\
    public $project+lowercase.intentions.$name+firstUpperCase~Intention extension() {
        return extensions($project+lowercase.intentions.$name+firstUpperCase~Intention.class)$[0];
    }
\
	$variable+wordInstantiation...[$NL]\
\
    $variable+getter...[$NL]\
\
    $variable+setter...[$NL]\
\
    $component...[$NL]\

    $node...[$NL]\
}

endrule

defrule type(nodeimpl) type(intention) !type(facet) type(facetInstance) trigger(node)
public[$inner static] class $name+firstUpperCase $parent implements $project+lowercase.intentions.$name+firstUpperCase~Intention {
\
    public $project+lowercase.intentions.$name+firstUpperCase~Intention$[] extensions() {
        return extensions($project+lowercase.intentions.$name+firstUpperCase~Intention.class);
    }
\
	$variable+wordInstantiation...[$NL]\
\
    $variable+getter...[$NL]\
\
    $variable+setter...[$NL]\
\
    $component...[$NL]\

    $node...[$NL]\
}

endrule

defrule type(nodeimpl) trigger(node)
public[$inner static] class $name+firstUpperCase $parent {
\
	[$aggregable
	public Definition$[$] aggregables() {
        return definition().aggregables();
    }]
\
	$variable+wordInstantiation...[$NL]\
\
    $variable+getter...[$NL]\
\
    $variable+setter...[$NL]\
\
    $component...[$NL]\

    $node...[$NL]\
}

endrule