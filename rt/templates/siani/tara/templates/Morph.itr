def type(Morph)
	package $package+lowercase;

	[import $import...[;$NL]]
	import magritte.primitives.*;
	import magritte.wraps.*;
	$imports...[$NL]

	$node
end

-------- WORDS ---------

def type(Word) trigger(wordInstantiation)
	public enum $name+javaValidName+firstUpperCase {
		$words+javaValidName+FirstUpperCase...[, ]
	}
end

def type(Word) type(multiple) trigger(getter)
	public $name+javaValidName+reference$[] $name+javaValidName+firstLowerCase() {
		return magritte.primitives.Enumerate.cardinal(_getMultiple("$name+javaValidName+firstLowerCase").asInteger(), $name+javaValidName+firstUpperCase.values());
	}
end

def type(Word) !type(multiple) trigger(getter)
	public $name+javaValidName+reference $name+javaValidName+firstLowerCase() {
		return _definition()._get("$name+javaValidName+firstLowerCase").asEnumerate($name+javaValidName+reference.values());
	}
end

def type(Word) type(multiple) trigger(setter)
	public void $name+javaValidName+firstUpperCase($name+javaValidNamefirstUpperCase~... values) {
		_edit().set("$name+javaValidName", magritte.primitives.Enumerate.ordinal(values));
	}
end

def type(Word) !type(multiple) trigger(setter)
	public void $name+javaValidName+firstUpperCase($name+javaValidName+firstUpperCase value) {
		_edit().set("$name+javaValidName", magritte.primitives.Enumerate.ordinal(value));
	}
end

-------- VARIABLE GETTERS ---------

def type(variable) !type(native) type(Date) trigger(getter)
	public magritte.primitives.Date $name+javaValidName+firstLowerCase() {
		return _get("$name").asDate();
	}
end

def type(variable) !type(native) type(Measure) trigger(getter)
	public double $name+javaValidName+firstLowerCase() {
		return _get("$name").asDouble();
	}
end

def type(variable) !type(native) type(file) trigger(getter)
	public Resource $name+javaValidName+firstLowerCase() {
		return _get("$name").asResource();
	}
end

def type(variable) !type(native) !type(reference) !type(word) trigger(getter)
	public $type+firstUpperCase+primitiveType $name+javaValidName+firstLowerCase() {
		return _get("$name").as$type+firstUpperCase();
	}
end


--- REFERENCIAS TERMINALES ---
def type(variable) type(reference) type(terminal) type(multiple) !type(word) trigger(getter)
	public magritte.Set<$type+reference> $name+firstLowerCase() {
		return _getMultiple("$name").as($type+reference.class);
	}

	public $type+reference $name+javaValidName+firstLowerCase(int index) {
		return $name+javaValidName+firstLowerCase().get(index);
	}

	public magritte.Set<magritte.wraps.Type> $name+javaValidName+firstLowerCase~TypeSet() {
		return _definition()._getAssignable("entity").as(magritte.wraps.Type.class);
	}

	public magritte.wraps.Type $name+javaValidName+firstLowerCase~Type(int index) {
		return $name+javaValidName+firstLowerCase~TypeSet().get(index);
	}
end


def type(variable) !type(terminal) type(reference) type(multiple) !type(word) trigger(getter)
	public magritte.Set<$type+reference> $name+firstLowerCase() {
		return _getMultiple("$name").as($type+reference.class);
	}

	public $type+reference $name+javaValidName+firstLowerCase(int index) {
		return $name+javaValidName+firstLowerCase().get(index);
	}
end

def type(variable) type(native) returnValue(void) trigger(getter)
	public void $name($parameters){
		(($generatedLanguage.natives.$interfaceName)[$definition _definition().]_get("$name").asNative()).$methodName($parameters+WithoutType);
	}
end

def type(variable) type(native) trigger(getter)
	public $returnValue $name($parameters){
		return (($generatedLanguage.natives.$interfaceName)[$definition _definition().]_get("$name").asNative()).$methodName($parameters+WithoutType);
	}
end

-------- SINGLE --------

def type(variable) type(terminal) type(reference) !type(multiple) !type(word) trigger(getter)
	public $type+reference $name+javaValidName+firstLowerCase() {
		return _get("$name").as($type+reference.class);
	}

	public magritte.Set<magritte.wraps.Type> $name+javaValidName+firstLowerCase~Types() {
		return _definition()._getAssignable("entity").as(magritte.wraps.Type.class);
	}

	public magritte.wraps.Type $name+javaValidName+firstLowerCase~Type(int index) {
		return $name+javaValidName+firstLowerCase~Types().get(index);
	}
end

def type(variable) !type(terminal) type(reference) !type(multiple) !type(word) trigger(getter)
	public $type+reference $name+javaValidName+firstLowerCase() {
		return _get("$name").as($type+reference.class);
	}
end

def value(Integer) trigger(primitiveType)
	int
end

def value(Double) trigger(primitiveType)
	double
end

def value(Natural) trigger(primitiveType)
	int
end

def type(variable) !type(multiple) !type(reference) !type(word) trigger(getter)
	public $type+javaValidName+primitiveType $name+firstLowerCase() {
		return _definition()._get("$name").as$type+reference();
	}
end

-------- SETTERS ---------

def type(variable) type(file) !type(multiple) !type(final) trigger(setter)
	public void $name+firstLowerCase(Resource value) {
		_edit().set("value", value);
	}
end

def type(variable) type(Date) !type(final) trigger(setter)
	public void $name+firstLowerCase(magritte.primitives.Date value) {
		_edit().set("$name", value);
	}

	public void $name+firstLowerCase(magritte.Expression<Double> value) {
		_edit().let("$name", value);
	}
end

def type(variable) type(native) !type(final) trigger(setter)
	public void $name+firstLowerCase(magritte.NativeCode value) {
		_edit().let("$name", value);
	}
end

def type(variable) type(Measure) !type(final) trigger(setter)
	public void $name+firstLowerCase(double $name+firstLowerCase) {
		_edit().set("$name", $name+firstLowerCase);
	}

	public void $name+firstLowerCase(magritte.Expression<Double> value) {
		_edit().let("$name", value);
	}
end

def type(variable) !type(final) !type(native) type(multiple) trigger(setter)
	public void $name+javaValidName+firstLowerCase($type+reference+primitiveType~... $name+firstLowerCase) {
		_edit().set("$name", $name+firstLowerCase);
	}

	public void $name+javaValidName+firstLowerCase(magritte.Expression<$type+reference> value) {
		_edit().let("$name", value);
	}

	public void $name+javaValidName+firstLowerCase(magritte.wraps.Operation operation, $type+reference+primitiveType~... $name+firstLowerCase) {
		_edit(operation).set("$name+firstLowerCase", $name+firstLowerCase);
	}
end

def type(variable) !type(native) !type(reference) !type(final) !type(multiple) trigger(setter)
	public void $name+javaValidName+firstLowerCase(java.lang.$type+firstUpperCase value) {
		_edit().set("$name", value);
	}

	public void $name+javaValidName+firstLowerCase(magritte.Expression<java.lang.$type+javaValidName> value) {
		_edit().let("$name", value);
	}
end

def type(variable) type(reference) !type(final) !type(native) !type(multiple) trigger(setter)
	public void $name+javaValidName+firstLowerCase($type+reference value) {
		_edit().set("$name", value);
	}
end

def type(variable) !type(final) !type(native) !type(multiple) trigger(setter)
	public void $name+javaValidName+firstLowerCase($type+reference value) {
		_edit().set("$name", value);
	}

	public void $name+javaValidName+firstLowerCase(magritte.Expression<$type+reference> value) {
		_edit().let("$name", value);
	}
end


----------------------- MODIFIABLE NODES -----------------------
def  type(nodeReference) !type(final) trigger(modifiable)
    public magritte.Set<Type> $name+javaValidName+firstLowerCase~Types() {
        return [$definitionAggregable _definition().]_aggregables($qn+reference.class);
    }

    public Type $name+javaValidName+firstLowerCase~Type(int index) {
        return $name+javaValidName+firstLowerCase~Types().get(index);
    }
end

def type(nodeReference) !type(final) type(single) trigger(modifiable)
    public Type $name+javaValidName+firstLowerCase~Type() {
        return [$definitionAggregable _definition().]_aggregables($qn+reference.class).get(0);
    }

	public $type+reference $name+javaValidName+firstLowerCase~Create() {
		return [$definitionAggregable _definition().]_create($type+reference.class);
	}.as(tafat.Job.class);

	public $type+reference $name+javaValidName+firstLowerCase~Remove() {
		return [$definitionAggregable _definition().]_remove($type+reference.class);
	}
end

def type(nodeReference) trigger(modifiable)
end

--------------- COMPONENTS -------------------

def type(nodeReference) !type(single) trigger(component)
	public magritte.Set<$qn+reference> $name+javaValidName+firstLowerCase~Set() {
		return [$definition _definition().]_components($qn+reference.class);
	}

	public $qn+reference $name+javaValidName+firstLowerCase(int index) {
    		return $name+firstLowerCase~Set().get(index);
	}
end

def type(nodeReference) type(single) type(intosingle) trigger(component)
	public $qn+reference $name+javaValidName+firstLowerCase() {
		return _component($qn+reference.class);
	}
end

def type(nodeReference) type(single) trigger(component)
	public $qn+reference $name+javaValidName+firstLowerCase() {
		return _component($qn+reference.class);
	}
end

def type(nodeReference) !type(single) type(final) trigger(component)
	public magritte.Set<$qn+reference> $name+javaValidName+firstLowerCase~Set() {
		return _components($qn+reference.class);
	}

	public $qn+reference $name+javaValidName+firstLowerCase(int index) {
		return $name+javaValidName+firstLowerCase~Set().get(index);
	}
end

--------------- ROOT -------------------
def type(nodeimpl) trigger(node)
	public[$inner static] class $name+javaValidName $parent {
		$variable+wordInstantiation...[$NL]
		$variable+getter...[$NL]
		$variable+setter...[$NL]
		$component+modifiable...[$NL]
		$component...[$NL]
		$node...[$NL]
	}

end

def trigger(parent) slot(value)
	extends $value+reference
end

def type(variable) trigger(wordInstantiation)
end

def type(variable) trigger(setter)
end

def type(variable) trigger(getter)
end

def trigger(component)
end