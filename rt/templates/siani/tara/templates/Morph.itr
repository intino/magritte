def type(Morph)
	package $package+lowercase;

	[import $import...[;$NL]]
	import magritte.primitives.*;
	import magritte.wraps.*;
	$imports...[$NL]

	$node
end

-------- WORDS ---------

def type(Word) trigger(wordInstantiation)
	public enum $name+firstUpperCase {
		$words+FirstUpperCase...[, ]
	}
end

def type(Word) type(multiple) trigger(getter)
	public $name+reference$[] $name+firstLowerCase() {
		return Enumerate.cardinal(get(Grip.multiple("$name+firstLowerCase")).asInteger(), $name+firstUpperCase.values());
	}
end

def type(Word) !type(multiple) trigger(getter)
	public $name+reference $name+firstLowerCase() {
		return definition().get("$name+firstLowerCase").asEnumerate($name+reference.values());
	}
end

def type(Word) type(multiple) trigger(setter)
	public void $name+firstUpperCase($name+firstUpperCase~... values) {
		edit().set("$name", Enumerate.ordinal(values));
	}
end

def type(Word) !type(multiple) trigger(setter)
	public void $name+firstUpperCase($name+firstUpperCase value) {
		edit().set("$name", Enumerate.ordinal(value));
	}
end

-------- VARIABLES ---------

def type(variable) type(Date) trigger(getter)
	public magritte.primitives.Date $name+firstLowerCase() {
		return get("$name").asDate();
	}
end

def type(variable) type(Measure) trigger(getter)
	public double $name+firstLowerCase() {
		return get("$name").asDouble();
	}
end

def type(variable) type(definition) type(native) trigger(getter)
	public $name+reference $name+firstLowerCase() {
		return get("$name").asNativeOf(scope);
	}
end

def type(variable) type(native) trigger(getter)
	public $generatedlanguage.natives.$contract+reference $name+firstLowerCase() {
		return definition().get("$name").asNativeOf(node);
	}
end

def type(variable) type(file) trigger(getter)
	public Resource $name+firstLowerCase(Resource value) {
		return get("$name").asResource();
	}
end

def type(variable) type(definition) !type(word) trigger(getter)
	public $type+firstUpperCase $name+firstLowerCase() {
		return get("$name").as$type+firstUpperCase();
	}
end

def type(variable) type(reference) !type(word) trigger(getter)
	public Definition$[] $name+FirstLowercase~Definitions() {
		return definition().get(Grip.assignable("$name")).as(Definition.class);
	}

	public $type+reference $name+firstLowerCase() {
		return get(Grip.reference("$name")).as($type+reference.class);
	}
end

def type(variable) type(definition) !type(reference) type(multiple) !type(word) trigger(getter)
	public $type+reference$[] $name+firstLowerCase() {
		return get(Grip.multiple("$name")).as$type+reference();
	}
end

def type(variable) !type(reference) type(multiple) !type(word) trigger(getter)
	public $type+reference+primitiveType$[] $name+firstLowerCase() {
		return get(Grip.multiple("$name")).as$type+reference();
	}
end

def value(Integer) trigger(primitiveType)
	int
end

def value(Double) trigger(primitiveType)
	double
end

def type(variable) !type(reference) !type(word) trigger(getter)
	public $type+reference $name+firstLowerCase() {
		return definition().get("$name").as$type+reference();
	}
end

-------- SETTERS ---------

def type(variable) type(file) !type(multiple) !type(final) trigger(setter)
	public void $name+firstLowerCase(Resource value) {
		edit().set("value", value);
	}
end

def type(variable) type(Date) !type(final) trigger(setter)
	public void $name+firstLowerCase(magritte.primitives.Date value) {
		edit().set("$name", value);
	}
end

def type(variable) type(Measure) !type(final) trigger(setter)
	public void $name+firstLowerCase(double $name+firstLowerCase) {
		edit().set("$name", $name+firstLowerCase);
	}
end

def type(variable) !type(final) !type(native) type(multiple) trigger(setter)
	public void $name+firstLowerCase($type+reference+primitiveType~... $name+firstLowerCase) {
		edit().set("$name", $name+firstLowerCase);
	}
end

def type(variable) !type(native) !type(reference) !type(final) !type(multiple) trigger(setter)
	public void $name+firstLowerCase(java.lang.$type+firstUpperCase value) {
		edit().set("$name", value);
	}
end

def type(variable) !type(final) !type(native) !type(multiple) trigger(setter)
	public void $name+firstLowerCase($type+reference value) {
		edit().set("$name", value);
	}
end

--------------- COMPONENTS -------------------

def trigger(parent) slot(value)
	extends $value+reference
end

def type(nodeReference) type(Feature) trigger(component)
	public $qn+reference $name+firstLowerCase() {
		return definition().component($qn+reference.class);
	}
end

def type(nodeReference) type(single) type(intosingle) trigger(component)
	public $qn+reference $name+firstLowerCase() {
		return components($qn+reference.class)$[0];
	}
end

def type(nodeReference) type(final) trigger(component)
	public $qn+reference$[] $name+firstLowerCase+plural() {
		return components($qn+reference.class);
	}

	public $qn+reference $name+firstLowerCase(int index) {
		return $name+firstLowerCase+plural()$[index$];
	}
end

def type(nodeReference) !type(final) trigger(component)
	public $qn+reference$[] $name+firstLowerCase+plural() {
		return components($qn+reference.class);
	}

	public $qn+reference $name+firstLowerCase(int index) {
		return $name+firstLowerCase+plural()$[index$];
	}

	public void add($qn+reference name) {

	}
end

--------------- ROOT -------------------
##REMOVE
def type(nodeimpl) type(intention) !type(facetInstance) type(facet) trigger(node)
	public[$inner static] class $name+firstUpperCase $parent implements $project+lowercase.intentions.$name+firstUpperCase~Intention {
		public $project+lowercase.intentions.$name+firstUpperCase~Intention extension() {
			return extensions($project+lowercase.intentions.$name+firstUpperCase~Intention.class)$[0];
		}
		$variable+wordInstantiation...[$NL]
		$variable+getter...[$NL]
		$variable+setter...[$NL]
		$component...[$NL]

		$node...[$NL]
	}

end
##REMOVE
def type(nodeimpl) type(intention) !type(facet) type(facetInstance) trigger(node)
	public[$inner static] class $name+firstUpperCase $parent implements $project+lowercase.intentions.$name+firstUpperCase~Intention {
		public $project+lowercase.intentions.$name+firstUpperCase~Intention$[] extensions() {
			return extensions($project+lowercase.intentions.$name+firstUpperCase~Intention.class);
		}
		$variable+wordInstantiation...[$NL]
		$variable+getter...[$NL]
		$variable+setter...[$NL]
		$component...[$NL]

		$node...[$NL]
	}

end

def type(nodeimpl) trigger(node)
	public[$inner static] class $name+firstUpperCase $parent {
		[$aggregable
		public Definition$[$] aggregables() {
			return definition().aggregables();
		}]
		$variable+wordInstantiation...[$NL]
		$variable+getter...[$NL]
		$variable+setter...[$NL]
		$component...[$NL]

		$node...[$NL]
	}

end


def type(variable) trigger(wordInstantiation)
end

def type(variable) trigger(setter)
end

def type(variable) trigger(getter)
end

def trigger(component)
end