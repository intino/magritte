def type(Morph)
    package $package+lowercase;

    [import $import...[;$NL]]
    import magritte.types.*;
    import magritte.wraps.Morph;
    import magritte.wraps.Definition;
    $imports...[$NL]

    $node
end

-------- WORDS ---------

def type(Word) trigger(wordInstantiation)
    public static enum $name+firstUpperCase {
        $words+FirstUpperCase...[, ]
    }
end

def type(Word) type(List) trigger(getter)
    public $name+reference$[] get$name+firstUpperCase() {
        return Enumerate.cardinal((Integer) get("$name+firstLowerCase"), $name+firstUpperCase.values());
    }
end

def type(Word) !type(List) trigger(getter)
    public $name+reference get$name+firstUpperCase() {
        return Enumerate.cardinal((int) definition().get("$name+firstLowerCase"), $name+firstUpperCase.values());
    }
end

def type(Word) type(List) trigger(setter)
    public void set$name+firstUpperCase($name+firstUpperCase~... values) {
        set("$name", Enumerate.ordinal(values));
    }
end

def type(Word) !type(List) trigger(setter)
    public void set$name+firstUpperCase($name+firstUpperCase value) {
        set("$name", Enumerate.ordinal(value));
    }
end

-------- VARIABLES ---------

def type(variable) type(Date) trigger(getter)
    public Instant $name+firstLowerCase() {
        return instant(get("$name", long.class));
    }
end

def type(variable) type(Measure) trigger(getter)
    public double $name+firstLowerCase() {
        return get("$name");
    }
end

def type(variable) type(definition) type(native) trigger(getter)
    public $name+reference $name+firstLowerCase() {
        return nativeOf("$name");
    }
end

def type(variable) type(native) trigger(getter)
    public $name+reference $name+firstLowerCase() {
        return definition().nativeOf("$name");
    }
end

def type(variable) type(file) trigger(getter)
    public Resource $name+firstLowerCase() {
        return resource(get("value", int.class));
    }
end

def type(variable) type(definition) !type(word) trigger(getter)
    public $type+firstUpperCase $name+firstLowerCase() {
        return get("$name");
    }
end

def type(variableReference) !type(word) trigger(getter)
    public $type+reference $name+firstLowerCase() {
        return morph(get("$name", magritte.Node.class), $type+reference.class);
    }
end

def type(variable) !type(word) trigger(getter)
    public $type+reference $name+firstLowerCase() {
        return definition().get("$name");
    }
end

-------- SETTERS ---------

def type(variable) type(file) !type(list) !type(readonly) trigger(setter)
    public void set$name+firstUpperCase(Resource value) {
        set("value", value.id());
    }
end

def type(variable) type(Date) !type(readonly) trigger(setter)
    public void set$name+firstUpperCase(Instant value) {
        set("$name", value.timestamp());
    }
end

def type(variable) type(Measure) !type(readonly) trigger(setter)
    public void set$name+firstUpperCase(double $name+firstLowerCase) {
        set("$name", $name+firstLowerCase);
    }
end

def type(variable) !type(readonly) !type(native) type(List) trigger(setter)
    public void set$name+firstUpperCase($type+reference$[] $name+firstLowerCase) {
        set("$name", $name+firstLowerCase);
    }
end

def type(variable) !type(native) !type(reference) !type(readonly) !type(List) trigger(setter)
    public void set$name+firstUpperCase(java.lang.$type+firstUpperCase value) {
        set("$name", value);
    }
end

def type(variableReference) !type(readonly) !type(native) !type(List) trigger(setter)
    public void set$name+firstUpperCase($type+reference value) {
        set("$name", value.node());
    }
end

def type(variable) !type(readonly) !type(native) !type(List) trigger(setter)
    public void set$name+firstUpperCase($type+reference value) {
        set("$name", value);
    }
end

--------------- COMPONENTS -------------------

def trigger(parent) slot(value)
    extends $value+reference
end

def type(nodeReference) type(Feature) trigger(component)
    public $qn+reference $name+firstLowerCase() {
        return definition().feature($qn+reference.class);
    }
end

def type(nodeReference) !type(aggregated) type(single) trigger(component)
    public $qn+reference $name+firstLowerCase() {
        return components($qn+reference.class)$[0];
    }
end

def type(nodeReference) !type(aggregated) !type(single) trigger(component)
    public $qn+reference$[] $name+firstLowerCase+plural() {
        return components($qn+reference.class);
    }

    public $qn+reference $name+firstLowerCase(int index) {
        return $name+firstLowerCase+plural()$[index$];
    }
end

def type(nodeReference) type(aggregated) trigger(component)
    public $qn+reference$[] $name+firstLowerCase() {
        return holdings($qn+reference.class);
    }

    public $qn+reference add$name+firstUpperCase(magritte.wraps.Definition definition) {
        return addNode(definition.node()).with($qn+reference.class);
    }
end

def type(nodeimpl) type(intention) !type(facetInstance) type(facet) trigger(node)
    public[$inner static] class $name+firstUpperCase $parent implements $project+lowercase.intentions.$name+firstUpperCase~Intention {
        public $project+lowercase.intentions.$name+firstUpperCase~Intention extension() {
            return extensions($project+lowercase.intentions.$name+firstUpperCase~Intention.class)$[0];
        }
        $variable+wordInstantiation...[$NL]
        $variable+getter...[$NL]
        $variable+setter...[$NL]
        $component...[$NL]

        $node...[$NL]
    }

end

def type(nodeimpl) type(intention) !type(facet) type(facetInstance) trigger(node)
    public[$inner static] class $name+firstUpperCase $parent implements $project+lowercase.intentions.$name+firstUpperCase~Intention {
        public $project+lowercase.intentions.$name+firstUpperCase~Intention$[] extensions() {
            return extensions($project+lowercase.intentions.$name+firstUpperCase~Intention.class);
        }
        $variable+wordInstantiation...[$NL]
        $variable+getter...[$NL]
        $variable+setter...[$NL]
        $component...[$NL]

        $node...[$NL]
    }

end

def type(nodeimpl) trigger(node)
    public[$inner static] class $name+firstUpperCase $parent {
        [$aggregable
        public Definition$[$] aggregables() {
            return definition().aggregables();
        }]
        $variable+wordInstantiation...[$NL]
        $variable+getter...[$NL]
        $variable+setter...[$NL]
        $component...[$NL]

        $node...[$NL]
    }

end


def type(variable) trigger(wordInstantiation)
end

def type(variable) trigger(setter)
end

def type(variable) trigger(getter)
end

def trigger(component)
end