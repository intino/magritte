def type(model)
    package magritte.store;

    $importFacet...[$NL]
    import static magritte.Tag.*;
    import static magritte.editors.NodeEditor.Cardinality.*;
    $importMetric...[$NL]

    public class $name extends magritte.editors.Box.$terminal {
        public static final magritte.editors.Box box = new $name();

        @Override
        public magritte.editors.Box$[] dependencies() {
            return new magritte.editors.Box$[]{[magritte.store.$language+firstUpperCase.box]};
        }

        @Override
        public void doWrite() {
            $node...[$NL]
        }
    }
end

def trigger(terminal) value(true)
	Terminal
end
def trigger(terminal) value(false)
	Unit
end

def type(Node) trigger(node)
    edit($key)[.name("$name$address")][$nodeType...[]][$facet...[]][$annotation...[]][.$parent][$variable...[]][$include...[]];
end

def trigger(nodeType)
    .type("$value")
end

def type(facetapply) trigger(facet)
    .type("$name"[, $apply])
end

def trigger(parent)
    parent("$value")
end

def type(composed) trigger(include)
    .has($inbox($value)[, $tag+firstUpperCase...[, ]])
end

def type(feature) trigger(include)
    .features($inbox($value))
end

def trigger(inbox) value(true)
    $$
end
def trigger(inbox) value(false)
	node
end

def type(variable) type(target) type(measure) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $measureValue.value($variableValue))
end

def type(variable) type(target) type(string) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $multiple($variableValue+quoted...[, ]))
end
def type(variable) type(target) type(word) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $multiple($variableValue+quoted...[, ]))
end

def type(variable) type(target) type(reference) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $multiple(node($variableValue...[, ])))
end

def type(variable) type(target) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $multiple($variableValue...[, ]))
end

def type(variable) type(reference) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple(node($variableValue...[, ])))
end

def type(variable) type(native) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple((Class<magritte.NativeContainer>) $variableValue))
end

def type(Variable) type(file) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple(resource($variableValue+quoted...[, ])))
end

def type(variable) type(word) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple($variableValue+quoted...[, ]))
end

def type(Variable) type(string) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple($variableValue+quoted...[, ]))
end

def type(Variable) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple($variableValue+quoted...[, ]))
end

def type(Variable) trigger(variable)
end

def type(Annotation) trigger(annotation)
    .set($value+CamelCase...[, ])
end

def trigger(variableValue) slot(date)
    magritte.types.TimeInstant.value($value+date)
end

def trigger(variableValue) slot(coordinate)
    magritte.types.Coordinate.of($value)
end

def trigger(quoted)
    "$value"
end

def trigger(multiple) value(true)
    multiple
end

def trigger(multiple) value(false)
end