def type(model)
    package magritte.boxes;

    import static magritte.editors.BoxCore.*;
    import static magritte.Tag.*;
    $importMetric...[$NL]

    public class $name extends magritte.editors.Box.$terminal {
        public static final magritte.editors.Box box = new $name();

        @Override
        public magritte.editors.Box$[] dependencies() {
            return new magritte.editors.Box$[]{[magritte.dsl.$language+firstUpperCase.box]};
        }

        @Override
        public void doWrite() {
            $node...[$NL]
        }

        $intention...[$NL$NL]
    }
end

def trigger(terminal) value(true)
	Terminal
end
def trigger(terminal) value(false)
	Unit
end

def type(Node) trigger(node)
    [def("$name$plate")][def($key)][.name()][$nodeType...[]][$facet...[]][$annotation...[]][.$parent][$variable...[]][$include...[]];
end

def type(intention) trigger(intention)
    public static class $path [extends $generatedLanguage+lowerCase.$container] implements $parentIntention+lowercase.natives.$interface+FirstUppercase {
        @Override
        $signature {
            $body
        }
    }
end

def trigger(nodeType)
    .type("$value")
end

def type(facetapply) trigger(facet)
    .type("$name"[, $apply])
end

def trigger(parent)
    parent("$value")
end

def type(include) type(key) type(terminal) trigger(include)
    .has($$($value))
end

def type(include) !type(key) type(terminal) trigger(include)
    .has($value)
end

def type(include) type(required) !type(single) trigger(include)
    .requires($value).holds($value)
end

def type(include) type(single) !type(required) trigger(include)
    .allows($value)
end

def type(include) type(required) trigger(include)
    .requires($value)
end

def type(include) !type(single) !type(required) trigger(include)
    .holds($value)
end

def type(variable) type(target) type(measure) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $measureValue.value($variableValue))
end

def type(variable) type(target) type(string) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $multiple($variableValue+quoted...[, ]))
end
def type(variable) type(target) type(word) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $multiple($variableValue...[, ]))
end

def type(variable) type(target) type(reference) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $multiple(ref($variableValue+quoted...[, ])))
end

def type(variable) type(target) slot(variableValue) trigger(variable)
    .set("!$node:$name<$target", $multiple($variableValue+quoted...[, ]))
end

def type(variable) type(reference) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple(ref($variableValue+quoted...[, ])))
end

def type(variable) type(file) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple(resource(($variableValue+file...[, ]))))
end

def trigger(file)
	in("$value")
end

def type(variable) type(native) slot(variableValue) trigger(variable)
    .set("$terminal$name", $variableValue+native)
end

def trigger(native) value(null)
    nullBehavior()
end

def type(variable) type(word) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple(new String$[]{$variableValue+quoted...[, ]}))
end

def type(Variable) type(string) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple($variableValue+quoted...[, ]))
end

def type(Variable) type(integer) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple($variableValue...[, ]))
end

def type(Variable) type(double) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple($variableValue...[, ]))
end

def type(Variable) type(boolean) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple($variableValue...[, ]))
end

def type(Variable) slot(variableValue) trigger(variable)
    .set("$terminal$name", $multiple($variableValue+quoted...[, ]))
end

def type(Variable) trigger(variable)
end

def type(Annotation) trigger(annotation)
    .set($value+CamelCase...[, ])
end

def trigger(variableValue) slot(date)
    date($value+date)
end

def trigger(quoted)
    "$value"
end

def trigger(multiple) value(true)
    multiple
end

def trigger(multiple) value(false)
end