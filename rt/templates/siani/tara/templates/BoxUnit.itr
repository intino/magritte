def type(model)
	package magritte.ontology;

	import java.text.SimpleDateFormat;
	import java.text.ParseException;
	import java.util.*;

	import static magritte.Tag.*;
	import magritte.primitives.Date;

	[import $generatedLanguage+lowercase.*;]

	$importMetric...[$NL]

	public class $name extends magritte.schema.Box.$terminal {
		public static final magritte.schema.Box box = new $name();

		@Override
		public magritte.schema.Box$[] dependencies() {
			return new magritte.schema.Box$[]{[magritte.dsl.$language+firstUpperCase~Dsl.box]};
		}

		@Override
		public void write() {
			$node...[$NL]
		}

		private Date asDate(String date){
			try {
				return Date.date(new SimpleDateFormat("dd/MM/yyyy hh:mm:ss").parse(date).getTime());
			} catch (ParseException e) {
				return null;
			}
		}

		$intention...[$NL$NL]
	}
end

def trigger(terminal) value(true)
	Scene
end

def trigger(terminal) value(false)
	Ontology
end

def type(nodecontainer) trigger(node)
	[def("$name$plate")][def($key)][.name()][$nodeType...[]][$facet...[]][$annotation...[]][.$parent][$include...[]][$variable...[]];
end

def type(intention) trigger(intention)
	public static class $path [extends $container] implements $parentIntention+lowercase.natives.$interface+FirstUppercase {
		@Override
		$signature {
			$body
		}
	}
end

def trigger(nodeType)
	.type("$value")
end

def type(facetapply) trigger(facet)
	.type("$name"[, $apply])
end

def trigger(parent)
	parent("$value")
end

def type(include) type(key) type(terminal) trigger(include)
	.has($$($value))
end

def type(include) !type(key) type(terminal) trigger(include)
	.has($value+key)
end

def type(include) type(required) !type(single) trigger(include)
	.requires($value+key).holds($value+key)
end

def type(include) type(single) !type(required) trigger(include)
	.allows($value+key)
end

def type(include) type(required) trigger(include)
	.requires($value+key)
end

def type(include) !type(single) !type(required) trigger(include)
	.holds($value+key)
end

---------------------- NODE SETTERS ----------------------
def type(variable) type(reference) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue+ref...[, ]))
end

def trigger(ref)
	ref("$variableValue")
end

def type(variable) type(file) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue+file...[, ]))
end

def trigger(file)
	resource(in("$value"))
end

def type(variable) type(native) slot(variableValue) trigger(variable)
	.let("$terminal$name", $variableValue+native)
end


def trigger(native) !value(null)
	new $value()
end

def type(variable) type(word) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue+quoted...[, ]))
end

def type(Variable) type(string) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue+quoted...[, ]))
end

def type(Variable) type(integer) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue...[, ]))
end

def type(Variable) type(double) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue...[, ]))
end

def type(Variable) type(date) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue+date...[, ]))
end

def trigger(date)
	asDate("$value")
end

def type(Variable) type(boolean) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue...[, ]))
end

def type(Variable) slot(variableValue) trigger(variable)
	.set("$terminal$name", $multiple($variableValue+quoted...[, ]))
end

def type(Variable) trigger(variable)
end

def type(Annotation) trigger(annotation)
	.set($value+CamelCase+AnnotationFormat...[, ])
end

def value(Main) trigger(AnnotationFormat)
	Root
end

def value(Terminal_instance) trigger(AnnotationFormat)
	Case
end

def trigger(quoted)
	"$value"
end

def trigger(multiple) value(true)
	multiple
end

def trigger(multiple) value(false)
end