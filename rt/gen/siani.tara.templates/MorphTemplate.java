package siani.tara.templates;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class MorphTemplate extends Template {

	protected MorphTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new MorphTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add(condition("type", "Morph")).add(literal("package ")).add(mark("package", "lowercase")).add(literal(";\n\n")).add(expression().add(literal("import ")).add(mark("import").multiple(";\n"))).add(literal("\\nimport magritte.types.*;\nimport magritte.wraps.Morph;\nimport magritte.wraps.Type;\n")).add(mark("imports").multiple("\n")).add(literal("\n\n")).add(mark("node")),
			rule().add(condition("type", "Word"), condition("trigger", "wordInstantiation")).add(literal("public static enum ")).add(mark("name", "firstUpperCase")).add(literal(" {")).add(mark("words", "FirstUpperCase").multiple(", ")).add(literal("}\n\n")),
			rule().add(condition("type", "Word"), condition("type", "List"), condition("trigger", "getter")).add(literal("public ")).add(mark("name", "reference")).add(literal("[] get")).add(mark("name", "firstUpperCase")).add(literal("() {\n    return Enumerate.cardinal((Integer) get(\"")).add(mark("name", "firstLowerCase")).add(literal("\"), ")).add(mark("name", "firstUpperCase")).add(literal(".values());\n}\n")),
			rule().add(condition("type", "Word"), condition("type", "List"), condition("trigger", "getter")).add(literal("public ")).add(mark("name", "reference")).add(literal(" get")).add(mark("name", "firstUpperCase")).add(literal("() {\n    return Enumerate.cardinal((int) definition().get(\"")).add(mark("name", "firstLowerCase")).add(literal("\"), ")).add(mark("name", "firstUpperCase")).add(literal(".values());\n}\n")),
			rule().add(condition("type", "Word"), condition("type", "List"), condition("trigger", "setter")).add(literal("public void set")).add(mark("name", "firstUpperCase")).add(literal("(")).add(mark("name", "firstUpperCase")).add(literal("... values) {\n    set(\"")).add(mark("name")).add(literal("\", Enumerate.ordinal(values));\n}\n")),
			rule().add(condition("type", "Word"), condition("type", "List"), condition("trigger", "setter")).add(literal("public void set")).add(mark("name", "firstUpperCase")).add(literal("(")).add(mark("name", "firstUpperCase")).add(literal(" value) {\n    set(\"")).add(mark("name")).add(literal("\", Enumerate.ordinal(value));\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "Date"), condition("type", "Word"), condition("trigger", "getter")).add(literal("public TimeInstant ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return TimeInstant.value((Long) get(\"")).add(mark("name")).add(literal("\"));\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "Measure"), condition("type", "Word"), condition("trigger", "getter")).add(literal("public double ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return get(\"")).add(mark("name")).add(literal("\");\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "Native"), condition("type", "Word"), condition("trigger", "getter")).add(literal("public ")).add(mark("name", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return Type.natives(")).add(mark("name", "reference")).add(literal(".class)[0];\n}\n\n")),
			rule().add(condition("type", "Variable"), condition("type", "file"), condition("type", "Word"), condition("trigger", "getter")).add(literal("public Resource ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return resource(get(\"value\", int.class));\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "Word"), condition("trigger", "getter")).add(literal("public ")).add(mark("type", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return get(\"")).add(mark("name")).add(literal("\", ")).add(mark("type", "reference")).add(literal(".class);\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "file"), condition("type", "list"), condition("type", "readonly"), condition("type", "Word"), condition("trigger", "setter")).add(literal("public void set")).add(mark("name", "firstUpperCase")).add(literal("(Resource value) {\n    set(\"value\", value.id());\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "Date"), condition("type", "readonly"), condition("type", "Word"), condition("trigger", "setter")).add(literal("public void set")).add(mark("name", "firstUpperCase")).add(literal("(TimeInstant value) {\n    set(\"")).add(mark("name")).add(literal("\", value);\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "Measure"), condition("type", "readonly"), condition("type", "Word"), condition("trigger", "setter")).add(literal("public void set")).add(mark("name", "firstUpperCase")).add(literal("(double ")).add(mark("name", "firstLowerCase")).add(literal(") {\n    set(\"")).add(mark("name")).add(literal("\", ")).add(mark("name", "firstLowerCase")).add(literal(");\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "readonly"), condition("type", "Native"), condition("type", "Word"), condition("type", "List"), condition("trigger", "setter")).add(literal("public void set")).add(mark("name", "firstUpperCase")).add(literal("(")).add(mark("type", "reference")).add(literal("[] ")).add(mark("name", "firstLowerCase")).add(literal(") {\n    set(\"")).add(mark("name")).add(literal("\", ")).add(mark("name", "firstLowerCase")).add(literal(");\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "Native"), condition("type", "reference"), condition("type", "readonly"), condition("type", "Word"), condition("type", "List"), condition("trigger", "setter")).add(literal("public void set")).add(mark("name", "firstUpperCase")).add(literal("(java.lang.")).add(mark("type", "firstUpperCase")).add(literal(" value) {\n    set(\"")).add(mark("name")).add(literal("\", value);\n}\n")),
			rule().add(condition("type", "Variable"), condition("type", "readonly"), condition("type", "Word"), condition("type", "Native"), condition("type", "List"), condition("trigger", "setter")).add(literal("public void set")).add(mark("name", "firstUpperCase")).add(literal("(")).add(mark("type", "reference")).add(literal(" value) {\n    set(\"")).add(mark("name")).add(literal("\", value);\n}\n")),
			rule().add(condition("trigger", "parent"), condition("slot", "value")).add(literal("extends ")).add(mark("value", "reference")),
			rule().add(condition("type", "nodeReference"), condition("type", "Feature"), condition("trigger", "component")).add(literal("public ")).add(mark("name", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return definition().feature(")).add(mark("name", "reference")).add(literal(".class);\n}\n")),
			rule().add(condition("type", "nodeReference"), condition("type", "Feature"), condition("type", "aggregated"), condition("type", "single"), condition("trigger", "component")).add(literal("public ")).add(mark("name", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return components(")).add(mark("name", "reference")).add(literal(".class)[0];\n}\n")),
			rule().add(condition("type", "nodeReference"), condition("type", "Feature"), condition("type", "aggregated"), condition("type", "single"), condition("trigger", "component")).add(literal("public ")).add(mark("name", "reference")).add(literal("[] ")).add(mark("name", "firstLowerCase", "plural")).add(literal("() {\n    return components(")).add(mark("name", "reference")).add(literal(".class);\n}\n\npublic ")).add(mark("name", "reference")).add(literal(" ")).add(mark("name", "firstLowerCase")).add(literal("(int index) {\n    return ")).add(mark("name", "firstLowerCase", "plural")).add(literal("()[index];\n}\n")),
			rule().add(condition("type", "nodeReference"), condition("type", "Feature"), condition("type", "aggregated"), condition("trigger", "component")).add(literal("public ")).add(mark("name", "firstUpperCase")).add(literal("[] ")).add(mark("name", "firstLowerCase")).add(literal("() {\n    return holdings(")).add(mark("name", "firstUpperCase")).add(literal(".class);\n}\n\npublic ")).add(mark("name", "firstUpperCase")).add(literal(" add")).add(mark("name", "firstUpperCase")).add(literal("(magritte.wrappers.Definition definition) {\n    return addNode(definition.node()).with(")).add(mark("name", "firstUpperCase")).add(literal(".class);\n}\n")),
			rule().add(condition("type", "nodeimpl"), condition("type", "intention"), condition("type", "facetInstance"), condition("type", "facet"), condition("trigger", "node")).add(literal("public")).add(expression().add(mark("inner")).add(literal(" static"))).add(literal(" class ")).add(mark("name", "firstUpperCase")).add(literal(" ")).add(mark("parent")).add(literal(" implements ")).add(mark("project", "lowercase")).add(literal(".intentions.")).add(mark("name", "firstUpperCase")).add(literal("Intention {\n\\n    public ")).add(mark("project", "lowercase")).add(literal(".intentions.")).add(mark("name", "firstUpperCase")).add(literal("Intention extension() {\n        return extensions(")).add(mark("project", "lowercase")).add(literal(".intentions.")).add(mark("name", "firstUpperCase")).add(literal("Intention.class)[0];\n    }\n\\n    ")).add(mark("variable", "wordInstantiation").multiple("\n")).add(literal("\\n\\n    ")).add(mark("variable", "getter").multiple("\n")).add(literal("\\n\\n    ")).add(mark("variable", "setter").multiple("\n")).add(literal("\\n\\n    ")).add(mark("component").multiple("\n")).add(literal("\\n\n    ")).add(mark("node").multiple("\n")).add(literal("\\n}\n")),
			rule().add(condition("type", "nodeimpl"), condition("type", "intention"), condition("type", "facet"), condition("type", "facetInstance"), condition("trigger", "node")).add(literal("public")).add(expression().add(mark("inner")).add(literal(" static"))).add(literal(" class ")).add(mark("name", "firstUpperCase")).add(literal(" ")).add(mark("parent")).add(literal(" implements ")).add(mark("project", "lowercase")).add(literal(".intentions.")).add(mark("name", "firstUpperCase")).add(literal("Intention {\n\\n    public ")).add(mark("project", "lowercase")).add(literal(".intentions.")).add(mark("name", "firstUpperCase")).add(literal("Intention[] extensions() {\n        return extensions(")).add(mark("project", "lowercase")).add(literal(".intentions.")).add(mark("name", "firstUpperCase")).add(literal("Intention.class);\n    }\n\\n    ")).add(mark("variable", "wordInstantiation").multiple("\n")).add(literal("\\n\\n    ")).add(mark("variable", "getter").multiple("\n")).add(literal("\\n\\n    ")).add(mark("variable", "setter").multiple("\n")).add(literal("\\n\\n    ")).add(mark("component").multiple("\n")).add(literal("\\n\n    ")).add(mark("node").multiple("\n")).add(literal("\\n}\n")),
			rule().add(condition("type", "nodeimpl"), condition("trigger", "node")).add(literal("public")).add(expression().add(mark("inner")).add(literal(" static"))).add(literal(" class ")).add(mark("name", "firstUpperCase")).add(literal(" ")).add(mark("parent")).add(literal(" {\n\\n    ")).add(expression().add(mark("aggregable")).add(literal("\n")).add(literal("    public Definition")).add(literal("[")).add(literal("]")).add(literal(" aggregables() {")).add(literal("\n")).add(literal("        return definition().aggregables();")).add(literal("\n")).add(literal("    }"))).add(literal("\n\\n    ")).add(mark("variable", "wordInstantiation").multiple("\n")).add(literal("\\n\\n    ")).add(mark("variable", "getter").multiple("\n")).add(literal("\\n\\n    ")).add(mark("variable", "setter").multiple("\n")).add(literal("\\n\\n    ")).add(mark("component").multiple("\n")).add(literal("\\n\n    ")).add(mark("node").multiple("\n")).add(literal("\\n}\n"))
		);
		return this;
	}
}