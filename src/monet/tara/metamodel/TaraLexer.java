/* The following code was generated by JFlex 1.4.3 on 11/12/13 13:12 */

package monet.tara.metamodel;

import com.intellij.lexer.FlexLexer;
import java.util.Stack;
import com.intellij.psi.tree.IElementType;
import monet.tara.metamodel.psi.TaraTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/12/13 13:12 from the specification file
 * <tt>/home/oroncal/workspace/idea/TaraPlugin/src/monet/tara/metamodel/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\42\1\3\1\1\2\0\1\5\16\42\4\0\1\2\1\4\1\31"+
    "\1\4\1\41\7\0\1\0\1\0\1\30\1\0\12\40\1\35\2\0"+
    "\1\32\2\0\1\33\32\41\1\0\1\0\1\0\1\0\1\41\1\0"+
    "\1\11\1\26\1\15\1\25\1\13\1\14\1\27\1\10\1\6\1\36"+
    "\1\41\1\23\1\22\1\17\1\16\1\20\1\41\1\12\1\7\1\21"+
    "\1\24\1\37\1\41\1\34\2\41\4\0\41\42\2\0\4\41\4\0"+
    "\1\41\2\0\1\42\7\0\1\41\4\0\1\41\5\0\27\41\1\0"+
    "\37\41\1\0\u01ca\41\4\0\14\41\16\0\5\41\7\0\1\41\1\0"+
    "\1\41\21\0\160\42\5\41\1\0\2\41\2\0\4\41\10\0\1\41"+
    "\1\0\3\41\1\0\1\41\1\0\24\41\1\0\123\41\1\0\213\41"+
    "\1\0\5\42\2\0\236\41\11\0\46\41\2\0\1\41\7\0\47\41"+
    "\11\0\55\42\1\0\1\42\1\0\2\42\1\0\2\42\1\0\1\42"+
    "\10\0\33\41\5\0\3\41\15\0\4\42\7\0\1\41\4\0\13\42"+
    "\5\0\53\41\25\42\12\40\4\0\2\41\1\42\143\41\1\0\1\41"+
    "\10\42\1\0\6\42\2\41\2\42\1\0\4\42\2\41\12\40\3\41"+
    "\2\0\1\41\17\0\1\42\1\41\1\42\36\41\33\42\2\0\131\41"+
    "\13\42\1\41\16\0\12\40\41\41\11\42\2\41\4\0\1\41\5\0"+
    "\26\41\4\42\1\41\11\42\1\41\3\42\1\41\5\42\22\0\31\41"+
    "\3\42\244\0\4\42\66\41\3\42\1\41\22\42\1\41\7\42\12\41"+
    "\2\42\2\0\12\40\1\0\7\41\1\0\7\41\1\0\3\42\1\0"+
    "\10\41\2\0\2\41\2\0\26\41\1\0\7\41\1\0\1\41\3\0"+
    "\4\41\2\0\1\42\1\41\7\42\2\0\2\42\2\0\3\42\1\41"+
    "\10\0\1\42\4\0\2\41\1\0\3\41\2\42\2\0\12\40\4\41"+
    "\7\0\1\41\5\0\3\42\1\0\6\41\4\0\2\41\2\0\26\41"+
    "\1\0\7\41\1\0\2\41\1\0\2\41\1\0\2\41\2\0\1\42"+
    "\1\0\5\42\4\0\2\42\2\0\3\42\3\0\1\42\7\0\4\41"+
    "\1\0\1\41\7\0\12\40\2\42\3\41\1\42\13\0\3\42\1\0"+
    "\11\41\1\0\3\41\1\0\26\41\1\0\7\41\1\0\2\41\1\0"+
    "\5\41\2\0\1\42\1\41\10\42\1\0\3\42\1\0\3\42\2\0"+
    "\1\41\17\0\2\41\2\42\2\0\12\40\1\0\1\41\17\0\3\42"+
    "\1\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41\1\0\2\41"+
    "\1\0\5\41\2\0\1\42\1\41\7\42\2\0\2\42\2\0\3\42"+
    "\10\0\2\42\4\0\2\41\1\0\3\41\2\42\2\0\12\40\1\0"+
    "\1\41\20\0\1\42\1\41\1\0\6\41\3\0\3\41\1\0\4\41"+
    "\3\0\2\41\1\0\1\41\1\0\2\41\3\0\2\41\3\0\3\41"+
    "\3\0\14\41\4\0\5\42\3\0\3\42\1\0\4\42\2\0\1\41"+
    "\6\0\1\42\16\0\12\40\11\0\1\41\7\0\3\42\1\0\10\41"+
    "\1\0\3\41\1\0\27\41\1\0\12\41\1\0\5\41\3\0\1\41"+
    "\7\42\1\0\3\42\1\0\4\42\7\0\2\42\1\0\2\41\6\0"+
    "\2\41\2\42\2\0\12\40\22\0\2\42\1\0\10\41\1\0\3\41"+
    "\1\0\27\41\1\0\12\41\1\0\5\41\2\0\1\42\1\41\7\42"+
    "\1\0\3\42\1\0\4\42\7\0\2\42\7\0\1\41\1\0\2\41"+
    "\2\42\2\0\12\40\1\0\2\41\17\0\2\42\1\0\10\41\1\0"+
    "\3\41\1\0\51\41\2\0\1\41\7\42\1\0\3\42\1\0\4\42"+
    "\1\41\10\0\1\42\10\0\2\41\2\42\2\0\12\40\12\0\6\41"+
    "\2\0\2\42\1\0\22\41\3\0\30\41\1\0\11\41\1\0\1\41"+
    "\2\0\7\41\3\0\1\42\4\0\6\42\1\0\1\42\1\0\10\42"+
    "\22\0\2\42\15\0\60\41\1\42\2\41\7\42\4\0\10\41\10\42"+
    "\1\0\12\40\47\0\2\41\1\0\1\41\2\0\2\41\1\0\1\41"+
    "\2\0\1\41\6\0\4\41\1\0\7\41\1\0\3\41\1\0\1\41"+
    "\1\0\1\41\2\0\2\41\1\0\4\41\1\42\2\41\6\42\1\0"+
    "\2\42\1\41\2\0\5\41\1\0\1\41\1\0\6\42\2\0\12\40"+
    "\2\0\2\41\42\0\1\41\27\0\2\42\6\0\12\40\13\0\1\42"+
    "\1\0\1\42\1\0\1\42\4\0\2\42\10\41\1\0\44\41\4\0"+
    "\24\42\1\0\2\42\5\41\13\42\1\0\44\42\11\0\1\42\71\0"+
    "\53\41\24\42\1\41\12\40\6\0\6\41\4\42\4\41\3\42\1\41"+
    "\3\42\2\41\7\42\3\41\4\42\15\41\14\42\1\41\1\42\12\40"+
    "\4\42\2\0\46\41\12\0\53\41\1\0\1\41\3\0\u0149\41\1\0"+
    "\4\41\2\0\7\41\1\0\1\41\1\0\4\41\2\0\51\41\1\0"+
    "\4\41\2\0\41\41\1\0\4\41\2\0\7\41\1\0\1\41\1\0"+
    "\4\41\2\0\17\41\1\0\71\41\1\0\4\41\2\0\103\41\2\0"+
    "\3\42\40\0\20\41\20\0\125\41\14\0\u026c\41\2\0\21\41\1\0"+
    "\32\41\5\0\113\41\3\0\3\41\17\0\15\41\1\0\4\41\3\42"+
    "\13\0\22\41\3\42\13\0\22\41\2\42\14\0\15\41\1\0\3\41"+
    "\1\0\2\42\14\0\64\41\40\42\3\0\1\41\3\0\2\41\1\42"+
    "\2\0\12\40\41\0\3\42\2\0\12\40\6\0\130\41\10\0\51\41"+
    "\1\42\1\41\5\0\106\41\12\0\35\41\3\0\14\42\4\0\14\42"+
    "\12\0\12\40\36\41\2\0\5\41\13\0\54\41\4\0\21\42\7\41"+
    "\2\42\6\0\12\40\46\0\27\41\5\42\4\0\65\41\12\42\1\0"+
    "\35\42\2\0\1\42\12\40\6\0\12\40\15\0\1\41\130\0\5\42"+
    "\57\41\21\42\7\41\4\0\12\40\21\0\11\42\14\0\3\42\36\41"+
    "\12\42\3\0\2\41\12\40\6\0\46\41\16\42\14\0\44\41\24\42"+
    "\10\0\12\40\3\0\3\41\12\40\44\41\122\0\3\42\1\0\25\42"+
    "\4\41\1\42\4\41\1\42\15\0\300\41\47\42\25\0\4\42\u0116\41"+
    "\2\0\6\41\2\0\46\41\2\0\6\41\2\0\10\41\1\0\1\41"+
    "\1\0\1\41\1\0\1\41\1\0\37\41\2\0\65\41\1\0\7\41"+
    "\1\0\1\41\3\0\3\41\1\0\7\41\3\0\4\41\2\0\6\41"+
    "\4\0\15\41\5\0\3\41\1\0\7\41\16\0\5\42\32\0\5\42"+
    "\20\0\2\41\23\0\1\41\13\0\5\42\5\0\6\42\1\0\1\41"+
    "\15\0\1\41\20\0\15\41\3\0\32\41\26\0\15\42\4\0\1\42"+
    "\3\0\14\42\21\0\1\41\4\0\1\41\2\0\12\41\1\0\1\41"+
    "\3\0\5\41\6\0\1\41\1\0\1\41\1\0\1\41\1\0\4\41"+
    "\1\0\13\41\2\0\4\41\5\0\5\41\4\0\1\41\21\0\51\41"+
    "\u0a77\0\57\41\1\0\57\41\1\0\205\41\6\0\4\41\3\42\16\0"+
    "\46\41\12\0\66\41\11\0\1\41\17\0\1\42\27\41\11\0\7\41"+
    "\1\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41"+
    "\1\0\7\41\1\0\7\41\1\0\40\42\57\0\1\41\u01d5\0\3\41"+
    "\31\0\11\41\6\42\1\0\5\41\2\0\5\41\4\0\126\41\2\0"+
    "\2\42\2\0\3\41\1\0\132\41\1\0\4\41\5\0\51\41\3\0"+
    "\136\41\21\0\33\41\65\0\20\41\u0200\0\u19b6\41\112\0\u51cc\41\64\0"+
    "\u048d\41\103\0\56\41\2\0\u010d\41\3\0\20\41\12\40\2\41\24\0"+
    "\57\41\1\42\14\0\2\42\1\0\31\41\10\0\120\41\2\42\45\0"+
    "\11\41\2\0\147\41\2\0\4\41\1\0\2\41\16\0\12\41\120\0"+
    "\10\41\1\42\3\41\1\42\4\41\1\42\27\41\5\42\20\0\1\41"+
    "\7\0\64\41\14\0\2\42\62\41\21\42\13\0\12\40\6\0\22\42"+
    "\6\41\3\0\1\41\4\0\12\40\34\41\10\42\2\0\27\41\15\42"+
    "\14\0\35\41\3\0\4\42\57\41\16\42\16\0\1\41\12\40\46\0"+
    "\51\41\16\42\11\0\3\41\1\42\10\41\2\42\2\0\12\40\6\0"+
    "\27\41\3\0\1\41\1\42\4\0\60\41\1\42\1\41\3\42\2\41"+
    "\2\42\5\41\2\42\1\41\1\42\1\41\30\0\3\41\43\0\6\41"+
    "\2\0\6\41\2\0\6\41\11\0\7\41\1\0\7\41\221\0\43\41"+
    "\10\42\1\0\2\42\2\0\12\40\6\0\u2ba4\41\14\0\27\41\4\0"+
    "\61\41\u2104\0\u012e\41\2\0\76\41\2\0\152\41\46\0\7\41\14\0"+
    "\5\41\5\0\1\41\1\42\12\41\1\0\15\41\1\0\5\41\1\0"+
    "\1\41\1\0\2\41\1\0\2\41\1\0\154\41\41\0\u016b\41\22\0"+
    "\100\41\2\0\66\41\50\0\15\41\3\0\20\42\20\0\7\42\14\0"+
    "\2\41\30\0\3\41\31\0\1\41\6\0\5\41\1\0\207\41\2\0"+
    "\1\42\4\0\1\41\13\0\12\40\7\0\32\41\4\0\1\41\1\0"+
    "\32\41\13\0\131\41\3\0\6\41\2\0\6\41\2\0\6\41\2\0"+
    "\3\41\3\0\2\41\3\0\2\41\22\0\3\42\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\11\5\1\1\1\6"+
    "\1\1\1\7\1\10\1\3\2\4\1\5\1\11\1\5"+
    "\1\12\7\5\1\0\1\13\5\0\1\7\1\2\1\14"+
    "\1\5\1\15\1\5\1\16\3\5\4\0\1\17\5\5"+
    "\4\0\2\5\1\20\2\5\1\0\1\21\2\0\1\22"+
    "\2\5\1\23\3\0\1\5\1\24\10\0\1\25\3\0"+
    "\1\26\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\43\0\43\0\106\0\151\0\214\0\257"+
    "\0\322\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7"+
    "\0\43\0\u01ea\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc"+
    "\0\u02bc\0\u02df\0\u02bc\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e"+
    "\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6"+
    "\0\u04c9\0\u04ec\0\u041a\0\u02bc\0\u050f\0\u02bc\0\u0532\0\u02bc"+
    "\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\u04c9"+
    "\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u07a8\0\u02bc\0\u07cb\0\u07ee\0\u0811\0\u041a"+
    "\0\u0834\0\u0857\0\u02bc\0\u087a\0\u089d\0\u02bc\0\u08c0\0\u08e3"+
    "\0\u0906\0\u0929\0\u02bc\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8"+
    "\0\u09fb\0\u0a1e\0\u0a41\0\u041a\0\u0a64\0\u0a87\0\u0aaa\0\u041a"+
    "\0\u041a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\7\14\1\17"+
    "\2\14\1\2\1\20\1\21\1\22\1\14\1\2\2\14"+
    "\1\23\1\14\1\2\2\0\1\24\42\0\1\24\1\25"+
    "\37\0\1\26\1\0\1\27\2\26\1\0\35\26\2\0"+
    "\1\24\3\0\1\30\1\31\7\30\1\32\5\30\1\33"+
    "\2\30\4\0\1\30\1\0\5\30\2\0\1\24\3\0"+
    "\13\30\1\34\6\30\4\0\1\30\1\0\5\30\2\0"+
    "\1\24\3\0\3\30\1\35\16\30\4\0\1\30\1\0"+
    "\5\30\2\0\1\24\3\0\20\30\1\36\1\30\4\0"+
    "\1\30\1\0\5\30\2\0\1\24\3\0\5\30\1\37"+
    "\14\30\4\0\1\30\1\0\5\30\2\0\1\24\3\0"+
    "\22\30\4\0\1\30\1\0\5\30\2\0\1\24\3\0"+
    "\1\40\21\30\4\0\1\30\1\0\5\30\2\0\1\24"+
    "\3\0\10\30\1\41\11\30\4\0\1\30\1\0\5\30"+
    "\2\0\1\24\3\0\10\30\1\42\11\30\4\0\1\30"+
    "\1\0\5\30\2\0\1\24\3\0\22\43\1\0\1\44"+
    "\2\0\1\43\1\0\5\43\2\0\1\24\6\0\1\45"+
    "\1\46\1\47\3\0\1\50\25\0\1\24\25\0\1\51"+
    "\7\0\1\52\3\0\1\53\1\24\43\0\1\25\37\0"+
    "\1\26\1\0\3\26\1\0\36\26\1\53\1\27\2\26"+
    "\1\0\35\26\6\0\22\30\4\0\1\30\1\0\5\30"+
    "\6\0\13\30\1\54\6\30\4\0\1\30\1\0\5\30"+
    "\6\0\4\30\1\55\15\30\4\0\1\30\1\0\5\30"+
    "\6\0\1\30\1\56\20\30\4\0\1\30\1\0\5\30"+
    "\6\0\1\30\1\57\20\30\4\0\1\30\1\0\5\30"+
    "\6\0\6\30\1\60\13\30\4\0\1\30\1\0\5\30"+
    "\6\0\11\30\1\61\10\30\4\0\1\30\1\0\5\30"+
    "\6\0\11\30\1\62\10\30\4\0\1\30\1\0\5\30"+
    "\6\0\16\30\1\63\3\30\4\0\1\30\1\0\5\30"+
    "\6\0\22\43\1\0\1\44\2\0\1\43\1\0\5\43"+
    "\60\0\1\64\43\0\1\65\60\0\1\66\17\0\1\67"+
    "\71\0\1\70\32\0\1\51\7\0\1\52\10\0\1\71"+
    "\21\30\4\0\1\30\1\0\5\30\6\0\13\30\1\72"+
    "\6\30\4\0\1\30\1\0\5\30\6\0\3\30\1\73"+
    "\16\30\4\0\1\30\1\0\5\30\6\0\7\30\1\74"+
    "\12\30\4\0\1\30\1\0\5\30\6\0\20\30\1\75"+
    "\1\30\4\0\1\30\1\0\5\30\21\0\1\76\37\0"+
    "\1\77\45\0\1\100\43\0\1\101\26\0\11\30\1\102"+
    "\10\30\4\0\1\30\1\0\5\30\6\0\4\30\1\103"+
    "\15\30\4\0\1\30\1\0\5\30\6\0\15\30\1\104"+
    "\4\30\4\0\1\30\1\0\5\30\6\0\5\30\1\105"+
    "\14\30\4\0\1\30\1\0\5\30\6\0\15\30\1\106"+
    "\4\30\4\0\1\30\1\0\5\30\6\0\1\107\55\0"+
    "\1\110\34\0\1\111\42\0\1\112\35\0\21\30\1\113"+
    "\4\0\1\30\1\0\5\30\6\0\3\30\1\114\16\30"+
    "\4\0\1\30\1\0\5\30\6\0\12\30\1\115\7\30"+
    "\4\0\1\30\1\0\5\30\6\0\5\30\1\116\14\30"+
    "\4\0\1\30\1\0\5\30\16\0\1\117\43\0\1\120"+
    "\34\0\1\121\37\0\7\30\1\122\12\30\4\0\1\30"+
    "\1\0\5\30\6\0\13\30\1\123\6\30\4\0\1\30"+
    "\1\0\5\30\17\0\1\124\32\0\1\125\61\0\1\126"+
    "\22\0\13\30\1\104\6\30\4\0\1\30\1\0\5\30"+
    "\35\0\1\127\13\0\1\130\57\0\1\131\55\0\1\132"+
    "\32\0\1\133\27\0\1\134\40\0\1\135\54\0\1\136"+
    "\56\0\1\137\16\0\1\140\40\0\1\141\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2765];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\41\1\1\0\1\11\5\0\1\1\1\11\10\1"+
    "\4\0\6\1\4\0\5\1\1\0\1\11\2\0\4\1"+
    "\3\0\2\1\10\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	static Stack<Integer> stack = new Stack<>();

	private int transformToSpaces(CharSequence chain){
		int value = 0;
		for(int i = 0; i < chain.length(); i++)
			if (chain.charAt(i) == ('\t')) value += 4;
			else value += 1;
		return value;
	}

	private IElementType cleanStack(){
		if (!stack.empty()) {
            stack.pop();
            if (!stack.empty() && isTextIndented(transformToSpaces(yytext())))
                yypushback(yylength());
            return TaraTypes.DEDENT;
        }
            return null;
    }

	private boolean isTextIndented(int textLength){
		if (!stack.empty())
			return textLength > stack.peek();
		return false;
	}

	private boolean isTextDedented(int textLength){
		if (!stack.empty())
    		return textLength < stack.peek();
		return false;
    }

	private boolean isTextSibling(int textLength){
		if (!stack.empty())
			return textLength == stack.peek();
		return false;
    }

	private IElementType calculateIndentationToken() {
		int textLength = transformToSpaces(yytext());
        if (stack.empty() || isTextIndented(textLength)){
            stack.push(textLength);
            return TaraTypes.INDENT;
        } else if (isTextDedented(textLength)) {
            stack.pop();
            if (isTextDedented(textLength))
                yypushback(yylength());
            return TaraTypes.DEDENT;
		} else if (isTextSibling(textLength)){
        	return null;
        } else {
			return null;
        }
	}


  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TaraLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	if(stack.size() > 0) {
		stack.pop();
		return;
	}


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return TaraTypes.IDENTIFIER;
          }
        case 24: break;
        case 16: 
          { return TaraTypes.MODIFIERS;
          }
        case 25: break;
        case 9: 
          { return TaraTypes.IS;
          }
        case 26: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 27: break;
        case 7: 
          { return TaraTypes.INT;
          }
        case 28: break;
        case 21: 
          { return TaraTypes.NAMEABLE;
          }
        case 29: break;
        case 11: 
          { return TaraTypes.STRING;
          }
        case 30: break;
        case 2: 
          { IElementType elementType; if((elementType = cleanStack()) != null) return elementType;
          }
        case 31: break;
        case 18: 
          { return TaraTypes.STRING_TYPE;
          }
        case 32: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 33: break;
        case 4: 
          { return TaraTypes.COMMENT;
          }
        case 34: break;
        case 23: 
          { return TaraTypes.ACTION;
          }
        case 35: break;
        case 20: 
          { return TaraTypes.CONCEPT;
          }
        case 36: break;
        case 13: 
          { return TaraTypes.HAS;
          }
        case 37: break;
        case 8: 
          { IElementType elementType; if((elementType = calculateIndentationToken()) != null) return elementType;
          }
        case 38: break;
        case 12: 
          { return TaraTypes.INT_TYPE;
          }
        case 39: break;
        case 15: 
          { return TaraTypes.DOUBLE;
          }
        case 40: break;
        case 22: 
          { return TaraTypes.EXTENSIBLE;
          }
        case 41: break;
        case 10: 
          { return TaraTypes.ID_TYPE;
          }
        case 42: break;
        case 14: 
          { return TaraTypes.REF;
          }
        case 43: break;
        case 6: 
          { return TaraTypes.ASSIGN;
          }
        case 44: break;
        case 19: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 45: break;
        case 17: 
          { return TaraTypes.AT_ROOT;
          }
        case 46: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
