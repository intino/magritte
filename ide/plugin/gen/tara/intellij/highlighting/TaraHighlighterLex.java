/* The following code was generated by JFlex 1.4.3 on 29/10/15 10:49 */

package tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.openapi.project.Project;
import tara.Language;
import tara.intellij.lang.TaraLanguage;
import tara.intellij.lang.psi.TaraTypes;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/10/15 10:49 from the specification file
 * <tt>/Users/oroncal/workspace/tara/ide/plugin/src/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EXPRESSION = 6;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION_MULTILINE = 8;
  public static final int MULTILINE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\60\1\65\1\62\2\0\1\63\16\60\4\0\1\65\1\61\1\52"+
    "\1\56\1\40\1\41\1\0\1\53\1\32\1\33\1\50\1\55\1\45"+
    "\1\54\1\42\1\44\12\64\1\46\1\51\1\0\1\47\1\65\2\0"+
    "\2\40\1\1\1\40\1\57\12\40\1\20\12\40\1\34\1\66\1\35"+
    "\1\0\1\40\1\0\1\14\1\12\1\4\1\16\1\5\1\31\1\26"+
    "\1\13\1\22\2\40\1\17\1\30\1\3\1\2\1\6\1\27\1\21"+
    "\1\10\1\7\1\11\1\23\1\24\1\15\1\25\1\40\1\36\1\0"+
    "\1\37\1\0\41\60\2\0\4\40\4\0\1\40\2\0\1\60\2\0"+
    "\1\41\4\0\1\40\1\0\1\43\2\0\1\40\5\0\27\40\1\0"+
    "\37\40\1\0\u01ca\40\4\0\14\40\16\0\5\40\7\0\1\40\1\0"+
    "\1\40\21\0\160\60\5\40\1\0\2\40\2\0\4\40\10\0\1\40"+
    "\1\0\3\40\1\0\1\40\1\0\24\40\1\0\123\40\1\0\213\40"+
    "\1\0\5\60\2\0\236\40\11\0\46\40\2\0\1\40\7\0\47\40"+
    "\7\0\1\40\1\0\55\60\1\0\1\60\1\0\2\60\1\0\2\60"+
    "\1\0\1\60\10\0\33\40\5\0\3\40\15\0\5\60\6\0\1\40"+
    "\4\0\13\60\5\0\53\40\25\60\12\64\4\0\2\40\1\60\143\40"+
    "\1\0\1\40\10\60\1\0\6\60\2\40\2\60\1\0\4\60\2\40"+
    "\12\64\3\40\2\0\1\40\17\0\1\60\1\40\1\60\36\40\33\60"+
    "\2\0\131\40\13\60\1\40\16\0\12\64\41\40\11\60\2\40\4\0"+
    "\1\40\5\0\26\40\4\60\1\40\11\60\1\40\3\60\1\40\5\60"+
    "\22\0\31\40\3\60\104\0\1\40\1\0\13\40\67\0\33\60\1\0"+
    "\4\60\66\40\3\60\1\40\22\60\1\40\7\60\12\40\2\60\2\0"+
    "\12\64\1\0\7\40\1\0\7\40\1\0\3\60\1\0\10\40\2\0"+
    "\2\40\2\0\26\40\1\0\7\40\1\0\1\40\3\0\4\40\2\0"+
    "\1\60\1\40\7\60\2\0\2\60\2\0\3\60\1\40\10\0\1\60"+
    "\4\0\2\40\1\0\3\40\2\60\2\0\12\64\4\40\7\0\1\40"+
    "\5\0\3\60\1\0\6\40\4\0\2\40\2\0\26\40\1\0\7\40"+
    "\1\0\2\40\1\0\2\40\1\0\2\40\2\0\1\60\1\0\5\60"+
    "\4\0\2\60\2\0\3\60\3\0\1\60\7\0\4\40\1\0\1\40"+
    "\7\0\12\64\2\60\3\40\1\60\13\0\3\60\1\0\11\40\1\0"+
    "\3\40\1\0\26\40\1\0\7\40\1\0\2\40\1\0\5\40\2\0"+
    "\1\60\1\40\10\60\1\0\3\60\1\0\3\60\2\0\1\40\17\0"+
    "\2\40\2\60\2\0\12\64\1\0\1\40\17\0\3\60\1\0\10\40"+
    "\2\0\2\40\2\0\26\40\1\0\7\40\1\0\2\40\1\0\5\40"+
    "\2\0\1\60\1\40\7\60\2\0\2\60\2\0\3\60\10\0\2\60"+
    "\4\0\2\40\1\0\3\40\2\60\2\0\12\64\1\0\1\40\20\0"+
    "\1\60\1\40\1\0\6\40\3\0\3\40\1\0\4\40\3\0\2\40"+
    "\1\0\1\40\1\0\2\40\3\0\2\40\3\0\3\40\3\0\14\40"+
    "\4\0\5\60\3\0\3\60\1\0\4\60\2\0\1\40\6\0\1\60"+
    "\16\0\12\64\11\0\1\40\7\0\3\60\1\0\10\40\1\0\3\40"+
    "\1\0\27\40\1\0\12\40\1\0\5\40\3\0\1\40\7\60\1\0"+
    "\3\60\1\0\4\60\7\0\2\60\1\0\2\40\6\0\2\40\2\60"+
    "\2\0\12\64\22\0\2\60\1\0\10\40\1\0\3\40\1\0\27\40"+
    "\1\0\12\40\1\0\5\40\2\0\1\60\1\40\7\60\1\0\3\60"+
    "\1\0\4\60\7\0\2\60\7\0\1\40\1\0\2\40\2\60\2\0"+
    "\12\64\1\0\2\40\17\0\2\60\1\0\10\40\1\0\3\40\1\0"+
    "\51\40\2\0\1\40\7\60\1\0\3\60\1\0\4\60\1\40\10\0"+
    "\1\60\10\0\2\40\2\60\2\0\12\64\12\0\6\40\2\0\2\60"+
    "\1\0\22\40\3\0\30\40\1\0\11\40\1\0\1\40\2\0\7\40"+
    "\3\0\1\60\4\0\6\60\1\0\1\60\1\0\10\60\22\0\2\60"+
    "\15\0\60\40\1\60\2\40\7\60\4\0\10\40\10\60\1\0\12\64"+
    "\47\0\2\40\1\0\1\40\2\0\2\40\1\0\1\40\2\0\1\40"+
    "\6\0\4\40\1\0\7\40\1\0\3\40\1\0\1\40\1\0\1\40"+
    "\2\0\2\40\1\0\4\40\1\60\2\40\6\60\1\0\2\60\1\40"+
    "\2\0\5\40\1\0\1\40\1\0\6\60\2\0\12\64\2\0\4\40"+
    "\40\0\1\40\27\0\2\60\6\0\12\64\13\0\1\60\1\0\1\60"+
    "\1\0\1\60\4\0\2\60\10\40\1\0\44\40\4\0\24\60\1\0"+
    "\2\60\5\40\13\60\1\0\44\60\11\0\1\60\71\0\53\40\24\60"+
    "\1\40\12\64\6\0\6\40\4\60\4\40\3\60\1\40\3\60\2\40"+
    "\7\60\3\40\4\60\15\40\14\60\1\40\1\60\12\64\4\60\2\0"+
    "\46\40\1\0\1\40\5\0\1\40\2\0\53\40\1\0\u014d\40\1\0"+
    "\4\40\2\0\7\40\1\0\1\40\1\0\4\40\2\0\51\40\1\0"+
    "\4\40\2\0\41\40\1\0\4\40\2\0\7\40\1\0\1\40\1\0"+
    "\4\40\2\0\17\40\1\0\71\40\1\0\4\40\2\0\103\40\2\0"+
    "\3\60\40\0\20\40\20\0\125\40\14\0\u026c\40\2\0\21\40\1\0"+
    "\32\40\5\0\113\40\3\0\3\40\17\0\15\40\1\0\4\40\3\60"+
    "\13\0\22\40\3\60\13\0\22\40\2\60\14\0\15\40\1\0\3\40"+
    "\1\0\2\60\14\0\64\40\40\60\3\0\1\40\3\0\2\40\1\60"+
    "\2\0\12\64\41\0\3\60\2\0\12\64\6\0\130\40\10\0\51\40"+
    "\1\60\1\40\5\0\106\40\12\0\35\40\3\0\14\60\4\0\14\60"+
    "\12\0\12\64\36\40\2\0\5\40\13\0\54\40\4\0\21\60\7\40"+
    "\2\60\6\0\12\64\46\0\27\40\5\60\4\0\65\40\12\60\1\0"+
    "\35\60\2\0\1\60\12\64\6\0\12\64\15\0\1\40\130\0\5\60"+
    "\57\40\21\60\7\40\4\0\12\64\21\0\11\60\14\0\3\60\36\40"+
    "\15\60\2\40\12\64\54\40\16\60\14\0\44\40\24\60\10\0\12\64"+
    "\3\0\3\40\12\64\44\40\122\0\3\60\1\0\25\60\4\40\1\60"+
    "\4\40\3\60\2\40\11\0\300\40\47\60\25\0\4\60\u0116\40\2\0"+
    "\6\40\2\0\46\40\2\0\6\40\2\0\10\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\37\40\2\0\65\40\1\0\7\40\1\0"+
    "\1\40\3\0\3\40\1\0\7\40\3\0\4\40\2\0\6\40\4\0"+
    "\15\40\5\0\3\40\1\0\7\40\16\0\5\60\32\0\5\60\20\0"+
    "\2\40\23\0\1\40\13\0\5\60\5\0\6\60\1\0\1\40\15\0"+
    "\1\40\20\0\15\40\3\0\14\40\1\40\16\40\25\0\15\60\4\0"+
    "\1\60\3\0\14\60\21\0\1\40\4\0\1\40\2\0\12\40\1\0"+
    "\1\40\3\0\5\40\6\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\4\40\1\0\13\40\2\0\4\40\5\0\5\40\4\0\1\40\21\0"+
    "\51\40\u0a77\0\57\40\1\0\57\40\1\0\205\40\6\0\4\40\3\60"+
    "\2\40\14\0\46\40\1\0\1\40\5\0\1\40\2\0\70\40\7\0"+
    "\1\40\17\0\1\60\27\40\11\0\7\40\1\0\7\40\1\0\7\40"+
    "\1\0\7\40\1\0\7\40\1\0\7\40\1\0\7\40\1\0\7\40"+
    "\1\0\40\60\57\0\1\40\u01d5\0\3\40\31\0\11\40\6\60\1\0"+
    "\5\40\2\0\5\40\4\0\126\40\2\0\2\60\2\0\3\40\1\0"+
    "\132\40\1\0\4\40\5\0\51\40\3\0\136\40\21\0\33\40\65\0"+
    "\20\40\u0200\0\u19b6\40\112\0\u51cd\40\63\0\u048d\40\103\0\56\40\2\0"+
    "\u010d\40\3\0\20\40\12\64\2\40\24\0\57\40\1\60\4\0\12\60"+
    "\1\0\31\40\7\0\1\60\120\40\2\60\45\0\11\40\2\0\147\40"+
    "\2\0\4\40\1\0\4\40\14\0\13\40\115\0\12\40\1\60\3\40"+
    "\1\60\4\40\1\60\27\40\5\60\20\0\1\40\7\0\64\40\14\0"+
    "\2\60\62\40\21\60\13\0\12\64\6\0\22\60\6\40\3\0\1\40"+
    "\4\0\12\64\34\40\10\60\2\0\27\40\15\60\14\0\35\40\3\0"+
    "\4\60\57\40\16\60\16\0\1\40\12\64\46\0\51\40\16\60\11\0"+
    "\3\40\1\60\10\40\2\60\2\0\12\64\6\0\27\40\3\0\1\40"+
    "\1\60\4\0\60\40\1\60\1\40\3\60\2\40\2\60\5\40\2\60"+
    "\1\40\1\60\1\40\30\0\3\40\2\0\13\40\5\60\2\0\3\40"+
    "\2\60\12\0\6\40\2\0\6\40\2\0\6\40\11\0\7\40\1\0"+
    "\7\40\221\0\43\40\10\60\1\0\2\60\2\0\12\64\6\0\u2ba4\40"+
    "\14\0\27\40\4\0\61\40\u2104\0\u016e\40\2\0\152\40\46\0\7\40"+
    "\14\0\5\40\5\0\1\40\1\60\12\40\1\0\15\40\1\0\5\40"+
    "\1\0\1\40\1\0\2\40\1\0\2\40\1\0\154\40\41\0\u016b\40"+
    "\22\0\100\40\2\0\66\40\50\0\15\40\3\0\20\60\20\0\7\60"+
    "\14\0\2\40\30\0\3\40\31\0\1\40\6\0\5\40\1\0\207\40"+
    "\2\0\1\60\4\0\1\40\13\0\12\64\7\0\32\40\4\0\1\40"+
    "\1\0\32\40\13\0\131\40\3\0\6\40\2\0\6\40\2\0\6\40"+
    "\2\0\3\40\3\0\2\40\3\0\2\40\22\0\3\60\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\24\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\4\1\1\22\1\23\1\22\1\24"+
    "\1\25\2\24\1\26\3\24\1\2\1\27\20\2\1\30"+
    "\10\2\1\31\7\2\2\0\1\32\1\33\1\34\1\35"+
    "\2\0\1\25\1\26\15\2\1\36\1\2\1\37\1\2"+
    "\1\40\1\41\3\2\1\42\4\2\1\43\10\2\2\44"+
    "\2\0\1\45\1\46\12\2\1\47\1\50\6\2\1\51"+
    "\2\2\1\52\1\2\1\53\1\54\1\55\3\2\1\56"+
    "\1\0\1\44\1\0\2\2\1\57\2\2\1\60\3\2"+
    "\1\61\12\2\1\62\1\63\1\0\1\46\1\2\1\64"+
    "\5\2\1\65\1\66\2\2\1\67\1\2\1\70\3\2"+
    "\1\71\1\2\1\72\1\2\1\73\1\2\1\74\3\2"+
    "\1\75\1\76\1\77\1\2\1\100\1\101\1\2\1\102"+
    "\1\103\1\2\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113"+
    "\0\u0596\0\u0113\0\u05cd\0\u0113\0\u0113\0\u0604\0\u0113\0\u0113"+
    "\0\u0113\0\u0113\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\u0113\0\u0113\0\u07bc\0\u07f3\0\u0113\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u01ef\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u01ef\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u01ef\0\u0e2e\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u0604\0\u101d"+
    "\0\u1054\0\u06a9\0\u108b\0\u10c2\0\u07f3\0\u0861\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\u1356\0\u138d\0\u01ef\0\u13c4\0\u01ef\0\u13fb\0\u01ef"+
    "\0\u01ef\0\u1432\0\u1469\0\u14a0\0\u01ef\0\u14d7\0\u150e\0\u1545"+
    "\0\u157c\0\u01ef\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u0113\0\u0faf\0\u176b\0\u17a2\0\u0113\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\u19c8\0\u19ff\0\u01ef\0\u01ef\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u01ef\0\u1b80\0\u1bb7\0\u01ef\0\u1bee\0\u01ef"+
    "\0\u01ef\0\u01ef\0\u1c25\0\u1c5c\0\u1c93\0\u01ef\0\u1cca\0\u176b"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u01ef\0\u1da6\0\u1ddd\0\u01ef\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u01ef\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u01ef\0\u01ef\0\u20df"+
    "\0\u20df\0\u2116\0\u01ef\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229"+
    "\0\u01ef\0\u01ef\0\u2260\0\u2297\0\u01ef\0\u22ce\0\u01ef\0\u2305"+
    "\0\u233c\0\u2373\0\u01ef\0\u23aa\0\u01ef\0\u23e1\0\u01ef\0\u2418"+
    "\0\u01ef\0\u244f\0\u2486\0\u24bd\0\u01ef\0\u01ef\0\u01ef\0\u24f4"+
    "\0\u01ef\0\u01ef\0\u252b\0\u01ef\0\u01ef\0\u2562\0\u01ef";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\12\1\23\1\12"+
    "\1\24\1\25\1\26\1\27\1\30\3\12\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\12\1\41"+
    "\1\42\1\6\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\12\1\6\1\56"+
    "\1\57\1\6\1\60\1\61\1\6\52\62\1\63\13\62"+
    "\1\64\47\62\1\65\16\62\1\64\53\62\1\66\12\62"+
    "\1\67\54\62\1\70\11\62\1\71\70\0\1\12\1\72"+
    "\27\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\2\12\1\73\26\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\13\12\1\74\15\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\31\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\2\12\1\75\11\12\1\76"+
    "\12\12\1\77\1\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\20\12\1\100"+
    "\10\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\4\12\1\101\3\12\1\102"+
    "\7\12\1\103\1\104\7\12\6\0\1\12\2\0\2\41"+
    "\7\0\1\12\2\0\2\12\3\0\1\12\3\0\6\12"+
    "\1\105\1\12\1\106\10\12\1\107\7\12\6\0\1\12"+
    "\2\0\2\41\7\0\1\12\2\0\2\12\3\0\1\12"+
    "\3\0\7\12\1\110\21\12\6\0\1\12\2\0\2\41"+
    "\7\0\1\12\2\0\2\12\3\0\1\12\3\0\1\12"+
    "\1\111\27\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\13\12\1\112\15\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\2\12\1\113\4\12\1\114\1\12"+
    "\1\115\17\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\1\12\1\116\2\12"+
    "\1\117\2\12\1\120\3\12\1\121\15\12\6\0\1\12"+
    "\2\0\2\41\7\0\1\12\2\0\2\12\3\0\1\12"+
    "\3\0\20\12\1\122\10\12\6\0\1\12\2\0\2\41"+
    "\7\0\1\12\2\0\2\12\3\0\1\12\3\0\4\12"+
    "\1\123\24\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\2\12\1\124\4\12"+
    "\1\125\21\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\13\12\1\126\15\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\1\12\1\127\17\12\1\130\7\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\13\12\1\131\15\12\6\0\1\12"+
    "\2\0\2\41\7\0\1\12\2\0\2\12\3\0\1\12"+
    "\3\0\4\12\1\132\6\12\1\133\5\12\1\134\7\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\31\41\6\0\1\41\2\0\2\41"+
    "\7\0\1\41\2\0\2\41\3\0\1\41\46\0\1\135"+
    "\3\0\1\136\65\0\1\137\73\0\1\140\7\0\1\141"+
    "\66\0\1\60\3\0\31\142\6\0\1\142\16\0\1\142"+
    "\70\0\1\143\67\0\1\57\46\0\1\144\21\0\1\60"+
    "\67\0\1\61\4\0\1\62\3\0\1\62\11\0\1\62"+
    "\30\0\1\62\63\0\1\145\22\0\1\62\3\0\1\62"+
    "\11\0\1\62\31\0\1\62\67\0\1\146\15\0\1\62"+
    "\3\0\1\62\11\0\1\62\46\0\2\12\1\147\26\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\6\12\1\150\20\12\1\151\1\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\3\12\1\152\25\12\6\0\1\12"+
    "\2\0\2\41\7\0\1\12\2\0\2\12\3\0\1\12"+
    "\3\0\6\12\1\153\22\12\6\0\1\12\2\0\2\41"+
    "\7\0\1\12\2\0\2\12\3\0\1\12\3\0\5\12"+
    "\1\154\23\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\1\12\1\155\17\12"+
    "\1\156\7\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\20\12\1\157\10\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\5\12\1\160\23\12\6\0\1\12"+
    "\2\0\2\41\7\0\1\12\2\0\2\12\3\0\1\12"+
    "\3\0\10\12\1\161\20\12\6\0\1\12\2\0\2\41"+
    "\7\0\1\12\2\0\2\12\3\0\1\12\3\0\27\12"+
    "\1\162\1\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\20\12\1\163\10\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\11\12\1\164\17\12\6\0\1\12"+
    "\2\0\2\41\7\0\1\12\2\0\2\12\3\0\1\12"+
    "\3\0\2\12\1\165\26\12\6\0\1\12\2\0\2\41"+
    "\7\0\1\12\2\0\2\12\3\0\1\12\3\0\4\12"+
    "\1\166\24\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\1\12\1\167\27\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\7\12\1\170\21\12\6\0\1\12"+
    "\2\0\2\41\7\0\1\12\2\0\2\12\3\0\1\12"+
    "\3\0\24\12\1\171\4\12\6\0\1\12\2\0\2\41"+
    "\7\0\1\12\2\0\2\12\3\0\1\12\3\0\7\12"+
    "\1\172\21\12\6\0\1\12\2\0\2\41\7\0\1\12"+
    "\2\0\2\12\3\0\1\12\3\0\10\12\1\173\20\12"+
    "\6\0\1\12\2\0\2\41\7\0\1\12\2\0\2\12"+
    "\3\0\1\12\3\0\30\12\1\174\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\16\12\1\175\12\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\6\12\1\176"+
    "\22\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\1\12\1\177\27\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\26\12\1\200\2\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\6\12\1\201\22\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\20\12\1\202"+
    "\10\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\20\12\1\203\10\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\6\12\1\204\22\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\21\12\1\205\7\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\13\12\1\206"+
    "\15\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\3\12\1\207\12\12\1\210"+
    "\12\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\2\12\1\211\13\12\1\212"+
    "\12\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\2\0\62\135\1\213\1\214\3\135"+
    "\50\215\1\216\16\215\54\0\1\140\54\0\1\144\21\0"+
    "\1\141\2\0\62\143\1\217\4\143\64\0\1\220\3\0"+
    "\3\12\1\221\25\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\21\12\1\222"+
    "\7\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\4\12\1\223\24\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\16\12\1\224\12\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\4\12\1\225\24\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\6\12\1\226"+
    "\22\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\6\12\1\227\22\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\22\12\1\230\6\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\27\12\1\231\1\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\16\12\1\232"+
    "\12\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\4\12\1\233\24\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\4\12\1\234\24\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\21\12\1\235\7\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\25\12\1\236"+
    "\3\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\16\12\1\237\12\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\6\12\1\240\22\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\11\12\1\241\17\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\21\12\1\242"+
    "\7\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\4\12\1\243\24\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\6\12\1\244\22\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\10\12\1\245\20\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\1\12\1\246"+
    "\2\12\1\247\24\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\15\12\1\250"+
    "\13\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\12\12\1\251\16\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\2\12\1\252\26\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\6\12\1\253\22\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\4\12\1\254"+
    "\24\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\7\12\1\161\21\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\13\12\1\255\15\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\4\12\1\256\24\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\2\0\50\215\1\257"+
    "\62\215\1\260\3\215\1\257\16\215\57\0\1\261\4\0"+
    "\1\220\3\0\4\12\1\262\24\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\22\12\1\263\6\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\15\12\1\264"+
    "\13\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\1\12\1\265\27\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\2\12\1\266\26\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\24\12\1\267\4\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\1\12\1\270"+
    "\27\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\13\12\1\271\15\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\21\12\1\272\7\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\4\12\1\273\24\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\2\12\1\274"+
    "\26\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\16\12\1\275\12\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\4\12\1\276\24\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\20\12\1\277\10\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\16\12\1\300"+
    "\12\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\2\12\1\301\26\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\4\12\1\302\24\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\21\12\1\303\7\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\25\12\1\304"+
    "\3\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\10\12\1\305\20\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\6\12\1\306\22\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\16\12\1\307\12\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\2\0\44\215\1\213"+
    "\3\215\1\257\16\215\54\0\2\310\6\0\1\311\3\0"+
    "\5\12\1\312\23\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\4\12\1\313"+
    "\24\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\7\12\1\314\21\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\15\12\1\315\13\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\6\12\1\316\22\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\6\12\1\317"+
    "\22\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\2\12\1\320\26\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\25\12\1\321\3\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\4\12\1\322\24\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\13\12\1\323"+
    "\15\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\13\12\1\324\15\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\4\12\1\325\24\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\21\12\1\326\7\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\1\12\1\327"+
    "\27\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\20\12\1\330\10\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\4\12\1\331\24\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\20\12\1\332\10\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\66\0\1\311\3\0"+
    "\6\12\1\333\22\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\4\12\1\334"+
    "\24\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\7\12\1\335\21\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\24\12\1\336\4\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\4\12\1\337\24\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\13\12\1\340"+
    "\15\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\2\12\1\341\26\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\3\12\1\342\25\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\6\12\1\343\22\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\4\12\1\344"+
    "\24\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\20\12\1\345\10\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\4\12\1\346\24\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\15\12\1\347\13\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\5\12\1\350"+
    "\23\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\16\12\1\351\12\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\6\12\1\352\22\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\21\12\1\353\7\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\15\12\1\354"+
    "\13\12\6\0\1\12\2\0\2\41\7\0\1\12\2\0"+
    "\2\12\3\0\1\12\3\0\4\12\1\355\24\12\6\0"+
    "\1\12\2\0\2\41\7\0\1\12\2\0\2\12\3\0"+
    "\1\12\3\0\1\12\1\356\27\12\6\0\1\12\2\0"+
    "\2\41\7\0\1\12\2\0\2\12\3\0\1\12\3\0"+
    "\2\12\1\357\26\12\6\0\1\12\2\0\2\41\7\0"+
    "\1\12\2\0\2\12\3\0\1\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9625];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\24\1\6\11\1\1\1\11\1\1\2\11"+
    "\1\1\4\11\7\1\2\11\2\1\1\11\46\1\2\0"+
    "\4\1\2\0\46\1\1\11\1\1\2\0\1\11\37\1"+
    "\1\0\1\1\1\0\26\1\1\0\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (identifiers != null) return;
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
            String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		identifiers = new HashSet();
		Language heritage = TaraLanguage.getLanguage(dsl, project);
        if (heritage != null) Collections.addAll(identifiers, heritage.lexicon());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2278) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 69: break;
        case 44: 
          { return TaraTypes.WITH;
          }
        case 70: break;
        case 35: 
          { return TaraTypes.VAR;
          }
        case 71: break;
        case 12: 
          { return TaraTypes.COLON;
          }
        case 72: break;
        case 65: 
          { return TaraTypes.ABSTRACT;
          }
        case 73: break;
        case 68: 
          { return TaraTypes.DEFINITION;
          }
        case 74: break;
        case 21: 
          { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
          }
        case 75: break;
        case 54: 
          { return TaraTypes.SINGLE;
          }
        case 76: break;
        case 8: 
          { return TaraTypes.RIGHT_CURLY;
          }
        case 77: break;
        case 38: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 78: break;
        case 22: 
          { yybegin(YYINITIAL); return TaraTypes.EXPRESSION_END;
          }
        case 79: break;
        case 18: 
          { return TokenType.WHITE_SPACE;
          }
        case 80: break;
        case 4: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 81: break;
        case 17: 
          { yybegin(EXPRESSION); return TaraTypes.EXPRESSION_BEGIN;
          }
        case 82: break;
        case 13: 
          { return TaraTypes.EQUALS;
          }
        case 83: break;
        case 51: 
          { return TaraTypes.FINAL;
          }
        case 84: break;
        case 10: 
          { return TaraTypes.DOT;
          }
        case 85: break;
        case 53: 
          { return TaraTypes.STRING_TYPE;
          }
        case 86: break;
        case 47: 
          { return TaraTypes.NAMED;
          }
        case 87: break;
        case 64: 
          { return TaraTypes.TERMINAL;
          }
        case 88: break;
        case 36: 
          { return TaraTypes.COMMENT;
          }
        case 89: break;
        case 56: 
          { return TaraTypes.PROTEO;
          }
        case 90: break;
        case 52: 
          { return TaraTypes.NATIVE_TYPE;
          }
        case 91: break;
        case 41: 
          { return TaraTypes.DATE_TYPE;
          }
        case 92: break;
        case 48: 
          { return TaraTypes.EMPTY_REF;
          }
        case 93: break;
        case 3: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 94: break;
        case 66: 
          { return TaraTypes.REQUIRED;
          }
        case 95: break;
        case 59: 
          { return TaraTypes.PRIVATE;
          }
        case 96: break;
        case 27: 
          { yybegin(EXPRESSION_MULTILINE); return TaraTypes.EXPRESSION_BEGIN;
          }
        case 97: break;
        case 62: 
          { return TaraTypes.FEATURE;
          }
        case 98: break;
        case 28: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 99: break;
        case 15: 
          { return TaraTypes.DSL;
          }
        case 100: break;
        case 9: 
          { return TaraTypes.METRIC_VALUE_KEY;
          }
        case 101: break;
        case 29: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 102: break;
        case 58: 
          { return TaraTypes.EXTENDS;
          }
        case 103: break;
        case 26: 
          { yybegin(MULTILINE); return TaraTypes.QUOTE_BEGIN;
          }
        case 104: break;
        case 67: 
          { return TaraTypes.PROTOTYPE;
          }
        case 105: break;
        case 2: 
          { return evaluateIdentifier();
          }
        case 106: break;
        case 14: 
          { return TaraTypes.STAR;
          }
        case 107: break;
        case 55: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 108: break;
        case 7: 
          { return TaraTypes.LEFT_CURLY;
          }
        case 109: break;
        case 6: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 110: break;
        case 19: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 111: break;
        case 40: 
          { return TaraTypes.TIME_TYPE;
          }
        case 112: break;
        case 33: 
          { return TaraTypes.ANY;
          }
        case 113: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 114: break;
        case 42: 
          { return TaraTypes.INTO;
          }
        case 115: break;
        case 49: 
          { return TaraTypes.TUPLE_TYPE;
          }
        case 116: break;
        case 46: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 117: break;
        case 37: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 118: break;
        case 39: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 119: break;
        case 24: 
          { return TaraTypes.AS;
          }
        case 120: break;
        case 23: 
          { return TaraTypes.ON;
          }
        case 121: break;
        case 30: 
          { return TaraTypes.SUB;
          }
        case 122: break;
        case 63: 
          { return TaraTypes.ENCLOSED;
          }
        case 123: break;
        case 16: 
          { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
          }
        case 124: break;
        case 60: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 125: break;
        case 34: 
          { loadHeritage();  return TaraTypes.DSL;
          }
        case 126: break;
        case 25: 
          { return TaraTypes.IS;
          }
        case 127: break;
        case 31: 
          { return TaraTypes.USE;
          }
        case 128: break;
        case 61: 
          { return TaraTypes.INT_TYPE;
          }
        case 129: break;
        case 57: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 130: break;
        case 45: 
          { return TaraTypes.MAIN;
          }
        case 131: break;
        case 43: 
          { return TaraTypes.WORD_KEY;
          }
        case 132: break;
        case 20: 
          { return TaraTypes.CHARACTER;
          }
        case 133: break;
        case 50: 
          { return TaraTypes.FACET;
          }
        case 134: break;
        case 11: 
          { return TaraTypes.COMMA;
          }
        case 135: break;
        case 32: 
          { return TaraTypes.HAS;
          }
        case 136: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
