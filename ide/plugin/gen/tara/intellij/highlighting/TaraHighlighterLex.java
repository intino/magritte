/* The following code was generated by JFlex 1.4.3 on 27/04/16 9:42 */

package tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import tara.Language;
import tara.intellij.lang.LanguageManager;
import tara.intellij.lang.psi.TaraTypes;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/04/16 9:42 from the specification file
 * <tt>/Users/oroncal/workspace/tara/ide/plugin/src/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int EXPRESSION = 6;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION_MULTILINE = 8;
  public static final int MULTILINE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0, 1, 1, 2,  2,  3, 3, 4, 4
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
      "\11\60\1\65\1\62\2\0\1\63\16\60\4\0\1\65\1\61\1\46" +
          "\1\0\1\34\1\35\1\0\1\47\1\26\1\27\1\44\1\53\1\41" +
          "\1\50\1\36\1\40\12\64\1\42\1\45\1\51\1\43\1\52\1\0" +
          "\1\54\4\34\1\57\25\34\1\30\1\66\1\31\1\0\1\34\1\0" +
          "\1\5\1\3\1\22\1\12\1\6\1\25\1\55\1\4\1\15\1\56" +
          "\1\34\1\13\1\23\1\11\1\14\1\24\1\34\1\17\1\1\1\10" +
          "\1\2\1\16\1\20\1\7\1\21\1\34\1\32\1\0\1\33\1\0" +
          "\41\60\2\0\4\34\4\0\1\34\2\0\1\60\2\0\1\35\4\0" +
          "\1\34\1\0\1\37\2\0\1\34\5\0\27\34\1\0\37\34\1\0" +
          "\u01ca\34\4\0\14\34\16\0\5\34\7\0\1\34\1\0\1\34\21\0" +
          "\160\60\5\34\1\0\2\34\2\0\4\34\10\0\1\34\1\0\3\34" +
          "\1\0\1\34\1\0\24\34\1\0\123\34\1\0\213\34\1\0\5\60" +
          "\2\0\236\34\11\0\46\34\2\0\1\34\7\0\47\34\7\0\1\34" +
          "\1\0\55\60\1\0\1\60\1\0\2\60\1\0\2\60\1\0\1\60" +
          "\10\0\33\34\5\0\3\34\15\0\5\60\6\0\1\34\4\0\13\60" +
          "\5\0\53\34\25\60\12\64\4\0\2\34\1\60\143\34\1\0\1\34" +
          "\10\60\1\0\6\60\2\34\2\60\1\0\4\60\2\34\12\64\3\34" +
          "\2\0\1\34\17\0\1\60\1\34\1\60\36\34\33\60\2\0\131\34" +
          "\13\60\1\34\16\0\12\64\41\34\11\60\2\34\4\0\1\34\5\0" +
          "\26\34\4\60\1\34\11\60\1\34\3\60\1\34\5\60\22\0\31\34" +
          "\3\60\104\0\1\34\1\0\13\34\67\0\33\60\1\0\4\60\66\34" +
          "\3\60\1\34\22\60\1\34\7\60\12\34\2\60\2\0\12\64\1\0" +
          "\7\34\1\0\7\34\1\0\3\60\1\0\10\34\2\0\2\34\2\0" +
          "\26\34\1\0\7\34\1\0\1\34\3\0\4\34\2\0\1\60\1\34" +
          "\7\60\2\0\2\60\2\0\3\60\1\34\10\0\1\60\4\0\2\34" +
          "\1\0\3\34\2\60\2\0\12\64\4\34\7\0\1\34\5\0\3\60" +
          "\1\0\6\34\4\0\2\34\2\0\26\34\1\0\7\34\1\0\2\34" +
          "\1\0\2\34\1\0\2\34\2\0\1\60\1\0\5\60\4\0\2\60" +
          "\2\0\3\60\3\0\1\60\7\0\4\34\1\0\1\34\7\0\12\64" +
          "\2\60\3\34\1\60\13\0\3\60\1\0\11\34\1\0\3\34\1\0" +
          "\26\34\1\0\7\34\1\0\2\34\1\0\5\34\2\0\1\60\1\34" +
          "\10\60\1\0\3\60\1\0\3\60\2\0\1\34\17\0\2\34\2\60" +
          "\2\0\12\64\1\0\1\34\17\0\3\60\1\0\10\34\2\0\2\34" +
          "\2\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34\2\0\1\60" +
          "\1\34\7\60\2\0\2\60\2\0\3\60\10\0\2\60\4\0\2\34" +
          "\1\0\3\34\2\60\2\0\12\64\1\0\1\34\20\0\1\60\1\34" +
          "\1\0\6\34\3\0\3\34\1\0\4\34\3\0\2\34\1\0\1\34" +
          "\1\0\2\34\3\0\2\34\3\0\3\34\3\0\14\34\4\0\5\60" +
          "\3\0\3\60\1\0\4\60\2\0\1\34\6\0\1\60\16\0\12\64" +
          "\11\0\1\34\7\0\3\60\1\0\10\34\1\0\3\34\1\0\27\34" +
          "\1\0\12\34\1\0\5\34\3\0\1\34\7\60\1\0\3\60\1\0" +
          "\4\60\7\0\2\60\1\0\2\34\6\0\2\34\2\60\2\0\12\64" +
          "\22\0\2\60\1\0\10\34\1\0\3\34\1\0\27\34\1\0\12\34" +
          "\1\0\5\34\2\0\1\60\1\34\7\60\1\0\3\60\1\0\4\60" +
          "\7\0\2\60\7\0\1\34\1\0\2\34\2\60\2\0\12\64\1\0" +
          "\2\34\17\0\2\60\1\0\10\34\1\0\3\34\1\0\51\34\2\0" +
          "\1\34\7\60\1\0\3\60\1\0\4\60\1\34\10\0\1\60\10\0" +
          "\2\34\2\60\2\0\12\64\12\0\6\34\2\0\2\60\1\0\22\34" +
          "\3\0\30\34\1\0\11\34\1\0\1\34\2\0\7\34\3\0\1\60" +
          "\4\0\6\60\1\0\1\60\1\0\10\60\22\0\2\60\15\0\60\34" +
          "\1\60\2\34\7\60\4\0\10\34\10\60\1\0\12\64\47\0\2\34" +
          "\1\0\1\34\2\0\2\34\1\0\1\34\2\0\1\34\6\0\4\34" +
          "\1\0\7\34\1\0\3\34\1\0\1\34\1\0\1\34\2\0\2\34" +
          "\1\0\4\34\1\60\2\34\6\60\1\0\2\60\1\34\2\0\5\34" +
          "\1\0\1\34\1\0\6\60\2\0\12\64\2\0\4\34\40\0\1\34" +
          "\27\0\2\60\6\0\12\64\13\0\1\60\1\0\1\60\1\0\1\60" +
          "\4\0\2\60\10\34\1\0\44\34\4\0\24\60\1\0\2\60\5\34" +
          "\13\60\1\0\44\60\11\0\1\60\71\0\53\34\24\60\1\34\12\64" +
          "\6\0\6\34\4\60\4\34\3\60\1\34\3\60\2\34\7\60\3\34" +
          "\4\60\15\34\14\60\1\34\1\60\12\64\4\60\2\0\46\34\1\0" +
          "\1\34\5\0\1\34\2\0\53\34\1\0\u014d\34\1\0\4\34\2\0" +
          "\7\34\1\0\1\34\1\0\4\34\2\0\51\34\1\0\4\34\2\0" +
          "\41\34\1\0\4\34\2\0\7\34\1\0\1\34\1\0\4\34\2\0" +
          "\17\34\1\0\71\34\1\0\4\34\2\0\103\34\2\0\3\60\40\0" +
          "\20\34\20\0\125\34\14\0\u026c\34\2\0\21\34\1\0\32\34\5\0" +
          "\113\34\3\0\3\34\17\0\15\34\1\0\4\34\3\60\13\0\22\34" +
          "\3\60\13\0\22\34\2\60\14\0\15\34\1\0\3\34\1\0\2\60" +
          "\14\0\64\34\40\60\3\0\1\34\3\0\2\34\1\60\2\0\12\64" +
          "\41\0\3\60\2\0\12\64\6\0\130\34\10\0\51\34\1\60\1\34" +
          "\5\0\106\34\12\0\35\34\3\0\14\60\4\0\14\60\12\0\12\64" +
          "\36\34\2\0\5\34\13\0\54\34\4\0\21\60\7\34\2\60\6\0" +
          "\12\64\46\0\27\34\5\60\4\0\65\34\12\60\1\0\35\60\2\0" +
          "\1\60\12\64\6\0\12\64\15\0\1\34\130\0\5\60\57\34\21\60" +
          "\7\34\4\0\12\64\21\0\11\60\14\0\3\60\36\34\15\60\2\34" +
          "\12\64\54\34\16\60\14\0\44\34\24\60\10\0\12\64\3\0\3\34" +
          "\12\64\44\34\122\0\3\60\1\0\25\60\4\34\1\60\4\34\3\60" +
          "\2\34\11\0\300\34\47\60\25\0\4\60\u0116\34\2\0\6\34\2\0" +
          "\46\34\2\0\6\34\2\0\10\34\1\0\1\34\1\0\1\34\1\0" +
          "\1\34\1\0\37\34\2\0\65\34\1\0\7\34\1\0\1\34\3\0" +
          "\3\34\1\0\7\34\3\0\4\34\2\0\6\34\4\0\15\34\5\0" +
          "\3\34\1\0\7\34\16\0\5\60\32\0\5\60\20\0\2\34\23\0" +
          "\1\34\13\0\5\60\5\0\6\60\1\0\1\34\15\0\1\34\20\0" +
          "\15\34\3\0\14\34\1\34\16\34\25\0\15\60\4\0\1\60\3\0" +
          "\14\60\21\0\1\34\4\0\1\34\2\0\12\34\1\0\1\34\3\0" +
          "\5\34\6\0\1\34\1\0\1\34\1\0\1\34\1\0\4\34\1\0" +
          "\13\34\2\0\4\34\5\0\5\34\4\0\1\34\21\0\51\34\u0a77\0" +
          "\57\34\1\0\57\34\1\0\205\34\6\0\4\34\3\60\2\34\14\0" +
          "\46\34\1\0\1\34\5\0\1\34\2\0\70\34\7\0\1\34\17\0" +
          "\1\60\27\34\11\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34" +
          "\1\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34\1\0\40\60" +
          "\57\0\1\34\u01d5\0\3\34\31\0\11\34\6\60\1\0\5\34\2\0" +
          "\5\34\4\0\126\34\2\0\2\60\2\0\3\34\1\0\132\34\1\0" +
          "\4\34\5\0\51\34\3\0\136\34\21\0\33\34\65\0\20\34\u0200\0" +
          "\u19b6\34\112\0\u51cd\34\63\0\u048d\34\103\0\56\34\2\0\u010d\34\3\0" +
          "\20\34\12\64\2\34\24\0\57\34\1\60\4\0\12\60\1\0\31\34" +
          "\7\0\1\60\120\34\2\60\45\0\11\34\2\0\147\34\2\0\4\34" +
          "\1\0\4\34\14\0\13\34\115\0\12\34\1\60\3\34\1\60\4\34" +
          "\1\60\27\34\5\60\20\0\1\34\7\0\64\34\14\0\2\60\62\34" +
          "\21\60\13\0\12\64\6\0\22\60\6\34\3\0\1\34\4\0\12\64" +
          "\34\34\10\60\2\0\27\34\15\60\14\0\35\34\3\0\4\60\57\34" +
          "\16\60\16\0\1\34\12\64\46\0\51\34\16\60\11\0\3\34\1\60" +
          "\10\34\2\60\2\0\12\64\6\0\27\34\3\0\1\34\1\60\4\0" +
          "\60\34\1\60\1\34\3\60\2\34\2\60\5\34\2\60\1\34\1\60" +
          "\1\34\30\0\3\34\2\0\13\34\5\60\2\0\3\34\2\60\12\0" +
          "\6\34\2\0\6\34\2\0\6\34\11\0\7\34\1\0\7\34\221\0" +
          "\43\34\10\60\1\0\2\60\2\0\12\64\6\0\u2ba4\34\14\0\27\34" +
          "\4\0\61\34\u2104\0\u016e\34\2\0\152\34\46\0\7\34\14\0\5\34" +
          "\5\0\1\34\1\60\12\34\1\0\15\34\1\0\5\34\1\0\1\34" +
          "\1\0\2\34\1\0\2\34\1\0\154\34\41\0\u016b\34\22\0\100\34" +
          "\2\0\66\34\50\0\15\34\3\0\20\60\20\0\7\60\14\0\2\34" +
          "\30\0\3\34\31\0\1\34\6\0\5\34\1\0\207\34\2\0\1\60" +
          "\4\0\1\34\13\0\12\64\7\0\32\34\4\0\1\34\1\0\32\34" +
          "\13\0\131\34\3\0\6\34\2\0\6\34\2\0\6\34\2\0\3\34" +
          "\3\0\2\34\3\0\2\34\22\0\3\60\4\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
      "\5\0\1\1\22\2\1\3\1\4\1\5\1\6\1\7" +
          "\1\10\1\11\1\12\1\1\1\13\1\14\1\15\1\16" +
          "\1\17\1\20\1\21\1\1\1\22\1\23\1\24\1\1" +
          "\1\22\1\25\1\26\1\27\2\26\1\30\3\26\2\2" +
          "\1\0\3\2\1\31\15\2\1\32\1\33\15\2\3\0" +
          "\1\34\1\0\1\35\1\36\2\0\1\27\1\30\1\37" +
          "\1\2\1\0\1\40\1\2\1\41\1\2\1\42\6\2" +
          "\1\43\5\2\1\44\15\2\1\45\2\46\2\0\1\47" +
          "\1\50\1\51\1\2\1\52\6\2\1\53\1\54\1\55" +
          "\4\2\1\56\4\2\1\57\1\60\6\2\1\0\1\46" +
          "\1\0\5\2\1\61\2\2\1\62\13\2\1\63\1\0" +
          "\1\51\1\64\5\2\1\65\1\66\12\2\1\67\1\2" +
          "\1\70\2\2\1\71\4\2\1\72\1\2\1\73\1\2" +
          "\1\74\1\75\1\76\1\77\1\2\1\100\1\101\1\102" +
          "\1\2\1\103\1\104\1\105";

  private static int[] zzUnpackAction() {
    int[] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
      "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181" +
          "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339" +
          "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1" +
          "\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0528\0\u055f" +
          "\0\u0596\0\u0113\0\u0113\0\u05cd\0\u0604\0\u0113\0\u0113\0\u0113" +
          "\0\u063b\0\u0672\0\u06a9\0\u0113\0\u06e0\0\u0717\0\u074e\0\u0113" +
          "\0\u0113\0\u0785\0\u07bc\0\u0113\0\u07f3\0\u082a\0\u0861\0\u0898" +
          "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u0294\0\u09e2\0\u0a19" +
          "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1" +
          "\0\u0c08\0\u0c3f\0\u0c76\0\u0294\0\u0294\0\u0cad\0\u0ce4\0\u0d1b" +
          "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3" +
          "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u05cd\0\u101d\0\u1054" +
          "\0\u108b\0\u10c2\0\u10f9\0\u07bc\0\u082a\0\u0294\0\u1130\0\u1167" +
          "\0\u0294\0\u119e\0\u0294\0\u11d5\0\u0294\0\u120c\0\u1243\0\u127a" +
          "\0\u12b1\0\u12e8\0\u131f\0\u0294\0\u1356\0\u138d\0\u13c4\0\u13fb" +
          "\0\u1432\0\u0294\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c" +
          "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u0113" +
          "\0\u0113\0\u0faf\0\u1734\0\u176b\0\u0113\0\u0113\0\u17a2\0\u17d9" +
          "\0\u0113\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u0294" +
          "\0\u0294\0\u0294\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u0294\0\u1a36" +
          "\0\u1a6d\0\u1aa4\0\u1adb\0\u0294\0\u0294\0\u1b12\0\u1b49\0\u1b80" +
          "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1734\0\u1c93\0\u1cca\0\u1d01" +
          "\0\u1d38\0\u1d6f\0\u1da6\0\u0294\0\u1ddd\0\u1e14\0\u0294\0\u1e4b" +
          "\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003" +
          "\0\u203a\0\u2071\0\u0294\0\u20a8\0\u20a8\0\u0294\0\u20df\0\u2116" +
          "\0\u214d\0\u2184\0\u21bb\0\u0294\0\u0294\0\u21f2\0\u2229\0\u2260" +
          "\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u0294" +
          "\0\u2418\0\u0294\0\u244f\0\u2486\0\u0294\0\u24bd\0\u24f4\0\u252b" +
          "\0\u2562\0\u0294\0\u2599\0\u0294\0\u25d0\0\u0294\0\u0294\0\u0294" +
          "\0\u0294\0\u2607\0\u0294\0\u0294\0\u0294\0\u263e\0\u0294\0\u0294" +
          "\0\u0294";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
      "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
          "\1\16\1\15\1\17\1\20\1\21\1\22\1\23\1\24" +
          "\1\25\1\15\1\26\1\15\1\27\1\30\1\31\1\32" +
          "\1\33\1\34\1\35\1\36\1\15\1\37\1\40\1\6" +
          "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50" +
          "\1\51\1\6\1\52\1\53\1\54\3\15\1\6\1\55" +
          "\1\56\1\6\1\57\1\52\1\6\46\60\1\61\17\60" +
          "\1\62\43\60\1\63\22\60\1\62\47\60\1\64\16\60" +
          "\1\65\50\60\1\66\15\60\1\67\70\0\1\15\1\70" +
          "\5\15\1\71\15\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\1\73" +
          "\24\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\13\15\1\74\11\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\4\15\1\75\20\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\1\76\1\15\1\77\5\15\1\100" +
          "\14\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\6\15\1\101\1\15" +
          "\1\102\11\15\1\103\2\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\25\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\5\15\1\104\6\15" +
          "\1\105\1\15\1\106\6\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\1\107\3\15\1\110\6\15\1\111\11\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\13\15\1\112\11\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\2\15\1\113\5\15\1\114\14\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\1\115\7\15\1\116\14\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\4\15\1\117\1\120\5\15\1\121\11\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\5\15\1\122\17\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\13\15\1\123\1\124\10\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\13\15\1\125\11\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\16\15\1\126\6\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\1\15\1\127\2\15\1\130\1\131\6\15\1\132" +
          "\10\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\25\37\6\0\1\37" +
          "\2\0\2\37\7\0\1\37\4\0\4\37\3\0\1\37" +
          "\40\0\1\133\70\0\1\134\3\0\1\135\65\0\1\136" +
          "\24\0\25\137\6\0\1\137\20\0\4\137\3\0\1\137" +
          "\52\0\1\140\13\0\1\141\54\0\1\52\12\0\1\52" +
          "\65\0\1\57\63\0\1\142\67\0\1\56\42\0\1\143" +
          "\25\0\1\57\12\0\2\60\5\0\1\60\26\0\1\60" +
          "\63\0\1\144\33\0\2\60\5\0\1\60\27\0\1\60" +
          "\67\0\1\145\26\0\2\60\5\0\1\60\50\0\2\15" +
          "\1\146\22\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\16\15\1\147" +
          "\6\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\25\150\6\0\1\150" +
          "\20\0\3\150\10\0\5\15\1\151\17\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\13\15\1\152\11\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\1\153\24\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\1\154" +
          "\24\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\20\15\1\155\4\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\7\15\1\156\15\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\21\15\1\157\3\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\23\15\1\160\1\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\16\15\1\161\6\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\22\15\1\162\2\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\1\15" +
          "\1\163\23\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\12\15\1\164" +
          "\12\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\7\15\1\165\15\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\1\15\1\166\23\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\21\15\1\167\3\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\25\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\1\15\1\170\2\15\3\0\1\15" +
          "\3\0\7\15\1\171\15\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\16\15\1\172\6\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\16\15" +
          "\1\173\6\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\12\15\1\174" +
          "\12\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\1\175\3\15\1\176" +
          "\20\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\16\15\1\177\6\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\7\15\1\200\15\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\10\15\1\201\11\15\1\202\2\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\14\15\1\203\10\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\10\15\1\204\14\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\12\15\1\205\12\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\4\15\1\206\20\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\10\15\1\207\14\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\40\0\1\210" +
          "\30\0\62\134\1\211\1\212\3\134\44\213\1\214\22\213" +
          "\1\0\25\137\6\0\1\137\7\0\1\215\10\0\4\137" +
          "\3\0\1\137\52\0\1\140\54\0\1\143\25\0\1\141" +
          "\2\0\62\142\1\216\4\142\64\0\1\217\3\0\14\15" +
          "\1\220\10\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\25\150\6\0" +
          "\1\150\13\0\1\150\1\0\1\221\2\0\4\150\3\0" +
          "\1\150\3\0\12\15\1\222\12\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\7\15\1\223\15\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\5\15\1\224\17\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\12\15" +
          "\1\225\12\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\7\15\1\226" +
          "\15\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\22\15\1\227\2\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\5\15\1\230\17\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\5\15\1\231\17\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\5\15\1\232\17\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\2\15\1\233\22\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\4\15\1\234\20\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\5\15" +
          "\1\235\17\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\5\15\1\236" +
          "\5\15\1\237\11\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\1\240" +
          "\24\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\4\15\1\241\20\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\13\15\1\242\11\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\21\15\1\243\3\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\11\15\1\244\13\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\3\15\1\245\21\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\21\15\1\246\3\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\23\15" +
          "\1\247\1\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\15\15\1\250" +
          "\7\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\21\15\1\251\3\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\1\163\24\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\7\15\1\252\15\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\4\15\1\253\20\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\2\0" +
          "\44\213\1\254\62\213\1\255\3\213\1\254\22\213\57\0" +
          "\1\256\4\0\1\217\3\0\10\15\1\257\14\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\5\15\1\260\17\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\16\15\1\261\6\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\10\15\1\262\14\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\13\15\1\263\11\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\20\15" +
          "\1\264\4\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\14\15\1\265" +
          "\10\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\12\15\1\266\12\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\12\15\1\267\12\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\21\15\1\270\3\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\25\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\1\271\3\15\3\0\1\15\3\0" +
          "\14\15\1\272\10\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\7\15" +
          "\1\273\15\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\1\15\1\274" +
          "\23\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\7\15\1\275\15\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\5\15\1\276\17\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\13\15\1\277\11\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\4\15\1\300\20\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\7\15\1\301\15\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\1\15\1\302\23\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\12\15" +
          "\1\303\12\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\2\0\40\213\1\211" +
          "\3\213\1\254\22\213\50\0\1\304\2\0\1\304\10\0" +
          "\1\305\3\0\25\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\1\306\3\15\3\0\1\15\3\0" +
          "\4\15\1\307\20\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\4\15" +
          "\1\310\20\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\11\15\1\311" +
          "\13\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\1\312\24\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\10\15\1\313\14\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\5\15\1\314\17\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\7\15\1\315\15\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\5\15\1\316\17\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\13\15" +
          "\1\317\11\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\14\15\1\320" +
          "\10\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\16\15\1\321\6\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\14\15\1\322\10\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\23\15\1\323\1\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\10\15\1\324\14\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\7\15\1\325\15\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\14\15\1\326\10\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\16\15" +
          "\1\327\6\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\66\0\1\305\3\0" +
          "\10\15\1\330\14\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\21\15" +
          "\1\331\3\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\1\332\24\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\5\15\1\333\17\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\4\15\1\334\20\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\16\15\1\335\6\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\10\15\1\336\14\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\12\15\1\337\12\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\21\15" +
          "\1\340\3\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\15\15\1\341" +
          "\7\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\7\15\1\342\15\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\5\15\1\343\17\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\5\15\1\344\17\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\13\15\1\345\11\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\5\15\1\346\17\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\7\15\1\347\15\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\11\15" +
          "\1\350\13\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\12\15\1\351" +
          "\12\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72" +
          "\3\0\4\15\3\0\1\15\3\0\5\15\1\352\17\15" +
          "\6\0\1\15\2\0\2\37\7\0\1\15\1\72\3\0" +
          "\4\15\3\0\1\15\3\0\5\15\1\353\17\15\6\0" +
          "\1\15\2\0\2\37\7\0\1\15\1\72\3\0\4\15" +
          "\3\0\1\15\3\0\5\15\1\354\17\15\6\0\1\15" +
          "\2\0\2\37\7\0\1\15\1\72\3\0\4\15\3\0" +
          "\1\15\3\0\5\15\1\355\17\15\6\0\1\15\2\0" +
          "\2\37\7\0\1\15\1\72\3\0\4\15\3\0\1\15" +
          "\3\0\10\15\1\356\14\15\6\0\1\15\2\0\2\37" +
          "\7\0\1\15\1\72\3\0\4\15\3\0\1\15\3\0" +
          "\10\15\1\357\14\15\6\0\1\15\2\0\2\37\7\0" +
          "\1\15\1\72\3\0\4\15\3\0\1\15\3\0\11\15" +
          "\1\360\13\15\6\0\1\15\2\0\2\37\7\0\1\15" +
          "\1\72\3\0\4\15\3\0\1\15\3\0\7\15\1\361" +
          "\15\15\6\0\1\15\2\0\2\37\7\0\1\15\1\72"+
          "\3\0\4\15\3\0\1\15\2\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[9845];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
      "Unkown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
      "\5\0\1\11\22\1\6\11\3\1\2\11\2\1\3\11" +
          "\3\1\1\11\3\1\2\11\2\1\1\11\5\1\1\0" +
          "\40\1\3\0\1\1\1\0\2\1\2\0\4\1\1\0" +
          "\37\1\2\11\1\1\2\0\2\11\2\1\1\11\32\1"+
          "\1\0\1\1\1\0\25\1\1\0\55\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (identifiers != null) return;
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
          int nl = source.indexOf('\n');
          String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
          if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		identifiers = new HashSet();
		Language heritage = LanguageManager.getLanguage(dsl, false, project);
      if (heritage != null) Collections.addAll(identifiers, heritage.lexicon());
    }


  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner moduleType error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: {
          return TaraTypes.LEFT_SQUARE;
        }
        case 70:
          break;
        case 48: {
          return TaraTypes.WITH;
        }
        case 71:
          break;
        case 36: {
          return TaraTypes.VAR;
        }
        case 72:
          break;
        case 12: {
          return TaraTypes.COLON;
        }
        case 73:
          break;
        case 61: {
          return TaraTypes.ABSTRACT;
        }
        case 74:
          break;
        case 66: {
          return TaraTypes.REACTIVE;
        }
        case 75:
          break;
        case 23: {
          yybegin(YYINITIAL);
          return TaraTypes.QUOTE_END;
        }
        case 76:
          break;
        case 54: {
          return TaraTypes.OBJECT_TYPE;
        }
        case 77:
          break;
        case 69: {
          return TaraTypes.COMPONENT;
        }
        case 78:
          break;
        case 8: {
          return TaraTypes.RIGHT_CURLY;
        }
        case 79:
          break;
        case 41: {
          return TaraTypes.DOUBLE_VALUE_KEY;
        }
        case 80:
          break;
        case 47: {
          return TaraTypes.WORD_TYPE;
        }
        case 81:
          break;
        case 24: {
          yybegin(YYINITIAL);
          return TaraTypes.EXPRESSION_END;
        }
        case 82:
          break;
        case 18: {
          return TokenType.WHITE_SPACE;
        }
        case 83:
          break;
        case 37: {
          return TaraTypes.LIST;
        }
        case 84:
          break;
        case 4: {
          return TaraTypes.RIGHT_PARENTHESIS;
        }
        case 85:
          break;
        case 50: {
          return TaraTypes.LOCAL;
        }
        case 86:
          break;
        case 17: {
          yybegin(EXPRESSION);
          return TaraTypes.EXPRESSION_BEGIN;
        }
        case 87:
          break;
        case 13: {
          return TaraTypes.EQUALS;
        }
        case 88:
          break;
        case 51: {
          return TaraTypes.FINAL;
        }
        case 89:
          break;
        case 65: {
          return TaraTypes.RESOURCE_TYPE;
        }
        case 90:
          break;
        case 20: {
          return TaraTypes.AT;
        }
        case 91:
          break;
        case 10: {
          return TaraTypes.DOT;
        }
        case 92:
          break;
        case 52: {
          return TaraTypes.STRING_TYPE;
        }
        case 93:
          break;
        case 63: {
          return TaraTypes.TERMINAL;
        }
        case 94:
          break;
        case 38: {
          return TaraTypes.COMMENT;
        }
        case 95:
          break;
        case 58: {
          return TaraTypes.CONCEPT;
        }
        case 96:
          break;
        case 45: {
          return TaraTypes.DATE_TYPE;
        }
        case 97:
          break;
        case 49: {
          return TaraTypes.EMPTY_REF;
        }
        case 98:
          break;
        case 3: {
          return TaraTypes.LEFT_PARENTHESIS;
        }
        case 99:
          break;
        case 19: {
          return TaraTypes.PLUS;
        }
        case 100:
          break;
        case 59: {
          return TaraTypes.PRIVATE;
        }
        case 101:
          break;
        case 29: {
          yybegin(EXPRESSION_MULTILINE);
          return TaraTypes.EXPRESSION_BEGIN;
        }
        case 102:
          break;
        case 60: {
          return TaraTypes.FEATURE;
        }
        case 103:
          break;
        case 30: {
          return TaraTypes.NEGATIVE_VALUE_KEY;
        }
        case 104:
          break;
        case 15: {
          return TaraTypes.DSL;
        }
        case 105:
          break;
        case 9: {
          return TaraTypes.METRIC_VALUE_KEY;
        }
        case 106:
          break;
        case 42: {
          return TaraTypes.CLASS_TYPE;
        }
        case 107:
          break;
        case 56: {
          return TaraTypes.EXTENDS;
        }
        case 108:
          break;
        case 28: {
          yybegin(MULTILINE);
          return TaraTypes.QUOTE_BEGIN;
        }
        case 109:
          break;
        case 2: {
          return evaluateIdentifier();
        }
        case 110:
          break;
        case 14: {
          return TaraTypes.STAR;
        }
        case 111:
          break;
        case 53: {
          return TaraTypes.DOUBLE_TYPE;
        }
        case 112:
          break;
        case 7: {
          return TaraTypes.LEFT_CURLY;
        }
        case 113:
          break;
        case 6: {
          return TaraTypes.RIGHT_SQUARE;
        }
        case 114:
          break;
        case 21: {
          return TaraTypes.NATURAL_VALUE_KEY;
        }
        case 115:
          break;
        case 43: {
          return TaraTypes.TIME_TYPE;
        }
        case 116:
          break;
        case 34: {
          return TaraTypes.ANY;
        }
        case 117:
          break;
        case 1: {
          return TokenType.BAD_CHARACTER;
        }
        case 118:
          break;
        case 46: {
          return TaraTypes.INTO;
        }
        case 119:
          break;
        case 40: {
          yypushback(1);
          return TaraTypes.DOC_LINE;
        }
        case 120:
          break;
        case 44: {
          return TaraTypes.BOOLEAN_VALUE_KEY;
        }
        case 121:
          break;
        case 25: {
          return TaraTypes.AS;
        }
        case 122:
          break;
        case 26: {
          return TaraTypes.ON;
        }
        case 123:
          break;
        case 31: {
          return TaraTypes.SUB;
        }
        case 124:
          break;
        case 39: {
          return TaraTypes.ANCHOR_VALUE;
        }
        case 125:
          break;
        case 62: {
          return TaraTypes.ENCLOSED;
        }
        case 126:
          break;
        case 16: {
          yybegin(QUOTED);
          return TaraTypes.QUOTE_BEGIN;
        }
        case 127:
          break;
        case 55: {
          return TaraTypes.BOOLEAN_TYPE;
        }
        case 128:
          break;
        case 35: {
          loadHeritage();
          return TaraTypes.DSL;
        }
        case 129:
          break;
        case 27: {
          return TaraTypes.IS;
        }
        case 130:
          break;
        case 32: {
          return TaraTypes.USE;
        }
        case 131:
          break;
        case 64: {
          return TaraTypes.VOLATILE;
        }
        case 132:
          break;
        case 57: {
          return TaraTypes.INT_TYPE;
        }
        case 133:
          break;
        case 67: {
          return TaraTypes.FUNCTION_TYPE;
        }
        case 134:
          break;
        case 68: {
          return TaraTypes.VERSIONED;
        }
        case 135:
          break;
        case 22: {
          return TaraTypes.CHARACTER;
        }
        case 136:
          break;
        case 11: {
          return TaraTypes.COMMA;
        }
        case 137:
          break;
        case 33: {
          return TaraTypes.HAS;
        }
        case 138:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
