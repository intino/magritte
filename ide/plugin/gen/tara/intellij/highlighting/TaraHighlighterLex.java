/* The following code was generated by JFlex 1.4.3 on 3/11/15 12:18 */

package tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import tara.Language;
import tara.intellij.lang.TaraLanguage;
import tara.intellij.lang.psi.TaraTypes;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/11/15 12:18 from the specification file
 * <tt>/Users/oroncal/workspace/tara/ide/plugin/src/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int EXPRESSION = 6;
	public static final int QUOTED = 2;
	public static final int YYINITIAL = 0;
	public static final int EXPRESSION_MULTILINE = 8;
	public static final int MULTILINE = 4;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1, 2, 2, 3, 3, 4, 4
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\57\1\64\1\61\2\0\1\62\16\57\4\0\1\64\1\60\1\50" +
			"\1\54\1\36\1\37\1\0\1\51\1\30\1\31\1\46\1\53\1\43" +
			"\1\52\1\40\1\42\12\63\1\44\1\47\1\0\1\45\1\64\2\0" +
			"\2\36\1\1\1\36\1\56\12\36\1\20\12\36\1\32\1\65\1\33" +
			"\1\0\1\36\1\0\1\14\1\12\1\4\1\16\1\5\1\27\1\55" +
			"\1\13\1\22\2\36\1\17\1\26\1\3\1\2\1\6\1\36\1\21" +
			"\1\10\1\7\1\11\1\23\1\24\1\15\1\25\1\36\1\34\1\0" +
			"\1\35\1\0\41\57\2\0\4\36\4\0\1\36\2\0\1\57\2\0" +
			"\1\37\4\0\1\36\1\0\1\41\2\0\1\36\5\0\27\36\1\0" +
			"\37\36\1\0\u01ca\36\4\0\14\36\16\0\5\36\7\0\1\36\1\0" +
			"\1\36\21\0\160\57\5\36\1\0\2\36\2\0\4\36\10\0\1\36" +
			"\1\0\3\36\1\0\1\36\1\0\24\36\1\0\123\36\1\0\213\36" +
			"\1\0\5\57\2\0\236\36\11\0\46\36\2\0\1\36\7\0\47\36" +
			"\7\0\1\36\1\0\55\57\1\0\1\57\1\0\2\57\1\0\2\57" +
			"\1\0\1\57\10\0\33\36\5\0\3\36\15\0\5\57\6\0\1\36" +
			"\4\0\13\57\5\0\53\36\25\57\12\63\4\0\2\36\1\57\143\36" +
			"\1\0\1\36\10\57\1\0\6\57\2\36\2\57\1\0\4\57\2\36" +
			"\12\63\3\36\2\0\1\36\17\0\1\57\1\36\1\57\36\36\33\57" +
			"\2\0\131\36\13\57\1\36\16\0\12\63\41\36\11\57\2\36\4\0" +
			"\1\36\5\0\26\36\4\57\1\36\11\57\1\36\3\57\1\36\5\57" +
			"\22\0\31\36\3\57\104\0\1\36\1\0\13\36\67\0\33\57\1\0" +
			"\4\57\66\36\3\57\1\36\22\57\1\36\7\57\12\36\2\57\2\0" +
			"\12\63\1\0\7\36\1\0\7\36\1\0\3\57\1\0\10\36\2\0" +
			"\2\36\2\0\26\36\1\0\7\36\1\0\1\36\3\0\4\36\2\0" +
			"\1\57\1\36\7\57\2\0\2\57\2\0\3\57\1\36\10\0\1\57" +
			"\4\0\2\36\1\0\3\36\2\57\2\0\12\63\4\36\7\0\1\36" +
			"\5\0\3\57\1\0\6\36\4\0\2\36\2\0\26\36\1\0\7\36" +
			"\1\0\2\36\1\0\2\36\1\0\2\36\2\0\1\57\1\0\5\57" +
			"\4\0\2\57\2\0\3\57\3\0\1\57\7\0\4\36\1\0\1\36" +
			"\7\0\12\63\2\57\3\36\1\57\13\0\3\57\1\0\11\36\1\0" +
			"\3\36\1\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36\2\0" +
			"\1\57\1\36\10\57\1\0\3\57\1\0\3\57\2\0\1\36\17\0" +
			"\2\36\2\57\2\0\12\63\1\0\1\36\17\0\3\57\1\0\10\36" +
			"\2\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36" +
			"\2\0\1\57\1\36\7\57\2\0\2\57\2\0\3\57\10\0\2\57" +
			"\4\0\2\36\1\0\3\36\2\57\2\0\12\63\1\0\1\36\20\0" +
			"\1\57\1\36\1\0\6\36\3\0\3\36\1\0\4\36\3\0\2\36" +
			"\1\0\1\36\1\0\2\36\3\0\2\36\3\0\3\36\3\0\14\36" +
			"\4\0\5\57\3\0\3\57\1\0\4\57\2\0\1\36\6\0\1\57" +
			"\16\0\12\63\11\0\1\36\7\0\3\57\1\0\10\36\1\0\3\36" +
			"\1\0\27\36\1\0\12\36\1\0\5\36\3\0\1\36\7\57\1\0" +
			"\3\57\1\0\4\57\7\0\2\57\1\0\2\36\6\0\2\36\2\57" +
			"\2\0\12\63\22\0\2\57\1\0\10\36\1\0\3\36\1\0\27\36" +
			"\1\0\12\36\1\0\5\36\2\0\1\57\1\36\7\57\1\0\3\57" +
			"\1\0\4\57\7\0\2\57\7\0\1\36\1\0\2\36\2\57\2\0" +
			"\12\63\1\0\2\36\17\0\2\57\1\0\10\36\1\0\3\36\1\0" +
			"\51\36\2\0\1\36\7\57\1\0\3\57\1\0\4\57\1\36\10\0" +
			"\1\57\10\0\2\36\2\57\2\0\12\63\12\0\6\36\2\0\2\57" +
			"\1\0\22\36\3\0\30\36\1\0\11\36\1\0\1\36\2\0\7\36" +
			"\3\0\1\57\4\0\6\57\1\0\1\57\1\0\10\57\22\0\2\57" +
			"\15\0\60\36\1\57\2\36\7\57\4\0\10\36\10\57\1\0\12\63" +
			"\47\0\2\36\1\0\1\36\2\0\2\36\1\0\1\36\2\0\1\36" +
			"\6\0\4\36\1\0\7\36\1\0\3\36\1\0\1\36\1\0\1\36" +
			"\2\0\2\36\1\0\4\36\1\57\2\36\6\57\1\0\2\57\1\36" +
			"\2\0\5\36\1\0\1\36\1\0\6\57\2\0\12\63\2\0\4\36" +
			"\40\0\1\36\27\0\2\57\6\0\12\63\13\0\1\57\1\0\1\57" +
			"\1\0\1\57\4\0\2\57\10\36\1\0\44\36\4\0\24\57\1\0" +
			"\2\57\5\36\13\57\1\0\44\57\11\0\1\57\71\0\53\36\24\57" +
			"\1\36\12\63\6\0\6\36\4\57\4\36\3\57\1\36\3\57\2\36" +
			"\7\57\3\36\4\57\15\36\14\57\1\36\1\57\12\63\4\57\2\0" +
			"\46\36\1\0\1\36\5\0\1\36\2\0\53\36\1\0\u014d\36\1\0" +
			"\4\36\2\0\7\36\1\0\1\36\1\0\4\36\2\0\51\36\1\0" +
			"\4\36\2\0\41\36\1\0\4\36\2\0\7\36\1\0\1\36\1\0" +
			"\4\36\2\0\17\36\1\0\71\36\1\0\4\36\2\0\103\36\2\0" +
			"\3\57\40\0\20\36\20\0\125\36\14\0\u026c\36\2\0\21\36\1\0" +
			"\32\36\5\0\113\36\3\0\3\36\17\0\15\36\1\0\4\36\3\57" +
			"\13\0\22\36\3\57\13\0\22\36\2\57\14\0\15\36\1\0\3\36" +
			"\1\0\2\57\14\0\64\36\40\57\3\0\1\36\3\0\2\36\1\57" +
			"\2\0\12\63\41\0\3\57\2\0\12\63\6\0\130\36\10\0\51\36" +
			"\1\57\1\36\5\0\106\36\12\0\35\36\3\0\14\57\4\0\14\57" +
			"\12\0\12\63\36\36\2\0\5\36\13\0\54\36\4\0\21\57\7\36" +
			"\2\57\6\0\12\63\46\0\27\36\5\57\4\0\65\36\12\57\1\0" +
			"\35\57\2\0\1\57\12\63\6\0\12\63\15\0\1\36\130\0\5\57" +
			"\57\36\21\57\7\36\4\0\12\63\21\0\11\57\14\0\3\57\36\36" +
			"\15\57\2\36\12\63\54\36\16\57\14\0\44\36\24\57\10\0\12\63" +
			"\3\0\3\36\12\63\44\36\122\0\3\57\1\0\25\57\4\36\1\57" +
			"\4\36\3\57\2\36\11\0\300\36\47\57\25\0\4\57\u0116\36\2\0" +
			"\6\36\2\0\46\36\2\0\6\36\2\0\10\36\1\0\1\36\1\0" +
			"\1\36\1\0\1\36\1\0\37\36\2\0\65\36\1\0\7\36\1\0" +
			"\1\36\3\0\3\36\1\0\7\36\3\0\4\36\2\0\6\36\4\0" +
			"\15\36\5\0\3\36\1\0\7\36\16\0\5\57\32\0\5\57\20\0" +
			"\2\36\23\0\1\36\13\0\5\57\5\0\6\57\1\0\1\36\15\0" +
			"\1\36\20\0\15\36\3\0\14\36\1\36\16\36\25\0\15\57\4\0" +
			"\1\57\3\0\14\57\21\0\1\36\4\0\1\36\2\0\12\36\1\0" +
			"\1\36\3\0\5\36\6\0\1\36\1\0\1\36\1\0\1\36\1\0" +
			"\4\36\1\0\13\36\2\0\4\36\5\0\5\36\4\0\1\36\21\0" +
			"\51\36\u0a77\0\57\36\1\0\57\36\1\0\205\36\6\0\4\36\3\57" +
			"\2\36\14\0\46\36\1\0\1\36\5\0\1\36\2\0\70\36\7\0" +
			"\1\36\17\0\1\57\27\36\11\0\7\36\1\0\7\36\1\0\7\36" +
			"\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36" +
			"\1\0\40\57\57\0\1\36\u01d5\0\3\36\31\0\11\36\6\57\1\0" +
			"\5\36\2\0\5\36\4\0\126\36\2\0\2\57\2\0\3\36\1\0" +
			"\132\36\1\0\4\36\5\0\51\36\3\0\136\36\21\0\33\36\65\0" +
			"\20\36\u0200\0\u19b6\36\112\0\u51cd\36\63\0\u048d\36\103\0\56\36\2\0" +
			"\u010d\36\3\0\20\36\12\63\2\36\24\0\57\36\1\57\4\0\12\57" +
			"\1\0\31\36\7\0\1\57\120\36\2\57\45\0\11\36\2\0\147\36" +
			"\2\0\4\36\1\0\4\36\14\0\13\36\115\0\12\36\1\57\3\36" +
			"\1\57\4\36\1\57\27\36\5\57\20\0\1\36\7\0\64\36\14\0" +
			"\2\57\62\36\21\57\13\0\12\63\6\0\22\57\6\36\3\0\1\36" +
			"\4\0\12\63\34\36\10\57\2\0\27\36\15\57\14\0\35\36\3\0" +
			"\4\57\57\36\16\57\16\0\1\36\12\63\46\0\51\36\16\57\11\0" +
			"\3\36\1\57\10\36\2\57\2\0\12\63\6\0\27\36\3\0\1\36" +
			"\1\57\4\0\60\36\1\57\1\36\3\57\2\36\2\57\5\36\2\57" +
			"\1\36\1\57\1\36\30\0\3\36\2\0\13\36\5\57\2\0\3\36" +
			"\2\57\12\0\6\36\2\0\6\36\2\0\6\36\11\0\7\36\1\0" +
			"\7\36\221\0\43\36\10\57\1\0\2\57\2\0\12\63\6\0\u2ba4\36" +
			"\14\0\27\36\4\0\61\36\u2104\0\u016e\36\2\0\152\36\46\0\7\36" +
			"\14\0\5\36\5\0\1\36\1\57\12\36\1\0\15\36\1\0\5\36" +
			"\1\0\1\36\1\0\2\36\1\0\2\36\1\0\154\36\41\0\u016b\36" +
			"\22\0\100\36\2\0\66\36\50\0\15\36\3\0\20\57\20\0\7\57" +
			"\14\0\2\36\30\0\3\36\31\0\1\36\6\0\5\36\1\0\207\36" +
			"\2\0\1\57\4\0\1\36\13\0\12\63\7\0\32\36\4\0\1\36" +
			"\1\0\32\36\13\0\131\36\3\0\6\36\2\0\6\36\2\0\6\36" +
			"\2\0\3\36\3\0\2\36\3\0\2\36\22\0\3\57\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\5\0\1\1\23\2\1\3\1\4\1\5\1\6\1\7" +
			"\1\10\1\11\1\12\1\1\1\13\1\14\1\15\1\16" +
			"\1\17\1\20\1\21\4\1\1\22\1\23\1\22\1\24" +
			"\1\25\2\24\1\26\3\24\1\2\1\27\17\2\1\30" +
			"\7\2\1\31\7\2\2\0\1\32\1\33\1\34\1\35" +
			"\2\0\1\25\1\26\15\2\1\36\1\37\1\2\1\40" +
			"\1\41\3\2\1\42\3\2\1\43\10\2\2\44\2\0" +
			"\1\45\1\46\12\2\1\47\1\50\5\2\1\51\1\2" +
			"\1\52\1\2\1\53\1\54\1\55\3\2\1\56\1\0" +
			"\1\44\1\0\2\2\1\57\2\2\1\60\3\2\1\61" +
			"\10\2\1\62\1\63\1\0\1\46\1\2\1\64\5\2" +
			"\1\65\2\2\1\66\1\2\1\67\2\2\1\70\1\2" +
			"\1\71\1\2\1\72\1\2\1\73\2\2\1\74\1\75" +
			"\1\76\1\2\1\77\1\100\1\2\1\101\1\2\1\102";

	private static int[] zzUnpackAction() {
		int[] result = new int[226];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a" +
			"\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a" +
			"\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da" +
			"\0\u0510\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u0546" +
			"\0\u010e\0\u057c\0\u010e\0\u010e\0\u05b2\0\u010e\0\u010e\0\u010e" +
			"\0\u010e\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c" +
			"\0\u010e\0\u010e\0\u0762\0\u0798\0\u010e\0\u07ce\0\u0804\0\u083a" +
			"\0\u0870\0\u01e6\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4" +
			"\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64" +
			"\0\u0b9a\0\u01e6\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde" +
			"\0\u0d14\0\u01e6\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58" +
			"\0\u0e8e\0\u0ec4\0\u0efa\0\u05b2\0\u0f30\0\u0f66\0\u0654\0\u0f9c" +
			"\0\u0fd2\0\u0798\0\u0804\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0" +
			"\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290" +
			"\0\u01e6\0\u01e6\0\u12c6\0\u01e6\0\u01e6\0\u12fc\0\u1332\0\u1368" +
			"\0\u01e6\0\u139e\0\u13d4\0\u140a\0\u01e6\0\u1440\0\u1476\0\u14ac" +
			"\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u010e\0\u0ec4\0\u15f0" +
			"\0\u1626\0\u010e\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a" +
			"\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u01e6\0\u01e6\0\u18ae" +
			"\0\u18e4\0\u191a\0\u1950\0\u1986\0\u01e6\0\u19bc\0\u01e6\0\u19f2" +
			"\0\u01e6\0\u01e6\0\u01e6\0\u1a28\0\u1a5e\0\u1a94\0\u01e6\0\u1aca" +
			"\0\u15f0\0\u1b00\0\u1b36\0\u1b6c\0\u01e6\0\u1ba2\0\u1bd8\0\u01e6" +
			"\0\u1c0e\0\u1c44\0\u1c7a\0\u01e6\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52" +
			"\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u01e6\0\u01e6\0\u1e60\0\u1e60" +
			"\0\u1e96\0\u01e6\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u01e6" +
			"\0\u1fda\0\u2010\0\u01e6\0\u2046\0\u01e6\0\u207c\0\u20b2\0\u01e6" +
			"\0\u20e8\0\u01e6\0\u211e\0\u01e6\0\u2154\0\u01e6\0\u218a\0\u21c0" +
			"\0\u01e6\0\u01e6\0\u01e6\0\u21f6\0\u01e6\0\u01e6\0\u222c\0\u01e6" +
			"\0\u2262\0\u01e6";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[226];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
			"\1\16\1\17\1\20\1\21\1\22\1\12\1\23\1\12" +
			"\1\24\1\12\1\25\1\26\1\27\1\12\1\30\1\31" +
			"\1\32\1\33\1\34\1\35\1\36\1\37\1\12\1\40" +
			"\1\41\1\6\1\42\1\43\1\44\1\45\1\46\1\47" +
			"\1\50\1\51\1\52\1\53\1\54\2\12\1\6\1\55" +
			"\1\56\1\6\1\57\1\60\1\6\50\61\1\62\14\61" +
			"\1\63\45\61\1\64\17\61\1\63\51\61\1\65\13\61" +
			"\1\66\52\61\1\67\12\61\1\70\67\0\1\12\1\71" +
			"\25\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\2\12\1\72\24\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\13\12\1\73\13\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\27\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\2\12\1\74\11\12\1\75" +
			"\10\12\1\76\1\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\20\12\1\77" +
			"\6\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\4\12\1\100\3\12\1\101" +
			"\7\12\1\102\1\103\5\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\6\12" +
			"\1\104\1\12\1\105\16\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\7\12" +
			"\1\106\17\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\1\12\1\107\25\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\13\12\1\110\13\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\3\0\2\12\1\111\4\12\1\112\1\12\1\113\15\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\1\12\1\114\2\12\1\115\2\12" +
			"\1\116\3\12\1\117\13\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\20\12" +
			"\1\120\6\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\2\12\1\121\4\12" +
			"\1\122\17\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\13\12\1\123\13\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\1\12\1\124\17\12\1\125\5\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\13\12\1\126\13\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\3\0\4\12\1\127\6\12\1\130\5\12\1\131\5\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\27\40\6\0\1\40\2\0\2\40" +
			"\7\0\1\40\2\0\3\40\3\0\1\40\44\0\1\132" +
			"\3\0\1\133\64\0\1\134\72\0\1\135\10\0\1\136" +
			"\65\0\1\57\3\0\27\137\6\0\1\137\16\0\2\137" +
			"\67\0\1\140\66\0\1\56\44\0\1\141\22\0\1\57" +
			"\66\0\1\60\4\0\1\61\3\0\1\61\11\0\1\61" +
			"\26\0\1\61\62\0\1\142\23\0\1\61\3\0\1\61" +
			"\11\0\1\61\27\0\1\61\66\0\1\143\16\0\1\61" +
			"\3\0\1\61\11\0\1\61\45\0\2\12\1\144\24\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\6\12\1\145\16\12\1\146\1\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\3\12\1\147\23\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\3\0\6\12\1\150\20\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\5\12" +
			"\1\151\21\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\1\12\1\152\17\12" +
			"\1\153\5\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\20\12\1\154\6\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\5\12\1\155\21\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\3\0\10\12\1\156\16\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\25\12" +
			"\1\157\1\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\20\12\1\160\6\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\11\12\1\161\15\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\3\0\4\12\1\162\22\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\1\12" +
			"\1\163\25\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\7\12\1\164\17\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\24\12\1\165\2\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\3\0\7\12\1\166\17\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\10\12" +
			"\1\167\16\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\26\12\1\170\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\16\12\1\171\10\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\6\12\1\172\20\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\1\12\1\173" +
			"\25\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\6\12\1\174\20\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\20\12\1\175\6\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\20\12\1\176\6\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\6\12\1\177" +
			"\20\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\21\12\1\200\5\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\13\12\1\201\13\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\3\12\1\202\12\12\1\203\10\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\2\12\1\204\13\12\1\205\10\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\2\0" +
			"\61\132\1\206\1\207\3\132\46\210\1\211\17\210\52\0" +
			"\1\135\53\0\1\141\22\0\1\136\2\0\61\140\1\212" +
			"\4\140\63\0\1\213\3\0\3\12\1\214\23\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\21\12\1\215\5\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\4\12\1\216\22\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\16\12\1\217" +
			"\10\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\4\12\1\220\22\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\6\12\1\221\20\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\6\12\1\222\20\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\22\12\1\223" +
			"\4\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\25\12\1\224\1\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\16\12\1\225\10\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\4\12\1\226\22\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\4\12\1\227" +
			"\22\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\21\12\1\230\5\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\16\12\1\231\10\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\6\12\1\232\20\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\11\12\1\233" +
			"\15\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\21\12\1\234\5\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\4\12\1\235\22\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\6\12\1\236\20\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\1\12\1\237" +
			"\2\12\1\240\22\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\15\12\1\241" +
			"\11\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\12\12\1\242\14\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\2\12\1\243\24\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\6\12\1\244\20\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\4\12\1\245" +
			"\22\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\7\12\1\156\17\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\13\12\1\246\13\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\4\12\1\247\22\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\2\0\46\210\1\250" +
			"\61\210\1\251\3\210\1\250\17\210\56\0\1\252\4\0" +
			"\1\213\3\0\4\12\1\253\22\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\22\12\1\254\4\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\15\12\1\255" +
			"\11\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\1\12\1\256\25\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\2\12\1\257\24\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\24\12\1\260\2\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\1\12\1\261" +
			"\25\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\13\12\1\262\13\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\21\12\1\263\5\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\4\12\1\264\22\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\2\12\1\265" +
			"\24\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\4\12\1\266\22\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\20\12\1\267\6\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\16\12\1\270\10\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\2\12\1\271" +
			"\24\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\4\12\1\272\22\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\27\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\1\273\2\12\3\0\1\12\3\0\10\12" +
			"\1\274\16\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\6\12\1\275\20\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\16\12\1\276\10\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\2\0\42\210\1\206\3\210\1\250\17\210\52\0\2\277" +
			"\7\0\1\300\3\0\5\12\1\301\21\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\3\0\4\12\1\302\22\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\7\12" +
			"\1\303\17\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\15\12\1\304\11\12" +
			"\6\0\1\12\2\0\2\40\7\0\1\12\2\0\3\12" +
			"\3\0\1\12\3\0\6\12\1\305\20\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\3\12\3\0\1\12" +
			"\3\0\6\12\1\306\20\12\6\0\1\12\2\0\2\40" +
			"\7\0\1\12\2\0\3\12\3\0\1\12\3\0\2\12" +
			"\1\307\24\12\6\0\1\12\2\0\2\40\7\0\1\12" +
			"\2\0\3\12\3\0\1\12\3\0\27\12\6\0\1\12" +
			"\2\0\2\40\7\0\1\12\2\0\1\310\2\12\3\0" +
			"\1\12\3\0\13\12\1\311\13\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\13\12\1\312\13\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\4\12\1\313" +
			"\22\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\21\12\1\314\5\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\1\12\1\315\25\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\4\12\1\316\22\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\20\12\1\317" +
			"\6\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\65\0\1\300\3\0\6\12\1\320" +
			"\20\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\4\12\1\321\22\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\7\12\1\322\17\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\24\12\1\323\2\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\4\12\1\324" +
			"\22\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\13\12\1\325\13\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\2\12\1\326\24\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\3\12\1\327\23\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\6\12\1\330" +
			"\20\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\20\12\1\331\6\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\4\12\1\332\22\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\15\12\1\333\11\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\5\12\1\334" +
			"\21\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\16\12\1\335\10\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\6\12\1\336\20\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\3\0" +
			"\21\12\1\337\5\12\6\0\1\12\2\0\2\40\7\0" +
			"\1\12\2\0\3\12\3\0\1\12\3\0\4\12\1\340" +
			"\22\12\6\0\1\12\2\0\2\40\7\0\1\12\2\0" +
			"\3\12\3\0\1\12\3\0\1\12\1\341\25\12\6\0" +
			"\1\12\2\0\2\40\7\0\1\12\2\0\3\12\3\0" +
			"\1\12\3\0\2\12\1\342\24\12\6\0\1\12\2\0" +
			"\2\40\7\0\1\12\2\0\3\12\3\0\1\12\2\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[8856];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	private static java.io.Reader zzReader = null; // Fake

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\5\0\1\11\23\1\6\11\1\1\1\11\1\1\2\11" +
			"\1\1\4\11\7\1\2\11\2\1\1\11\44\1\2\0" +
			"\4\1\2\0\44\1\1\11\1\1\2\0\1\11\35\1" +
			"\1\0\1\1\1\0\24\1\1\0\43\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[226];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (identifiers != null) return;
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
			String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		identifiers = new HashSet();
		Language heritage = TaraLanguage.getLanguage(dsl, project);
		if (heritage != null) Collections.addAll(identifiers, heritage.lexicon());
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	TaraHighlighterLex(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 2278) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 5: {
					return TaraTypes.LEFT_SQUARE;
				}
				case 67:
					break;
				case 44: {
					return TaraTypes.WITH;
				}
				case 68:
					break;
				case 35: {
					return TaraTypes.VAR;
				}
				case 69:
					break;
				case 12: {
					return TaraTypes.COLON;
				}
				case 70:
					break;
				case 64: {
					return TaraTypes.ABSTRACT;
				}
				case 71:
					break;
				case 66: {
					return TaraTypes.DEFINITION;
				}
				case 72:
					break;
				case 21: {
					yybegin(YYINITIAL);
					return TaraTypes.QUOTE_END;
				}
				case 73:
					break;
				case 8: {
					return TaraTypes.RIGHT_CURLY;
				}
				case 74:
					break;
				case 38: {
					return TaraTypes.DOUBLE_VALUE_KEY;
				}
				case 75:
					break;
				case 22: {
					yybegin(YYINITIAL);
					return TaraTypes.EXPRESSION_END;
				}
				case 76:
					break;
				case 18: {
					return TokenType.WHITE_SPACE;
				}
				case 77:
					break;
				case 4: {
					return TaraTypes.RIGHT_PARENTHESIS;
				}
				case 78:
					break;
				case 17: {
					yybegin(EXPRESSION);
					return TaraTypes.EXPRESSION_BEGIN;
				}
				case 79:
					break;
				case 13: {
					return TaraTypes.EQUALS;
				}
				case 80:
					break;
				case 51: {
					return TaraTypes.FINAL;
				}
				case 81:
					break;
				case 10: {
					return TaraTypes.DOT;
				}
				case 82:
					break;
				case 53: {
					return TaraTypes.STRING_TYPE;
				}
				case 83:
					break;
				case 47: {
					return TaraTypes.NAMED;
				}
				case 84:
					break;
				case 63: {
					return TaraTypes.TERMINAL;
				}
				case 85:
					break;
				case 36: {
					return TaraTypes.COMMENT;
				}
				case 86:
					break;
				case 55: {
					return TaraTypes.PROTEO;
				}
				case 87:
					break;
				case 52: {
					return TaraTypes.NATIVE_TYPE;
				}
				case 88:
					break;
				case 41: {
					return TaraTypes.DATE_TYPE;
				}
				case 89:
					break;
				case 48: {
					return TaraTypes.EMPTY_REF;
				}
				case 90:
					break;
				case 3: {
					return TaraTypes.LEFT_PARENTHESIS;
				}
				case 91:
					break;
				case 58: {
					return TaraTypes.PRIVATE;
				}
				case 92:
					break;
				case 27: {
					yybegin(EXPRESSION_MULTILINE);
					return TaraTypes.EXPRESSION_BEGIN;
				}
				case 93:
					break;
				case 61: {
					return TaraTypes.FEATURE;
				}
				case 94:
					break;
				case 28: {
					return TaraTypes.NEGATIVE_VALUE_KEY;
				}
				case 95:
					break;
				case 15: {
					return TaraTypes.DSL;
				}
				case 96:
					break;
				case 9: {
					return TaraTypes.METRIC_VALUE_KEY;
				}
				case 97:
					break;
				case 29: {
					return TaraTypes.ADDRESS_VALUE;
				}
				case 98:
					break;
				case 57: {
					return TaraTypes.EXTENDS;
				}
				case 99:
					break;
				case 26: {
					yybegin(MULTILINE);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 100:
					break;
				case 65: {
					return TaraTypes.PROTOTYPE;
				}
				case 101:
					break;
				case 2: {
					return evaluateIdentifier();
				}
				case 102:
					break;
				case 14: {
					return TaraTypes.STAR;
				}
				case 103:
					break;
				case 54: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 104:
					break;
				case 7: {
					return TaraTypes.LEFT_CURLY;
				}
				case 105:
					break;
				case 6: {
					return TaraTypes.RIGHT_SQUARE;
				}
				case 106:
					break;
				case 19: {
					return TaraTypes.NATURAL_VALUE_KEY;
				}
				case 107:
					break;
				case 40: {
					return TaraTypes.TIME_TYPE;
				}
				case 108:
					break;
				case 33: {
					return TaraTypes.ANY;
				}
				case 109:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 110:
					break;
				case 42: {
					return TaraTypes.INTO;
				}
				case 111:
					break;
				case 49: {
					return TaraTypes.TUPLE_TYPE;
				}
				case 112:
					break;
				case 46: {
					return TaraTypes.RESOURCE_KEY;
				}
				case 113:
					break;
				case 37: {
					yypushback(1);
					return TaraTypes.DOC_LINE;
				}
				case 114:
					break;
				case 39: {
					return TaraTypes.BOOLEAN_VALUE_KEY;
				}
				case 115:
					break;
				case 24: {
					return TaraTypes.AS;
				}
				case 116:
					break;
				case 23: {
					return TaraTypes.ON;
				}
				case 117:
					break;
				case 30: {
					return TaraTypes.SUB;
				}
				case 118:
					break;
				case 62: {
					return TaraTypes.ENCLOSED;
				}
				case 119:
					break;
				case 16: {
					yybegin(QUOTED);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 120:
					break;
				case 59: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 121:
					break;
				case 34: {
					loadHeritage();
					return TaraTypes.DSL;
				}
				case 122:
					break;
				case 25: {
					return TaraTypes.IS;
				}
				case 123:
					break;
				case 31: {
					return TaraTypes.USE;
				}
				case 124:
					break;
				case 60: {
					return TaraTypes.INT_TYPE;
				}
				case 125:
					break;
				case 56: {
					return TaraTypes.METAIDENTIFIER_KEY;
				}
				case 126:
					break;
				case 45: {
					return TaraTypes.MAIN;
				}
				case 127:
					break;
				case 43: {
					return TaraTypes.WORD_KEY;
				}
				case 128:
					break;
				case 20: {
					return TaraTypes.CHARACTER;
				}
				case 129:
					break;
				case 50: {
					return TaraTypes.FACET;
				}
				case 130:
					break;
				case 11: {
					return TaraTypes.COMMA;
				}
				case 131:
					break;
				case 32: {
					return TaraTypes.HAS;
				}
				case 132:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						return null;
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
