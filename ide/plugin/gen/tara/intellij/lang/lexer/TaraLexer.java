/* The following code was generated by JFlex 1.4.3 on 6/11/15 13:44 */

package tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/11/15 13:44 from the specification file
 * <tt>/Users/oroncal/workspace/tara/language/grammar/src/tara/lang/lexicon/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EXPRESSION = 6;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION_MULTILINE = 8;
  public static final int MULTILINE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\61\1\3\1\62\2\0\1\1\16\61\4\0\1\2\1\63\1\41"+
    "\1\56\1\44\1\54\1\0\1\42\1\33\1\34\1\53\1\64\1\50"+
    "\1\43\1\45\1\47\12\65\1\51\1\55\1\0\1\52\1\4\2\0"+
    "\2\44\1\5\1\44\1\60\25\44\1\35\1\66\1\36\1\0\1\44"+
    "\1\0\1\20\1\16\1\10\1\23\1\11\1\32\1\57\1\17\1\26"+
    "\2\44\1\24\1\31\1\7\1\6\1\12\1\44\1\22\1\14\1\13"+
    "\1\15\1\21\1\25\1\30\1\27\1\44\1\37\1\1\1\40\1\0"+
    "\41\61\2\0\4\44\4\0\1\44\2\0\1\61\2\0\1\54\4\0"+
    "\1\44\1\0\1\46\2\0\1\44\5\0\27\44\1\0\37\44\1\0"+
    "\u01ca\44\4\0\14\44\16\0\5\44\7\0\1\44\1\0\1\44\21\0"+
    "\160\61\5\44\1\0\2\44\2\0\4\44\10\0\1\44\1\0\3\44"+
    "\1\0\1\44\1\0\24\44\1\0\123\44\1\0\213\44\1\0\5\61"+
    "\2\0\236\44\11\0\46\44\2\0\1\44\7\0\47\44\7\0\1\44"+
    "\1\0\55\61\1\0\1\61\1\0\2\61\1\0\2\61\1\0\1\61"+
    "\10\0\33\44\5\0\3\44\15\0\5\61\6\0\1\44\4\0\13\61"+
    "\5\0\53\44\25\61\12\65\4\0\2\44\1\61\143\44\1\0\1\44"+
    "\10\61\1\0\6\61\2\44\2\61\1\0\4\61\2\44\12\65\3\44"+
    "\2\0\1\44\17\0\1\61\1\44\1\61\36\44\33\61\2\0\131\44"+
    "\13\61\1\44\16\0\12\65\41\44\11\61\2\44\4\0\1\44\5\0"+
    "\26\44\4\61\1\44\11\61\1\44\3\61\1\44\5\61\22\0\31\44"+
    "\3\61\104\0\1\44\1\0\13\44\67\0\33\61\1\0\4\61\66\44"+
    "\3\61\1\44\22\61\1\44\7\61\12\44\2\61\2\0\12\65\1\0"+
    "\7\44\1\0\7\44\1\0\3\61\1\0\10\44\2\0\2\44\2\0"+
    "\26\44\1\0\7\44\1\0\1\44\3\0\4\44\2\0\1\61\1\44"+
    "\7\61\2\0\2\61\2\0\3\61\1\44\10\0\1\61\4\0\2\44"+
    "\1\0\3\44\2\61\2\0\12\65\4\44\7\0\1\44\5\0\3\61"+
    "\1\0\6\44\4\0\2\44\2\0\26\44\1\0\7\44\1\0\2\44"+
    "\1\0\2\44\1\0\2\44\2\0\1\61\1\0\5\61\4\0\2\61"+
    "\2\0\3\61\3\0\1\61\7\0\4\44\1\0\1\44\7\0\12\65"+
    "\2\61\3\44\1\61\13\0\3\61\1\0\11\44\1\0\3\44\1\0"+
    "\26\44\1\0\7\44\1\0\2\44\1\0\5\44\2\0\1\61\1\44"+
    "\10\61\1\0\3\61\1\0\3\61\2\0\1\44\17\0\2\44\2\61"+
    "\2\0\12\65\1\0\1\44\17\0\3\61\1\0\10\44\2\0\2\44"+
    "\2\0\26\44\1\0\7\44\1\0\2\44\1\0\5\44\2\0\1\61"+
    "\1\44\7\61\2\0\2\61\2\0\3\61\10\0\2\61\4\0\2\44"+
    "\1\0\3\44\2\61\2\0\12\65\1\0\1\44\20\0\1\61\1\44"+
    "\1\0\6\44\3\0\3\44\1\0\4\44\3\0\2\44\1\0\1\44"+
    "\1\0\2\44\3\0\2\44\3\0\3\44\3\0\14\44\4\0\5\61"+
    "\3\0\3\61\1\0\4\61\2\0\1\44\6\0\1\61\16\0\12\65"+
    "\11\0\1\44\7\0\3\61\1\0\10\44\1\0\3\44\1\0\27\44"+
    "\1\0\12\44\1\0\5\44\3\0\1\44\7\61\1\0\3\61\1\0"+
    "\4\61\7\0\2\61\1\0\2\44\6\0\2\44\2\61\2\0\12\65"+
    "\22\0\2\61\1\0\10\44\1\0\3\44\1\0\27\44\1\0\12\44"+
    "\1\0\5\44\2\0\1\61\1\44\7\61\1\0\3\61\1\0\4\61"+
    "\7\0\2\61\7\0\1\44\1\0\2\44\2\61\2\0\12\65\1\0"+
    "\2\44\17\0\2\61\1\0\10\44\1\0\3\44\1\0\51\44\2\0"+
    "\1\44\7\61\1\0\3\61\1\0\4\61\1\44\10\0\1\61\10\0"+
    "\2\44\2\61\2\0\12\65\12\0\6\44\2\0\2\61\1\0\22\44"+
    "\3\0\30\44\1\0\11\44\1\0\1\44\2\0\7\44\3\0\1\61"+
    "\4\0\6\61\1\0\1\61\1\0\10\61\22\0\2\61\15\0\60\44"+
    "\1\61\2\44\7\61\4\0\10\44\10\61\1\0\12\65\47\0\2\44"+
    "\1\0\1\44\2\0\2\44\1\0\1\44\2\0\1\44\6\0\4\44"+
    "\1\0\7\44\1\0\3\44\1\0\1\44\1\0\1\44\2\0\2\44"+
    "\1\0\4\44\1\61\2\44\6\61\1\0\2\61\1\44\2\0\5\44"+
    "\1\0\1\44\1\0\6\61\2\0\12\65\2\0\4\44\40\0\1\44"+
    "\27\0\2\61\6\0\12\65\13\0\1\61\1\0\1\61\1\0\1\61"+
    "\4\0\2\61\10\44\1\0\44\44\4\0\24\61\1\0\2\61\5\44"+
    "\13\61\1\0\44\61\11\0\1\61\71\0\53\44\24\61\1\44\12\65"+
    "\6\0\6\44\4\61\4\44\3\61\1\44\3\61\2\44\7\61\3\44"+
    "\4\61\15\44\14\61\1\44\1\61\12\65\4\61\2\0\46\44\1\0"+
    "\1\44\5\0\1\44\2\0\53\44\1\0\u014d\44\1\0\4\44\2\0"+
    "\7\44\1\0\1\44\1\0\4\44\2\0\51\44\1\0\4\44\2\0"+
    "\41\44\1\0\4\44\2\0\7\44\1\0\1\44\1\0\4\44\2\0"+
    "\17\44\1\0\71\44\1\0\4\44\2\0\103\44\2\0\3\61\40\0"+
    "\20\44\20\0\125\44\14\0\u026c\44\2\0\21\44\1\0\32\44\5\0"+
    "\113\44\3\0\3\44\17\0\15\44\1\0\4\44\3\61\13\0\22\44"+
    "\3\61\13\0\22\44\2\61\14\0\15\44\1\0\3\44\1\0\2\61"+
    "\14\0\64\44\40\61\3\0\1\44\3\0\2\44\1\61\2\0\12\65"+
    "\41\0\3\61\2\0\12\65\6\0\130\44\10\0\51\44\1\61\1\44"+
    "\5\0\106\44\12\0\35\44\3\0\14\61\4\0\14\61\12\0\12\65"+
    "\36\44\2\0\5\44\13\0\54\44\4\0\21\61\7\44\2\61\6\0"+
    "\12\65\46\0\27\44\5\61\4\0\65\44\12\61\1\0\35\61\2\0"+
    "\1\61\12\65\6\0\12\65\15\0\1\44\130\0\5\61\57\44\21\61"+
    "\7\44\4\0\12\65\21\0\11\61\14\0\3\61\36\44\15\61\2\44"+
    "\12\65\54\44\16\61\14\0\44\44\24\61\10\0\12\65\3\0\3\44"+
    "\12\65\44\44\122\0\3\61\1\0\25\61\4\44\1\61\4\44\3\61"+
    "\2\44\11\0\300\44\47\61\25\0\4\61\u0116\44\2\0\6\44\2\0"+
    "\46\44\2\0\6\44\2\0\10\44\1\0\1\44\1\0\1\44\1\0"+
    "\1\44\1\0\37\44\2\0\65\44\1\0\7\44\1\0\1\44\3\0"+
    "\3\44\1\0\7\44\3\0\4\44\2\0\6\44\4\0\15\44\5\0"+
    "\3\44\1\0\7\44\16\0\5\61\32\0\5\61\20\0\2\44\23\0"+
    "\1\44\13\0\5\61\5\0\6\61\1\0\1\44\15\0\1\44\20\0"+
    "\15\44\3\0\14\44\1\44\16\44\25\0\15\61\4\0\1\61\3\0"+
    "\14\61\21\0\1\44\4\0\1\44\2\0\12\44\1\0\1\44\3\0"+
    "\5\44\6\0\1\44\1\0\1\44\1\0\1\44\1\0\4\44\1\0"+
    "\13\44\2\0\4\44\5\0\5\44\4\0\1\44\21\0\51\44\u0a77\0"+
    "\57\44\1\0\57\44\1\0\205\44\6\0\4\44\3\61\2\44\14\0"+
    "\46\44\1\0\1\44\5\0\1\44\2\0\70\44\7\0\1\44\17\0"+
    "\1\61\27\44\11\0\7\44\1\0\7\44\1\0\7\44\1\0\7\44"+
    "\1\0\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0\40\61"+
    "\57\0\1\44\u01d5\0\3\44\31\0\11\44\6\61\1\0\5\44\2\0"+
    "\5\44\4\0\126\44\2\0\2\61\2\0\3\44\1\0\132\44\1\0"+
    "\4\44\5\0\51\44\3\0\136\44\21\0\33\44\65\0\20\44\u0200\0"+
    "\u19b6\44\112\0\u51cd\44\63\0\u048d\44\103\0\56\44\2\0\u010d\44\3\0"+
    "\20\44\12\65\2\44\24\0\57\44\1\61\4\0\12\61\1\0\31\44"+
    "\7\0\1\61\120\44\2\61\45\0\11\44\2\0\147\44\2\0\4\44"+
    "\1\0\4\44\14\0\13\44\115\0\12\44\1\61\3\44\1\61\4\44"+
    "\1\61\27\44\5\61\20\0\1\44\7\0\64\44\14\0\2\61\62\44"+
    "\21\61\13\0\12\65\6\0\22\61\6\44\3\0\1\44\4\0\12\65"+
    "\34\44\10\61\2\0\27\44\15\61\14\0\35\44\3\0\4\61\57\44"+
    "\16\61\16\0\1\44\12\65\46\0\51\44\16\61\11\0\3\44\1\61"+
    "\10\44\2\61\2\0\12\65\6\0\27\44\3\0\1\44\1\61\4\0"+
    "\60\44\1\61\1\44\3\61\2\44\2\61\5\44\2\61\1\44\1\61"+
    "\1\44\30\0\3\44\2\0\13\44\5\61\2\0\3\44\2\61\12\0"+
    "\6\44\2\0\6\44\2\0\6\44\11\0\7\44\1\0\7\44\221\0"+
    "\43\44\10\61\1\0\2\61\2\0\12\65\6\0\u2ba4\44\14\0\27\44"+
    "\4\0\61\44\u2104\0\u016e\44\2\0\152\44\46\0\7\44\14\0\5\44"+
    "\5\0\1\44\1\61\12\44\1\0\15\44\1\0\5\44\1\0\1\44"+
    "\1\0\2\44\1\0\2\44\1\0\154\44\41\0\u016b\44\22\0\100\44"+
    "\2\0\66\44\50\0\15\44\3\0\20\61\20\0\7\61\14\0\2\44"+
    "\30\0\3\44\31\0\1\44\6\0\5\44\1\0\207\44\2\0\1\61"+
    "\4\0\1\44\13\0\12\65\7\0\32\44\4\0\1\44\1\0\32\44"+
    "\13\0\131\44\3\0\6\44\2\0\6\44\2\0\6\44\2\0\3\44"+
    "\3\0\2\44\3\0\2\44\22\0\3\61\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\22\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\3\1"+
    "\1\25\1\26\1\27\2\26\1\30\3\26\1\2\1\0"+
    "\1\5\1\31\17\5\1\32\11\5\1\33\5\5\1\34"+
    "\1\35\1\3\1\36\1\37\2\0\1\27\1\30\14\5"+
    "\1\40\1\41\1\5\1\42\1\43\1\5\1\44\2\5"+
    "\1\45\13\5\1\46\1\47\11\5\1\50\1\51\5\5"+
    "\1\52\1\53\1\54\1\55\1\5\1\56\4\5\1\57"+
    "\1\0\1\5\1\60\2\5\1\61\3\5\1\62\10\5"+
    "\1\63\1\64\1\0\1\47\6\5\1\65\2\5\1\66"+
    "\4\5\1\67\1\5\1\70\1\5\1\71\1\5\1\72"+
    "\2\5\1\73\1\74\1\5\1\75\1\5\1\76\1\77"+
    "\1\5\1\100\1\101\1\5\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0113"+
    "\0\u0113\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113"+
    "\0\u0113\0\u0113\0\u0113\0\u055f\0\u0113\0\u0596\0\u0113\0\u0113"+
    "\0\u05cd\0\u0113\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717"+
    "\0\u0113\0\u0113\0\u074e\0\u0785\0\u0113\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0596\0\u0898\0\u0226\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0226\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0226\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u05cd\0\u0672"+
    "\0\u0faf\0\u0fe6\0\u0785\0\u07f3\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u0226\0\u0226\0\u12b1\0\u0226\0\u0226\0\u12e8\0\u0226\0\u131f"+
    "\0\u1356\0\u0226\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u0113\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u0226\0\u0226\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u0226"+
    "\0\u0226\0\u0226\0\u0226\0\u1923\0\u0226\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u0226\0\u1a36\0\u1a6d\0\u0226\0\u1aa4\0\u1adb\0\u0226"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u0226\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u0226\0\u0226\0\u1d6f\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u0226\0\u1ef0"+
    "\0\u1f27\0\u0226\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u0226\0\u203a"+
    "\0\u0226\0\u2071\0\u0226\0\u20a8\0\u0226\0\u20df\0\u2116\0\u0226"+
    "\0\u0226\0\u214d\0\u0226\0\u2184\0\u0226\0\u0226\0\u21bb\0\u0226"+
    "\0\u0226\0\u21f2\0\u0226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\15\1\27\1\15\1\30\1\31\2\15"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\15\1\45\1\6\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\2\15\1\6"+
    "\1\7\1\56\1\57\1\60\1\6\41\61\1\62\24\61"+
    "\1\63\52\61\1\64\13\61\1\63\42\61\1\65\23\61"+
    "\1\66\43\61\1\67\22\61\1\70\70\0\1\7\2\71"+
    "\43\0\1\72\12\0\1\7\11\0\1\15\1\73\24\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\2\15\1\74\23\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\13\15\1\75\12\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\26\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\2\15\1\76\20\15\1\77\1\100"+
    "\1\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\15\15\1\101\10\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\4\15\1\102"+
    "\3\15\1\103\4\15\1\104\3\15\1\105\4\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\6\15\1\106\1\15\1\107\15\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\7\15\1\110"+
    "\16\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\1\15\1\111\24\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\13\15\1\112"+
    "\12\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\2\15\1\113\4\15\1\114\1\15\1\115"+
    "\14\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\13\15\1\116\12\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\1\15\1\117"+
    "\2\15\1\120\2\15\1\121\3\15\1\122\12\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\1\15\1\123\17\15\1\124\4\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\2\15\1\125"+
    "\4\15\1\126\16\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\13\15\1\127\12\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\4\15\1\130\3\15\1\131\2\15\1\132\5\15\1\133"+
    "\4\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\44\0\1\134\21\0\1\135\50\0\1\136\71\0"+
    "\1\137\21\0\26\53\10\0\2\53\1\0\2\53\7\0"+
    "\3\53\3\0\1\53\56\0\1\54\16\0\26\140\11\0"+
    "\1\140\12\0\2\140\71\0\1\141\70\0\1\60\46\0"+
    "\1\142\17\0\1\60\10\0\1\61\3\0\1\61\6\0"+
    "\1\61\16\0\1\61\77\0\1\143\23\0\1\61\3\0"+
    "\1\61\6\0\1\61\17\0\1\61\67\0\1\144\32\0"+
    "\1\61\3\0\1\61\6\0\1\61\46\0\2\71\43\0"+
    "\1\72\24\0\2\15\1\145\23\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\24\15\1\146"+
    "\1\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\3\15\1\147\22\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\6\15\1\150"+
    "\17\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\5\15\1\151\20\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\1\15\1\152"+
    "\17\15\1\153\4\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\15\15\1\154\10\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\5\15\1\155\20\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\10\15\1\156\15\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\24\15\1\157\1\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\15\15\1\160\10\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\11\15\1\161\14\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\4\15\1\162\21\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\1\15\1\163\24\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\7\15\1\164\16\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\22\15\1\165\3\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\7\15\1\166\16\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\15\15\1\167\10\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\10\15\1\170\15\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\25\15\1\171\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\17\15\1\172\6\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\6\15"+
    "\1\173\17\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\15\15\1\174\10\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\6\15"+
    "\1\175\17\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\6\15\1\176\17\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\21\15"+
    "\1\177\4\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\13\15\1\200\12\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\2\15"+
    "\1\201\23\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\3\15\1\202\13\15\1\203\6\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\2\15\1\204\14\15\1\205\6\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\44\0\1\134"+
    "\70\0\1\142\17\0\1\135\1\0\62\136\1\0\4\136"+
    "\62\141\1\206\4\141\65\0\1\207\6\0\3\15\1\210"+
    "\22\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\4\15\1\211\21\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\17\15\1\212"+
    "\6\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\4\15\1\213\21\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\6\15\1\214"+
    "\17\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\6\15\1\215\17\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\14\15\1\216"+
    "\11\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\24\15\1\217\1\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\17\15\1\220"+
    "\6\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\4\15\1\221\21\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\4\15\1\222"+
    "\21\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\21\15\1\223\4\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\17\15\1\224"+
    "\6\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\6\15\1\225\17\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\11\15\1\226"+
    "\14\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\21\15\1\227\4\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\4\15\1\230"+
    "\21\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\16\15\1\231\7\15\10\0\2\15\1\0"+
    "\2\53\7\0\3\15\3\0\1\15\6\0\12\15\1\232"+
    "\13\15\10\0\2\15\1\0\2\53\7\0\3\15\3\0"+
    "\1\15\6\0\1\15\1\233\2\15\1\234\21\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\2\15\1\235\23\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\6\15\1\236\17\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\3\15\1\237\22\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\4\15\1\240\21\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\7\15\1\156\16\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\13\15\1\241\12\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\4\15\1\242\21\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\61\0\1\243\4\0\1\207\6\0"+
    "\4\15\1\244\21\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\16\15\1\245\7\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\1\15\1\246\24\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\2\15\1\247\23\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\22\15\1\250\3\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\1\15\1\251\24\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\13\15\1\252\12\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\21\15\1\253\4\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\4\15\1\254\21\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\2\15\1\255\23\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\4\15\1\256\21\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\15\15\1\257\10\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\17\15\1\260\6\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\2\15\1\261\23\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\26\15\10\0\2\15\1\0\2\53\7\0\1\262\2\15"+
    "\3\0\1\15\6\0\10\15\1\263\15\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\6\15"+
    "\1\264\17\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\6\15\1\265\17\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\17\15"+
    "\1\266\6\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\44\0\1\267\20\0\1\267\1\270\6\0"+
    "\5\15\1\271\20\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\7\15\1\272\16\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\16\15\1\273\7\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\6\15\1\274\17\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\6\15\1\275\17\15\10\0\2\15\1\0\2\53\7\0"+
    "\3\15\3\0\1\15\6\0\2\15\1\276\23\15\10\0"+
    "\2\15\1\0\2\53\7\0\3\15\3\0\1\15\6\0"+
    "\26\15\10\0\2\15\1\0\2\53\7\0\1\277\2\15"+
    "\3\0\1\15\6\0\13\15\1\300\12\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\13\15"+
    "\1\301\12\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\4\15\1\302\21\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\21\15"+
    "\1\303\4\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\4\15\1\304\21\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\6\0\15\15"+
    "\1\305\10\15\10\0\2\15\1\0\2\53\7\0\3\15"+
    "\3\0\1\15\6\0\21\15\1\306\4\15\10\0\2\15"+
    "\1\0\2\53\7\0\3\15\3\0\1\15\66\0\1\270"+
    "\6\0\6\15\1\307\17\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\4\15\1\310\21\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\7\15\1\311\16\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\22\15\1\312\3\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\4\15\1\313\21\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\13\15\1\314\12\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\2\15\1\315\23\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\3\15\1\316\22\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\6\15\1\317\17\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\15\15\1\320\10\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\4\15\1\321\21\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\1\15\1\322\24\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\16\15\1\323\7\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\5\15\1\324\20\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\17\15\1\325\6\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\6\15\1\326\17\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\21\15\1\327\4\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\2\15\1\330\23\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\4\15\1\331\21\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\6\0\1\15\1\332\24\15"+
    "\10\0\2\15\1\0\2\53\7\0\3\15\3\0\1\15"+
    "\6\0\2\15\1\333\23\15\10\0\2\15\1\0\2\53"+
    "\7\0\3\15\3\0\1\15\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8745];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\22\1\10\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\6\1\2\11\2\1\1\11"+
    "\4\1\1\0\46\1\2\0\43\1\1\11\34\1\1\0"+
    "\23\1\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 67: break;
        case 44: 
          { return TaraTypes.WITH;
          }
        case 68: break;
        case 36: 
          { return TaraTypes.VAR;
          }
        case 69: break;
        case 16: 
          { return TaraTypes.COLON;
          }
        case 70: break;
        case 63: 
          { return TaraTypes.ABSTRACT;
          }
        case 71: break;
        case 66: 
          { return TaraTypes.DEFINITION;
          }
        case 72: break;
        case 23: 
          { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
          }
        case 73: break;
        case 11: 
          { return TaraTypes.RIGHT_CURLY;
          }
        case 74: break;
        case 39: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 75: break;
        case 24: 
          { yybegin(YYINITIAL); return TaraTypes.EXPRESSION_END;
          }
        case 76: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 77: break;
        case 7: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 78: break;
        case 13: 
          { yybegin(EXPRESSION); return TaraTypes.EXPRESSION_BEGIN;
          }
        case 79: break;
        case 17: 
          { return TaraTypes.EQUALS;
          }
        case 80: break;
        case 52: 
          { return TaraTypes.FINAL;
          }
        case 81: break;
        case 14: 
          { return TaraTypes.DOT;
          }
        case 82: break;
        case 53: 
          { return TaraTypes.STRING_TYPE;
          }
        case 83: break;
        case 48: 
          { return TaraTypes.NAMED;
          }
        case 84: break;
        case 62: 
          { return TaraTypes.TERMINAL;
          }
        case 85: break;
        case 42: 
          { return TaraTypes.DATE_TYPE;
          }
        case 86: break;
        case 5: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 87: break;
        case 49: 
          { return TaraTypes.EMPTY_REF;
          }
        case 88: break;
        case 6: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 89: break;
        case 57: 
          { return TaraTypes.PRIVATE;
          }
        case 90: break;
        case 28: 
          { yybegin(EXPRESSION_MULTILINE); return TaraTypes.EXPRESSION_BEGIN;
          }
        case 91: break;
        case 60: 
          { return TaraTypes.FEATURE;
          }
        case 92: break;
        case 37: 
          { return TaraTypes.DSL;
          }
        case 93: break;
        case 29: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 94: break;
        case 19: 
          { return TaraTypes.METRIC_VALUE_KEY;
          }
        case 95: break;
        case 4: 
          { return inline();
          }
        case 96: break;
        case 31: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 97: break;
        case 56: 
          { return TaraTypes.EXTENDS;
          }
        case 98: break;
        case 30: 
          { yybegin(MULTILINE); return TaraTypes.QUOTE_BEGIN;
          }
        case 99: break;
        case 65: 
          { return TaraTypes.PROTOTYPE;
          }
        case 100: break;
        case 18: 
          { return TaraTypes.STAR;
          }
        case 101: break;
        case 54: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 102: break;
        case 10: 
          { return TaraTypes.LEFT_CURLY;
          }
        case 103: break;
        case 9: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 104: break;
        case 21: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 105: break;
        case 41: 
          { return TaraTypes.TIME_TYPE;
          }
        case 106: break;
        case 20: 
          { return semicolon();
          }
        case 107: break;
        case 35: 
          { return TaraTypes.ANY;
          }
        case 108: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 109: break;
        case 45: 
          { return TaraTypes.INTO;
          }
        case 110: break;
        case 50: 
          { return TaraTypes.TUPLE_TYPE;
          }
        case 111: break;
        case 47: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 112: break;
        case 38: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 113: break;
        case 40: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 114: break;
        case 26: 
          { return TaraTypes.AS;
          }
        case 115: break;
        case 25: 
          { return TaraTypes.ON;
          }
        case 116: break;
        case 32: 
          { return TaraTypes.SUB;
          }
        case 117: break;
        case 61: 
          { return TaraTypes.ENCLOSED;
          }
        case 118: break;
        case 12: 
          { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
          }
        case 119: break;
        case 58: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 120: break;
        case 27: 
          { return TaraTypes.IS;
          }
        case 121: break;
        case 33: 
          { return TaraTypes.USE;
          }
        case 122: break;
        case 59: 
          { return TaraTypes.INT_TYPE;
          }
        case 123: break;
        case 55: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 124: break;
        case 46: 
          { return TaraTypes.MAIN;
          }
        case 125: break;
        case 64: 
          { return TaraTypes.FUNCTION_TYPE;
          }
        case 126: break;
        case 43: 
          { return TaraTypes.WORD_KEY;
          }
        case 127: break;
        case 22: 
          { return TaraTypes.CHARACTER;
          }
        case 128: break;
        case 51: 
          { return TaraTypes.FACET;
          }
        case 129: break;
        case 15: 
          { return TaraTypes.COMMA;
          }
        case 130: break;
        case 34: 
          { return TaraTypes.HAS;
          }
        case 131: break;
        case 2: 
          { return newlineIndent();
          }
        case 132: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 220: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
