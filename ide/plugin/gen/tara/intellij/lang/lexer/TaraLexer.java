/* The following code was generated by JFlex 1.4.3 on 21/12/15 10:51 */

package tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import tara.intellij.lang.psi.TaraTypes;

import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/12/15 10:51 from the specification file
 * <tt>/Users/oroncal/workspace/tara/language/grammar/src/tara/lang/lexicon/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EXPRESSION = 6;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION_MULTILINE = 8;
  public static final int MULTILINE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
      "\11\57\1\3\1\60\2\0\1\1\16\57\4\0\1\2\1\61\1\41" +
          "\1\0\1\44\1\54\1\0\1\42\1\33\1\34\1\53\1\62\1\50" +
          "\1\43\1\45\1\47\12\63\1\51\1\55\1\0\1\52\1\4\2\0" +
          "\4\44\1\56\25\44\1\35\1\64\1\36\1\0\1\44\1\0\1\11" +
          "\1\7\1\26\1\15\1\14\1\31\1\32\1\10\1\20\2\44\1\16" +
          "\1\30\1\22\1\24\1\27\1\44\1\13\1\5\1\21\1\6\1\12" +
          "\1\17\1\25\1\23\1\44\1\37\1\1\1\40\1\0\41\57\2\0" +
          "\4\44\4\0\1\44\2\0\1\57\2\0\1\54\4\0\1\44\1\0" +
          "\1\46\2\0\1\44\5\0\27\44\1\0\37\44\1\0\u01ca\44\4\0" +
          "\14\44\16\0\5\44\7\0\1\44\1\0\1\44\21\0\160\57\5\44" +
          "\1\0\2\44\2\0\4\44\10\0\1\44\1\0\3\44\1\0\1\44" +
          "\1\0\24\44\1\0\123\44\1\0\213\44\1\0\5\57\2\0\236\44" +
          "\11\0\46\44\2\0\1\44\7\0\47\44\7\0\1\44\1\0\55\57" +
          "\1\0\1\57\1\0\2\57\1\0\2\57\1\0\1\57\10\0\33\44" +
          "\5\0\3\44\15\0\5\57\6\0\1\44\4\0\13\57\5\0\53\44" +
          "\25\57\12\63\4\0\2\44\1\57\143\44\1\0\1\44\10\57\1\0" +
          "\6\57\2\44\2\57\1\0\4\57\2\44\12\63\3\44\2\0\1\44" +
          "\17\0\1\57\1\44\1\57\36\44\33\57\2\0\131\44\13\57\1\44" +
          "\16\0\12\63\41\44\11\57\2\44\4\0\1\44\5\0\26\44\4\57" +
          "\1\44\11\57\1\44\3\57\1\44\5\57\22\0\31\44\3\57\104\0" +
          "\1\44\1\0\13\44\67\0\33\57\1\0\4\57\66\44\3\57\1\44" +
          "\22\57\1\44\7\57\12\44\2\57\2\0\12\63\1\0\7\44\1\0" +
          "\7\44\1\0\3\57\1\0\10\44\2\0\2\44\2\0\26\44\1\0" +
          "\7\44\1\0\1\44\3\0\4\44\2\0\1\57\1\44\7\57\2\0" +
          "\2\57\2\0\3\57\1\44\10\0\1\57\4\0\2\44\1\0\3\44" +
          "\2\57\2\0\12\63\4\44\7\0\1\44\5\0\3\57\1\0\6\44" +
          "\4\0\2\44\2\0\26\44\1\0\7\44\1\0\2\44\1\0\2\44" +
          "\1\0\2\44\2\0\1\57\1\0\5\57\4\0\2\57\2\0\3\57" +
          "\3\0\1\57\7\0\4\44\1\0\1\44\7\0\12\63\2\57\3\44" +
          "\1\57\13\0\3\57\1\0\11\44\1\0\3\44\1\0\26\44\1\0" +
          "\7\44\1\0\2\44\1\0\5\44\2\0\1\57\1\44\10\57\1\0" +
          "\3\57\1\0\3\57\2\0\1\44\17\0\2\44\2\57\2\0\12\63" +
          "\1\0\1\44\17\0\3\57\1\0\10\44\2\0\2\44\2\0\26\44" +
          "\1\0\7\44\1\0\2\44\1\0\5\44\2\0\1\57\1\44\7\57" +
          "\2\0\2\57\2\0\3\57\10\0\2\57\4\0\2\44\1\0\3\44" +
          "\2\57\2\0\12\63\1\0\1\44\20\0\1\57\1\44\1\0\6\44" +
          "\3\0\3\44\1\0\4\44\3\0\2\44\1\0\1\44\1\0\2\44" +
          "\3\0\2\44\3\0\3\44\3\0\14\44\4\0\5\57\3\0\3\57" +
          "\1\0\4\57\2\0\1\44\6\0\1\57\16\0\12\63\11\0\1\44" +
          "\7\0\3\57\1\0\10\44\1\0\3\44\1\0\27\44\1\0\12\44" +
          "\1\0\5\44\3\0\1\44\7\57\1\0\3\57\1\0\4\57\7\0" +
          "\2\57\1\0\2\44\6\0\2\44\2\57\2\0\12\63\22\0\2\57" +
          "\1\0\10\44\1\0\3\44\1\0\27\44\1\0\12\44\1\0\5\44" +
          "\2\0\1\57\1\44\7\57\1\0\3\57\1\0\4\57\7\0\2\57" +
          "\7\0\1\44\1\0\2\44\2\57\2\0\12\63\1\0\2\44\17\0" +
          "\2\57\1\0\10\44\1\0\3\44\1\0\51\44\2\0\1\44\7\57" +
          "\1\0\3\57\1\0\4\57\1\44\10\0\1\57\10\0\2\44\2\57" +
          "\2\0\12\63\12\0\6\44\2\0\2\57\1\0\22\44\3\0\30\44" +
          "\1\0\11\44\1\0\1\44\2\0\7\44\3\0\1\57\4\0\6\57" +
          "\1\0\1\57\1\0\10\57\22\0\2\57\15\0\60\44\1\57\2\44" +
          "\7\57\4\0\10\44\10\57\1\0\12\63\47\0\2\44\1\0\1\44" +
          "\2\0\2\44\1\0\1\44\2\0\1\44\6\0\4\44\1\0\7\44" +
          "\1\0\3\44\1\0\1\44\1\0\1\44\2\0\2\44\1\0\4\44" +
          "\1\57\2\44\6\57\1\0\2\57\1\44\2\0\5\44\1\0\1\44" +
          "\1\0\6\57\2\0\12\63\2\0\4\44\40\0\1\44\27\0\2\57" +
    "\6\0\12\63\13\0\1\57\1\0\1\57\1\0\1\57\4\0\2\57"+
          "\10\44\1\0\44\44\4\0\24\57\1\0\2\57\5\44\13\57\1\0" +
          "\44\57\11\0\1\57\71\0\53\44\24\57\1\44\12\63\6\0\6\44" +
          "\4\57\4\44\3\57\1\44\3\57\2\44\7\57\3\44\4\57\15\44" +
          "\14\57\1\44\1\57\12\63\4\57\2\0\46\44\1\0\1\44\5\0" +
          "\1\44\2\0\53\44\1\0\u014d\44\1\0\4\44\2\0\7\44\1\0" +
          "\1\44\1\0\4\44\2\0\51\44\1\0\4\44\2\0\41\44\1\0" +
          "\4\44\2\0\7\44\1\0\1\44\1\0\4\44\2\0\17\44\1\0" +
          "\71\44\1\0\4\44\2\0\103\44\2\0\3\57\40\0\20\44\20\0" +
          "\125\44\14\0\u026c\44\2\0\21\44\1\0\32\44\5\0\113\44\3\0" +
          "\3\44\17\0\15\44\1\0\4\44\3\57\13\0\22\44\3\57\13\0" +
          "\22\44\2\57\14\0\15\44\1\0\3\44\1\0\2\57\14\0\64\44" +
          "\40\57\3\0\1\44\3\0\2\44\1\57\2\0\12\63\41\0\3\57" +
          "\2\0\12\63\6\0\130\44\10\0\51\44\1\57\1\44\5\0\106\44" +
          "\12\0\35\44\3\0\14\57\4\0\14\57\12\0\12\63\36\44\2\0" +
          "\5\44\13\0\54\44\4\0\21\57\7\44\2\57\6\0\12\63\46\0" +
          "\27\44\5\57\4\0\65\44\12\57\1\0\35\57\2\0\1\57\12\63" +
          "\6\0\12\63\15\0\1\44\130\0\5\57\57\44\21\57\7\44\4\0" +
          "\12\63\21\0\11\57\14\0\3\57\36\44\15\57\2\44\12\63\54\44" +
          "\16\57\14\0\44\44\24\57\10\0\12\63\3\0\3\44\12\63\44\44" +
          "\122\0\3\57\1\0\25\57\4\44\1\57\4\44\3\57\2\44\11\0" +
          "\300\44\47\57\25\0\4\57\u0116\44\2\0\6\44\2\0\46\44\2\0" +
          "\6\44\2\0\10\44\1\0\1\44\1\0\1\44\1\0\1\44\1\0" +
          "\37\44\2\0\65\44\1\0\7\44\1\0\1\44\3\0\3\44\1\0" +
          "\7\44\3\0\4\44\2\0\6\44\4\0\15\44\5\0\3\44\1\0" +
          "\7\44\16\0\5\57\32\0\5\57\20\0\2\44\23\0\1\44\13\0" +
          "\5\57\5\0\6\57\1\0\1\44\15\0\1\44\20\0\15\44\3\0" +
          "\14\44\1\44\16\44\25\0\15\57\4\0\1\57\3\0\14\57\21\0" +
          "\1\44\4\0\1\44\2\0\12\44\1\0\1\44\3\0\5\44\6\0" +
          "\1\44\1\0\1\44\1\0\1\44\1\0\4\44\1\0\13\44\2\0" +
          "\4\44\5\0\5\44\4\0\1\44\21\0\51\44\u0a77\0\57\44\1\0" +
          "\57\44\1\0\205\44\6\0\4\44\3\57\2\44\14\0\46\44\1\0" +
          "\1\44\5\0\1\44\2\0\70\44\7\0\1\44\17\0\1\57\27\44" +
          "\11\0\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0\7\44" +
          "\1\0\7\44\1\0\7\44\1\0\7\44\1\0\40\57\57\0\1\44" +
          "\u01d5\0\3\44\31\0\11\44\6\57\1\0\5\44\2\0\5\44\4\0" +
          "\126\44\2\0\2\57\2\0\3\44\1\0\132\44\1\0\4\44\5\0" +
          "\51\44\3\0\136\44\21\0\33\44\65\0\20\44\u0200\0\u19b6\44\112\0" +
          "\u51cd\44\63\0\u048d\44\103\0\56\44\2\0\u010d\44\3\0\20\44\12\63" +
          "\2\44\24\0\57\44\1\57\4\0\12\57\1\0\31\44\7\0\1\57" +
          "\120\44\2\57\45\0\11\44\2\0\147\44\2\0\4\44\1\0\4\44" +
          "\14\0\13\44\115\0\12\44\1\57\3\44\1\57\4\44\1\57\27\44" +
          "\5\57\20\0\1\44\7\0\64\44\14\0\2\57\62\44\21\57\13\0" +
          "\12\63\6\0\22\57\6\44\3\0\1\44\4\0\12\63\34\44\10\57" +
          "\2\0\27\44\15\57\14\0\35\44\3\0\4\57\57\44\16\57\16\0" +
          "\1\44\12\63\46\0\51\44\16\57\11\0\3\44\1\57\10\44\2\57" +
          "\2\0\12\63\6\0\27\44\3\0\1\44\1\57\4\0\60\44\1\57" +
          "\1\44\3\57\2\44\2\57\5\44\2\57\1\44\1\57\1\44\30\0" +
          "\3\44\2\0\13\44\5\57\2\0\3\44\2\57\12\0\6\44\2\0" +
          "\6\44\2\0\6\44\11\0\7\44\1\0\7\44\221\0\43\44\10\57" +
          "\1\0\2\57\2\0\12\63\6\0\u2ba4\44\14\0\27\44\4\0\61\44" +
          "\u2104\0\u016e\44\2\0\152\44\46\0\7\44\14\0\5\44\5\0\1\44" +
          "\1\57\12\44\1\0\15\44\1\0\5\44\1\0\1\44\1\0\2\44" +
          "\1\0\2\44\1\0\154\44\41\0\u016b\44\22\0\100\44\2\0\66\44" +
          "\50\0\15\44\3\0\20\57\20\0\7\57\14\0\2\44\30\0\3\44" +
          "\31\0\1\44\6\0\5\44\1\0\207\44\2\0\1\57\4\0\1\44" +
          "\13\0\12\63\7\0\32\44\4\0\1\44\1\0\32\44\13\0\131\44" +
          "\3\0\6\44\2\0\6\44\2\0\6\44\2\0\3\44\3\0\2\44" +
          "\3\0\2\44\22\0\3\57\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\22\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\25\1\26\1\27\2\26\1\30\3\26\1\2\1\0"+
        "\5\5\1\31\14\5\1\32\6\5\1\33\7\5\1\34" +
    "\1\35\1\3\1\36\3\0\1\27\1\30\1\37\1\5"+
    "\1\40\1\5\1\41\1\5\1\42\1\43\4\5\1\44"+
        "\23\5\1\45\1\46\1\47\7\5\1\50\1\5\1\51" +
        "\1\52\1\5\1\53\1\5\1\54\1\5\1\55\11\5" +
        "\1\0\6\5\1\56\2\5\1\57\11\5\1\60\1\0" +
        "\1\47\1\61\5\5\1\62\2\5\1\63\7\5\1\64" +
        "\3\5\1\65\1\66\1\5\1\67\1\5\1\70\3\5" +
        "\1\71\1\72\1\73\1\74\1\75\2\5\1\76\1\77" +
        "\1\100\1\101";

  private static int [] zzUnpackAction() {
    int[] result = new int[224];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0109"+
    "\0\u0109\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u0109\0\u0109\0\u0109\0\u0109\0\u0109"+
    "\0\u0109\0\u0109\0\u0109\0\u052d\0\u0109\0\u0562\0\u0109\0\u0109"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u0109"+
    "\0\u0109\0\u070a\0\u073f\0\u0109\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0562\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0350\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0350\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0350\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
        "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0597\0\u0f1d\0\u0f52" +
        "\0\u0f87\0\u073f\0\u07a9\0\u0350\0\u0fbc\0\u0350\0\u0ff1\0\u0350" +
        "\0\u1026\0\u0350\0\u0350\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u0350" +
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
        "\0\u147f\0\u14b4\0\u14e9\0\u0109\0\u0109\0\u151e\0\u1553\0\u1588" +
        "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u0350\0\u16c6\0\u0350" +
        "\0\u0350\0\u16fb\0\u0350\0\u1730\0\u0350\0\u1765\0\u0350\0\u179a" +
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942"+
        "\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u0350" +
        "\0\u1aea\0\u1b1f\0\u0350\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28" +
        "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u0350\0\u1d31\0\u1d31\0\u0350" +
        "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u0350\0\u1e6f\0\u1ea4" +
        "\0\u0350\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017" +
        "\0\u0350\0\u204c\0\u2081\0\u20b6\0\u0350\0\u0350\0\u20eb\0\u0350" +
        "\0\u2120\0\u0350\0\u2155\0\u218a\0\u21bf\0\u0350\0\u0350\0\u0350" +
        "\0\u0350\0\u0350\0\u21f4\0\u2229\0\u0350\0\u0350\0\u0350\0\u0350";

  private static int [] zzUnpackRowMap() {
    int[] result = new int[224];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\23\1\30\1\23\1\31\1\32"+
        "\1\23\1\33\1\23\1\34\1\35\1\36\1\37\1\40" +
        "\1\41\1\42\1\43\1\44\1\23\1\45\1\6\1\46" +
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\23\1\6" +
        "\1\7\1\55\1\56\1\57\1\6\41\60\1\61\22\60" +
        "\1\62\52\60\1\63\11\60\1\62\42\60\1\64\21\60" +
        "\1\65\43\60\1\66\20\60\1\67\66\0\1\7\2\70" +
        "\43\0\1\71\10\0\1\7\11\0\1\23\1\72\12\23" +
        "\1\73\11\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\1\74\25\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\17\23\1\75" +
        "\6\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\4\23\1\76\21\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\1\77\1\23" +
        "\1\100\12\23\1\101\10\23\10\0\2\23\1\0\2\53" +
        "\6\0\2\23\3\0\1\23\6\0\4\23\1\102\21\23" +
        "\10\0\2\23\1\0\2\53\6\0\2\23\3\0\1\23" +
        "\6\0\7\23\1\103\16\23\10\0\2\23\1\0\2\53" +
        "\6\0\2\23\3\0\1\23\6\0\15\23\1\104\2\23" +
        "\1\105\2\23\1\106\2\23\10\0\2\23\1\0\2\53" +
        "\6\0\2\23\3\0\1\23\6\0\1\107\3\23\1\110" +
        "\12\23\1\111\6\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\26\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\13\23\1\112" +
        "\3\23\1\113\6\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\1\114\14\23\1\115\10\23" +
        "\10\0\2\23\1\0\2\53\6\0\2\23\3\0\1\23" +
        "\6\0\1\23\1\116\4\23\1\117\1\120\3\23\1\121" +
        "\12\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\4\23\1\122\21\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\15\23\1\123" +
        "\10\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\17\23\1\124\6\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\6\23\1\125" +
        "\17\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\1\23\1\126\2\23\1\127\1\23\1\130" +
        "\1\131\3\23\1\132\12\23\10\0\2\23\1\0\2\53" +
        "\6\0\2\23\3\0\1\23\44\0\1\133\17\0\1\134" +
        "\50\0\1\135\67\0\1\136\17\0\26\137\11\0\1\137" +
        "\11\0\2\137\3\0\1\137\6\0\26\53\10\0\2\53" +
        "\1\0\2\53\6\0\2\53\3\0\1\53\56\0\1\54" +
        "\70\0\1\140\66\0\1\57\46\0\1\141\15\0\1\57" +
        "\14\0\1\60\5\0\2\60\16\0\1\60\75\0\1\142" +
        "\25\0\1\60\5\0\2\60\17\0\1\60\65\0\1\143" +
        "\34\0\1\60\5\0\2\60\44\0\2\70\43\0\1\71" +
        "\22\0\2\23\1\144\23\23\10\0\2\23\1\0\2\53" +
        "\6\0\2\23\3\0\1\23\6\0\6\23\1\145\17\23" +
        "\10\0\2\23\1\0\2\53\6\0\2\23\3\0\1\23" +
        "\6\0\7\23\1\146\16\23\10\0\2\23\1\0\2\53" +
        "\6\0\2\23\3\0\1\23\6\0\17\23\1\147\6\23" +
        "\10\0\2\23\1\0\2\53\6\0\2\23\3\0\1\23" +
        "\6\0\1\150\25\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\1\151\25\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\16\23" +
        "\1\152\7\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\6\23\1\153\17\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\1\154" +
        "\25\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\21\23\1\155\4\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\14\23\1\156" +
        "\11\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\22\23\1\157\3\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\11\23\1\160" +
        "\14\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\14\23\1\161\11\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\1\23\1\162" +
        "\24\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\14\23\1\163\11\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\6\23\1\164" +
        "\17\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\14\23\1\165\11\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\22\23\1\166" +
        "\3\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\1\23\1\167\24\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\6\23\1\170" +
        "\17\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\23\23\1\171\2\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\14\23\1\172" +
        "\11\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\15\23\1\173\5\23\1\174\2\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\13\23\1\175\3\23\1\176\6\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\15\23\1\177" +
        "\10\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\11\23\1\200\14\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\4\23\1\201" +
        "\21\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\4\23\1\202\21\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\15\23\1\203" +
        "\10\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\44\0\1\133\66\0\1\141\15\0\1\134\1\0" +
        "\60\135\1\0\4\135\5\0\26\137\11\0\1\137\6\0" +
        "\1\204\2\0\2\137\3\0\1\137\1\0\60\140\1\205" +
        "\4\140\63\0\1\206\6\0\13\23\1\207\12\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\11\23\1\210\14\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\14\23\1\211\11\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\17\23\1\212\6\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\11\23\1\213\14\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\7\23\1\214\16\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\14\23\1\215\11\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\7\23\1\216\16\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\2\23\1\217\23\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\3\23\1\220\22\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\10\23\1\221\15\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\7\23\1\222\7\23\1\223\6\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\11\23\1\224" +
        "\14\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\7\23\1\225\16\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\23\23\1\226" +
        "\2\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\7\23\1\227\16\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\13\23\1\230" +
        "\12\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\21\23\1\231\4\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\22\23\1\232" +
        "\3\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\5\23\1\233\20\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\14\23\1\234" +
        "\11\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\21\23\1\235\4\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\1\167\25\23" +
        "\10\0\2\23\1\0\2\53\6\0\2\23\3\0\1\23" +
        "\6\0\25\23\1\236\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\14\23\1\237\11\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\4\23\1\240\21\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\57\0\1\241\4\0\1\206\6\0" +
        "\15\23\1\242\10\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\7\23\1\243\16\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\6\23\1\244\17\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\1\23\1\245\24\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\17\23\1\246\6\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\15\23\1\247\10\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\16\23\1\250\7\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\11\23\1\251\14\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\25\23\1\252\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\7\23\1\253\16\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\13\23" +
        "\1\254\12\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\5\23\1\255\20\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\7\23" +
        "\1\256\16\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\17\23\1\257\6\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\4\23" +
        "\1\260\21\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\17\23\1\261\6\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\14\23" +
        "\1\262\11\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\23\23\1\263\2\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\1\23" +
        "\1\264\24\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\11\23\1\265\14\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\44\0\1\266" +
        "\16\0\1\266\1\267\6\0\25\23\1\270\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\4\23" +
        "\1\271\21\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\4\23\1\272\21\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\6\23" +
        "\1\273\17\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\1\274\25\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\10\23\1\275" +
        "\15\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\7\23\1\276\16\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\7\23\1\277" +
        "\16\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\15\23\1\300\10\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\7\23\1\301" +
        "\16\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\22\23\1\302\3\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\15\23\1\303" +
        "\10\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\14\23\1\304\11\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\14\23\1\305" +
        "\11\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\13\23\1\306\12\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\6\0\7\23\1\307" +
        "\16\23\10\0\2\23\1\0\2\53\6\0\2\23\3\0" +
        "\1\23\6\0\6\23\1\310\17\23\10\0\2\23\1\0" +
        "\2\53\6\0\2\23\3\0\1\23\64\0\1\267\6\0" +
        "\15\23\1\311\10\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\21\23\1\312\4\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\21\23\1\313\4\23\10\0\2\23\1\0\2\53\6\0" +
        "\2\23\3\0\1\23\6\0\7\23\1\314\16\23\10\0" +
        "\2\23\1\0\2\53\6\0\2\23\3\0\1\23\6\0" +
        "\1\315\25\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\6\23\1\316\17\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\4\23" +
        "\1\317\21\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\14\23\1\320\11\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\7\23" +
        "\1\321\16\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\7\23\1\322\16\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\16\23" +
        "\1\323\7\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\17\23\1\324\6\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\15\23" +
        "\1\325\10\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\7\23\1\326\16\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\14\23" +
        "\1\327\11\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\7\23\1\330\16\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\10\23" +
        "\1\331\15\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\11\23\1\332\14\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\15\23" +
        "\1\333\10\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\22\23\1\334\3\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\15\23" +
        "\1\335\10\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\14\23\1\336\11\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\6\0\14\23" +
        "\1\337\11\23\10\0\2\23\1\0\2\53\6\0\2\23" +
        "\3\0\1\23\6\0\7\23\1\340\16\23\10\0\2\23" +
        "\1\0\2\53\6\0\2\23\3\0\1\23\1\0";

  private static int [] zzUnpackTrans() {
    int[] result = new int[8798];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\22\1\10\11\1\1\1\11"+
    "\1\1\2\11\7\1\2\11\2\1\1\11\4\1\1\0"+
        "\45\1\3\0\42\1\2\11\33\1\1\0\24\1\1\0" +
        "\52\1";

  private static int [] zzUnpackAttribute() {
    int[] result = new int[224];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TaraLexer(java.io.Reader in) {
    zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 66: break;
        case 41: 
          { return TaraTypes.WITH;
          }
        case 67: break;
        case 35: 
          { return TaraTypes.VAR;
          }
        case 68: break;
        case 16: 
          { return TaraTypes.COLON;
          }
        case 69: break;
        case 58: 
          { return TaraTypes.ABSTRACT;
          }
        case 70: break;
        case 51: 
          { return TaraTypes.NATIVE;
          }
        case 71: break;
        case 23: 
          { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
          }
        case 72: break;
        case 64: 
          { return TaraTypes.COMPONENT;
          }
        case 73: break;
        case 11: 
          { return TaraTypes.RIGHT_CURLY;
          }
        case 74: break;
        case 39: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 75: break;
        case 24: 
          { yybegin(YYINITIAL); return TaraTypes.EXPRESSION_END;
          }
        case 76: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 77: break;
        case 7: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 78: break;
        case 13: 
          { yybegin(EXPRESSION); return TaraTypes.EXPRESSION_BEGIN;
          }
        case 79: break;
        case 17: 
          { return TaraTypes.EQUALS;
          }
        case 80: break;
        case 48: 
          { return TaraTypes.FINAL;
          }
        case 81: break;
        case 14: 
          { return TaraTypes.DOT;
          }
        case 82: break;
        case 49: 
          { return TaraTypes.STRING_TYPE;
          }
        case 83: break;
        case 63: {
          return TaraTypes.FRAGMENT;
        }
        case 84:
          break;
        case 61: 
          { return TaraTypes.TERMINAL;
          }
        case 85:
          break;
        case 55: 
          { return TaraTypes.CONCEPT;
          }
        case 86:
          break;
        case 40: 
          { return TaraTypes.DATE_TYPE;
          }
        case 87:
          break;
        case 5: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 88:
          break;
        case 46: 
          { return TaraTypes.EMPTY_REF;
          }
        case 89:
          break;
        case 6: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 90:
          break;
        case 56: 
          { return TaraTypes.PRIVATE;
          }
        case 91:
          break;
        case 28: 
          { yybegin(EXPRESSION_MULTILINE); return TaraTypes.EXPRESSION_BEGIN;
          }
        case 92:
          break;
        case 57: 
          { return TaraTypes.FEATURE;
          }
        case 93:
          break;
        case 36: 
          { return TaraTypes.DSL;
          }
        case 94:
          break;
        case 29: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 95:
          break;
        case 19: 
          { return TaraTypes.METRIC_VALUE_KEY;
          }
        case 96:
          break;
        case 4: 
          { return inline();
          }
        case 97:
          break;
        case 53: 
          { return TaraTypes.EXTENDS;
          }
        case 98:
          break;
        case 30: 
          { yybegin(MULTILINE); return TaraTypes.QUOTE_BEGIN;
          }
        case 99:
          break;
        case 65: 
          { return TaraTypes.PROTOTYPE;
          }
        case 100: break;
        case 18: 
          { return TaraTypes.STAR;
          }
        case 101: break;
        case 50: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 102: break;
        case 10: 
          { return TaraTypes.LEFT_CURLY;
          }
        case 103: break;
        case 9: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 104: break;
        case 21: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 105: break;
        case 45: 
          { return TaraTypes.TIME_TYPE;
          }
        case 106: break;
        case 20: 
          { return semicolon();
          }
        case 107: break;
        case 34: 
          { return TaraTypes.ANY;
          }
        case 108: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 109: break;
        case 43: 
          { return TaraTypes.INTO;
          }
        case 110: break;
        case 59: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 111: break;
        case 47: 
          { return TaraTypes.TUPLE_TYPE;
          }
        case 112: break;
        case 38: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 113: break;
        case 44: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 114: break;
        case 25: 
          { return TaraTypes.AS;
          }
        case 115: break;
        case 27: 
          { return TaraTypes.ON;
          }
        case 116: break;
        case 31: 
          { return TaraTypes.SUB;
          }
        case 117: break;
        case 37: 
          { return TaraTypes.ANCHOR_VALUE;
          }
        case 118: break;
        case 60: 
          { return TaraTypes.ENCLOSED;
          }
        case 119: break;
        case 12: 
          { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
          }
        case 120: break;
        case 52: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 121: break;
        case 26: 
          { return TaraTypes.IS;
          }
        case 122: break;
        case 32: 
          { return TaraTypes.USE;
          }
        case 123: break;
        case 54: 
          { return TaraTypes.INT_TYPE;
          }
        case 124: break;
        case 62: 
          { return TaraTypes.FUNCTION_TYPE;
          }
        case 125: break;
        case 42: 
          { return TaraTypes.WORD_KEY;
          }
        case 126: break;
        case 22: 
          { return TaraTypes.CHARACTER;
          }
        case 127: break;
        case 15: 
          { return TaraTypes.COMMA;
          }
        case 128: break;
        case 33: 
          { return TaraTypes.HAS;
          }
        case 129: break;
        case 2: 
          { return newlineIndent();
          }
        case 130: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
              case 225:
                break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
