/* The following code was generated by JFlex 1.4.3 on 30/03/16 12:20 */

package tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import tara.intellij.lang.psi.TaraTypes;

import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/03/16 12:20 from the specification file
 * <tt>/Users/oroncal/workspace/tara/language/grammar/src/tara/lang/lexicon/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int EXPRESSION = 6;
	public static final int QUOTED = 2;
	public static final int YYINITIAL = 0;
	public static final int EXPRESSION_MULTILINE = 8;
	public static final int MULTILINE = 4;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1, 2, 2, 3, 3, 4, 4
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\60\1\3\1\61\2\0\1\1\16\60\4\0\1\2\1\62\1\40" +
			"\1\0\1\43\1\53\1\0\1\41\1\32\1\33\1\52\1\63\1\47" +
			"\1\42\1\44\1\46\12\64\1\50\1\54\1\0\1\51\1\4\2\0" +
			"\4\43\1\57\25\43\1\34\1\65\1\35\1\0\1\43\1\0\1\11" +
			"\1\7\1\26\1\15\1\14\1\31\1\56\1\10\1\20\1\55\1\43" +
			"\1\16\1\30\1\22\1\24\1\27\1\43\1\13\1\5\1\21\1\6" +
			"\1\12\1\17\1\25\1\23\1\43\1\36\1\1\1\37\1\0\41\60" +
			"\2\0\4\43\4\0\1\43\2\0\1\60\2\0\1\53\4\0\1\43" +
			"\1\0\1\45\2\0\1\43\5\0\27\43\1\0\37\43\1\0\u01ca\43" +
			"\4\0\14\43\16\0\5\43\7\0\1\43\1\0\1\43\21\0\160\60" +
			"\5\43\1\0\2\43\2\0\4\43\10\0\1\43\1\0\3\43\1\0" +
			"\1\43\1\0\24\43\1\0\123\43\1\0\213\43\1\0\5\60\2\0" +
			"\236\43\11\0\46\43\2\0\1\43\7\0\47\43\7\0\1\43\1\0" +
			"\55\60\1\0\1\60\1\0\2\60\1\0\2\60\1\0\1\60\10\0" +
			"\33\43\5\0\3\43\15\0\5\60\6\0\1\43\4\0\13\60\5\0" +
			"\53\43\25\60\12\64\4\0\2\43\1\60\143\43\1\0\1\43\10\60" +
			"\1\0\6\60\2\43\2\60\1\0\4\60\2\43\12\64\3\43\2\0" +
			"\1\43\17\0\1\60\1\43\1\60\36\43\33\60\2\0\131\43\13\60" +
			"\1\43\16\0\12\64\41\43\11\60\2\43\4\0\1\43\5\0\26\43" +
			"\4\60\1\43\11\60\1\43\3\60\1\43\5\60\22\0\31\43\3\60" +
			"\104\0\1\43\1\0\13\43\67\0\33\60\1\0\4\60\66\43\3\60" +
			"\1\43\22\60\1\43\7\60\12\43\2\60\2\0\12\64\1\0\7\43" +
			"\1\0\7\43\1\0\3\60\1\0\10\43\2\0\2\43\2\0\26\43" +
			"\1\0\7\43\1\0\1\43\3\0\4\43\2\0\1\60\1\43\7\60" +
			"\2\0\2\60\2\0\3\60\1\43\10\0\1\60\4\0\2\43\1\0" +
			"\3\43\2\60\2\0\12\64\4\43\7\0\1\43\5\0\3\60\1\0" +
			"\6\43\4\0\2\43\2\0\26\43\1\0\7\43\1\0\2\43\1\0" +
			"\2\43\1\0\2\43\2\0\1\60\1\0\5\60\4\0\2\60\2\0" +
			"\3\60\3\0\1\60\7\0\4\43\1\0\1\43\7\0\12\64\2\60" +
			"\3\43\1\60\13\0\3\60\1\0\11\43\1\0\3\43\1\0\26\43" +
			"\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\60\1\43\10\60" +
			"\1\0\3\60\1\0\3\60\2\0\1\43\17\0\2\43\2\60\2\0" +
			"\12\64\1\0\1\43\17\0\3\60\1\0\10\43\2\0\2\43\2\0" +
			"\26\43\1\0\7\43\1\0\2\43\1\0\5\43\2\0\1\60\1\43" +
			"\7\60\2\0\2\60\2\0\3\60\10\0\2\60\4\0\2\43\1\0" +
			"\3\43\2\60\2\0\12\64\1\0\1\43\20\0\1\60\1\43\1\0" +
			"\6\43\3\0\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1\0" +
			"\2\43\3\0\2\43\3\0\3\43\3\0\14\43\4\0\5\60\3\0" +
			"\3\60\1\0\4\60\2\0\1\43\6\0\1\60\16\0\12\64\11\0" +
			"\1\43\7\0\3\60\1\0\10\43\1\0\3\43\1\0\27\43\1\0" +
			"\12\43\1\0\5\43\3\0\1\43\7\60\1\0\3\60\1\0\4\60" +
			"\7\0\2\60\1\0\2\43\6\0\2\43\2\60\2\0\12\64\22\0" +
			"\2\60\1\0\10\43\1\0\3\43\1\0\27\43\1\0\12\43\1\0" +
			"\5\43\2\0\1\60\1\43\7\60\1\0\3\60\1\0\4\60\7\0" +
			"\2\60\7\0\1\43\1\0\2\43\2\60\2\0\12\64\1\0\2\43" +
			"\17\0\2\60\1\0\10\43\1\0\3\43\1\0\51\43\2\0\1\43" +
			"\7\60\1\0\3\60\1\0\4\60\1\43\10\0\1\60\10\0\2\43" +
			"\2\60\2\0\12\64\12\0\6\43\2\0\2\60\1\0\22\43\3\0" +
			"\30\43\1\0\11\43\1\0\1\43\2\0\7\43\3\0\1\60\4\0" +
			"\6\60\1\0\1\60\1\0\10\60\22\0\2\60\15\0\60\43\1\60" +
			"\2\43\7\60\4\0\10\43\10\60\1\0\12\64\47\0\2\43\1\0" +
			"\1\43\2\0\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0" +
			"\7\43\1\0\3\43\1\0\1\43\1\0\1\43\2\0\2\43\1\0" +
			"\4\43\1\60\2\43\6\60\1\0\2\60\1\43\2\0\5\43\1\0" +
			"\1\43\1\0\6\60\2\0\12\64\2\0\4\43\40\0\1\43\27\0" +
			"\2\60\6\0\12\64\13\0\1\60\1\0\1\60\1\0\1\60\4\0" +
			"\2\60\10\43\1\0\44\43\4\0\24\60\1\0\2\60\5\43\13\60" +
			"\1\0\44\60\11\0\1\60\71\0\53\43\24\60\1\43\12\64\6\0" +
			"\6\43\4\60\4\43\3\60\1\43\3\60\2\43\7\60\3\43\4\60" +
			"\15\43\14\60\1\43\1\60\12\64\4\60\2\0\46\43\1\0\1\43" +
			"\5\0\1\43\2\0\53\43\1\0\u014d\43\1\0\4\43\2\0\7\43" +
			"\1\0\1\43\1\0\4\43\2\0\51\43\1\0\4\43\2\0\41\43" +
			"\1\0\4\43\2\0\7\43\1\0\1\43\1\0\4\43\2\0\17\43" +
			"\1\0\71\43\1\0\4\43\2\0\103\43\2\0\3\60\40\0\20\43" +
			"\20\0\125\43\14\0\u026c\43\2\0\21\43\1\0\32\43\5\0\113\43" +
			"\3\0\3\43\17\0\15\43\1\0\4\43\3\60\13\0\22\43\3\60" +
			"\13\0\22\43\2\60\14\0\15\43\1\0\3\43\1\0\2\60\14\0" +
			"\64\43\40\60\3\0\1\43\3\0\2\43\1\60\2\0\12\64\41\0" +
			"\3\60\2\0\12\64\6\0\130\43\10\0\51\43\1\60\1\43\5\0" +
			"\106\43\12\0\35\43\3\0\14\60\4\0\14\60\12\0\12\64\36\43" +
			"\2\0\5\43\13\0\54\43\4\0\21\60\7\43\2\60\6\0\12\64" +
			"\46\0\27\43\5\60\4\0\65\43\12\60\1\0\35\60\2\0\1\60" +
			"\12\64\6\0\12\64\15\0\1\43\130\0\5\60\57\43\21\60\7\43" +
			"\4\0\12\64\21\0\11\60\14\0\3\60\36\43\15\60\2\43\12\64" +
			"\54\43\16\60\14\0\44\43\24\60\10\0\12\64\3\0\3\43\12\64" +
			"\44\43\122\0\3\60\1\0\25\60\4\43\1\60\4\43\3\60\2\43" +
			"\11\0\300\43\47\60\25\0\4\60\u0116\43\2\0\6\43\2\0\46\43" +
			"\2\0\6\43\2\0\10\43\1\0\1\43\1\0\1\43\1\0\1\43" +
			"\1\0\37\43\2\0\65\43\1\0\7\43\1\0\1\43\3\0\3\43" +
			"\1\0\7\43\3\0\4\43\2\0\6\43\4\0\15\43\5\0\3\43" +
			"\1\0\7\43\16\0\5\60\32\0\5\60\20\0\2\43\23\0\1\43" +
			"\13\0\5\60\5\0\6\60\1\0\1\43\15\0\1\43\20\0\15\43" +
			"\3\0\14\43\1\43\16\43\25\0\15\60\4\0\1\60\3\0\14\60" +
			"\21\0\1\43\4\0\1\43\2\0\12\43\1\0\1\43\3\0\5\43" +
			"\6\0\1\43\1\0\1\43\1\0\1\43\1\0\4\43\1\0\13\43" +
			"\2\0\4\43\5\0\5\43\4\0\1\43\21\0\51\43\u0a77\0\57\43" +
			"\1\0\57\43\1\0\205\43\6\0\4\43\3\60\2\43\14\0\46\43" +
			"\1\0\1\43\5\0\1\43\2\0\70\43\7\0\1\43\17\0\1\60" +
			"\27\43\11\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0" +
			"\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0\40\60\57\0" +
			"\1\43\u01d5\0\3\43\31\0\11\43\6\60\1\0\5\43\2\0\5\43" +
			"\4\0\126\43\2\0\2\60\2\0\3\43\1\0\132\43\1\0\4\43" +
			"\5\0\51\43\3\0\136\43\21\0\33\43\65\0\20\43\u0200\0\u19b6\43" +
			"\112\0\u51cd\43\63\0\u048d\43\103\0\56\43\2\0\u010d\43\3\0\20\43" +
			"\12\64\2\43\24\0\57\43\1\60\4\0\12\60\1\0\31\43\7\0" +
			"\1\60\120\43\2\60\45\0\11\43\2\0\147\43\2\0\4\43\1\0" +
			"\4\43\14\0\13\43\115\0\12\43\1\60\3\43\1\60\4\43\1\60" +
			"\27\43\5\60\20\0\1\43\7\0\64\43\14\0\2\60\62\43\21\60" +
			"\13\0\12\64\6\0\22\60\6\43\3\0\1\43\4\0\12\64\34\43" +
			"\10\60\2\0\27\43\15\60\14\0\35\43\3\0\4\60\57\43\16\60" +
			"\16\0\1\43\12\64\46\0\51\43\16\60\11\0\3\43\1\60\10\43" +
			"\2\60\2\0\12\64\6\0\27\43\3\0\1\43\1\60\4\0\60\43" +
			"\1\60\1\43\3\60\2\43\2\60\5\43\2\60\1\43\1\60\1\43" +
			"\30\0\3\43\2\0\13\43\5\60\2\0\3\43\2\60\12\0\6\43" +
			"\2\0\6\43\2\0\6\43\11\0\7\43\1\0\7\43\221\0\43\43" +
			"\10\60\1\0\2\60\2\0\12\64\6\0\u2ba4\43\14\0\27\43\4\0" +
			"\61\43\u2104\0\u016e\43\2\0\152\43\46\0\7\43\14\0\5\43\5\0" +
			"\1\43\1\60\12\43\1\0\15\43\1\0\5\43\1\0\1\43\1\0" +
			"\2\43\1\0\2\43\1\0\154\43\41\0\u016b\43\22\0\100\43\2\0" +
			"\66\43\50\0\15\43\3\0\20\60\20\0\7\60\14\0\2\43\30\0" +
			"\3\43\31\0\1\43\6\0\5\43\1\0\207\43\2\0\1\60\4\0" +
			"\1\43\13\0\12\64\7\0\32\43\4\0\1\43\1\0\32\43\13\0" +
			"\131\43\3\0\6\43\2\0\6\43\2\0\6\43\2\0\3\43\3\0" +
			"\2\43\3\0\2\43\22\0\3\60\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\5\0\1\1\1\2\1\3\1\4\21\5\1\6\1\7" +
			"\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16" +
			"\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\1" +
			"\1\25\1\26\1\27\1\30\2\27\1\31\3\27\1\2" +
			"\1\0\5\5\1\32\14\5\1\33\5\5\1\34\6\5" +
			"\1\35\1\36\1\0\1\3\1\37\3\0\1\30\1\31" +
			"\1\40\1\5\1\41\1\5\1\42\1\5\1\43\1\44" +
			"\5\5\1\45\21\5\1\46\1\47\1\50\1\51\10\5" +
			"\1\52\1\5\1\53\1\54\1\5\1\55\1\56\1\5" +
			"\1\57\10\5\1\0\7\5\1\60\12\5\1\61\1\0" +
			"\1\51\1\62\6\5\1\63\2\5\1\64\6\5\1\65" +
			"\4\5\1\66\1\67\1\5\1\70\1\5\1\71\2\5" +
			"\1\72\1\73\1\74\1\75\1\76\1\77\2\5\1\100" +
			"\1\101\1\102";

	private static int[] zzUnpackAction() {
		int[] result = new int[220];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u010e" +
			"\0\u010e\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be" +
			"\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e" +
			"\0\u04a4\0\u04da\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e" +
			"\0\u010e\0\u010e\0\u0510\0\u0546\0\u057c\0\u010e\0\u010e\0\u05b2" +
			"\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u010e\0\u010e" +
			"\0\u072c\0\u0762\0\u010e\0\u0798\0\u07ce\0\u0804\0\u083a\0\u057c" +
			"\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u0360\0\u097e\0\u09b4" +
			"\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64" +
			"\0\u0b9a\0\u0bd0\0\u0360\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde" +
			"\0\u0360\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58" +
			"\0\u0e8e\0\u0ec4\0\u0efa\0\u05b2\0\u0f30\0\u0f66\0\u0f9c\0\u0762" +
			"\0\u07ce\0\u0360\0\u0fd2\0\u0360\0\u1008\0\u0360\0\u103e\0\u0360" +
			"\0\u0360\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u0360\0\u1182" +
			"\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332" +
			"\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2" +
			"\0\u010e\0\u010e\0\u010e\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0" +
			"\0\u1626\0\u165c\0\u1692\0\u16c8\0\u0360\0\u16fe\0\u0360\0\u0360" +
			"\0\u1734\0\u0360\0\u0360\0\u176a\0\u0360\0\u17a0\0\u17d6\0\u180c" +
			"\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc" +
			"\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u0360\0\u1b00\0\u1b36" +
			"\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6" +
			"\0\u0360\0\u1d1c\0\u1d1c\0\u0360\0\u1d52\0\u1d88\0\u1dbe\0\u1df4" +
			"\0\u1e2a\0\u1e60\0\u0360\0\u1e96\0\u1ecc\0\u0360\0\u1f02\0\u1f38" +
			"\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u0360\0\u2046\0\u207c\0\u20b2" +
			"\0\u20e8\0\u0360\0\u0360\0\u211e\0\u0360\0\u2154\0\u0360\0\u218a" +
			"\0\u21c0\0\u0360\0\u0360\0\u0360\0\u0360\0\u0360\0\u0360\0\u21f6" +
			"\0\u222c\0\u0360\0\u0360\0\u0360";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[220];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14" +
			"\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24" +
			"\1\25\1\26\2\23\1\27\1\23\1\30\1\31\1\23" +
			"\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
			"\1\42\1\43\1\23\1\44\1\6\1\45\1\46\1\47" +
			"\1\50\1\51\1\52\1\53\3\23\1\6\1\7\1\54" +
			"\1\55\1\56\1\6\40\57\1\60\24\57\1\61\51\57" +
			"\1\62\13\57\1\61\41\57\1\63\23\57\1\64\42\57" +
			"\1\65\22\57\1\66\67\0\1\7\2\67\42\0\1\70" +
			"\12\0\1\7\11\0\1\23\1\71\12\23\1\72\10\23" +
			"\10\0\2\23\1\0\2\52\6\0\4\23\3\0\1\23" +
			"\6\0\1\73\24\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\17\23\1\74\5\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\4\23\1\75\20\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\1\76\1\23\1\77\12\23" +
			"\1\100\7\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\4\23\1\101\20\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\7\23" +
			"\1\102\15\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\15\23\1\103\2\23\1\104\2\23" +
			"\1\105\1\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\1\106\3\23\1\107\12\23\1\110" +
			"\5\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\25\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\13\23\1\111\3\23\1\112" +
			"\5\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\1\113\14\23\1\114\7\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\6\23" +
			"\1\115\1\116\3\23\1\117\11\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\2\23\1\120" +
			"\12\23\1\121\7\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\17\23\1\122\5\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\6\23\1\123\16\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\1\23\1\124\2\23\1\125" +
			"\2\23\1\126\3\23\1\127\11\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\43\0\1\130\21\0" +
			"\1\131\45\0\1\132\67\0\1\133\70\0\1\134\21\0" +
			"\25\135\11\0\1\135\11\0\4\135\3\0\1\135\6\0" +
			"\25\52\10\0\2\52\1\0\2\52\6\0\4\52\3\0" +
			"\1\52\55\0\1\53\73\0\1\136\67\0\1\56\45\0" +
			"\1\137\17\0\1\56\14\0\1\57\5\0\2\57\15\0" +
			"\1\57\76\0\1\140\27\0\1\57\5\0\2\57\16\0" +
			"\1\57\66\0\1\141\36\0\1\57\5\0\2\57\45\0" +
			"\2\67\42\0\1\70\24\0\2\23\1\142\22\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\6\23\1\143\16\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\7\23\1\144\15\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\17\23\1\145\5\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\1\146\24\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\1\147" +
			"\24\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\16\23\1\150\6\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\6\23\1\151" +
			"\16\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\1\152\3\23\1\153\20\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\21\23" +
			"\1\154\3\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\14\23\1\155\10\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\22\23" +
			"\1\156\2\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\11\23\1\157\13\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\14\23" +
			"\1\160\10\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\1\23\1\161\23\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\14\23" +
			"\1\162\10\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\6\23\1\163\16\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\14\23" +
			"\1\164\10\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\1\23\1\165\23\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\6\23" +
			"\1\166\16\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\23\23\1\167\1\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\25\23" +
			"\10\0\2\23\1\0\2\52\6\0\1\170\3\23\3\0" +
			"\1\23\6\0\15\23\1\171\5\23\1\172\1\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\13\23\1\173\3\23\1\174\5\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\15\23\1\175" +
			"\7\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\11\23\1\176\13\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\4\23\1\177" +
			"\20\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\15\23\1\200\7\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\43\0\1\130\67\0" +
			"\1\137\17\0\1\131\45\0\1\201\21\0\61\133\1\0" +
			"\4\133\5\0\25\135\11\0\1\135\6\0\1\202\2\0" +
			"\4\135\3\0\1\135\1\0\61\136\1\203\4\136\64\0" +
			"\1\204\6\0\13\23\1\205\11\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\11\23\1\206" +
			"\13\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\14\23\1\207\10\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\17\23\1\210" +
			"\5\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\21\23\1\211\3\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\11\23\1\212" +
			"\13\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\7\23\1\213\15\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\14\23\1\214" +
			"\10\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\7\23\1\215\15\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\2\23\1\216" +
			"\22\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\3\23\1\217\21\23\10\0\2\23\1\0" +
			"\2\52\6\0\4\23\3\0\1\23\6\0\10\23\1\220" +
			"\14\23\10\0\2\23\1\0\2\52\6\0\4\23\3\0" +
			"\1\23\6\0\7\23\1\221\7\23\1\222\5\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\7\23\1\223\15\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\23\23\1\224\1\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\7\23\1\225\15\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\7\23\1\226\15\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\21\23\1\227\3\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\22\23\1\230\2\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\5\23\1\231\17\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\14\23\1\232\10\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\21\23\1\233\3\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\1\165\24\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\14\23" +
			"\1\234\10\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\4\23\1\235\20\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\60\0\1\236" +
			"\4\0\1\204\6\0\15\23\1\237\7\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\7\23" +
			"\1\240\15\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\6\23\1\241\16\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\1\23" +
			"\1\242\23\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\14\23\1\243\10\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\17\23" +
			"\1\244\5\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\15\23\1\245\7\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\16\23" +
			"\1\246\6\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\11\23\1\247\13\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\25\23" +
			"\10\0\2\23\1\0\2\52\6\0\1\23\1\250\2\23" +
			"\3\0\1\23\6\0\13\23\1\251\11\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\21\23" +
			"\1\252\3\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\7\23\1\253\15\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\17\23" +
			"\1\254\5\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\4\23\1\255\20\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\17\23" +
			"\1\256\5\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\14\23\1\257\10\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\1\23" +
			"\1\260\23\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\11\23\1\261\13\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\43\0\1\262" +
			"\20\0\1\262\1\263\6\0\25\23\10\0\2\23\1\0" +
			"\2\52\6\0\1\23\1\264\2\23\3\0\1\23\6\0" +
			"\4\23\1\265\20\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\4\23\1\266\20\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\6\23\1\267\16\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\13\23\1\270\11\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\1\271\24\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\10\23\1\272\14\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\7\23" +
			"\1\273\15\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\7\23\1\274\15\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\15\23" +
			"\1\275\7\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\14\23\1\276\10\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\22\23" +
			"\1\277\2\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\15\23\1\300\7\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\14\23" +
			"\1\301\10\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\14\23\1\302\10\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\6\0\13\23" +
			"\1\303\11\23\10\0\2\23\1\0\2\52\6\0\4\23" +
			"\3\0\1\23\6\0\6\23\1\304\16\23\10\0\2\23" +
			"\1\0\2\52\6\0\4\23\3\0\1\23\65\0\1\263" +
			"\6\0\15\23\1\305\7\23\10\0\2\23\1\0\2\52" +
			"\6\0\4\23\3\0\1\23\6\0\21\23\1\306\3\23" +
			"\10\0\2\23\1\0\2\52\6\0\4\23\3\0\1\23" +
			"\6\0\21\23\1\307\3\23\10\0\2\23\1\0\2\52" +
			"\6\0\4\23\3\0\1\23\6\0\5\23\1\310\17\23" +
			"\10\0\2\23\1\0\2\52\6\0\4\23\3\0\1\23" +
			"\6\0\7\23\1\311\15\23\10\0\2\23\1\0\2\52" +
			"\6\0\4\23\3\0\1\23\6\0\1\312\24\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\6\23\1\313\16\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\4\23\1\314\20\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\14\23\1\315\10\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\7\23\1\316\15\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\7\23\1\317\15\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\16\23\1\320\6\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\17\23\1\321\5\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\7\23\1\322\15\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\14\23\1\323\10\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\7\23\1\324\15\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\7\23\1\325\15\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\10\23\1\326\14\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\11\23\1\327\13\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\15\23\1\330\7\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\22\23\1\331\2\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\15\23\1\332\7\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\6\0" +
			"\14\23\1\333\10\23\10\0\2\23\1\0\2\52\6\0" +
			"\4\23\3\0\1\23\6\0\7\23\1\334\15\23\10\0" +
			"\2\23\1\0\2\52\6\0\4\23\3\0\1\23\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[8802];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	private static java.io.Reader zzReader = null; // Fake

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\5\0\1\11\1\1\2\11\21\1\10\11\3\1\2\11" +
			"\7\1\2\11\2\1\1\11\4\1\1\0\41\1\1\0" +
			"\2\1\3\0\41\1\3\11\32\1\1\0\23\1\1\0" +
			"\52\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[220];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end) ? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof() {
		if (queue.isEmpty() && !end) {
			blockManager.eof();
			storeTokens();
			end = true;
			queue.add(TaraTypes.NEWLINE);
		}
		return sendToken();
	}

	private String getTextSpaces(String text) {
		int index = (text.indexOf(' ') == -1) ? text.indexOf('\t') : text.indexOf(' ');
		return (index == -1) ? "" : text.substring(index);
	}

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

	private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
		if (queue.isEmpty()) {
			String spaces = getTextSpaces(yytext().toString());
			blockManager.spaces(spaces);
			storeTokens();
		}
		return sendToken();
	}

	private IElementType inline() {
		blockManager.openBracket(yytext().length());
		storeTokens();
		return sendToken();
	}

	private IElementType semicolon() {
		blockManager.semicolon(yytext().length());
		storeTokens();
		return sendToken();
	}

	private void storeTokens() {
		blockManager.actions();
		for (IElementType token : blockManager.actions())
			queue.offer(token);
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	TaraLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 2272) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 8: {
					return TaraTypes.LEFT_SQUARE;
				}
				case 67:
					break;
				case 43: {
					return TaraTypes.WITH;
				}
				case 68:
					break;
				case 36: {
					return TaraTypes.VAR;
				}
				case 69:
					break;
				case 16: {
					return TaraTypes.COLON;
				}
				case 70:
					break;
				case 59: {
					return TaraTypes.ABSTRACT;
				}
				case 71:
					break;
				case 61: {
					return TaraTypes.REACTIVE;
				}
				case 72:
					break;
				case 24: {
					yybegin(YYINITIAL);
					return TaraTypes.QUOTE_END;
				}
				case 73:
					break;
				case 52: {
					return TaraTypes.OBJECT_TYPE;
				}
				case 74:
					break;
				case 65: {
					return TaraTypes.COMPONENT;
				}
				case 75:
					break;
				case 11: {
					return TaraTypes.RIGHT_CURLY;
				}
				case 76:
					break;
				case 41: {
					return TaraTypes.DOUBLE_VALUE_KEY;
				}
				case 77:
					break;
				case 44: {
					return TaraTypes.WORD_TYPE;
				}
				case 78:
					break;
				case 25: {
					yybegin(YYINITIAL);
					return TaraTypes.EXPRESSION_END;
				}
				case 79:
					break;
				case 3: {
					return TokenType.WHITE_SPACE;
				}
				case 80:
					break;
				case 38: {
					return TaraTypes.LIST;
				}
				case 81:
					break;
				case 7: {
					return TaraTypes.RIGHT_PARENTHESIS;
				}
				case 82:
					break;
				case 13: {
					yybegin(EXPRESSION);
					return TaraTypes.EXPRESSION_BEGIN;
				}
				case 83:
					break;
				case 17: {
					return TaraTypes.EQUALS;
				}
				case 84:
					break;
				case 49: {
					return TaraTypes.FINAL;
				}
				case 85:
					break;
				case 60: {
					return TaraTypes.RESOURCE_TYPE;
				}
				case 86:
					break;
				case 14: {
					return TaraTypes.DOT;
				}
				case 87:
					break;
				case 50: {
					return TaraTypes.STRING_TYPE;
				}
				case 88:
					break;
				case 63: {
					return TaraTypes.TERMINAL;
				}
				case 89:
					break;
				case 56: {
					return TaraTypes.CONCEPT;
				}
				case 90:
					break;
				case 42: {
					return TaraTypes.DATE_TYPE;
				}
				case 91:
					break;
				case 5: {
					return TaraTypes.IDENTIFIER_KEY;
				}
				case 92:
					break;
				case 48: {
					return TaraTypes.EMPTY_REF;
				}
				case 93:
					break;
				case 6: {
					return TaraTypes.LEFT_PARENTHESIS;
				}
				case 94:
					break;
				case 21: {
					return TaraTypes.PLUS;
				}
				case 95:
					break;
				case 57: {
					return TaraTypes.PRIVATE;
				}
				case 96:
					break;
				case 29: {
					yybegin(EXPRESSION_MULTILINE);
					return TaraTypes.EXPRESSION_BEGIN;
				}
				case 97:
					break;
				case 58: {
					return TaraTypes.FEATURE;
				}
				case 98:
					break;
				case 37: {
					return TaraTypes.DSL;
				}
				case 99:
					break;
				case 30: {
					return TaraTypes.NEGATIVE_VALUE_KEY;
				}
				case 100:
					break;
				case 19: {
					return TaraTypes.METRIC_VALUE_KEY;
				}
				case 101:
					break;
				case 4: {
					return inline();
				}
				case 102:
					break;
				case 54: {
					return TaraTypes.EXTENDS;
				}
				case 103:
					break;
				case 31: {
					yybegin(MULTILINE);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 104:
					break;
				case 66: {
					return TaraTypes.PROTOTYPE;
				}
				case 105:
					break;
				case 18: {
					return TaraTypes.STAR;
				}
				case 106:
					break;
				case 51: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 107:
					break;
				case 10: {
					return TaraTypes.LEFT_CURLY;
				}
				case 108:
					break;
				case 9: {
					return TaraTypes.RIGHT_SQUARE;
				}
				case 109:
					break;
				case 22: {
					return TaraTypes.NATURAL_VALUE_KEY;
				}
				case 110:
					break;
				case 47: {
					return TaraTypes.TIME_TYPE;
				}
				case 111:
					break;
				case 20: {
					return semicolon();
				}
				case 112:
					break;
				case 35: {
					return TaraTypes.ANY;
				}
				case 113:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 114:
					break;
				case 45: {
					return TaraTypes.INTO;
				}
				case 115:
					break;
				case 40: {
					yypushback(1);
					return TaraTypes.DOC_LINE;
				}
				case 116:
					break;
				case 46: {
					return TaraTypes.BOOLEAN_VALUE_KEY;
				}
				case 117:
					break;
				case 26: {
					return TaraTypes.AS;
				}
				case 118:
					break;
				case 28: {
					return TaraTypes.ON;
				}
				case 119:
					break;
				case 32: {
					return TaraTypes.SUB;
				}
				case 120:
					break;
				case 39: {
					return TaraTypes.ANCHOR_VALUE;
				}
				case 121:
					break;
				case 62: {
					return TaraTypes.ENCLOSED;
				}
				case 122:
					break;
				case 12: {
					yybegin(QUOTED);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 123:
					break;
				case 53: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 124:
					break;
				case 27: {
					return TaraTypes.IS;
				}
				case 125:
					break;
				case 33: {
					return TaraTypes.USE;
				}
				case 126:
					break;
				case 55: {
					return TaraTypes.INT_TYPE;
				}
				case 127:
					break;
				case 64: {
					return TaraTypes.FUNCTION_TYPE;
				}
				case 128:
					break;
				case 23: {
					return TaraTypes.CHARACTER;
				}
				case 129:
					break;
				case 15: {
					return TaraTypes.COMMA;
				}
				case 130:
					break;
				case 34: {
					return TaraTypes.HAS;
				}
				case 131:
					break;
				case 2: {
					return newlineIndent();
				}
				case 132:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						switch (zzLexicalState) {
							case YYINITIAL: {
								return eof();
							}
							case 221:
								break;
							default:
								return null;
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
