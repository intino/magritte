/* The following code was generated by JFlex 1.4.3 on 29/10/15 10:48 */

package tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import tara.intellij.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/10/15 10:48 from the specification file
 * <tt>/Users/oroncal/workspace/tara/language/grammar/src/tara/lang/lexicon/Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EXPRESSION = 6;
  public static final int QUOTED = 2;
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION_MULTILINE = 8;
  public static final int MULTILINE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\62\1\3\1\63\2\0\1\1\16\62\4\0\1\2\1\64\1\43"+
    "\1\60\1\46\1\56\1\0\1\44\1\35\1\36\1\55\1\65\1\52"+
    "\1\45\1\47\1\51\12\66\1\53\1\57\1\0\1\54\1\4\2\0"+
    "\2\46\1\5\1\46\1\61\25\46\1\37\1\67\1\40\1\0\1\46"+
    "\1\0\1\20\1\16\1\10\1\23\1\11\1\34\1\31\1\17\1\26"+
    "\2\46\1\24\1\32\1\7\1\6\1\12\1\33\1\22\1\14\1\13"+
    "\1\15\1\21\1\25\1\30\1\27\1\46\1\41\1\1\1\42\1\0"+
    "\41\62\2\0\4\46\4\0\1\46\2\0\1\62\2\0\1\56\4\0"+
    "\1\46\1\0\1\50\2\0\1\46\5\0\27\46\1\0\37\46\1\0"+
    "\u01ca\46\4\0\14\46\16\0\5\46\7\0\1\46\1\0\1\46\21\0"+
    "\160\62\5\46\1\0\2\46\2\0\4\46\10\0\1\46\1\0\3\46"+
    "\1\0\1\46\1\0\24\46\1\0\123\46\1\0\213\46\1\0\5\62"+
    "\2\0\236\46\11\0\46\46\2\0\1\46\7\0\47\46\7\0\1\46"+
    "\1\0\55\62\1\0\1\62\1\0\2\62\1\0\2\62\1\0\1\62"+
    "\10\0\33\46\5\0\3\46\15\0\5\62\6\0\1\46\4\0\13\62"+
    "\5\0\53\46\25\62\12\66\4\0\2\46\1\62\143\46\1\0\1\46"+
    "\10\62\1\0\6\62\2\46\2\62\1\0\4\62\2\46\12\66\3\46"+
    "\2\0\1\46\17\0\1\62\1\46\1\62\36\46\33\62\2\0\131\46"+
    "\13\62\1\46\16\0\12\66\41\46\11\62\2\46\4\0\1\46\5\0"+
    "\26\46\4\62\1\46\11\62\1\46\3\62\1\46\5\62\22\0\31\46"+
    "\3\62\104\0\1\46\1\0\13\46\67\0\33\62\1\0\4\62\66\46"+
    "\3\62\1\46\22\62\1\46\7\62\12\46\2\62\2\0\12\66\1\0"+
    "\7\46\1\0\7\46\1\0\3\62\1\0\10\46\2\0\2\46\2\0"+
    "\26\46\1\0\7\46\1\0\1\46\3\0\4\46\2\0\1\62\1\46"+
    "\7\62\2\0\2\62\2\0\3\62\1\46\10\0\1\62\4\0\2\46"+
    "\1\0\3\46\2\62\2\0\12\66\4\46\7\0\1\46\5\0\3\62"+
    "\1\0\6\46\4\0\2\46\2\0\26\46\1\0\7\46\1\0\2\46"+
    "\1\0\2\46\1\0\2\46\2\0\1\62\1\0\5\62\4\0\2\62"+
    "\2\0\3\62\3\0\1\62\7\0\4\46\1\0\1\46\7\0\12\66"+
    "\2\62\3\46\1\62\13\0\3\62\1\0\11\46\1\0\3\46\1\0"+
    "\26\46\1\0\7\46\1\0\2\46\1\0\5\46\2\0\1\62\1\46"+
    "\10\62\1\0\3\62\1\0\3\62\2\0\1\46\17\0\2\46\2\62"+
    "\2\0\12\66\1\0\1\46\17\0\3\62\1\0\10\46\2\0\2\46"+
    "\2\0\26\46\1\0\7\46\1\0\2\46\1\0\5\46\2\0\1\62"+
    "\1\46\7\62\2\0\2\62\2\0\3\62\10\0\2\62\4\0\2\46"+
    "\1\0\3\46\2\62\2\0\12\66\1\0\1\46\20\0\1\62\1\46"+
    "\1\0\6\46\3\0\3\46\1\0\4\46\3\0\2\46\1\0\1\46"+
    "\1\0\2\46\3\0\2\46\3\0\3\46\3\0\14\46\4\0\5\62"+
    "\3\0\3\62\1\0\4\62\2\0\1\46\6\0\1\62\16\0\12\66"+
    "\11\0\1\46\7\0\3\62\1\0\10\46\1\0\3\46\1\0\27\46"+
    "\1\0\12\46\1\0\5\46\3\0\1\46\7\62\1\0\3\62\1\0"+
    "\4\62\7\0\2\62\1\0\2\46\6\0\2\46\2\62\2\0\12\66"+
    "\22\0\2\62\1\0\10\46\1\0\3\46\1\0\27\46\1\0\12\46"+
    "\1\0\5\46\2\0\1\62\1\46\7\62\1\0\3\62\1\0\4\62"+
    "\7\0\2\62\7\0\1\46\1\0\2\46\2\62\2\0\12\66\1\0"+
    "\2\46\17\0\2\62\1\0\10\46\1\0\3\46\1\0\51\46\2\0"+
    "\1\46\7\62\1\0\3\62\1\0\4\62\1\46\10\0\1\62\10\0"+
    "\2\46\2\62\2\0\12\66\12\0\6\46\2\0\2\62\1\0\22\46"+
    "\3\0\30\46\1\0\11\46\1\0\1\46\2\0\7\46\3\0\1\62"+
    "\4\0\6\62\1\0\1\62\1\0\10\62\22\0\2\62\15\0\60\46"+
    "\1\62\2\46\7\62\4\0\10\46\10\62\1\0\12\66\47\0\2\46"+
    "\1\0\1\46\2\0\2\46\1\0\1\46\2\0\1\46\6\0\4\46"+
    "\1\0\7\46\1\0\3\46\1\0\1\46\1\0\1\46\2\0\2\46"+
    "\1\0\4\46\1\62\2\46\6\62\1\0\2\62\1\46\2\0\5\46"+
    "\1\0\1\46\1\0\6\62\2\0\12\66\2\0\4\46\40\0\1\46"+
    "\27\0\2\62\6\0\12\66\13\0\1\62\1\0\1\62\1\0\1\62"+
    "\4\0\2\62\10\46\1\0\44\46\4\0\24\62\1\0\2\62\5\46"+
    "\13\62\1\0\44\62\11\0\1\62\71\0\53\46\24\62\1\46\12\66"+
    "\6\0\6\46\4\62\4\46\3\62\1\46\3\62\2\46\7\62\3\46"+
    "\4\62\15\46\14\62\1\46\1\62\12\66\4\62\2\0\46\46\1\0"+
    "\1\46\5\0\1\46\2\0\53\46\1\0\u014d\46\1\0\4\46\2\0"+
    "\7\46\1\0\1\46\1\0\4\46\2\0\51\46\1\0\4\46\2\0"+
    "\41\46\1\0\4\46\2\0\7\46\1\0\1\46\1\0\4\46\2\0"+
    "\17\46\1\0\71\46\1\0\4\46\2\0\103\46\2\0\3\62\40\0"+
    "\20\46\20\0\125\46\14\0\u026c\46\2\0\21\46\1\0\32\46\5\0"+
    "\113\46\3\0\3\46\17\0\15\46\1\0\4\46\3\62\13\0\22\46"+
    "\3\62\13\0\22\46\2\62\14\0\15\46\1\0\3\46\1\0\2\62"+
    "\14\0\64\46\40\62\3\0\1\46\3\0\2\46\1\62\2\0\12\66"+
    "\41\0\3\62\2\0\12\66\6\0\130\46\10\0\51\46\1\62\1\46"+
    "\5\0\106\46\12\0\35\46\3\0\14\62\4\0\14\62\12\0\12\66"+
    "\36\46\2\0\5\46\13\0\54\46\4\0\21\62\7\46\2\62\6\0"+
    "\12\66\46\0\27\46\5\62\4\0\65\46\12\62\1\0\35\62\2\0"+
    "\1\62\12\66\6\0\12\66\15\0\1\46\130\0\5\62\57\46\21\62"+
    "\7\46\4\0\12\66\21\0\11\62\14\0\3\62\36\46\15\62\2\46"+
    "\12\66\54\46\16\62\14\0\44\46\24\62\10\0\12\66\3\0\3\46"+
    "\12\66\44\46\122\0\3\62\1\0\25\62\4\46\1\62\4\46\3\62"+
    "\2\46\11\0\300\46\47\62\25\0\4\62\u0116\46\2\0\6\46\2\0"+
    "\46\46\2\0\6\46\2\0\10\46\1\0\1\46\1\0\1\46\1\0"+
    "\1\46\1\0\37\46\2\0\65\46\1\0\7\46\1\0\1\46\3\0"+
    "\3\46\1\0\7\46\3\0\4\46\2\0\6\46\4\0\15\46\5\0"+
    "\3\46\1\0\7\46\16\0\5\62\32\0\5\62\20\0\2\46\23\0"+
    "\1\46\13\0\5\62\5\0\6\62\1\0\1\46\15\0\1\46\20\0"+
    "\15\46\3\0\14\46\1\46\16\46\25\0\15\62\4\0\1\62\3\0"+
    "\14\62\21\0\1\46\4\0\1\46\2\0\12\46\1\0\1\46\3\0"+
    "\5\46\6\0\1\46\1\0\1\46\1\0\1\46\1\0\4\46\1\0"+
    "\13\46\2\0\4\46\5\0\5\46\4\0\1\46\21\0\51\46\u0a77\0"+
    "\57\46\1\0\57\46\1\0\205\46\6\0\4\46\3\62\2\46\14\0"+
    "\46\46\1\0\1\46\5\0\1\46\2\0\70\46\7\0\1\46\17\0"+
    "\1\62\27\46\11\0\7\46\1\0\7\46\1\0\7\46\1\0\7\46"+
    "\1\0\7\46\1\0\7\46\1\0\7\46\1\0\7\46\1\0\40\62"+
    "\57\0\1\46\u01d5\0\3\46\31\0\11\46\6\62\1\0\5\46\2\0"+
    "\5\46\4\0\126\46\2\0\2\62\2\0\3\46\1\0\132\46\1\0"+
    "\4\46\5\0\51\46\3\0\136\46\21\0\33\46\65\0\20\46\u0200\0"+
    "\u19b6\46\112\0\u51cd\46\63\0\u048d\46\103\0\56\46\2\0\u010d\46\3\0"+
    "\20\46\12\66\2\46\24\0\57\46\1\62\4\0\12\62\1\0\31\46"+
    "\7\0\1\62\120\46\2\62\45\0\11\46\2\0\147\46\2\0\4\46"+
    "\1\0\4\46\14\0\13\46\115\0\12\46\1\62\3\46\1\62\4\46"+
    "\1\62\27\46\5\62\20\0\1\46\7\0\64\46\14\0\2\62\62\46"+
    "\21\62\13\0\12\66\6\0\22\62\6\46\3\0\1\46\4\0\12\66"+
    "\34\46\10\62\2\0\27\46\15\62\14\0\35\46\3\0\4\62\57\46"+
    "\16\62\16\0\1\46\12\66\46\0\51\46\16\62\11\0\3\46\1\62"+
    "\10\46\2\62\2\0\12\66\6\0\27\46\3\0\1\46\1\62\4\0"+
    "\60\46\1\62\1\46\3\62\2\46\2\62\5\46\2\62\1\46\1\62"+
    "\1\46\30\0\3\46\2\0\13\46\5\62\2\0\3\46\2\62\12\0"+
    "\6\46\2\0\6\46\2\0\6\46\11\0\7\46\1\0\7\46\221\0"+
    "\43\46\10\62\1\0\2\62\2\0\12\66\6\0\u2ba4\46\14\0\27\46"+
    "\4\0\61\46\u2104\0\u016e\46\2\0\152\46\46\0\7\46\14\0\5\46"+
    "\5\0\1\46\1\62\12\46\1\0\15\46\1\0\5\46\1\0\1\46"+
    "\1\0\2\46\1\0\2\46\1\0\154\46\41\0\u016b\46\22\0\100\46"+
    "\2\0\66\46\50\0\15\46\3\0\20\62\20\0\7\62\14\0\2\46"+
    "\30\0\3\46\31\0\1\46\6\0\5\46\1\0\207\46\2\0\1\62"+
    "\4\0\1\46\13\0\12\66\7\0\32\46\4\0\1\46\1\0\32\46"+
    "\13\0\131\46\3\0\6\46\2\0\6\46\2\0\6\46\2\0\3\46"+
    "\3\0\2\46\3\0\2\46\22\0\3\62\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\23\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\3\1"+
    "\1\25\1\26\1\27\2\26\1\30\3\26\1\2\1\0"+
    "\1\5\1\31\20\5\1\32\12\5\1\33\4\5\1\34"+
    "\1\35\1\3\1\36\1\37\2\0\1\27\1\30\15\5"+
    "\1\40\1\5\1\41\1\5\1\42\1\43\1\5\1\44"+
    "\3\5\1\45\12\5\1\46\1\47\12\5\1\50\1\51"+
    "\7\5\1\52\1\53\1\54\1\55\1\5\1\56\3\5"+
    "\1\57\1\0\2\5\1\60\2\5\1\61\3\5\1\62"+
    "\11\5\1\63\1\64\1\0\1\47\1\5\1\65\5\5"+
    "\1\66\1\67\3\5\1\70\3\5\1\71\1\5\1\72"+
    "\1\5\1\73\1\5\1\74\3\5\1\75\1\76\1\77"+
    "\1\5\1\100\1\101\1\102\1\5\1\103\1\5\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0118"+
    "\0\u0118\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u05b0\0\u0118\0\u05e8\0\u0118"+
    "\0\u0118\0\u0620\0\u0118\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u0118\0\u0118\0\u07a8\0\u07e0\0\u0118\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u05e8\0\u08f8\0\u0230\0\u0930\0\u0968\0\u09a0"+
    "\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0230\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0230\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u0620\0\u06c8\0\u1068\0\u10a0\0\u07e0\0\u0850\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u0230\0\u13b0\0\u0230\0\u13e8\0\u0230"+
    "\0\u0230\0\u1420\0\u0230\0\u1458\0\u1490\0\u14c8\0\u0230\0\u1500"+
    "\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0"+
    "\0\u16f8\0\u0118\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u0230\0\u0230\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u0230\0\u0230"+
    "\0\u0230\0\u0230\0\u1b20\0\u0230\0\u1b58\0\u1b90\0\u1bc8\0\u0230"+
    "\0\u1c00\0\u1c38\0\u1c70\0\u0230\0\u1ca8\0\u1ce0\0\u0230\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u0230\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u0230\0\u0230\0\u1fb8\0\u1fb8"+
    "\0\u1ff0\0\u0230\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u0230"+
    "\0\u0230\0\u2140\0\u2178\0\u21b0\0\u0230\0\u21e8\0\u2220\0\u2258"+
    "\0\u0230\0\u2290\0\u0230\0\u22c8\0\u0230\0\u2300\0\u0230\0\u2338"+
    "\0\u2370\0\u23a8\0\u0230\0\u0230\0\u0230\0\u23e0\0\u0230\0\u0230"+
    "\0\u0230\0\u2418\0\u0230\0\u2450\0\u0230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\15\1\31\1\32\3\15"+
    "\1\33\1\15\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\15\1\46\1\6\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\15"+
    "\1\6\1\7\1\57\1\60\1\61\1\6\43\62\1\63"+
    "\23\62\1\64\54\62\1\65\12\62\1\64\44\62\1\66"+
    "\22\62\1\67\45\62\1\70\21\62\1\71\71\0\1\7"+
    "\2\72\45\0\1\73\11\0\1\7\11\0\1\15\1\74"+
    "\26\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\2\15\1\75\25\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\13\15\1\76"+
    "\14\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\30\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\2\15\1\77\20\15\1\100"+
    "\1\15\1\101\2\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\15\15\1\102\12\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\4\15\1\103\3\15\1\104\4\15\1\105\3\15\1\106"+
    "\6\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\6\15\1\107\1\15\1\110\10\15\1\111"+
    "\6\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\7\15\1\112\20\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\1\15\1\113"+
    "\26\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\13\15\1\114\14\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\2\15\1\115"+
    "\4\15\1\116\1\15\1\117\16\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\13\15\1\120"+
    "\14\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\4\15\1\121\23\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\1\15\1\122"+
    "\2\15\1\123\2\15\1\124\3\15\1\125\14\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\1\15\1\126\17\15\1\127\6\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\2\15\1\130"+
    "\4\15\1\131\20\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\13\15\1\132\14\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\4\15\1\133\6\15\1\134\5\15\1\135\6\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\46\0"+
    "\1\136\20\0\1\137\52\0\1\140\72\0\1\141\20\0"+
    "\30\54\10\0\2\54\1\0\2\54\7\0\2\54\3\0"+
    "\1\54\60\0\1\55\15\0\30\142\11\0\1\142\12\0"+
    "\1\142\72\0\1\143\71\0\1\61\50\0\1\144\16\0"+
    "\1\61\10\0\1\62\3\0\1\62\6\0\1\62\20\0"+
    "\1\62\100\0\1\145\22\0\1\62\3\0\1\62\6\0"+
    "\1\62\21\0\1\62\70\0\1\146\31\0\1\62\3\0"+
    "\1\62\6\0\1\62\47\0\2\72\45\0\1\73\23\0"+
    "\2\15\1\147\25\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\6\15\1\150\16\15\1\151"+
    "\2\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\3\15\1\152\24\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\6\15\1\153"+
    "\21\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\5\15\1\154\22\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\1\15\1\155"+
    "\17\15\1\156\6\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\15\15\1\157\12\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\5\15\1\160\22\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\10\15\1\161\17\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\25\15\1\162\2\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\15\15\1\163\12\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\11\15\1\164\16\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\2\15\1\165\25\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\4\15\1\166\23\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\1\15\1\167\26\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\7\15\1\170\20\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\22\15\1\171\5\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\7\15\1\172\20\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\15\15\1\173\12\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\26\15\1\174\1\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\10\15\1\175\17\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\27\15\1\176\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\17\15\1\177\10\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\6\15"+
    "\1\200\21\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\15\15\1\201\12\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\6\15"+
    "\1\202\21\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\6\15\1\203\21\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\21\15"+
    "\1\204\6\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\13\15\1\205\14\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\3\15"+
    "\1\206\13\15\1\207\10\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\6\0\2\15\1\210\14\15"+
    "\1\211\10\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\46\0\1\136\71\0\1\144\16\0\1\137"+
    "\1\0\63\140\1\0\4\140\63\143\1\212\4\143\66\0"+
    "\1\213\6\0\3\15\1\214\24\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\21\15\1\215"+
    "\6\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\4\15\1\216\23\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\17\15\1\217"+
    "\10\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\4\15\1\220\23\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\6\15\1\221"+
    "\21\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\6\15\1\222\21\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\14\15\1\223"+
    "\13\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\25\15\1\224\2\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\17\15\1\225"+
    "\10\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\4\15\1\226\23\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\4\15\1\227"+
    "\23\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\21\15\1\230\6\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\24\15\1\231"+
    "\3\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\17\15\1\232\10\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\6\15\1\233"+
    "\21\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\10\15\1\234\17\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\11\15\1\235"+
    "\16\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\21\15\1\236\6\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\4\15\1\237"+
    "\23\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\16\15\1\240\11\15\10\0\2\15\1\0"+
    "\2\54\7\0\2\15\3\0\1\15\6\0\12\15\1\241"+
    "\15\15\10\0\2\15\1\0\2\54\7\0\2\15\3\0"+
    "\1\15\6\0\1\15\1\242\2\15\1\243\23\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\2\15\1\244\25\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\6\15\1\245\21\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\4\15\1\246\23\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\7\15\1\161\20\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\13\15\1\247\14\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\4\15\1\250\23\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\62\0"+
    "\1\251\4\0\1\213\6\0\4\15\1\252\23\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\14\15\1\253\13\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\16\15\1\254\11\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\1\15\1\255\26\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\2\15\1\256\25\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\22\15\1\257\5\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\1\15\1\260\26\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\13\15\1\261\14\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\21\15\1\262\6\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\4\15\1\263\23\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\2\15\1\264\25\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\17\15\1\265\10\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\4\15\1\266\23\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\15\15\1\267\12\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\21\15\1\270\6\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\17\15\1\271\10\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\2\15\1\272\25\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\24\15\1\273\3\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\10\15\1\274\17\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\6\0"+
    "\6\15\1\275\21\15\10\0\2\15\1\0\2\54\7\0"+
    "\2\15\3\0\1\15\6\0\17\15\1\276\10\15\10\0"+
    "\2\15\1\0\2\54\7\0\2\15\3\0\1\15\46\0"+
    "\1\277\17\0\1\277\1\300\6\0\5\15\1\301\22\15"+
    "\10\0\2\15\1\0\2\54\7\0\2\15\3\0\1\15"+
    "\6\0\4\15\1\302\23\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\6\0\7\15\1\303\20\15"+
    "\10\0\2\15\1\0\2\54\7\0\2\15\3\0\1\15"+
    "\6\0\16\15\1\304\11\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\6\0\6\15\1\305\21\15"+
    "\10\0\2\15\1\0\2\54\7\0\2\15\3\0\1\15"+
    "\6\0\6\15\1\306\21\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\6\0\2\15\1\307\25\15"+
    "\10\0\2\15\1\0\2\54\7\0\2\15\3\0\1\15"+
    "\6\0\24\15\1\310\3\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\6\0\4\15\1\311\23\15"+
    "\10\0\2\15\1\0\2\54\7\0\2\15\3\0\1\15"+
    "\6\0\13\15\1\312\14\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\6\0\13\15\1\313\14\15"+
    "\10\0\2\15\1\0\2\54\7\0\2\15\3\0\1\15"+
    "\6\0\15\15\1\314\12\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\6\0\4\15\1\315\23\15"+
    "\10\0\2\15\1\0\2\54\7\0\2\15\3\0\1\15"+
    "\6\0\21\15\1\316\6\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\6\0\4\15\1\317\23\15"+
    "\10\0\2\15\1\0\2\54\7\0\2\15\3\0\1\15"+
    "\6\0\15\15\1\320\12\15\10\0\2\15\1\0\2\54"+
    "\7\0\2\15\3\0\1\15\67\0\1\300\6\0\6\15"+
    "\1\321\21\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\4\15\1\322\23\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\7\15"+
    "\1\323\20\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\22\15\1\324\5\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\4\15"+
    "\1\325\23\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\13\15\1\326\14\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\2\15"+
    "\1\327\25\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\3\15\1\330\24\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\4\15"+
    "\1\331\23\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\6\15\1\332\21\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\15\15"+
    "\1\333\12\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\4\15\1\334\23\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\16\15"+
    "\1\335\11\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\5\15\1\336\22\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\17\15"+
    "\1\337\10\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\6\15\1\340\21\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\16\15"+
    "\1\341\11\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\21\15\1\342\6\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\4\15"+
    "\1\343\23\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\6\0\1\15\1\344\26\15\10\0\2\15"+
    "\1\0\2\54\7\0\2\15\3\0\1\15\6\0\2\15"+
    "\1\345\25\15\10\0\2\15\1\0\2\54\7\0\2\15"+
    "\3\0\1\15\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\23\1\10\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\6\1\2\11\2\1\1\11"+
    "\4\1\1\0\47\1\2\0\45\1\1\11\36\1\1\0"+
    "\25\1\1\0\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof(){
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text){
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon(){
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens(){
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return TaraTypes.LEFT_SQUARE;
          }
        case 69: break;
        case 44: 
          { return TaraTypes.WITH;
          }
        case 70: break;
        case 36: 
          { return TaraTypes.VAR;
          }
        case 71: break;
        case 16: 
          { return TaraTypes.COLON;
          }
        case 72: break;
        case 65: 
          { return TaraTypes.ABSTRACT;
          }
        case 73: break;
        case 68: 
          { return TaraTypes.DEFINITION;
          }
        case 74: break;
        case 23: 
          { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
          }
        case 75: break;
        case 55: 
          { return TaraTypes.SINGLE;
          }
        case 76: break;
        case 11: 
          { return TaraTypes.RIGHT_CURLY;
          }
        case 77: break;
        case 39: 
          { return TaraTypes.DOUBLE_VALUE_KEY;
          }
        case 78: break;
        case 24: 
          { yybegin(YYINITIAL); return TaraTypes.EXPRESSION_END;
          }
        case 79: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 80: break;
        case 7: 
          { return TaraTypes.RIGHT_PARENTHESIS;
          }
        case 81: break;
        case 13: 
          { yybegin(EXPRESSION); return TaraTypes.EXPRESSION_BEGIN;
          }
        case 82: break;
        case 17: 
          { return TaraTypes.EQUALS;
          }
        case 83: break;
        case 52: 
          { return TaraTypes.FINAL;
          }
        case 84: break;
        case 14: 
          { return TaraTypes.DOT;
          }
        case 85: break;
        case 54: 
          { return TaraTypes.STRING_TYPE;
          }
        case 86: break;
        case 48: 
          { return TaraTypes.NAMED;
          }
        case 87: break;
        case 64: 
          { return TaraTypes.TERMINAL;
          }
        case 88: break;
        case 53: 
          { return TaraTypes.NATIVE_TYPE;
          }
        case 89: break;
        case 42: 
          { return TaraTypes.DATE_TYPE;
          }
        case 90: break;
        case 5: 
          { return TaraTypes.IDENTIFIER_KEY;
          }
        case 91: break;
        case 49: 
          { return TaraTypes.EMPTY_REF;
          }
        case 92: break;
        case 6: 
          { return TaraTypes.LEFT_PARENTHESIS;
          }
        case 93: break;
        case 66: 
          { return TaraTypes.REQUIRED;
          }
        case 94: break;
        case 59: 
          { return TaraTypes.PRIVATE;
          }
        case 95: break;
        case 28: 
          { yybegin(EXPRESSION_MULTILINE); return TaraTypes.EXPRESSION_BEGIN;
          }
        case 96: break;
        case 62: 
          { return TaraTypes.FEATURE;
          }
        case 97: break;
        case 37: 
          { return TaraTypes.DSL;
          }
        case 98: break;
        case 29: 
          { return TaraTypes.NEGATIVE_VALUE_KEY;
          }
        case 99: break;
        case 19: 
          { return TaraTypes.METRIC_VALUE_KEY;
          }
        case 100: break;
        case 4: 
          { return inline();
          }
        case 101: break;
        case 31: 
          { return TaraTypes.ADDRESS_VALUE;
          }
        case 102: break;
        case 58: 
          { return TaraTypes.EXTENDS;
          }
        case 103: break;
        case 30: 
          { yybegin(MULTILINE); return TaraTypes.QUOTE_BEGIN;
          }
        case 104: break;
        case 67: 
          { return TaraTypes.PROTOTYPE;
          }
        case 105: break;
        case 18: 
          { return TaraTypes.STAR;
          }
        case 106: break;
        case 56: 
          { return TaraTypes.DOUBLE_TYPE;
          }
        case 107: break;
        case 10: 
          { return TaraTypes.LEFT_CURLY;
          }
        case 108: break;
        case 9: 
          { return TaraTypes.RIGHT_SQUARE;
          }
        case 109: break;
        case 21: 
          { return TaraTypes.NATURAL_VALUE_KEY;
          }
        case 110: break;
        case 41: 
          { return TaraTypes.TIME_TYPE;
          }
        case 111: break;
        case 20: 
          { return semicolon();
          }
        case 112: break;
        case 35: 
          { return TaraTypes.ANY;
          }
        case 113: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 114: break;
        case 45: 
          { return TaraTypes.INTO;
          }
        case 115: break;
        case 50: 
          { return TaraTypes.TUPLE_TYPE;
          }
        case 116: break;
        case 47: 
          { return TaraTypes.RESOURCE_KEY;
          }
        case 117: break;
        case 38: 
          { yypushback(1); return TaraTypes.DOC_LINE;
          }
        case 118: break;
        case 40: 
          { return TaraTypes.BOOLEAN_VALUE_KEY;
          }
        case 119: break;
        case 26: 
          { return TaraTypes.AS;
          }
        case 120: break;
        case 25: 
          { return TaraTypes.ON;
          }
        case 121: break;
        case 32: 
          { return TaraTypes.SUB;
          }
        case 122: break;
        case 63: 
          { return TaraTypes.ENCLOSED;
          }
        case 123: break;
        case 12: 
          { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
          }
        case 124: break;
        case 60: 
          { return TaraTypes.BOOLEAN_TYPE;
          }
        case 125: break;
        case 27: 
          { return TaraTypes.IS;
          }
        case 126: break;
        case 33: 
          { return TaraTypes.USE;
          }
        case 127: break;
        case 61: 
          { return TaraTypes.INT_TYPE;
          }
        case 128: break;
        case 57: 
          { return TaraTypes.METAIDENTIFIER_KEY;
          }
        case 129: break;
        case 46: 
          { return TaraTypes.MAIN;
          }
        case 130: break;
        case 43: 
          { return TaraTypes.WORD_KEY;
          }
        case 131: break;
        case 22: 
          { return TaraTypes.CHARACTER;
          }
        case 132: break;
        case 51: 
          { return TaraTypes.FACET;
          }
        case 133: break;
        case 15: 
          { return TaraTypes.COMMA;
          }
        case 134: break;
        case 34: 
          { return TaraTypes.HAS;
          }
        case 135: break;
        case 2: 
          { return newlineIndent();
          }
        case 136: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 230: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
