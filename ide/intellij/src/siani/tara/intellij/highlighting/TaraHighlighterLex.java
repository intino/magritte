/* The following code was generated by JFlex 1.4.3 on 8/07/15 11:46 */

package siani.tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import siani.tara.Language;
import siani.tara.intellij.lang.TaraLanguage;
import siani.tara.intellij.lang.psi.TaraTypes;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/07/15 11:46 from the specification file
 * <tt>/Users/oroncal/workspace/tara/intellij/src/siani/tara/intellij/highlighting/TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {
	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int EXPRESSION = 6;
	public static final int QUOTED = 2;
	public static final int YYINITIAL = 0;
	public static final int EXPRESSION_MULTILINE = 8;
	public static final int MULTILINE = 4;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1, 2, 2, 3, 3, 4, 4
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
		"\11\55\1\63\1\57\2\0\1\61\16\55\4\0\1\63\1\56\1\47" +
			"\1\53\1\37\1\40\1\0\1\50\1\32\1\33\1\60\1\52\1\43" +
			"\1\51\1\34\1\42\12\62\1\44\1\46\1\0\1\45\1\63\2\0" +
			"\2\37\1\1\1\37\1\54\12\37\1\20\12\37\1\35\1\64\1\36" +
			"\1\0\1\37\1\0\1\14\1\12\1\4\1\16\1\5\1\31\1\26" +
			"\1\13\1\22\2\37\1\17\1\30\1\3\1\2\1\6\1\27\1\21" +
			"\1\10\1\7\1\11\1\23\1\24\1\15\1\25\1\37\4\0\41\55" +
			"\2\0\4\37\4\0\1\37\2\0\1\55\2\0\1\40\4\0\1\37" +
			"\1\0\1\41\2\0\1\37\5\0\27\37\1\0\37\37\1\0\u01ca\37" +
			"\4\0\14\37\16\0\5\37\7\0\1\37\1\0\1\37\21\0\160\55" +
			"\5\37\1\0\2\37\2\0\4\37\10\0\1\37\1\0\3\37\1\0" +
			"\1\37\1\0\24\37\1\0\123\37\1\0\213\37\1\0\5\55\2\0" +
			"\236\37\11\0\46\37\2\0\1\37\7\0\47\37\7\0\1\37\1\0" +
			"\55\55\1\0\1\55\1\0\2\55\1\0\2\55\1\0\1\55\10\0" +
			"\33\37\5\0\3\37\15\0\5\55\6\0\1\37\4\0\13\55\5\0" +
			"\53\37\25\55\12\62\4\0\2\37\1\55\143\37\1\0\1\37\10\55" +
			"\1\0\6\55\2\37\2\55\1\0\4\55\2\37\12\62\3\37\2\0" +
			"\1\37\17\0\1\55\1\37\1\55\36\37\33\55\2\0\131\37\13\55" +
			"\1\37\16\0\12\62\41\37\11\55\2\37\4\0\1\37\5\0\26\37" +
			"\4\55\1\37\11\55\1\37\3\55\1\37\5\55\22\0\31\37\3\55" +
			"\104\0\1\37\1\0\13\37\67\0\33\55\1\0\4\55\66\37\3\55" +
			"\1\37\22\55\1\37\7\55\12\37\2\55\2\0\12\62\1\0\7\37" +
			"\1\0\7\37\1\0\3\55\1\0\10\37\2\0\2\37\2\0\26\37" +
			"\1\0\7\37\1\0\1\37\3\0\4\37\2\0\1\55\1\37\7\55" +
			"\2\0\2\55\2\0\3\55\1\37\10\0\1\55\4\0\2\37\1\0" +
			"\3\37\2\55\2\0\12\62\4\37\7\0\1\37\5\0\3\55\1\0" +
			"\6\37\4\0\2\37\2\0\26\37\1\0\7\37\1\0\2\37\1\0" +
			"\2\37\1\0\2\37\2\0\1\55\1\0\5\55\4\0\2\55\2\0" +
			"\3\55\3\0\1\55\7\0\4\37\1\0\1\37\7\0\12\62\2\55" +
			"\3\37\1\55\13\0\3\55\1\0\11\37\1\0\3\37\1\0\26\37" +
			"\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\55\1\37\10\55" +
			"\1\0\3\55\1\0\3\55\2\0\1\37\17\0\2\37\2\55\2\0" +
			"\12\62\1\0\1\37\17\0\3\55\1\0\10\37\2\0\2\37\2\0" +
			"\26\37\1\0\7\37\1\0\2\37\1\0\5\37\2\0\1\55\1\37" +
			"\7\55\2\0\2\55\2\0\3\55\10\0\2\55\4\0\2\37\1\0" +
			"\3\37\2\55\2\0\12\62\1\0\1\37\20\0\1\55\1\37\1\0" +
			"\6\37\3\0\3\37\1\0\4\37\3\0\2\37\1\0\1\37\1\0" +
			"\2\37\3\0\2\37\3\0\3\37\3\0\14\37\4\0\5\55\3\0" +
			"\3\55\1\0\4\55\2\0\1\37\6\0\1\55\16\0\12\62\11\0" +
			"\1\37\7\0\3\55\1\0\10\37\1\0\3\37\1\0\27\37\1\0" +
			"\12\37\1\0\5\37\3\0\1\37\7\55\1\0\3\55\1\0\4\55" +
			"\7\0\2\55\1\0\2\37\6\0\2\37\2\55\2\0\12\62\22\0" +
			"\2\55\1\0\10\37\1\0\3\37\1\0\27\37\1\0\12\37\1\0" +
			"\5\37\2\0\1\55\1\37\7\55\1\0\3\55\1\0\4\55\7\0" +
			"\2\55\7\0\1\37\1\0\2\37\2\55\2\0\12\62\1\0\2\37" +
			"\17\0\2\55\1\0\10\37\1\0\3\37\1\0\51\37\2\0\1\37" +
			"\7\55\1\0\3\55\1\0\4\55\1\37\10\0\1\55\10\0\2\37" +
			"\2\55\2\0\12\62\12\0\6\37\2\0\2\55\1\0\22\37\3\0" +
			"\30\37\1\0\11\37\1\0\1\37\2\0\7\37\3\0\1\55\4\0" +
			"\6\55\1\0\1\55\1\0\10\55\22\0\2\55\15\0\60\37\1\55" +
			"\2\37\7\55\4\0\10\37\10\55\1\0\12\62\47\0\2\37\1\0" +
			"\1\37\2\0\2\37\1\0\1\37\2\0\1\37\6\0\4\37\1\0" +
			"\7\37\1\0\3\37\1\0\1\37\1\0\1\37\2\0\2\37\1\0" +
			"\4\37\1\55\2\37\6\55\1\0\2\55\1\37\2\0\5\37\1\0" +
			"\1\37\1\0\6\55\2\0\12\62\2\0\4\37\40\0\1\37\27\0" +
			"\2\55\6\0\12\62\13\0\1\55\1\0\1\55\1\0\1\55\4\0" +
			"\2\55\10\37\1\0\44\37\4\0\24\55\1\0\2\55\5\37\13\55" +
			"\1\0\44\55\11\0\1\55\71\0\53\37\24\55\1\37\12\62\6\0" +
			"\6\37\4\55\4\37\3\55\1\37\3\55\2\37\7\55\3\37\4\55" +
			"\15\37\14\55\1\37\1\55\12\62\4\55\2\0\46\37\1\0\1\37" +
			"\5\0\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37\2\0\7\37" +
			"\1\0\1\37\1\0\4\37\2\0\51\37\1\0\4\37\2\0\41\37" +
			"\1\0\4\37\2\0\7\37\1\0\1\37\1\0\4\37\2\0\17\37" +
			"\1\0\71\37\1\0\4\37\2\0\103\37\2\0\3\55\40\0\20\37" +
			"\20\0\125\37\14\0\u026c\37\2\0\21\37\1\0\32\37\5\0\113\37" +
			"\3\0\3\37\17\0\15\37\1\0\4\37\3\55\13\0\22\37\3\55" +
			"\13\0\22\37\2\55\14\0\15\37\1\0\3\37\1\0\2\55\14\0" +
			"\64\37\40\55\3\0\1\37\3\0\2\37\1\55\2\0\12\62\41\0" +
			"\3\55\2\0\12\62\6\0\130\37\10\0\51\37\1\55\1\37\5\0" +
			"\106\37\12\0\35\37\3\0\14\55\4\0\14\55\12\0\12\62\36\37" +
			"\2\0\5\37\13\0\54\37\4\0\21\55\7\37\2\55\6\0\12\62" +
			"\46\0\27\37\5\55\4\0\65\37\12\55\1\0\35\55\2\0\1\55" +
			"\12\62\6\0\12\62\15\0\1\37\130\0\5\55\57\37\21\55\7\37" +
			"\4\0\12\62\21\0\11\55\14\0\3\55\36\37\15\55\2\37\12\62" +
			"\54\37\16\55\14\0\44\37\24\55\10\0\12\62\3\0\3\37\12\62" +
			"\44\37\122\0\3\55\1\0\25\55\4\37\1\55\4\37\3\55\2\37" +
			"\11\0\300\37\47\55\25\0\4\55\u0116\37\2\0\6\37\2\0\46\37" +
			"\2\0\6\37\2\0\10\37\1\0\1\37\1\0\1\37\1\0\1\37" +
			"\1\0\37\37\2\0\65\37\1\0\7\37\1\0\1\37\3\0\3\37" +
			"\1\0\7\37\3\0\4\37\2\0\6\37\4\0\15\37\5\0\3\37" +
			"\1\0\7\37\16\0\5\55\32\0\5\55\20\0\2\37\23\0\1\37" +
			"\13\0\5\55\5\0\6\55\1\0\1\37\15\0\1\37\20\0\15\37" +
			"\3\0\14\37\1\37\16\37\25\0\15\55\4\0\1\55\3\0\14\55" +
			"\21\0\1\37\4\0\1\37\2\0\12\37\1\0\1\37\3\0\5\37" +
			"\6\0\1\37\1\0\1\37\1\0\1\37\1\0\4\37\1\0\13\37" +
			"\2\0\4\37\5\0\5\37\4\0\1\37\21\0\51\37\u0a77\0\57\37" +
			"\1\0\57\37\1\0\205\37\6\0\4\37\3\55\2\37\14\0\46\37" +
			"\1\0\1\37\5\0\1\37\2\0\70\37\7\0\1\37\17\0\1\55" +
			"\27\37\11\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0" +
			"\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\40\55\57\0" +
			"\1\37\u01d5\0\3\37\31\0\11\37\6\55\1\0\5\37\2\0\5\37" +
			"\4\0\126\37\2\0\2\55\2\0\3\37\1\0\132\37\1\0\4\37" +
			"\5\0\51\37\3\0\136\37\21\0\33\37\65\0\20\37\u0200\0\u19b6\37" +
			"\112\0\u51cd\37\63\0\u048d\37\103\0\56\37\2\0\u010d\37\3\0\20\37" +
			"\12\62\2\37\24\0\57\37\1\55\4\0\12\55\1\0\31\37\7\0" +
			"\1\55\120\37\2\55\45\0\11\37\2\0\147\37\2\0\4\37\1\0" +
			"\4\37\14\0\13\37\115\0\12\37\1\55\3\37\1\55\4\37\1\55" +
			"\27\37\5\55\20\0\1\37\7\0\64\37\14\0\2\55\62\37\21\55" +
			"\13\0\12\62\6\0\22\55\6\37\3\0\1\37\4\0\12\62\34\37" +
			"\10\55\2\0\27\37\15\55\14\0\35\37\3\0\4\55\57\37\16\55" +
			"\16\0\1\37\12\62\46\0\51\37\16\55\11\0\3\37\1\55\10\37" +
			"\2\55\2\0\12\62\6\0\27\37\3\0\1\37\1\55\4\0\60\37" +
			"\1\55\1\37\3\55\2\37\2\55\5\37\2\55\1\37\1\55\1\37" +
			"\30\0\3\37\2\0\13\37\5\55\2\0\3\37\2\55\12\0\6\37" +
			"\2\0\6\37\2\0\6\37\11\0\7\37\1\0\7\37\221\0\43\37" +
			"\10\55\1\0\2\55\2\0\12\62\6\0\u2ba4\37\14\0\27\37\4\0" +
			"\61\37\u2104\0\u016e\37\2\0\152\37\46\0\7\37\14\0\5\37\5\0" +
			"\1\37\1\55\12\37\1\0\15\37\1\0\5\37\1\0\1\37\1\0" +
			"\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0\100\37\2\0" +
			"\66\37\50\0\15\37\3\0\20\55\20\0\7\55\14\0\2\37\30\0" +
			"\3\37\31\0\1\37\6\0\5\37\1\0\207\37\2\0\1\55\4\0" +
			"\1\37\13\0\12\62\7\0\32\37\4\0\1\37\1\0\32\37\13\0" +
			"\131\37\3\0\6\37\2\0\6\37\2\0\6\37\2\0\3\37\3\0" +
			"\2\37\3\0\2\37\22\0\3\55\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\5\0\1\1\24\2\1\3\1\4\1\5\1\6\1\7" +
			"\1\10\1\1\1\11\1\12\1\13\1\14\1\15\1\16" +
			"\4\1\1\17\1\20\1\17\1\21\1\22\2\21\1\23" +
			"\3\21\1\2\1\24\16\2\1\25\10\2\1\26\10\2" +
			"\3\0\1\27\1\30\1\31\1\32\2\0\1\22\1\23" +
			"\12\2\1\33\1\2\1\34\1\2\1\35\1\36\2\2" +
			"\1\37\5\2\1\40\11\2\1\41\2\42\2\0\1\43" +
			"\1\44\11\2\1\45\5\2\1\46\3\2\1\47\1\2" +
			"\1\50\1\51\1\2\1\52\3\2\1\53\1\0\1\42" +
			"\1\0\5\2\1\54\12\2\1\55\3\2\1\56\1\57" +
			"\1\0\1\44\2\2\1\60\5\2\1\61\1\62\2\2" +
			"\1\63\1\64\4\2\1\65\1\66\1\2\1\67\1\2" +
			"\1\70\1\2\1\71\2\2\1\72\1\73\1\74\1\75" +
			"\1\2\1\76\1\77\1\100\1\101";

	private static int[] zzUnpackAction() {
		int[] result = new int[233];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173" +
			"\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b" +
			"\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3" +
			"\0\u04f8\0\u052d\0\u0109\0\u0109\0\u0562\0\u0109\0\u0109\0\u0597" +
			"\0\u05cc\0\u0109\0\u0109\0\u0601\0\u0109\0\u0109\0\u0109\0\u0636" +
			"\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u0109\0\u0109" +
			"\0\u07a9\0\u07de\0\u0109\0\u0813\0\u0848\0\u087d\0\u08b2\0\u01dd" +
			"\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a" +
			"\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u01dd\0\u0bcd" +
			"\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u01dd" +
			"\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8" +
			"\0\u0f1d\0\u0f52\0\u0f87\0\u0601\0\u0fbc\0\u0ff1\0\u06a0\0\u1026" +
			"\0\u105b\0\u07de\0\u0848\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164" +
			"\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u01dd\0\u12a2\0\u01dd" +
			"\0\u12d7\0\u01dd\0\u01dd\0\u130c\0\u1341\0\u01dd\0\u1376\0\u13ab" +
			"\0\u13e0\0\u1415\0\u144a\0\u01dd\0\u147f\0\u14b4\0\u14e9\0\u151e" +
			"\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u0109\0\u0109\0\u0f52" +
			"\0\u165c\0\u1691\0\u0109\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a" +
			"\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u01dd\0\u18d8\0\u190d" +
			"\0\u1942\0\u1977\0\u19ac\0\u01dd\0\u19e1\0\u1a16\0\u1a4b\0\u01dd" +
			"\0\u1a80\0\u01dd\0\u01dd\0\u1ab5\0\u01dd\0\u1aea\0\u1b1f\0\u1b54" +
			"\0\u01dd\0\u1b89\0\u165c\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92" +
			"\0\u1cc7\0\u01dd\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05" +
			"\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u01dd\0\u1f0e\0\u1f43\0\u1f78" +
			"\0\u01dd\0\u01dd\0\u1fad\0\u1fad\0\u1fe2\0\u2017\0\u01dd\0\u204c" +
			"\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u01dd\0\u01dd\0\u2155\0\u218a" +
			"\0\u01dd\0\u01dd\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u01dd\0\u01dd" +
			"\0\u2293\0\u01dd\0\u22c8\0\u01dd\0\u22fd\0\u01dd\0\u2332\0\u2367" +
			"\0\u01dd\0\u01dd\0\u01dd\0\u01dd\0\u239c\0\u01dd\0\u01dd\0\u01dd" +
			"\0\u01dd";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[233];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
			"\1\16\1\17\1\20\1\21\1\22\1\12\1\23\1\12" +
			"\1\24\1\25\1\26\1\27\1\30\3\12\1\31\1\32" +
			"\1\33\1\34\1\35\1\36\1\37\1\12\1\40\1\6" +
			"\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50" +
			"\1\51\1\52\1\12\1\6\1\53\1\54\2\6\1\55" +
			"\1\56\1\6\47\57\1\60\14\57\1\61\45\57\1\62" +
			"\16\57\1\61\50\57\1\63\13\57\1\64\51\57\1\65" +
			"\12\57\1\66\66\0\1\12\1\67\27\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\2\12\1\70\26\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\13\12" +
			"\1\71\15\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\31\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\2\12\1\72\11\12\1\73\12\12\1\74\1\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\20\12\1\75\10\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\4\12\1\76\13\12\1\77\10\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\6\12\1\100\1\12\1\101\10\12\1\102\7\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\7\12\1\103\21\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\1\12\1\104\27\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\13\12" +
			"\1\105\15\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\2\12\1\106\4\12" +
			"\1\107\1\12\1\110\17\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\1\12" +
			"\1\111\5\12\1\112\3\12\1\113\15\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\20\12\1\114\10\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\4\12" +
			"\1\115\6\12\1\116\15\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\2\12" +
			"\1\117\4\12\1\120\21\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\13\12" +
			"\1\121\15\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\1\12\1\122\17\12" +
			"\1\123\7\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\4\12\1\124\6\12" +
			"\1\125\15\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\4\12\1\126\6\12" +
			"\1\127\5\12\1\130\7\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\36\0\1\131" +
			"\31\0\31\40\5\0\1\40\1\0\2\40\6\0\1\40" +
			"\2\0\2\40\4\0\1\40\44\0\1\132\15\0\1\133" +
			"\51\0\1\134\70\0\1\135\10\0\1\136\64\0\1\55" +
			"\3\0\31\137\5\0\1\137\14\0\1\137\66\0\1\140" +
			"\65\0\1\54\41\0\1\141\25\0\1\55\65\0\1\56" +
			"\4\0\1\57\3\0\1\57\11\0\1\57\25\0\1\57" +
			"\62\0\1\142\22\0\1\57\3\0\1\57\11\0\1\57" +
			"\26\0\1\57\65\0\1\143\16\0\1\57\3\0\1\57" +
			"\11\0\1\57\44\0\2\12\1\144\26\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\6\12\1\145\22\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\3\12" +
			"\1\146\25\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\6\12\1\147\22\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\5\12\1\150\23\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\1\12\1\151\17\12\1\152\7\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\20\12\1\153\10\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\10\12" +
			"\1\154\20\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\20\12\1\155\10\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\11\12\1\156\17\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\2\12\1\157\26\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\4\12" +
			"\1\160\24\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\1\12\1\161\27\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\7\12\1\162\21\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\24\12\1\163\4\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\7\12" +
			"\1\164\21\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\10\12\1\165\20\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\16\12\1\166\12\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\6\12\1\167\22\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\1\12" +
			"\1\170\27\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\26\12\1\171\2\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\6\12\1\172\22\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\6\12\1\173\22\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\20\12" +
			"\1\174\10\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\20\12\1\175\10\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\6\12\1\176\22\12\5\0\1\12" +
			"\1\0\2\40\6\0\1\12\2\0\2\12\4\0\1\12" +
			"\3\0\13\12\1\177\15\12\5\0\1\12\1\0\2\40" +
			"\6\0\1\12\2\0\2\12\4\0\1\12\3\0\21\12" +
			"\1\200\7\12\5\0\1\12\1\0\2\40\6\0\1\12" +
			"\2\0\2\12\4\0\1\12\3\0\13\12\1\201\15\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\3\12\1\202\12\12\1\203\12\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\3\0\2\12\1\204\13\12\1\205\12\12" +
			"\5\0\1\12\1\0\2\40\6\0\1\12\2\0\2\12" +
			"\4\0\1\12\36\0\1\206\30\0\57\132\1\207\1\132" +
			"\1\210\3\132\60\211\1\212\4\211\51\0\1\135\47\0" +
			"\1\141\25\0\1\136\2\0\57\140\1\213\5\140\62\0" +
			"\1\214\3\0\3\12\1\215\25\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\10\12\1\216\10\12\1\217\7\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\16\12\1\220\12\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\4\12\1\221" +
			"\24\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\6\12\1\222\22\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\6\12\1\223\22\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\22\12\1\224\6\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\27\12\1\225" +
			"\1\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\4\12\1\226\24\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\21\12\1\227\7\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\25\12\1\230\3\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\16\12\1\231" +
			"\12\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\6\12\1\232\22\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\11\12\1\233\17\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\4\12\1\234\24\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\6\12\1\235" +
			"\22\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\10\12\1\236\20\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\21\12\1\237\7\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\1\12\1\240\2\12\1\241\24\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\15\12\1\242\13\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\12\12\1\243" +
			"\16\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\7\12\1\244\21\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\2\12\1\245\26\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\6\12\1\246\22\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\4\12\1\247" +
			"\24\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\7\12\1\154\21\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\13\12\1\250\15\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\4\12\1\251\24\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\2\0\60\211\1\252" +
			"\46\211\1\253\15\211\1\252\4\211\54\0\1\254\5\0" +
			"\1\214\3\0\4\12\1\255\24\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\20\12\1\256\10\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\22\12\1\257" +
			"\6\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\1\12\1\260\27\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\2\12\1\261\26\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\24\12\1\262\4\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\1\12\1\263" +
			"\27\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\13\12\1\264\15\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\21\12\1\265\7\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\2\12\1\266\26\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\16\12\1\267" +
			"\12\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\4\12\1\270\24\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\20\12\1\271\10\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\16\12\1\272\12\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\4\12\1\273" +
			"\24\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\21\12\1\274\7\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\1\12\1\275\27\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\25\12\1\276\3\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\10\12\1\277" +
			"\20\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\10\12\1\300\20\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\6\12\1\301\22\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\16\12\1\302\12\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\2\0\42\211\1\207" +
			"\15\211\1\252\4\211\51\0\2\303\7\0\1\304\3\0" +
			"\5\12\1\305\23\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\13\12\1\306" +
			"\15\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\4\12\1\307\24\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\7\12\1\310\21\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\15\12\1\311\13\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\6\12\1\312" +
			"\22\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\6\12\1\313\22\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\2\12\1\314\26\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\25\12\1\315\3\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\4\12\1\316" +
			"\24\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\13\12\1\317\15\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\13\12\1\320\15\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\4\12\1\321\24\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\1\12\1\322" +
			"\27\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\20\12\1\323\10\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\4\12\1\324\24\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\20\12\1\325\10\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\20\12\1\326" +
			"\10\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\64\0\1\304\3\0\6\12\1\327" +
			"\22\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\16\12\1\330\12\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\4\12\1\331\24\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\7\12\1\332\21\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\24\12\1\333" +
			"\4\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\4\12\1\334\24\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\13\12\1\335\15\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\2\12\1\336\26\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\3\12\1\337" +
			"\25\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\4\12\1\340\24\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\20\12\1\341\10\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\4\12\1\342\24\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\4\12\1\343" +
			"\24\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\15\12\1\344\13\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\5\12\1\345\23\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\3\0" +
			"\16\12\1\346\12\12\5\0\1\12\1\0\2\40\6\0" +
			"\1\12\2\0\2\12\4\0\1\12\3\0\6\12\1\347" +
			"\22\12\5\0\1\12\1\0\2\40\6\0\1\12\2\0" +
			"\2\12\4\0\1\12\3\0\15\12\1\350\13\12\5\0" +
			"\1\12\1\0\2\40\6\0\1\12\2\0\2\12\4\0" +
			"\1\12\3\0\4\12\1\351\24\12\5\0\1\12\1\0" +
			"\2\40\6\0\1\12\2\0\2\12\4\0\1\12\2\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[9169];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	private static final char[] EMPTY_BUFFER = new char[0];
	private static final int YYEOF = -1;
	private static java.io.Reader zzReader = null; // Fake

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\5\0\1\11\24\1\2\11\1\1\2\11\2\1\2\11" +
			"\1\1\3\11\7\1\2\11\2\1\1\11\45\1\3\0" +
			"\4\1\2\0\44\1\2\11\1\1\2\0\1\11\36\1" +
			"\1\0\1\1\1\0\26\1\1\0\46\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[233];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * this buffer may contains the current text array to be matched when it is cheap to acquire it
	 */
	private char[] zzBufferArray;

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the textposition at the last state to be included in yytext
	 */
	private int zzPushbackPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (identifiers != null) return;
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
			String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		identifiers = new HashSet();
		Language heritage = TaraLanguage.getLanguage(dsl, project);
		if (heritage != null) Collections.addAll(identifiers, heritage.lexicon());
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	TaraHighlighterLex(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 2272) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzPushbackPos = 0;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;
		char[] zzBufferArrayL = zzBufferArray;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 6: {
					return TaraTypes.LEFT_SQUARE;
				}
				case 66:
					break;
				case 41: {
					return TaraTypes.WITH;
				}
				case 67:
					break;
				case 32: {
					return TaraTypes.VAR;
				}
				case 68:
					break;
				case 10: {
					return TaraTypes.COLON;
				}
				case 69:
					break;
				case 63: {
					return TaraTypes.ABSTRACT;
				}
				case 70:
					break;
				case 45: {
					return TaraTypes.RATIO_TYPE;
				}
				case 71:
					break;
				case 18: {
					yybegin(YYINITIAL);
					return TaraTypes.QUOTE_END;
				}
				case 72:
					break;
				case 50: {
					return TaraTypes.SINGLE;
				}
				case 73:
					break;
				case 36: {
					return TaraTypes.DOUBLE_VALUE_KEY;
				}
				case 74:
					break;
				case 19: {
					yybegin(YYINITIAL);
					return TaraTypes.EXPRESSION_END;
				}
				case 75:
					break;
				case 15: {
					return TokenType.WHITE_SPACE;
				}
				case 76:
					break;
				case 54: {
					return TaraTypes.NATURAL_TYPE;
				}
				case 77:
					break;
				case 4: {
					return TaraTypes.RIGHT_PARENTHESIS;
				}
				case 78:
					break;
				case 33: {
					return TaraTypes.LIST;
				}
				case 79:
					break;
				case 14: {
					yybegin(EXPRESSION);
					return TaraTypes.EXPRESSION_BEGIN;
				}
				case 80:
					break;
				case 11: {
					return TaraTypes.EQUALS;
				}
				case 81:
					break;
				case 47: {
					return TaraTypes.FINAL;
				}
				case 82:
					break;
				case 5: {
					return TaraTypes.DOT;
				}
				case 83:
					break;
				case 49: {
					return TaraTypes.STRING_TYPE;
				}
				case 84:
					break;
				case 62: {
					return TaraTypes.TERMINAL;
				}
				case 85:
					break;
				case 34: {
					return TaraTypes.COMMENT;
				}
				case 86:
					break;
				case 52: {
					return TaraTypes.PROTEO;
				}
				case 87:
					break;
				case 48: {
					return TaraTypes.NATIVE_TYPE;
				}
				case 88:
					break;
				case 38: {
					return TaraTypes.DATE_TYPE;
				}
				case 89:
					break;
				case 44: {
					return TaraTypes.EMPTY_REF;
				}
				case 90:
					break;
				case 3: {
					return TaraTypes.LEFT_PARENTHESIS;
				}
				case 91:
					break;
				case 64: {
					return TaraTypes.REQUIRED;
				}
				case 92:
					break;
				case 56: {
					return TaraTypes.PRIVATE;
				}
				case 93:
					break;
				case 24: {
					yybegin(EXPRESSION_MULTILINE);
					return TaraTypes.EXPRESSION_BEGIN;
				}
				case 94:
					break;
				case 60: {
					return TaraTypes.FEATURE;
				}
				case 95:
					break;
				case 25: {
					return TaraTypes.NEGATIVE_VALUE_KEY;
				}
				case 96:
					break;
				case 12: {
					return TaraTypes.DSL;
				}
				case 97:
					break;
				case 26: {
					return TaraTypes.ADDRESS_VALUE;
				}
				case 98:
					break;
				case 55: {
					return TaraTypes.EXTENDS;
				}
				case 99:
					break;
				case 23: {
					yybegin(MULTILINE);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 100:
					break;
				case 65: {
					return TaraTypes.PROTOTYPE;
				}
				case 101:
					break;
				case 2: {
					return evaluateIdentifier();
				}
				case 102:
					break;
				case 51: {
					return TaraTypes.DOUBLE_TYPE;
				}
				case 103:
					break;
				case 7: {
					return TaraTypes.RIGHT_SQUARE;
				}
				case 104:
					break;
				case 16: {
					return TaraTypes.NATURAL_VALUE_KEY;
				}
				case 105:
					break;
				case 30: {
					return TaraTypes.ANY;
				}
				case 106:
					break;
				case 1: {
					return TokenType.BAD_CHARACTER;
				}
				case 107:
					break;
				case 39: {
					return TaraTypes.INTO;
				}
				case 108:
					break;
				case 8: {
					return TaraTypes.MEASURE_VALUE;
				}
				case 109:
					break;
				case 43: {
					return TaraTypes.RESOURCE_KEY;
				}
				case 110:
					break;
				case 35: {
					yypushback(1);
					return TaraTypes.DOC_LINE;
				}
				case 111:
					break;
				case 37: {
					return TaraTypes.BOOLEAN_VALUE_KEY;
				}
				case 112:
					break;
				case 21: {
					return TaraTypes.AS;
				}
				case 113:
					break;
				case 20: {
					return TaraTypes.ON;
				}
				case 114:
					break;
				case 27: {
					return TaraTypes.SUB;
				}
				case 115:
					break;
				case 61: {
					return TaraTypes.ENCLOSED;
				}
				case 116:
					break;
				case 13: {
					yybegin(QUOTED);
					return TaraTypes.QUOTE_BEGIN;
				}
				case 117:
					break;
				case 57: {
					return TaraTypes.BOOLEAN_TYPE;
				}
				case 118:
					break;
				case 31: {
					loadHeritage();
					return TaraTypes.DSL;
				}
				case 119:
					break;
				case 22: {
					return TaraTypes.IS;
				}
				case 120:
					break;
				case 59: {
					return TaraTypes.MEASURE_TYPE_KEY;
				}
				case 121:
					break;
				case 28: {
					return TaraTypes.USE;
				}
				case 122:
					break;
				case 58: {
					return TaraTypes.INT_TYPE;
				}
				case 123:
					break;
				case 53: {
					return TaraTypes.METAIDENTIFIER_KEY;
				}
				case 124:
					break;
				case 42: {
					return TaraTypes.MAIN;
				}
				case 125:
					break;
				case 40: {
					return TaraTypes.WORD_KEY;
				}
				case 126:
					break;
				case 17: {
					return TaraTypes.CHARACTER;
				}
				case 127:
					break;
				case 46: {
					return TaraTypes.FACET;
				}
				case 128:
					break;
				case 9: {
					return TaraTypes.COMMA;
				}
				case 129:
					break;
				case 29: {
					return TaraTypes.HAS;
				}
				case 130:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						return null;
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
