/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package tara.intellij.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import tara.intellij.lang.psi.TaraTypes;

import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;

	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	public static final int QUOTED = 2;
	public static final int MULTILINE = 4;
	public static final int EXPRESSION = 6;
	public static final int EXPRESSION_MULTILINE = 8;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1, 2, 2, 3, 3, 4, 4
	};

	/**
	 * Translates characters to character classes
	 * Chosen bits are [12, 6, 3]
	 * Total runtime size is 15360 bytes
	 */
	public static int ZZ_CMAP(int ch) {
		return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 9] << 6) | ((ch >> 3) & 0x3f)] << 3) | (ch & 0x7)];
	}

	/* The ZZ_CMAP_Z table has 2176 entries */
	static final char ZZ_CMAP_Z[] = zzUnpackCMap(
		"\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
			"\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33" +
			"\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1" +
			"\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25" +
			"\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123" +
			"\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

	/* The ZZ_CMAP_Y table has 3776 entries */
	static final char ZZ_CMAP_Y[] = zzUnpackCMap(
		"\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16" +
			"\1\17\1\20\1\21\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\25\1\26\1\27\2" +
			"\25\16\0\1\30\1\16\1\31\1\32\2\10\1\33\11\10\1\34\21\10\1\35\1\36\23\10\1" +
			"\25\1\37\3\10\1\22\1\40\1\37\4\10\1\41\1\42\4\0\1\43\1\44\1\25\3\10\2\45\1" +
			"\25\1\46\1\47\1\0\1\50\5\10\1\51\2\0\1\5\1\52\1\53\13\10\1\54\1\43\1\55\1" +
			"\56\1\5\1\57\1\25\1\60\1\61\3\10\3\0\1\62\12\10\1\63\1\0\1\64\1\25\1\5\1\65" +
			"\3\10\1\51\1\66\1\21\2\10\1\63\1\67\1\70\1\71\2\25\3\10\1\72\10\25\1\73\1" +
			"\26\6\25\1\74\2\0\1\75\1\76\6\10\1\77\2\0\1\100\1\10\1\101\1\5\2\37\1\102" +
			"\1\103\1\104\2\10\1\73\1\105\1\106\1\107\1\110\1\60\1\111\1\101\1\5\1\112" +
			"\1\47\1\102\1\113\1\104\2\10\1\73\1\114\1\115\1\116\1\117\1\120\1\121\1\122" +
			"\1\5\1\123\1\25\1\102\1\34\1\33\2\10\1\73\1\124\1\106\1\43\1\125\1\126\1\25" +
			"\1\101\1\5\1\40\1\25\1\102\1\103\1\104\2\10\1\73\1\124\1\106\1\107\1\117\1" +
			"\127\1\111\1\101\1\5\1\40\1\25\1\130\1\131\1\132\1\133\1\134\1\131\1\10\1" +
			"\135\1\136\1\137\1\140\1\25\1\122\1\5\1\25\1\40\1\102\1\30\1\73\2\10\1\73" +
			"\1\141\1\142\1\143\1\137\1\144\1\24\1\101\1\5\2\25\1\145\1\30\1\73\2\10\1" +
			"\73\1\141\1\106\1\143\1\137\1\144\1\31\1\101\1\5\1\146\1\25\1\145\1\30\1\73" +
			"\4\10\1\147\1\143\1\150\1\60\1\25\1\101\1\5\1\25\1\36\1\145\1\10\1\22\1\36" +
			"\2\10\1\33\1\151\1\22\1\152\1\153\1\0\1\154\1\155\1\156\1\25\1\37\5\10\1\157" +
			"\1\160\1\161\1\75\1\5\1\162\4\25\1\163\1\164\1\165\1\37\1\166\1\167\1\157" +
			"\1\170\1\171\1\172\1\5\1\173\4\25\1\126\2\25\1\174\1\5\1\162\1\175\1\176\1" +
			"\10\1\37\3\10\1\26\1\42\1\0\1\143\1\177\1\0\1\42\3\0\1\46\1\200\7\25\5\10" +
			"\1\51\1\0\1\201\1\5\1\162\1\63\1\202\1\203\1\204\1\205\1\10\1\206\1\207\1" +
			"\5\1\210\4\10\1\34\1\211\5\10\1\212\51\10\1\132\1\22\1\132\5\10\1\132\4\10" +
			"\1\132\1\22\1\132\1\10\1\22\7\10\1\132\10\10\1\213\4\25\2\10\2\25\12\10\1" +
			"\26\1\25\1\37\114\10\1\103\2\10\1\37\2\10\1\45\11\10\1\131\1\126\1\25\1\10" +
			"\1\30\1\214\1\25\2\10\1\214\1\25\2\10\1\215\1\25\1\10\1\30\1\216\1\25\6\10" +
			"\1\217\3\0\1\220\1\221\1\5\1\162\3\25\1\222\1\5\1\162\13\10\1\25\5\10\1\223" +
			"\10\10\1\224\1\25\3\10\1\26\1\0\1\2\1\0\1\2\1\122\1\5\3\10\1\224\1\26\1\25" +
			"\5\10\1\112\2\0\1\53\1\174\1\5\1\162\4\25\2\10\1\161\1\2\6\10\1\177\1\75\3" +
			"\0\1\107\1\5\1\162\1\5\1\162\1\41\13\25\1\225\5\10\1\217\1\0\1\225\1\112\1" +
			"\5\1\162\1\25\1\226\1\2\1\25\1\227\3\10\1\100\1\204\1\5\1\65\4\10\1\63\1\0" +
			"\1\2\1\25\4\10\1\217\2\0\1\25\1\5\1\230\1\5\1\65\3\10\1\224\12\25\1\231\2" +
			"\0\1\232\1\233\1\25\30\10\4\0\1\75\2\25\1\74\42\10\2\224\4\10\2\224\1\10\1" +
			"\234\3\10\1\224\6\10\1\30\1\171\1\235\1\26\1\236\1\112\1\10\1\26\1\235\1\26" +
			"\1\25\1\226\3\25\1\237\1\25\1\41\1\126\1\25\1\240\1\25\1\46\1\241\1\40\1\41" +
			"\2\25\1\10\1\26\3\10\1\45\2\25\1\0\1\46\1\242\1\0\1\243\1\25\1\244\1\36\1" +
			"\151\1\245\1\27\1\246\1\10\1\247\1\250\1\251\2\25\5\10\1\126\116\25\5\10\1" +
			"\22\5\10\1\22\20\10\1\26\1\252\1\253\1\25\4\10\1\34\1\211\7\10\1\41\1\25\1" +
			"\60\2\10\1\22\1\25\10\22\4\0\5\25\1\41\72\25\1\250\3\25\1\37\1\206\1\245\1" +
			"\26\1\37\11\10\1\22\1\254\1\37\12\10\1\212\1\250\4\10\1\224\1\37\12\10\1\22" +
			"\2\25\3\10\1\45\6\25\170\10\1\224\11\25\71\10\1\26\6\25\21\10\1\26\10\25\5" +
			"\10\1\224\41\10\1\26\2\10\1\5\1\255\2\25\5\10\1\161\1\74\1\256\3\10\1\60\12" +
			"\10\1\174\3\25\1\41\1\10\1\36\14\10\1\257\1\112\1\25\1\10\1\45\11\25\1\10" +
			"\1\260\1\261\2\10\1\51\2\25\1\126\6\10\1\112\1\25\1\262\5\10\1\217\1\0\1\46" +
			"\1\25\1\5\1\162\2\0\1\262\1\47\1\5\1\65\2\10\1\63\1\172\2\10\1\161\1\0\1\2" +
			"\1\25\3\10\1\26\1\76\5\10\1\51\1\0\1\243\1\41\1\5\1\162\2\25\1\155\1\263\5" +
			"\10\1\100\1\75\1\25\1\261\1\264\1\5\1\162\2\10\1\22\1\265\6\10\1\203\1\266" +
			"\1\223\2\25\1\267\1\10\1\51\1\270\1\25\3\271\1\25\2\22\22\25\4\10\1\51\1\272" +
			"\1\5\1\162\64\10\1\112\1\25\2\10\1\22\1\273\5\10\1\112\40\25\55\10\1\224\15" +
			"\10\1\24\4\25\1\22\1\25\1\273\1\274\1\10\1\73\1\22\1\171\1\275\15\10\1\24" +
			"\3\25\1\273\54\10\1\224\2\25\10\10\1\36\6\10\5\25\1\10\1\26\2\0\2\25\1\75" +
			"\1\25\1\134\2\25\1\250\3\25\1\40\1\30\20\10\1\276\1\240\1\25\1\5\1\162\1\37" +
			"\2\10\1\113\1\37\2\10\1\45\1\277\12\10\1\22\3\36\1\300\1\301\2\25\1\302\1" +
			"\10\1\141\2\10\1\22\2\10\1\303\1\10\1\224\1\10\1\224\4\25\17\10\1\45\10\25" +
			"\6\10\1\26\20\25\1\304\20\25\3\10\1\26\6\10\1\126\5\25\3\10\1\22\2\25\3\10" +
			"\1\45\6\25\3\10\1\224\4\10\1\112\1\10\1\245\5\25\23\10\1\224\1\5\1\162\52" +
			"\25\1\224\1\73\4\10\1\34\1\305\2\10\1\224\25\25\2\10\1\224\1\25\3\10\1\24" +
			"\10\25\7\10\1\277\10\25\1\306\1\74\1\141\1\37\2\10\1\112\1\116\4\25\3\10\1" +
			"\26\20\25\6\10\1\224\1\25\2\10\1\224\1\25\2\10\1\45\21\25\11\10\1\126\66\25" +
			"\1\227\6\10\1\0\1\75\3\25\1\122\1\5\2\25\1\227\5\10\1\0\1\307\2\25\3\10\1" +
			"\126\1\5\1\162\1\227\3\10\1\161\1\0\1\310\1\5\10\25\1\227\5\10\1\51\1\0\1" +
			"\311\1\25\1\5\1\162\42\25\1\155\1\263\72\25\1\155\1\263\56\25\1\155\1\263" +
			"\4\25\5\10\1\51\1\0\1\25\1\5\1\162\14\25\1\155\1\263\64\25\1\155\1\263\42" +
			"\25\55\10\1\22\22\25\14\10\1\45\63\25\5\10\1\22\72\25\7\10\1\126\4\25\1\155" +
			"\1\263\34\25\1\155\1\263\64\25\10\10\1\26\1\25\1\100\4\0\1\75\1\25\1\60\1" +
			"\227\1\10\14\25\1\24\153\25\1\312\1\313\2\0\1\314\1\2\3\25\1\315\22\25\1\316" +
			"\67\25\12\10\1\30\10\10\1\30\1\317\1\320\1\10\1\321\1\141\7\10\1\34\1\322" +
			"\2\30\3\10\1\323\1\171\1\36\1\73\51\10\1\224\3\10\1\73\2\10\1\212\3\10\1\212" +
			"\2\10\1\30\3\10\1\30\2\10\1\22\3\10\1\22\3\10\1\73\3\10\1\73\2\10\1\212\1" +
			"\324\6\5\1\141\3\10\1\163\1\37\1\212\1\325\1\244\1\326\1\163\1\234\1\163\2" +
			"\212\1\121\1\10\1\33\1\10\1\112\1\327\1\33\1\10\1\112\50\25\32\10\1\22\5\25" +
			"\106\10\1\26\1\25\33\10\1\224\74\25\1\120\3\25\14\0\20\25\36\0\2\25");

	/* The ZZ_CMAP_A table has 1728 entries */
	static final char ZZ_CMAP_A[] = zzUnpackCMap(
		"\11\62\1\3\1\63\2\0\1\1\6\62\4\0\1\2\1\64\1\40\1\0\1\43\1\53\1\0\1\41\1\32" +
			"\1\33\1\52\1\65\1\47\1\42\1\44\1\46\12\67\1\50\1\56\1\54\1\51\1\4\1\0\1\55" +
			"\4\43\1\61\15\43\1\34\1\70\1\35\1\0\1\43\1\0\1\11\1\7\1\26\1\15\1\14\1\31" +
			"\1\60\1\10\1\20\1\57\1\43\1\16\1\30\1\22\1\24\1\27\1\43\1\13\1\5\1\21\1\6" +
			"\1\12\1\17\1\25\1\23\1\43\1\36\1\1\1\37\1\0\1\62\2\0\4\43\4\0\1\43\2\0\1\62" +
			"\2\0\1\53\4\0\1\43\1\0\1\45\2\0\1\43\5\0\7\43\1\0\2\43\4\0\4\43\16\0\5\43" +
			"\7\0\1\43\1\0\1\43\1\0\5\43\1\0\2\43\6\0\1\43\1\0\3\43\1\0\1\43\1\0\4\43\1" +
			"\0\13\43\1\0\3\43\1\0\5\62\2\0\6\43\1\0\7\43\1\0\1\43\15\0\1\43\1\0\15\62" +
			"\1\0\1\62\1\0\2\62\1\0\2\62\1\0\1\62\3\43\5\0\5\62\6\0\1\43\4\0\3\62\5\0\3" +
			"\43\5\62\2\67\4\0\2\43\1\62\13\43\1\0\1\43\7\62\2\43\2\62\1\0\4\62\2\43\2" +
			"\67\3\43\2\0\1\43\7\0\1\62\1\43\1\62\6\43\3\62\2\0\11\43\3\62\1\43\6\0\2\67" +
			"\6\43\4\62\2\43\2\0\2\62\1\43\11\62\1\43\3\62\1\43\5\62\2\0\1\43\3\62\4\0" +
			"\1\43\1\0\6\43\4\0\13\62\1\0\4\62\6\43\3\62\1\43\2\62\1\43\7\62\2\43\2\62" +
			"\2\0\2\67\1\0\3\62\1\0\10\43\2\0\2\43\2\0\6\43\1\0\1\43\3\0\4\43\2\0\1\62" +
			"\1\43\7\62\2\0\2\62\2\0\3\62\1\43\5\0\2\43\1\0\5\43\4\0\3\43\4\0\2\43\1\0" +
			"\2\43\1\0\2\43\1\0\2\43\2\0\1\62\1\0\5\62\4\0\2\62\2\0\3\62\3\0\1\62\7\0\4" +
			"\43\1\0\1\43\7\0\2\67\2\62\3\43\1\62\2\0\1\43\1\0\2\43\1\0\3\43\2\62\1\0\3" +
			"\62\2\0\1\43\15\0\2\62\2\0\1\62\1\43\1\0\6\43\3\0\3\43\1\0\4\43\3\0\2\43\1" +
			"\0\1\43\1\0\2\43\3\0\2\43\3\0\2\43\4\0\5\62\3\0\3\62\1\0\4\62\2\0\1\43\6\0" +
			"\1\62\4\43\1\0\5\43\3\0\1\43\7\62\1\0\2\62\5\0\2\62\3\0\2\62\1\0\3\43\1\0" +
			"\2\43\5\0\3\43\2\0\1\43\3\62\1\0\4\62\1\43\1\0\4\43\1\0\1\43\4\0\1\62\4\0" +
			"\6\62\1\0\1\62\7\0\12\66\2\0\2\62\4\0\1\43\1\62\2\43\7\62\4\0\10\43\1\62\2" +
			"\67\7\0\2\43\1\0\1\43\2\0\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0\3\43\1\0\1\43" +
			"\1\0\1\43\2\0\2\43\1\0\3\43\2\62\1\0\2\62\1\43\2\0\5\43\1\0\1\43\1\0\6\62" +
			"\2\0\2\67\2\0\4\43\2\62\13\0\1\62\1\0\1\62\1\0\1\62\4\0\2\62\5\43\3\62\6\0" +
			"\1\62\1\0\7\62\1\43\2\62\4\43\3\62\1\43\3\62\2\43\7\62\3\43\4\62\5\43\14\62" +
			"\1\43\1\62\2\67\4\62\7\0\1\43\2\0\3\43\1\0\7\43\2\0\3\62\2\43\3\62\3\0\2\43" +
			"\2\62\4\0\1\43\1\0\2\62\4\0\4\43\10\62\3\0\1\43\3\0\2\43\1\62\5\0\3\62\2\0" +
			"\1\43\1\62\1\43\5\0\6\43\2\0\5\62\3\43\3\0\10\62\5\43\2\67\3\0\3\43\3\62\1" +
			"\0\5\62\4\43\1\62\4\43\3\62\2\43\2\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43\2\0\3" +
			"\43\1\0\6\43\2\0\2\43\2\0\5\62\5\0\1\43\5\0\6\62\1\0\1\62\3\0\4\62\11\0\1" +
			"\43\4\0\1\43\1\0\5\43\2\0\1\43\1\0\4\43\1\0\3\43\2\0\4\43\5\0\5\43\4\0\1\43" +
			"\4\0\4\43\3\62\2\43\5\0\2\62\2\0\3\43\2\67\2\43\4\0\6\62\1\0\2\43\2\0\4\43" +
			"\1\0\2\43\1\62\3\43\1\62\4\43\1\62\4\43\2\62\6\43\2\66\6\0\4\43\2\62\4\0\1" +
			"\43\1\62\4\0\1\62\5\43\2\62\3\0\3\43\4\0\3\43\2\62\2\0\6\43\1\0\3\62\1\0\2" +
			"\62\5\0\5\43\5\0\1\43\1\62\3\43\1\0\2\43\1\0\7\43\2\0\1\62\6\0\2\43\2\0\3" +
			"\43\3\0\2\43\3\0\2\43\2\0\3\62\4\0\3\43\1\0\2\43\1\0\1\43\5\0\1\62\2\0\1\43" +
			"\3\0\1\43\2\0\2\43\3\62\1\0\2\62\1\0\3\62\2\0\1\62\2\0\5\62\1\0\2\67\1\62" +
			"\4\43\10\0\5\62\3\0\6\62\2\0\3\62\2\0\4\62\4\0\3\62\5\0\1\43\2\0\2\43\2\0" +
			"\4\43\1\0\4\43\1\0\1\43\1\0\6\43\2\0\5\43\1\0\4\43\1\0\4\43\2\0\2\67\1\0\1" +
			"\43\1\0\1\43\5\0\1\43\1\0\1\43\1\0\3\43\1\0\3\43\1\0\3\43");

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\5\0\1\1\1\2\1\3\1\4\21\5\1\6\1\7" +
			"\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16" +
			"\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
			"\1\1\1\26\1\27\1\30\1\31\2\30\1\32\3\30" +
			"\1\2\1\0\2\5\1\0\3\5\1\33\16\5\1\34" +
			"\5\5\1\35\6\5\1\36\1\37\1\0\1\3\1\40" +
			"\3\0\1\31\1\32\1\41\1\5\1\0\1\42\1\5" +
			"\1\43\1\5\1\44\1\45\7\5\1\46\20\5\1\47" +
			"\1\50\1\51\1\52\1\5\1\53\1\0\11\5\1\54" +
			"\1\5\1\55\1\56\1\5\1\57\1\60\1\5\1\61" +
			"\7\5\1\0\1\5\1\0\10\5\1\62\11\5\1\63" +
			"\1\0\1\52\1\64\10\5\1\65\2\5\1\66\5\5" +
			"\1\67\6\5\1\70\1\71\1\5\1\72\1\5\1\73" +
			"\1\5\1\74\1\75\1\5\1\76\1\77\1\100\1\101" +
			"\1\102\1\5\1\103\1\104\1\105";

	private static int[] zzUnpackAction() {
		int[] result = new int[234];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u011d" +
			"\0\u011d\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5" +
			"\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad" +
			"\0\u04e6\0\u051f\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d" +
			"\0\u011d\0\u011d\0\u0558\0\u0591\0\u05ca\0\u011d\0\u011d\0\u0603" +
			"\0\u063c\0\u0675\0\u011d\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u011d" +
			"\0\u011d\0\u0792\0\u07cb\0\u011d\0\u0804\0\u083d\0\u0876\0\u08af" +
			"\0\u05ca\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0390" +
			"\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd" +
			"\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0390\0\u0d5c" +
			"\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0390\0\u0e79\0\u0eb2\0\u0eeb" +
			"\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u0603" +
			"\0\u10b3\0\u10ec\0\u1125\0\u07cb\0\u083d\0\u0390\0\u115e\0\u1197" +
			"\0\u0390\0\u11d0\0\u0390\0\u1209\0\u0390\0\u0390\0\u1242\0\u127b" +
			"\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u0390\0\u13d1\0\u140a" +
			"\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2" +
			"\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u011d\0\u011d" +
			"\0\u011d\0\u1761\0\u179a\0\u011d\0\u17d3\0\u180c\0\u1845\0\u187e" +
			"\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u0390\0\u1a0d" +
			"\0\u0390\0\u0390\0\u1a46\0\u0390\0\u0390\0\u1a7f\0\u0390\0\u1ab8" +
			"\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80" +
			"\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48" +
			"\0\u1e81\0\u0390\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7" +
			"\0\u2010\0\u2049\0\u2082\0\u0390\0\u20bb\0\u20bb\0\u0390\0\u20f4" +
			"\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u0390" +
			"\0\u22bc\0\u22f5\0\u0390\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412" +
			"\0\u0390\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u0390" +
			"\0\u0390\0\u25a1\0\u0390\0\u25da\0\u0390\0\u2613\0\u0390\0\u0390" +
			"\0\u264c\0\u0390\0\u0390\0\u0390\0\u0390\0\u0390\0\u2685\0\u0390" +
			"\0\u0390\0\u0390";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[234];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14" +
			"\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24" +
			"\1\25\1\26\2\23\1\27\1\23\1\30\1\31\1\23" +
			"\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" +
			"\1\42\1\43\1\23\1\44\1\6\1\45\1\46\1\47" +
			"\1\50\1\51\1\52\1\6\1\53\1\54\3\23\1\6" +
			"\1\7\1\55\1\56\2\57\1\6\40\60\1\61\27\60" +
			"\1\62\51\60\1\63\16\60\1\62\41\60\1\64\26\60" +
			"\1\65\42\60\1\66\25\60\1\67\72\0\1\7\2\70" +
			"\42\0\1\71\14\0\1\7\12\0\1\23\1\72\12\23" +
			"\1\73\10\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\1\75\24\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\17\23\1\76\5\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\4\23\1\77\20\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\1\100\1\23" +
			"\1\101\12\23\1\102\7\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\4\23" +
			"\1\103\2\23\1\104\7\23\1\105\5\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\7\23\1\106\15\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\15\23" +
			"\1\107\2\23\1\110\2\23\1\111\1\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\1\112\3\23\1\113\12\23\1\114\5\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\25\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\13\23\1\115" +
			"\3\23\1\116\5\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\1\117\14\23" +
			"\1\120\7\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\6\23\1\121\1\122" +
			"\3\23\1\123\11\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\2\23\1\124" +
			"\12\23\1\125\7\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\17\23\1\126" +
			"\5\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\6\23\1\127\16\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\1\23\1\130\2\23\1\131\2\23\1\132" +
			"\3\23\1\133\11\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\43\0\1\134\23\0" +
			"\2\135\45\0\1\136\72\0\1\137\73\0\1\140\24\0" +
			"\25\141\11\0\1\141\13\0\4\141\4\0\1\141\6\0" +
			"\25\52\10\0\2\52\1\0\2\52\10\0\4\52\4\0" +
			"\1\52\57\0\1\54\76\0\1\142\72\0\2\57\45\0" +
			"\1\143\21\0\2\57\14\0\1\60\5\0\2\60\15\0" +
			"\1\60\101\0\1\144\32\0\1\60\5\0\2\60\16\0" +
			"\1\60\71\0\1\145\41\0\1\60\5\0\2\60\50\0" +
			"\2\70\42\0\1\71\27\0\2\23\1\146\22\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\6\23\1\147\16\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\25\150\11\0\1\150\13\0\3\150\14\0\7\23\1\151" +
			"\15\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\17\23\1\152\5\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\1\153\24\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\1\154" +
			"\24\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\16\23\1\155\6\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\6\23\1\156\16\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\6\23\1\157\16\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\11\23\1\160" +
			"\13\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\1\161\3\23\1\162\20\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\21\23\1\163\3\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\14\23\1\164\10\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\22\23" +
			"\1\165\2\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\11\23\1\166\13\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\14\23\1\167\10\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\1\23\1\170\23\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\14\23" +
			"\1\171\10\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\6\23\1\172\16\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\14\23\1\173\10\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\1\23\1\174\23\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\6\23" +
			"\1\175\16\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\23\23\1\176\1\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\25\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\1\177\3\23\4\0\1\23\6\0" +
			"\15\23\1\200\5\23\1\201\1\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\13\23\1\202\11\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\15\23\1\203" +
			"\7\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\11\23\1\204\13\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\4\23\1\205\20\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\15\23\1\206\7\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\43\0\1\134\72\0" +
			"\1\143\21\0\2\135\45\0\1\207\24\0\63\137\1\0" +
			"\5\137\5\0\25\141\11\0\1\141\6\0\1\210\4\0" +
			"\4\141\4\0\1\141\1\0\63\142\1\211\5\142\66\0" +
			"\2\212\6\0\13\23\1\213\11\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\5\0" +
			"\1\214\25\150\10\0\2\150\3\0\1\215\7\0\4\150" +
			"\4\0\1\150\6\0\11\23\1\216\13\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\14\23\1\217\10\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\1\220" +
			"\24\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\4\23\1\221\20\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\17\23\1\222\5\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\21\23\1\223\3\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\11\23\1\224" +
			"\13\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\7\23\1\225\15\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\14\23\1\226\10\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\7\23\1\227\15\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\2\23\1\230" +
			"\22\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\3\23\1\231\21\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\10\23\1\232\14\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\7\23\1\233\7\23\1\234\5\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\7\23\1\235\15\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\23\23\1\236" +
			"\1\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\7\23\1\237\15\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\7\23\1\240\15\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\21\23\1\241\3\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\22\23\1\242" +
			"\2\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\5\23\1\243\17\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\21\23\1\244\3\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\1\174\24\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\14\23\1\245\10\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\4\23\1\246\20\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\62\0\1\247\4\0\2\212\6\0\15\23\1\250\7\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\3\0\1\215\2\0\25\251\11\0\1\251" +
			"\13\0\3\251\14\0\7\23\1\252\15\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\6\23\1\253\16\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\13\23" +
			"\1\254\11\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\14\23\1\255\10\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\1\23\1\256\23\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\14\23\1\257\10\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\17\23" +
			"\1\260\5\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\15\23\1\261\7\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\16\23\1\262\6\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\11\23\1\263\13\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\25\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\1\23" +
			"\1\264\2\23\4\0\1\23\6\0\13\23\1\265\11\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\21\23\1\266\3\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\7\23\1\267\15\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\17\23" +
			"\1\270\5\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\4\23\1\271\20\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\14\23\1\272\10\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\1\23\1\273\23\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\11\23" +
			"\1\274\13\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\43\0\1\275\22\0\1\275" +
			"\2\276\6\0\25\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\1\23\1\277\2\23\4\0\1\23\5\0" +
			"\1\214\25\251\10\0\2\251\13\0\4\251\4\0\1\251" +
			"\6\0\4\23\1\300\20\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\4\23" +
			"\1\301\20\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\17\23\1\302\5\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\13\23\1\303\11\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\6\23\1\304\16\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\13\23" +
			"\1\305\11\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\1\306\24\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\10\23\1\307\14\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\7\23\1\310\15\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\7\23\1\311" +
			"\15\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\15\23\1\312\7\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\14\23\1\313\10\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\22\23\1\314\2\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\15\23\1\315" +
			"\7\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\14\23\1\316\10\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\13\23\1\317\11\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\6\23\1\320\16\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\67\0\2\276\6\0" +
			"\15\23\1\321\7\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\21\23\1\322" +
			"\3\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\15\23\1\323\7\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\11\23\1\324\13\23\10\0\2\23\1\0" +
			"\2\52\5\0\1\74\2\0\4\23\4\0\1\23\6\0" +
			"\21\23\1\325\3\23\10\0\2\23\1\0\2\52\5\0" +
			"\1\74\2\0\4\23\4\0\1\23\6\0\5\23\1\326" +
			"\17\23\10\0\2\23\1\0\2\52\5\0\1\74\2\0" +
			"\4\23\4\0\1\23\6\0\7\23\1\327\15\23\10\0" +
			"\2\23\1\0\2\52\5\0\1\74\2\0\4\23\4\0" +
			"\1\23\6\0\1\330\24\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\6\23" +
			"\1\331\16\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\4\23\1\332\20\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\14\23\1\333\10\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\7\23\1\334\15\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\7\23" +
			"\1\335\15\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\17\23\1\336\5\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\7\23\1\337\15\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\14\23\1\340\10\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\7\23" +
			"\1\341\15\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\7\23\1\342\15\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\7\23\1\343\15\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\7\23\1\344\15\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\10\23" +
			"\1\345\14\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\11\23\1\346\13\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\6\0\15\23\1\347\7\23\10\0\2\23" +
			"\1\0\2\52\5\0\1\74\2\0\4\23\4\0\1\23" +
			"\6\0\15\23\1\350\7\23\10\0\2\23\1\0\2\52" +
			"\5\0\1\74\2\0\4\23\4\0\1\23\6\0\10\23" +
			"\1\351\14\23\10\0\2\23\1\0\2\52\5\0\1\74" +
			"\2\0\4\23\4\0\1\23\6\0\14\23\1\352\10\23" +
			"\10\0\2\23\1\0\2\52\5\0\1\74\2\0\4\23" +
			"\4\0\1\23\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[9918];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {
		"Unknown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\5\0\1\11\1\1\2\11\21\1\10\11\3\1\2\11" +
			"\3\1\1\11\4\1\2\11\2\1\1\11\4\1\1\0" +
			"\2\1\1\0\41\1\1\0\2\1\3\0\4\1\1\0" +
			"\36\1\3\11\2\1\1\11\1\0\31\1\1\0\1\1" +
			"\1\0\23\1\1\0\55\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[234];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the input device
	 */
	private java.io.Reader zzReader;

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;

	/* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end) ? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof() {
		if (queue.isEmpty() && !end) {
			blockManager.eof();
			storeTokens();
			end = true;
			queue.add(TaraTypes.NEWLINE);
		}
		return sendToken();
	}

	private String getTextSpaces(String text) {
		int index = (text.indexOf(' ') == -1) ? text.indexOf('\t') : text.indexOf(' ');
		return (index == -1) ? "" : text.substring(index);
	}

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

	private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
		if (queue.isEmpty()) {
			String spaces = getTextSpaces(yytext().toString());
			blockManager.spaces(spaces);
			storeTokens();
		}
		return sendToken();
	}

	private IElementType inline() {
		blockManager.openBracket(yytext().length());
		storeTokens();
		return sendToken();
	}

	private IElementType semicolon() {
		blockManager.semicolon(yytext().length());
		storeTokens();
		return sendToken();
	}

	private void storeTokens() {
		blockManager.actions();
		for (IElementType token : blockManager.actions())
			queue.offer(token);
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	TaraLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		int size = 0;
		for (int i = 0, length = packed.length(); i < length; i += 2) {
			size += packed.charAt(i);
		}
		char[] map = new char[size];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < packed.length()) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				switch (zzLexicalState) {
					case YYINITIAL: {
						return eof();
					}
					case 235:
						break;
					default:
						return null;
				}
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						return TokenType.BAD_CHARACTER;
					}
					case 70:
						break;
					case 2: {
						return newlineIndent();
					}
					case 71:
						break;
					case 3: {
						return TokenType.WHITE_SPACE;
					}
					case 72:
						break;
					case 4: {
						return inline();
					}
					case 73:
						break;
					case 5: {
						return TaraTypes.IDENTIFIER_KEY;
					}
					case 74:
						break;
					case 6: {
						return TaraTypes.LEFT_PARENTHESIS;
					}
					case 75:
						break;
					case 7: {
						return TaraTypes.RIGHT_PARENTHESIS;
					}
					case 76:
						break;
					case 8: {
						return TaraTypes.LEFT_SQUARE;
					}
					case 77:
						break;
					case 9: {
						return TaraTypes.RIGHT_SQUARE;
					}
					case 78:
						break;
					case 10: {
						return TaraTypes.LEFT_CURLY;
					}
					case 79:
						break;
					case 11: {
						return TaraTypes.RIGHT_CURLY;
					}
					case 80:
						break;
					case 12: {
						yybegin(QUOTED);
						return TaraTypes.QUOTE_BEGIN;
					}
					case 81:
						break;
					case 13: {
						yybegin(EXPRESSION);
						return TaraTypes.EXPRESSION_BEGIN;
					}
					case 82:
						break;
					case 14: {
						return TaraTypes.DOT;
					}
					case 83:
						break;
					case 15: {
						return TaraTypes.COMMA;
					}
					case 84:
						break;
					case 16: {
						return TaraTypes.COLON;
					}
					case 85:
						break;
					case 17: {
						return TaraTypes.EQUALS;
					}
					case 86:
						break;
					case 18: {
						return TaraTypes.STAR;
					}
					case 87:
						break;
					case 19: {
						return TaraTypes.METRIC_VALUE_KEY;
					}
					case 88:
						break;
					case 20: {
						return TaraTypes.AT;
					}
					case 89:
						break;
					case 21: {
						return semicolon();
					}
					case 90:
						break;
					case 22: {
						return TaraTypes.PLUS;
					}
					case 91:
						break;
					case 23: {
						return TaraTypes.NATURAL_VALUE_KEY;
					}
					case 92:
						break;
					case 24: {
						return TaraTypes.CHARACTER;
					}
					case 93:
						break;
					case 25: {
						yybegin(YYINITIAL);
						return TaraTypes.QUOTE_END;
					}
					case 94:
						break;
					case 26: {
						yybegin(YYINITIAL);
						return TaraTypes.EXPRESSION_END;
					}
					case 95:
						break;
					case 27: {
						return TaraTypes.AS;
					}
					case 96:
						break;
					case 28: {
						return TaraTypes.IS;
					}
					case 97:
						break;
					case 29: {
						return TaraTypes.ON;
					}
					case 98:
						break;
					case 30: {
						yybegin(EXPRESSION_MULTILINE);
						return TaraTypes.EXPRESSION_BEGIN;
					}
					case 99:
						break;
					case 31: {
						return TaraTypes.NEGATIVE_VALUE_KEY;
					}
					case 100:
						break;
					case 32: {
						yybegin(MULTILINE);
						return TaraTypes.QUOTE_BEGIN;
					}
					case 101:
						break;
					case 33: {
						return TaraTypes.SUB;
					}
					case 102:
						break;
					case 34: {
						return TaraTypes.USE;
					}
					case 103:
						break;
					case 35: {
						return TaraTypes.HAS;
					}
					case 104:
						break;
					case 36: {
						return TaraTypes.ANY;
					}
					case 105:
						break;
					case 37: {
						return TaraTypes.VAR;
					}
					case 106:
						break;
					case 38: {
						return TaraTypes.DSL;
					}
					case 107:
						break;
					case 39: {
						return TaraTypes.LIST;
					}
					case 108:
						break;
					case 40: {
						return TaraTypes.ANCHOR_VALUE;
					}
					case 109:
						break;
					case 41: {
						yypushback(1);
						return TaraTypes.DOC_LINE;
					}
					case 110:
						break;
					case 42: {
						return TaraTypes.DOUBLE_VALUE_KEY;
					}
					case 111:
						break;
					case 43: {
						return TaraTypes.CLASS_TYPE;
					}
					case 112:
						break;
					case 44: {
						return TaraTypes.DATE_TYPE;
					}
					case 113:
						break;
					case 45: {
						return TaraTypes.WITH;
					}
					case 114:
						break;
					case 46: {
						return TaraTypes.WORD_TYPE;
					}
					case 115:
						break;
					case 47: {
						return TaraTypes.INTO;
					}
					case 116:
						break;
					case 48: {
						return TaraTypes.BOOLEAN_VALUE_KEY;
					}
					case 117:
						break;
					case 49: {
						return TaraTypes.TIME_TYPE;
					}
					case 118:
						break;
					case 50: {
						return TaraTypes.EMPTY_REF;
					}
					case 119:
						break;
					case 51: {
						return TaraTypes.FINAL;
					}
					case 120:
						break;
					case 52: {
						return TaraTypes.STRING_TYPE;
					}
					case 121:
						break;
					case 53: {
						return TaraTypes.DOUBLE_TYPE;
					}
					case 122:
						break;
					case 54: {
						return TaraTypes.OBJECT_TYPE;
					}
					case 123:
						break;
					case 55: {
						return TaraTypes.BOOLEAN_TYPE;
					}
					case 124:
						break;
					case 56: {
						return TaraTypes.EXTENDS;
					}
					case 125:
						break;
					case 57: {
						return TaraTypes.INT_TYPE;
					}
					case 126:
						break;
					case 58: {
						return TaraTypes.CONCEPT;
					}
					case 127:
						break;
					case 59: {
						return TaraTypes.PRIVATE;
					}
					case 128:
						break;
					case 60: {
						return TaraTypes.FEATURE;
					}
					case 129:
						break;
					case 61: {
						return TaraTypes.ABSTRACT;
					}
					case 130:
						break;
					case 62: {
						return TaraTypes.VOLATILE;
					}
					case 131:
						break;
					case 63: {
						return TaraTypes.RESOURCE_TYPE;
					}
					case 132:
						break;
					case 64: {
						return TaraTypes.REACTIVE;
					}
					case 133:
						break;
					case 65: {
						return TaraTypes.ENCLOSED;
					}
					case 134:
						break;
					case 66: {
						return TaraTypes.TERMINAL;
					}
					case 135:
						break;
					case 67: {
						return TaraTypes.FUNCTION_TYPE;
					}
					case 136:
						break;
					case 68: {
						return TaraTypes.VERSIONED;
					}
					case 137:
						break;
					case 69: {
						return TaraTypes.COMPONENT;
					}
					case 138:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
