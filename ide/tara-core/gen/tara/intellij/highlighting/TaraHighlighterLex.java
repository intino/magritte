/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package tara.intellij.highlighting;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.openapi.project.Project;
import tara.Language;
import tara.intellij.lang.LanguageManager;
import tara.intellij.lang.psi.TaraTypes;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>TaraHighlighterLex.flex</tt>
 */
class TaraHighlighterLex implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTED = 2;
  public static final int MULTILINE = 4;
  public static final int EXPRESSION = 6;
  public static final int EXPRESSION_MULTILINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\4"+
    "\0\1\17\1\20\1\21\1\22\2\23\1\24\3\23\1\24\71\23\1\25\1\23\1\26\1\27\1\30"+
    "\1\31\2\27\16\0\1\32\1\17\1\33\1\34\2\23\1\35\11\23\1\36\21\23\1\37\1\40\23"+
    "\23\1\27\1\41\3\23\1\24\1\42\1\41\4\23\1\43\1\44\4\0\1\45\1\46\1\27\3\23\2"+
    "\47\1\27\1\50\1\51\1\0\1\52\5\23\1\53\2\0\1\5\1\54\1\55\13\23\1\56\1\45\1"+
    "\57\1\60\1\5\1\61\1\27\1\62\1\63\3\23\3\0\1\64\12\23\1\65\1\0\1\66\1\27\1"+
    "\5\1\67\3\23\1\53\1\70\1\22\2\23\1\65\1\71\1\72\1\73\2\27\3\23\1\74\10\27"+
    "\1\75\1\30\6\27\1\76\2\0\1\77\1\100\6\23\1\101\2\0\1\102\1\23\1\103\1\5\2"+
    "\41\1\104\1\105\1\106\2\23\1\75\1\107\1\110\1\111\1\112\1\62\1\113\1\103\1"+
    "\5\1\114\1\51\1\104\1\115\1\106\2\23\1\75\1\116\1\117\1\120\1\121\1\122\1"+
    "\123\1\124\1\5\1\125\1\27\1\104\1\36\1\35\2\23\1\75\1\126\1\110\1\45\1\127"+
    "\1\130\1\27\1\103\1\5\1\42\1\27\1\104\1\105\1\106\2\23\1\75\1\126\1\110\1"+
    "\111\1\121\1\131\1\113\1\103\1\5\1\42\1\27\1\132\1\133\1\134\1\135\1\136\1"+
    "\133\1\23\1\137\1\140\1\141\1\142\1\27\1\124\1\5\1\27\1\42\1\104\1\32\1\75"+
    "\2\23\1\75\1\143\1\144\1\145\1\141\1\146\1\26\1\103\1\5\2\27\1\147\1\32\1"+
    "\75\2\23\1\75\1\143\1\110\1\145\1\141\1\146\1\33\1\103\1\5\1\150\1\27\1\147"+
    "\1\32\1\75\4\23\1\151\1\145\1\152\1\62\1\27\1\103\1\5\1\27\1\40\1\147\1\23"+
    "\1\24\1\40\2\23\1\35\1\153\1\24\1\154\1\155\1\0\1\156\1\157\1\160\1\27\1\41"+
    "\5\23\1\161\1\162\1\163\1\77\1\5\1\164\4\27\1\165\1\166\1\167\1\41\1\170\1"+
    "\171\1\161\1\172\1\173\1\174\1\5\1\175\4\27\1\130\2\27\1\176\1\5\1\164\1\177"+
    "\1\200\1\23\1\41\3\23\1\30\1\44\1\0\1\145\1\201\1\0\1\44\3\0\1\50\1\202\7"+
    "\27\5\23\1\53\1\0\1\203\1\5\1\164\1\65\1\204\1\205\1\206\1\207\1\23\1\210"+
    "\1\211\1\5\1\212\4\23\1\36\1\213\5\23\1\214\51\23\1\134\1\24\1\134\5\23\1"+
    "\134\4\23\1\134\1\24\1\134\1\23\1\24\7\23\1\134\10\23\1\215\4\27\2\23\2\27"+
    "\12\23\1\30\1\27\1\41\114\23\1\105\2\23\1\41\2\23\1\47\11\23\1\133\1\130\1"+
    "\27\1\23\1\32\1\216\1\27\2\23\1\216\1\27\2\23\1\217\1\27\1\23\1\32\1\220\1"+
    "\27\6\23\1\221\3\0\1\222\1\223\1\5\1\164\3\27\1\224\1\5\1\164\13\23\1\27\5"+
    "\23\1\225\10\23\1\226\1\27\3\23\1\30\1\0\1\2\1\0\1\2\1\124\1\5\3\23\1\226"+
    "\1\30\1\27\5\23\1\114\2\0\1\55\1\176\1\5\1\164\4\27\2\23\1\163\1\2\6\23\1"+
    "\201\1\77\3\0\1\111\1\5\1\164\1\5\1\164\1\43\13\27\1\227\5\23\1\221\1\0\1"+
    "\227\1\114\1\5\1\164\1\27\1\230\1\2\1\27\1\231\3\23\1\102\1\206\1\5\1\67\4"+
    "\23\1\65\1\0\1\2\1\27\4\23\1\221\2\0\1\27\1\5\1\232\1\5\1\67\3\23\1\226\12"+
    "\27\1\233\2\0\1\234\1\235\1\27\30\23\4\0\1\77\2\27\1\76\42\23\2\226\4\23\2"+
    "\226\1\23\1\236\3\23\1\226\6\23\1\32\1\173\1\237\1\30\1\240\1\114\1\23\1\30"+
    "\1\237\1\30\1\27\1\230\3\27\1\241\1\27\1\43\1\130\1\27\1\242\1\27\1\50\1\243"+
    "\1\42\1\43\2\27\1\23\1\30\3\23\1\47\2\27\1\0\1\50\1\244\1\0\1\245\1\27\1\246"+
    "\1\40\1\153\1\247\1\31\1\250\1\23\1\251\1\252\1\253\2\27\5\23\1\130\116\27"+
    "\5\23\1\24\5\23\1\24\20\23\1\30\1\254\1\255\1\27\4\23\1\36\1\213\7\23\1\43"+
    "\1\27\1\62\2\23\1\24\1\27\10\24\4\0\5\27\1\43\72\27\1\252\3\27\1\41\1\210"+
    "\1\247\1\30\1\41\11\23\1\24\1\256\1\41\12\23\1\214\1\252\4\23\1\226\1\41\12"+
    "\23\1\24\2\27\3\23\1\47\6\27\170\23\1\226\11\27\71\23\1\30\6\27\21\23\1\30"+
    "\10\27\5\23\1\226\41\23\1\30\2\23\1\5\1\257\2\27\5\23\1\163\1\76\1\260\3\23"+
    "\1\62\12\23\1\176\3\27\1\43\1\23\1\40\14\23\1\261\1\114\1\27\1\23\1\47\11"+
    "\27\1\23\1\262\1\263\2\23\1\53\2\27\1\130\6\23\1\114\1\27\1\264\5\23\1\221"+
    "\1\0\1\50\1\27\1\5\1\164\2\0\1\264\1\51\1\5\1\67\2\23\1\65\1\174\2\23\1\163"+
    "\1\0\1\2\1\27\3\23\1\30\1\100\5\23\1\53\1\0\1\245\1\43\1\5\1\164\2\27\1\157"+
    "\1\265\5\23\1\102\1\77\1\27\1\263\1\266\1\5\1\164\2\23\1\24\1\267\6\23\1\205"+
    "\1\270\1\225\2\27\1\271\1\23\1\53\1\272\1\27\3\273\1\27\2\24\22\27\4\23\1"+
    "\53\1\274\1\5\1\164\64\23\1\114\1\27\2\23\1\24\1\275\5\23\1\114\40\27\55\23"+
    "\1\226\15\23\1\26\4\27\1\24\1\27\1\275\1\276\1\23\1\75\1\24\1\173\1\277\15"+
    "\23\1\26\3\27\1\275\54\23\1\226\2\27\10\23\1\40\6\23\5\27\1\23\1\30\2\0\2"+
    "\27\1\77\1\27\1\136\2\27\1\252\3\27\1\42\1\32\20\23\1\300\1\242\1\27\1\5\1"+
    "\164\1\41\2\23\1\115\1\41\2\23\1\47\1\301\12\23\1\24\3\40\1\302\1\303\2\27"+
    "\1\304\1\23\1\143\2\23\1\24\2\23\1\305\1\23\1\226\1\23\1\226\4\27\17\23\1"+
    "\47\10\27\6\23\1\30\20\27\1\306\20\27\3\23\1\30\6\23\1\130\5\27\3\23\1\24"+
    "\2\27\3\23\1\47\6\27\3\23\1\226\4\23\1\114\1\23\1\247\5\27\23\23\1\226\1\5"+
    "\1\164\52\27\1\226\1\75\4\23\1\36\1\307\2\23\1\226\25\27\2\23\1\226\1\27\3"+
    "\23\1\26\10\27\7\23\1\301\10\27\1\310\1\76\1\143\1\41\2\23\1\114\1\120\4\27"+
    "\3\23\1\30\20\27\6\23\1\226\1\27\2\23\1\226\1\27\2\23\1\47\21\27\11\23\1\130"+
    "\66\27\1\231\6\23\1\0\1\77\3\27\1\124\1\5\2\27\1\231\5\23\1\0\1\311\2\27\3"+
    "\23\1\130\1\5\1\164\1\231\3\23\1\163\1\0\1\312\1\5\10\27\1\231\5\23\1\53\1"+
    "\0\1\313\1\27\1\5\1\164\42\27\1\157\1\265\72\27\1\157\1\265\56\27\1\157\1"+
    "\265\4\27\5\23\1\53\1\0\1\27\1\5\1\164\14\27\1\157\1\265\64\27\1\157\1\265"+
    "\42\27\55\23\1\24\22\27\14\23\1\47\63\27\5\23\1\24\72\27\7\23\1\130\4\27\1"+
    "\157\1\265\34\27\1\157\1\265\64\27\10\23\1\30\1\27\1\102\4\0\1\77\1\27\1\62"+
    "\1\231\1\23\14\27\1\26\153\27\1\314\1\315\2\0\1\316\1\2\3\27\1\317\22\27\1"+
    "\320\67\27\12\23\1\32\10\23\1\32\1\321\1\322\1\23\1\323\1\143\7\23\1\36\1"+
    "\324\2\32\3\23\1\325\1\173\1\40\1\75\51\23\1\226\3\23\1\75\2\23\1\214\3\23"+
    "\1\214\2\23\1\32\3\23\1\32\2\23\1\24\3\23\1\24\3\23\1\75\3\23\1\75\2\23\1"+
    "\214\1\326\6\5\1\143\3\23\1\165\1\41\1\214\1\327\1\246\1\330\1\165\1\236\1"+
    "\165\2\214\1\123\1\23\1\35\1\23\1\114\1\331\1\35\1\23\1\114\50\27\32\23\1"+
    "\24\5\27\106\23\1\30\1\27\33\23\1\226\74\27\1\122\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1744 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\71\1\77\1\73\2\0\1\74\6\71\4\0\1\77\1\72\1\46\1\0\1\34\1\35\1\0\1\47\1"+
    "\26\1\27\1\44\1\53\1\41\1\50\1\36\1\40\12\76\1\42\1\45\1\51\1\43\1\52\1\0"+
    "\1\54\1\34\1\64\1\34\1\62\1\70\1\61\2\34\1\57\5\34\1\65\2\34\1\56\1\63\1\67"+
    "\2\34\1\55\3\34\1\30\1\100\1\31\1\0\1\34\1\0\1\5\1\3\1\22\1\12\1\6\1\25\1"+
    "\60\1\4\1\15\1\66\1\34\1\13\1\23\1\11\1\14\1\24\1\34\1\17\1\1\1\10\1\2\1\16"+
    "\1\20\1\7\1\21\1\34\1\32\1\0\1\33\1\0\1\71\2\0\4\34\4\0\1\34\2\0\1\71\2\0"+
    "\1\35\4\0\1\34\1\0\1\37\2\0\1\34\5\0\17\34\1\0\2\34\4\0\4\34\16\0\5\34\7\0"+
    "\1\34\1\0\1\34\1\0\5\34\1\0\2\34\6\0\1\34\1\0\3\34\1\0\1\34\1\0\4\34\1\0\13"+
    "\34\1\0\3\34\1\0\5\71\2\0\6\34\1\0\7\34\1\0\1\34\15\0\1\34\1\0\15\71\1\0\1"+
    "\71\1\0\2\71\1\0\2\71\1\0\1\71\3\34\5\0\5\71\6\0\1\34\4\0\3\71\5\0\3\34\5"+
    "\71\2\76\4\0\2\34\1\71\13\34\1\0\1\34\7\71\2\34\2\71\1\0\4\71\2\34\2\76\3"+
    "\34\2\0\1\34\7\0\1\71\1\34\1\71\6\34\3\71\2\0\11\34\3\71\1\34\6\0\2\76\6\34"+
    "\4\71\2\34\2\0\2\71\1\34\11\71\1\34\3\71\1\34\5\71\2\0\1\34\3\71\4\0\1\34"+
    "\1\0\6\34\4\0\13\71\1\0\4\71\6\34\3\71\1\34\2\71\1\34\7\71\2\34\2\71\2\0\2"+
    "\76\1\0\3\71\1\0\10\34\2\0\2\34\2\0\6\34\1\0\1\34\3\0\4\34\2\0\1\71\1\34\7"+
    "\71\2\0\2\71\2\0\3\71\1\34\5\0\2\34\1\0\5\34\4\0\3\34\4\0\2\34\1\0\2\34\1"+
    "\0\2\34\1\0\2\34\2\0\1\71\1\0\5\71\4\0\2\71\2\0\3\71\3\0\1\71\7\0\4\34\1\0"+
    "\1\34\7\0\2\76\2\71\3\34\1\71\2\0\1\34\1\0\2\34\1\0\3\34\2\71\1\0\3\71\2\0"+
    "\1\34\15\0\2\71\2\0\1\71\1\34\1\0\6\34\3\0\3\34\1\0\4\34\3\0\2\34\1\0\1\34"+
    "\1\0\2\34\3\0\2\34\3\0\2\34\4\0\5\71\3\0\3\71\1\0\4\71\2\0\1\34\6\0\1\71\4"+
    "\34\1\0\5\34\3\0\1\34\7\71\1\0\2\71\5\0\2\71\3\0\2\71\1\0\3\34\1\0\2\34\5"+
    "\0\3\34\2\0\1\34\3\71\1\0\4\71\1\34\1\0\4\34\1\0\1\34\4\0\1\71\4\0\6\71\1"+
    "\0\1\71\7\0\12\75\2\0\2\71\4\0\1\34\1\71\2\34\7\71\4\0\10\34\1\71\2\76\7\0"+
    "\2\34\1\0\1\34\2\0\2\34\1\0\1\34\2\0\1\34\6\0\4\34\1\0\3\34\1\0\1\34\1\0\1"+
    "\34\2\0\2\34\1\0\3\34\2\71\1\0\2\71\1\34\2\0\5\34\1\0\1\34\1\0\6\71\2\0\2"+
    "\76\2\0\4\34\2\71\13\0\1\71\1\0\1\71\1\0\1\71\4\0\2\71\5\34\3\71\6\0\1\71"+
    "\1\0\7\71\1\34\2\71\4\34\3\71\1\34\3\71\2\34\7\71\3\34\4\71\5\34\14\71\1\34"+
    "\1\71\2\76\4\71\7\0\1\34\2\0\3\34\1\0\7\34\2\0\3\71\2\34\3\71\3\0\2\34\2\71"+
    "\4\0\1\34\1\0\2\71\4\0\4\34\10\71\3\0\1\34\3\0\2\34\1\71\5\0\3\71\2\0\1\34"+
    "\1\71\1\34\5\0\6\34\2\0\5\71\3\34\3\0\10\71\5\34\2\76\3\0\3\34\3\71\1\0\5"+
    "\71\4\34\1\71\4\34\3\71\2\34\2\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34\2\0\3\34"+
    "\1\0\6\34\2\0\2\34\2\0\5\71\5\0\1\34\5\0\6\71\1\0\1\71\3\0\4\71\11\0\1\34"+
    "\4\0\1\34\1\0\5\34\2\0\1\34\1\0\4\34\1\0\3\34\2\0\4\34\5\0\5\34\4\0\1\34\4"+
    "\0\4\34\3\71\2\34\5\0\2\71\2\0\3\34\2\76\2\34\4\0\6\71\1\0\2\34\2\0\4\34\1"+
    "\0\2\34\1\71\3\34\1\71\4\34\1\71\4\34\2\71\6\34\2\75\6\0\4\34\2\71\4\0\1\34"+
    "\1\71\4\0\1\71\5\34\2\71\3\0\3\34\4\0\3\34\2\71\2\0\6\34\1\0\3\71\1\0\2\71"+
    "\5\0\5\34\5\0\1\34\1\71\3\34\1\0\2\34\1\0\7\34\2\0\1\71\6\0\2\34\2\0\3\34"+
    "\3\0\2\34\3\0\2\34\2\0\3\71\4\0\3\34\1\0\2\34\1\0\1\34\5\0\1\71\2\0\1\34\3"+
    "\0\1\34\2\0\2\34\3\71\1\0\2\71\1\0\3\71\2\0\1\71\2\0\5\71\1\0\2\76\1\71\4"+
    "\34\10\0\5\71\3\0\6\71\2\0\3\71\2\0\4\71\4\0\3\71\5\0\1\34\2\0\2\34\2\0\4"+
    "\34\1\0\4\34\1\0\1\34\1\0\6\34\2\0\5\34\1\0\4\34\1\0\4\34\2\0\2\76\1\0\1\34"+
    "\1\0\1\34\5\0\1\34\1\0\1\34\1\0\3\34\1\0\3\34\1\0\3\34");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\20\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\1\1\22\1\23\1\24\11\2"+
    "\1\1\1\22\1\25\1\26\1\27\2\26\1\30\3\26"+
    "\1\2\1\0\2\2\1\31\7\2\1\32\1\33\14\2"+
    "\3\0\1\34\1\0\1\35\1\36\12\2\2\0\1\27"+
    "\1\30\1\37\1\0\1\40\1\41\1\2\1\42\4\2"+
    "\1\43\1\2\1\44\2\2\1\45\10\2\1\46\2\47"+
    "\2\0\1\50\13\2\1\51\1\52\1\0\1\53\5\2"+
    "\1\54\3\2\1\55\5\2\1\0\1\47\1\56\4\2"+
    "\1\57\4\2\1\60\2\0\3\2\1\61\10\2\1\62"+
    "\10\2\1\0\1\52\17\2\1\63\1\64\1\2\1\65"+
    "\1\2\1\66\5\2\1\67\1\2\1\70\1\71\1\2"+
    "\1\72\1\73\1\2\1\74\1\75\1\76\1\77\1\2"+
    "\1\100\1\101\1\2\1\102\1\103\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0145\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u0145\0\u0596\0\u05d7\0\u0618\0\u0145"+
    "\0\u0145\0\u0659\0\u069a\0\u0145\0\u0145\0\u0145\0\u06db\0\u071c"+
    "\0\u075d\0\u0145\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0145\0\u0145"+
    "\0\u0aaa\0\u0aeb\0\u0145\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0208\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0208\0\u0208\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u0659\0\u1289\0\u12ca\0\u130b\0\u134c"+
    "\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554"+
    "\0\u1595\0\u15d6\0\u1617\0\u0aeb\0\u0b6d\0\u0208\0\u1658\0\u0208"+
    "\0\u0208\0\u1699\0\u0208\0\u16da\0\u171b\0\u175c\0\u179d\0\u0208"+
    "\0\u17de\0\u0208\0\u181f\0\u1860\0\u0208\0\u18a1\0\u18e2\0\u1923"+
    "\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u0145\0\u0145\0\u1207"+
    "\0\u1aa9\0\u1aea\0\u0145\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u0145\0\u1df6"+
    "\0\u1e37\0\u0145\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u0208"+
    "\0\u1fbd\0\u1ffe\0\u203f\0\u0208\0\u2080\0\u20c1\0\u2102\0\u2143"+
    "\0\u2184\0\u21c5\0\u1aa9\0\u0208\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u0208\0\u230a\0\u234b\0\u238c\0\u23cd\0\u0208\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u0208\0\u2553\0\u2594\0\u25d5\0\u2616"+
    "\0\u2657\0\u2698\0\u26d9\0\u271a\0\u0208\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u2963\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac"+
    "\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u0208\0\u0208"+
    "\0\u2d73\0\u0208\0\u2db4\0\u0208\0\u2df5\0\u2e36\0\u2e77\0\u2eb8"+
    "\0\u2ef9\0\u0208\0\u2f3a\0\u0208\0\u0208\0\u2f7b\0\u0208\0\u0208"+
    "\0\u2fbc\0\u0208\0\u0208\0\u0208\0\u0208\0\u2ffd\0\u0208\0\u0208"+
    "\0\u303e\0\u0208\0\u0208\0\u0208\0\u0208";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\11"+
    "\1\15\1\11\1\16\1\11\1\17\1\20\1\21\1\22"+
    "\1\23\1\11\1\24\1\11\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\11\1\35\1\36\1\6"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\6\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\11\1\56\1\57\1\60\1\61\1\62\1\11\1\63"+
    "\1\11\1\6\1\64\1\65\1\6\2\66\1\50\1\6"+
    "\46\67\1\70\31\67\1\71\43\67\1\72\34\67\1\71"+
    "\47\67\1\73\30\67\1\74\50\67\1\75\27\67\1\76"+
    "\102\0\1\11\1\77\23\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\1\101\24\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\25\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\4\11\1\102\20\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\1\103\1\11\1\104\5\11\1\105\14\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\6\11\1\106\1\11\1\107"+
    "\11\11\1\110\2\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\5\11"+
    "\1\111\17\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\1\112\24\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\10\11\1\113\14\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\1\114\7\11\1\115\14\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\4\11\1\116\1\117\5\11\1\120"+
    "\11\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\1\11\1\121\3\11"+
    "\1\122\17\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\14\11\1\123"+
    "\10\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\13\11\1\124\11\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\16\11\1\125\6\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\4\11\1\126\1\127\6\11\1\130"+
    "\10\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\25\35\6\0\1\35"+
    "\2\0\2\35\7\0\1\35\4\0\15\35\4\0\1\35"+
    "\40\0\1\131\102\0\1\132\3\0\1\133\77\0\1\134"+
    "\36\0\25\135\6\0\1\135\20\0\15\135\4\0\1\135"+
    "\52\0\1\136\24\0\2\137\54\0\1\50\24\0\1\50"+
    "\76\0\2\66\3\0\13\11\1\140\11\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\5\11\1\141\17\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\10\11\1\142\14\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\1\11\1\143\23\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\4\11"+
    "\1\144\6\11\1\145\11\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\7\11\1\146\15\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\13\11"+
    "\1\147\11\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\2\11\1\150"+
    "\22\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\14\11\1\151\10\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\74\0\1\152\101\0\1\65\43\0"+
    "\1\153\36\0\2\66\12\0\2\67\5\0\1\67\26\0"+
    "\1\67\75\0\1\154\45\0\2\67\5\0\1\67\27\0"+
    "\1\67\101\0\1\155\40\0\2\67\5\0\1\67\62\0"+
    "\2\11\1\156\22\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\25\157"+
    "\6\0\1\157\20\0\14\157\11\0\5\11\1\160\17\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\1\161\24\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\1\162\24\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\20\11\1\163\4\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\7\11"+
    "\1\164\15\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\21\11\1\165"+
    "\3\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\23\11\1\166\1\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\16\11\1\167\6\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\12\11\1\170\12\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\7\11\1\171\15\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\16\11\1\172\6\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\16\11\1\173\6\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\12\11"+
    "\1\174\12\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\5\11\1\175"+
    "\17\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\4\11\1\176\20\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\7\11\1\177\15\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\10\11\1\200\11\11\1\201\2\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\14\11\1\202\10\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\12\11\1\203\12\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\4\11\1\204\20\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\10\11\1\205\14\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\40\0"+
    "\1\206\42\0\73\132\1\207\1\210\4\132\44\211\1\212"+
    "\34\211\1\0\25\135\6\0\1\135\7\0\1\213\10\0"+
    "\15\135\4\0\1\135\52\0\1\136\66\0\1\153\36\0"+
    "\2\137\3\0\16\11\1\214\6\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\1\215\24\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\1\216"+
    "\6\11\1\217\15\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\10\11"+
    "\1\220\14\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\7\11\1\221"+
    "\15\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\1\11\1\222\23\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\16\11\1\223\6\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\13\11\1\224\11\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\25\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\11\11\1\225\3\11\4\0\1\11"+
    "\3\0\22\11\1\226\2\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\2\0"+
    "\73\152\1\227\5\152\75\0\2\230\3\0\25\157\6\0"+
    "\1\157\4\0\1\231\6\0\1\157\1\0\1\232\2\0"+
    "\15\157\4\0\1\157\3\0\7\11\1\233\15\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\5\11\1\234\17\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\12\11\1\235\12\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\7\11\1\236\15\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\22\11\1\237\2\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\13\11"+
    "\1\240\11\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\1\241\24\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\4\11\1\242\20\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\21\11\1\243\3\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\3\11\1\244\21\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\21\11\1\245\3\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\23\11\1\246\1\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\15\11"+
    "\1\247\7\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\1\121\24\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\7\11\1\250\15\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\4\11\1\251\20\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\2\0\44\211\1\252\74\211\1\253\3\211\1\252"+
    "\34\211\1\0\11\11\1\254\13\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\13\11\1\255\11\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\7\11\1\256\15\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\5\11"+
    "\1\257\17\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\21\11\1\260"+
    "\3\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\5\11\1\261\17\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\2\11\1\262\22\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\14\11\1\263\10\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\12\11\1\264\12\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\5\11\1\265\17\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\5\11\1\266\17\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\72\0\1\267"+
    "\4\0\2\230\3\0\25\270\6\0\1\270\15\0\1\231"+
    "\2\0\14\270\6\0\1\231\2\0\16\11\1\271\6\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\10\11\1\272\14\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\13\11\1\273\11\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\20\11\1\274\4\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\14\11\1\275\10\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\14\11\1\276\10\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\7\11"+
    "\1\277\15\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\7\11\1\300"+
    "\15\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\5\11\1\301\17\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\13\11\1\302\11\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\4\11\1\303\20\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\1\11\1\304\23\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\12\11\1\305\12\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\2\0"+
    "\40\211\1\207\3\211\1\252\34\211\1\0\1\11\1\306"+
    "\23\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\4\11\1\307\20\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\25\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\3\11\1\310\11\11"+
    "\4\0\1\11\3\0\7\11\1\311\15\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\12\11\1\312\12\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\10\11\1\313\14\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\5\11\1\314\17\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\21\11"+
    "\1\315\3\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\52\0\1\316\2\0"+
    "\1\316\21\0\2\317\3\0\25\270\6\0\1\270\13\0"+
    "\1\270\1\0\1\232\2\0\15\270\4\0\1\270\3\0"+
    "\4\11\1\320\20\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\11\11"+
    "\1\321\13\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\1\322\24\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\10\11\1\323\14\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\13\11\1\324\11\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\14\11\1\325\10\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\14\11\1\326\10\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\23\11\1\327\1\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\10\11"+
    "\1\330\14\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\7\11\1\331"+
    "\15\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\16\11\1\332\6\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\16\11\1\333\6\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\10\11\1\334\14\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\5\11\1\335\17\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\14\11\1\336\10\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\5\11\1\337\17\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\25\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\3\11\1\340\11\11\4\0\1\11\3\0\4\11\1\341"+
    "\20\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\7\11\1\342\15\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\77\0\2\317\3\0\21\11\1\343"+
    "\3\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\1\344\24\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\5\11\1\345\17\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\4\11\1\346\20\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\10\11\1\347\14\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\12\11\1\350\12\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\15\11"+
    "\1\351\7\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\7\11\1\352"+
    "\15\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\5\11\1\353\17\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\5\11\1\354\17\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\5\11\1\355\17\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\21\11\1\356\3\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\7\11\1\357\15\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\16\11\1\360\6\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\13\11"+
    "\1\361\11\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\10\11\1\362"+
    "\14\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\7\11\1\363\15\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\11\11\1\364\13\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\12\11\1\365\12\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\3\0\5\11\1\366\17\11\6\0\1\11\2\0"+
    "\2\35\7\0\1\11\1\100\3\0\15\11\4\0\1\11"+
    "\3\0\5\11\1\367\17\11\6\0\1\11\2\0\2\35"+
    "\7\0\1\11\1\100\3\0\15\11\4\0\1\11\3\0"+
    "\5\11\1\370\17\11\6\0\1\11\2\0\2\35\7\0"+
    "\1\11\1\100\3\0\15\11\4\0\1\11\3\0\10\11"+
    "\1\371\14\11\6\0\1\11\2\0\2\35\7\0\1\11"+
    "\1\100\3\0\15\11\4\0\1\11\3\0\5\11\1\372"+
    "\17\11\6\0\1\11\2\0\2\35\7\0\1\11\1\100"+
    "\3\0\15\11\4\0\1\11\3\0\10\11\1\373\14\11"+
    "\6\0\1\11\2\0\2\35\7\0\1\11\1\100\3\0"+
    "\15\11\4\0\1\11\3\0\11\11\1\374\13\11\6\0"+
    "\1\11\2\0\2\35\7\0\1\11\1\100\3\0\15\11"+
    "\4\0\1\11\3\0\7\11\1\375\15\11\6\0\1\11"+
    "\2\0\2\35\7\0\1\11\1\100\3\0\15\11\4\0"+
    "\1\11\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12415];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\20\1\6\11\3\1\2\11\2\1\3\11"+
    "\3\1\1\11\14\1\2\11\2\1\1\11\4\1\1\0"+
    "\30\1\3\0\1\1\1\0\14\1\2\0\3\1\1\0"+
    "\26\1\2\11\1\1\2\0\1\11\13\1\1\11\1\1"+
    "\1\0\1\11\17\1\1\0\14\1\2\0\25\1\1\0"+
    "\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Set<String> identifiers;
	private Project project;
	private static final String DSL = "dsl";
	private String dsl = null;

	public TaraHighlighterLex(java.io.Reader reader, Project project) {
		this.zzReader = reader;
		this.project = project;
	}

	private IElementType evaluateIdentifier() {
		String identifier = yytext().toString();
		if (identifiers == null) return TaraTypes.IDENTIFIER_KEY;
		return identifiers.contains(identifier) ? TaraTypes.METAIDENTIFIER_KEY : TaraTypes.IDENTIFIER_KEY;
	}

	private void loadHeritage() {
		if (identifiers != null) return;
		if (dsl == null) {
			String source = zzBuffer.toString().trim();
			int nl = source.indexOf('\n');
            String dslLine = nl > 0 ? source.substring(0, nl).trim() : source;
			if (!dslLine.startsWith(DSL) || dslLine.split(DSL).length < 2) return;
			dsl = dslLine.split(DSL)[1].trim();
		}
		identifiers = new HashSet();
		Language heritage = LanguageManager.getLanguage(project, dsl);
        if (heritage != null) Collections.addAll(identifiers, heritage.lexicon());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TaraHighlighterLex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 70: break;
          case 2: 
            { return evaluateIdentifier();
            }
          case 71: break;
          case 3: 
            { return TaraTypes.LEFT_PARENTHESIS;
            }
          case 72: break;
          case 4: 
            { return TaraTypes.RIGHT_PARENTHESIS;
            }
          case 73: break;
          case 5: 
            { return TaraTypes.LEFT_SQUARE;
            }
          case 74: break;
          case 6: 
            { return TaraTypes.RIGHT_SQUARE;
            }
          case 75: break;
          case 7: 
            { return TaraTypes.LEFT_CURLY;
            }
          case 76: break;
          case 8: 
            { return TaraTypes.RIGHT_CURLY;
            }
          case 77: break;
          case 9: 
            { return TaraTypes.METRIC_VALUE_KEY;
            }
          case 78: break;
          case 10: 
            { return TaraTypes.DOT;
            }
          case 79: break;
          case 11: 
            { return TaraTypes.COMMA;
            }
          case 80: break;
          case 12: 
            { return TaraTypes.COLON;
            }
          case 81: break;
          case 13: 
            { return TaraTypes.EQUALS;
            }
          case 82: break;
          case 14: 
            { return TaraTypes.STAR;
            }
          case 83: break;
          case 15: 
            { return TaraTypes.DSL;
            }
          case 84: break;
          case 16: 
            { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
            }
          case 85: break;
          case 17: 
            { yybegin(EXPRESSION); return TaraTypes.EXPRESSION_BEGIN;
            }
          case 86: break;
          case 18: 
            { return TokenType.WHITE_SPACE;
            }
          case 87: break;
          case 19: 
            { return TaraTypes.PLUS;
            }
          case 88: break;
          case 20: 
            { return TaraTypes.AT;
            }
          case 89: break;
          case 21: 
            { return TaraTypes.NATURAL_VALUE_KEY;
            }
          case 90: break;
          case 22: 
            { return TaraTypes.CHARACTER;
            }
          case 91: break;
          case 23: 
            { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
            }
          case 92: break;
          case 24: 
            { yybegin(YYINITIAL); return TaraTypes.EXPRESSION_END;
            }
          case 93: break;
          case 25: 
            { return TaraTypes.AS;
            }
          case 94: break;
          case 26: 
            { return TaraTypes.ON;
            }
          case 95: break;
          case 27: 
            { return TaraTypes.IS;
            }
          case 96: break;
          case 28: 
            { yybegin(MULTILINE); return TaraTypes.QUOTE_BEGIN;
            }
          case 97: break;
          case 29: 
            { yybegin(EXPRESSION_MULTILINE); return TaraTypes.EXPRESSION_BEGIN;
            }
          case 98: break;
          case 30: 
            { return TaraTypes.NEGATIVE_VALUE_KEY;
            }
          case 99: break;
          case 31: 
            { return TaraTypes.SUB;
            }
          case 100: break;
          case 32: 
            { return TaraTypes.USE;
            }
          case 101: break;
          case 33: 
            { return TaraTypes.HAS;
            }
          case 102: break;
          case 34: 
            { return TaraTypes.ANY;
            }
          case 103: break;
          case 35: 
            { loadHeritage();  return TaraTypes.DSL;
            }
          case 104: break;
          case 36: 
            { return TaraTypes.VAR;
            }
          case 105: break;
          case 37: 
            { return TaraTypes.BOOLEAN_VALUE_KEY;
            }
          case 106: break;
          case 38: 
            { return TaraTypes.LIST;
            }
          case 107: break;
          case 39: 
            { return TaraTypes.COMMENT;
            }
          case 108: break;
          case 40: 
            { return TaraTypes.ANCHOR_VALUE;
            }
          case 109: break;
          case 41: 
            { yypushback(1); return TaraTypes.DOC_LINE;
            }
          case 110: break;
          case 42: 
            { return TaraTypes.DOUBLE_VALUE_KEY;
            }
          case 111: break;
          case 43: 
            { return TaraTypes.CLASS_TYPE;
            }
          case 112: break;
          case 44: 
            { return TaraTypes.INTO;
            }
          case 113: break;
          case 45: 
            { return TaraTypes.WITH;
            }
          case 114: break;
          case 46: 
            { return TaraTypes.WORD_TYPE;
            }
          case 115: break;
          case 47: 
            { return TaraTypes.DATE_TYPE;
            }
          case 116: break;
          case 48: 
            { return TaraTypes.TIME_TYPE;
            }
          case 117: break;
          case 49: 
            { return TaraTypes.EMPTY_REF;
            }
          case 118: break;
          case 50: 
            { return TaraTypes.FINAL;
            }
          case 119: break;
          case 51: 
            { return TaraTypes.DOUBLE_TYPE;
            }
          case 120: break;
          case 52: 
            { return TaraTypes.STRING_TYPE;
            }
          case 121: break;
          case 53: 
            { return TaraTypes.OBJECT_TYPE;
            }
          case 122: break;
          case 54: 
            { return TaraTypes.EXTENDS;
            }
          case 123: break;
          case 55: 
            { return TaraTypes.CONCEPT;
            }
          case 124: break;
          case 56: 
            { return TaraTypes.PRIVATE;
            }
          case 125: break;
          case 57: 
            { return TaraTypes.FEATURE;
            }
          case 126: break;
          case 58: 
            { return TaraTypes.INSTANT_TYPE;
            }
          case 127: break;
          case 59: 
            { return TaraTypes.INT_TYPE;
            }
          case 128: break;
          case 60: 
            { return TaraTypes.BOOLEAN_TYPE;
            }
          case 129: break;
          case 61: 
            { return TaraTypes.ABSTRACT;
            }
          case 130: break;
          case 62: 
            { return TaraTypes.ENCLOSED;
            }
          case 131: break;
          case 63: 
            { return TaraTypes.TERMINAL;
            }
          case 132: break;
          case 64: 
            { return TaraTypes.VOLATILE;
            }
          case 133: break;
          case 65: 
            { return TaraTypes.REACTIVE;
            }
          case 134: break;
          case 66: 
            { return TaraTypes.RESOURCE_TYPE;
            }
          case 135: break;
          case 67: 
            { return TaraTypes.FUNCTION_TYPE;
            }
          case 136: break;
          case 68: 
            { return TaraTypes.VERSIONED;
            }
          case 137: break;
          case 69: 
            { return TaraTypes.COMPONENT;
            }
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
