/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package io.intino.tara.plugin.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.intino.tara.plugin.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTED = 2;
  public static final int MULTILINE = 4;
  public static final int EXPRESSION = 6;
  public static final int EXPRESSION_MULTILINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\4"+
    "\0\1\17\1\20\1\21\1\22\2\23\1\24\3\23\1\24\71\23\1\25\1\23\1\26\1\27\1\30"+
    "\1\31\2\27\16\0\1\32\1\17\1\33\1\34\2\23\1\35\11\23\1\36\21\23\1\37\1\40\23"+
    "\23\1\27\1\41\3\23\1\24\1\42\1\41\4\23\1\43\1\44\4\0\1\45\1\46\1\27\3\23\2"+
    "\47\1\27\1\50\1\51\1\0\1\52\5\23\1\53\2\0\1\5\1\54\1\55\13\23\1\56\1\45\1"+
    "\57\1\60\1\5\1\61\1\27\1\62\1\63\3\23\3\0\1\64\12\23\1\65\1\0\1\66\1\27\1"+
    "\5\1\67\3\23\1\53\1\70\1\22\2\23\1\65\1\71\1\72\1\73\2\27\3\23\1\74\10\27"+
    "\1\75\1\30\6\27\1\76\2\0\1\77\1\100\6\23\1\101\2\0\1\102\1\23\1\103\1\5\2"+
    "\41\1\104\1\105\1\106\2\23\1\75\1\107\1\110\1\111\1\112\1\62\1\113\1\103\1"+
    "\5\1\114\1\51\1\104\1\115\1\106\2\23\1\75\1\116\1\117\1\120\1\121\1\122\1"+
    "\123\1\124\1\5\1\125\1\27\1\104\1\36\1\35\2\23\1\75\1\126\1\110\1\45\1\127"+
    "\1\130\1\27\1\103\1\5\1\42\1\27\1\104\1\105\1\106\2\23\1\75\1\126\1\110\1"+
    "\111\1\121\1\131\1\113\1\103\1\5\1\42\1\27\1\132\1\133\1\134\1\135\1\136\1"+
    "\133\1\23\1\137\1\140\1\141\1\142\1\27\1\124\1\5\1\27\1\42\1\104\1\32\1\75"+
    "\2\23\1\75\1\143\1\144\1\145\1\141\1\146\1\26\1\103\1\5\2\27\1\147\1\32\1"+
    "\75\2\23\1\75\1\143\1\110\1\145\1\141\1\146\1\33\1\103\1\5\1\150\1\27\1\147"+
    "\1\32\1\75\4\23\1\151\1\145\1\152\1\62\1\27\1\103\1\5\1\27\1\40\1\147\1\23"+
    "\1\24\1\40\2\23\1\35\1\153\1\24\1\154\1\155\1\0\1\156\1\157\1\160\1\27\1\41"+
    "\5\23\1\161\1\162\1\163\1\77\1\5\1\164\4\27\1\165\1\166\1\167\1\41\1\170\1"+
    "\171\1\161\1\172\1\173\1\174\1\5\1\175\4\27\1\130\2\27\1\176\1\5\1\164\1\177"+
    "\1\200\1\23\1\41\3\23\1\30\1\44\1\0\1\145\1\201\1\0\1\44\3\0\1\50\1\202\7"+
    "\27\5\23\1\53\1\0\1\203\1\5\1\164\1\65\1\204\1\205\1\206\1\207\1\23\1\210"+
    "\1\211\1\5\1\212\4\23\1\36\1\213\5\23\1\214\51\23\1\134\1\24\1\134\5\23\1"+
    "\134\4\23\1\134\1\24\1\134\1\23\1\24\7\23\1\134\10\23\1\215\4\27\2\23\2\27"+
    "\12\23\1\30\1\27\1\41\114\23\1\105\2\23\1\41\2\23\1\47\11\23\1\133\1\130\1"+
    "\27\1\23\1\32\1\216\1\27\2\23\1\216\1\27\2\23\1\217\1\27\1\23\1\32\1\220\1"+
    "\27\6\23\1\221\3\0\1\222\1\223\1\5\1\164\3\27\1\224\1\5\1\164\13\23\1\27\5"+
    "\23\1\225\10\23\1\226\1\27\3\23\1\30\1\0\1\2\1\0\1\2\1\124\1\5\3\23\1\226"+
    "\1\30\1\27\5\23\1\114\2\0\1\55\1\176\1\5\1\164\4\27\2\23\1\163\1\2\6\23\1"+
    "\201\1\77\3\0\1\111\1\5\1\164\1\5\1\164\1\43\13\27\1\227\5\23\1\221\1\0\1"+
    "\227\1\114\1\5\1\164\1\27\1\230\1\2\1\27\1\231\3\23\1\102\1\206\1\5\1\67\4"+
    "\23\1\65\1\0\1\2\1\27\4\23\1\221\2\0\1\27\1\5\1\232\1\5\1\67\3\23\1\226\12"+
    "\27\1\233\2\0\1\234\1\235\1\27\30\23\4\0\1\77\2\27\1\76\42\23\2\226\4\23\2"+
    "\226\1\23\1\236\3\23\1\226\6\23\1\32\1\173\1\237\1\30\1\240\1\114\1\23\1\30"+
    "\1\237\1\30\1\27\1\230\3\27\1\241\1\27\1\43\1\130\1\27\1\242\1\27\1\50\1\243"+
    "\1\42\1\43\2\27\1\23\1\30\3\23\1\47\2\27\1\0\1\50\1\244\1\0\1\245\1\27\1\246"+
    "\1\40\1\153\1\247\1\31\1\250\1\23\1\251\1\252\1\253\2\27\5\23\1\130\116\27"+
    "\5\23\1\24\5\23\1\24\20\23\1\30\1\254\1\255\1\27\4\23\1\36\1\213\7\23\1\43"+
    "\1\27\1\62\2\23\1\24\1\27\10\24\4\0\5\27\1\43\72\27\1\252\3\27\1\41\1\210"+
    "\1\247\1\30\1\41\11\23\1\24\1\256\1\41\12\23\1\214\1\252\4\23\1\226\1\41\12"+
    "\23\1\24\2\27\3\23\1\47\6\27\170\23\1\226\11\27\71\23\1\30\6\27\21\23\1\30"+
    "\10\27\5\23\1\226\41\23\1\30\2\23\1\5\1\257\2\27\5\23\1\163\1\76\1\260\3\23"+
    "\1\62\12\23\1\176\3\27\1\43\1\23\1\40\14\23\1\261\1\114\1\27\1\23\1\47\11"+
    "\27\1\23\1\262\1\263\2\23\1\53\2\27\1\130\6\23\1\114\1\27\1\264\5\23\1\221"+
    "\1\0\1\50\1\27\1\5\1\164\2\0\1\264\1\51\1\5\1\67\2\23\1\65\1\174\2\23\1\163"+
    "\1\0\1\2\1\27\3\23\1\30\1\100\5\23\1\53\1\0\1\245\1\43\1\5\1\164\2\27\1\157"+
    "\1\265\5\23\1\102\1\77\1\27\1\263\1\266\1\5\1\164\2\23\1\24\1\267\6\23\1\205"+
    "\1\270\1\225\2\27\1\271\1\23\1\53\1\272\1\27\3\273\1\27\2\24\22\27\4\23\1"+
    "\53\1\274\1\5\1\164\64\23\1\114\1\27\2\23\1\24\1\275\5\23\1\114\40\27\55\23"+
    "\1\226\15\23\1\26\4\27\1\24\1\27\1\275\1\276\1\23\1\75\1\24\1\173\1\277\15"+
    "\23\1\26\3\27\1\275\54\23\1\226\2\27\10\23\1\40\6\23\5\27\1\23\1\30\2\0\2"+
    "\27\1\77\1\27\1\136\2\27\1\252\3\27\1\42\1\32\20\23\1\300\1\242\1\27\1\5\1"+
    "\164\1\41\2\23\1\115\1\41\2\23\1\47\1\301\12\23\1\24\3\40\1\302\1\303\2\27"+
    "\1\304\1\23\1\143\2\23\1\24\2\23\1\305\1\23\1\226\1\23\1\226\4\27\17\23\1"+
    "\47\10\27\6\23\1\30\20\27\1\306\20\27\3\23\1\30\6\23\1\130\5\27\3\23\1\24"+
    "\2\27\3\23\1\47\6\27\3\23\1\226\4\23\1\114\1\23\1\247\5\27\23\23\1\226\1\5"+
    "\1\164\52\27\1\226\1\75\4\23\1\36\1\307\2\23\1\226\25\27\2\23\1\226\1\27\3"+
    "\23\1\26\10\27\7\23\1\301\10\27\1\310\1\76\1\143\1\41\2\23\1\114\1\120\4\27"+
    "\3\23\1\30\20\27\6\23\1\226\1\27\2\23\1\226\1\27\2\23\1\47\21\27\11\23\1\130"+
    "\66\27\1\231\6\23\1\0\1\77\3\27\1\124\1\5\2\27\1\231\5\23\1\0\1\311\2\27\3"+
    "\23\1\130\1\5\1\164\1\231\3\23\1\163\1\0\1\312\1\5\10\27\1\231\5\23\1\53\1"+
    "\0\1\313\1\27\1\5\1\164\42\27\1\157\1\265\72\27\1\157\1\265\56\27\1\157\1"+
    "\265\4\27\5\23\1\53\1\0\1\27\1\5\1\164\14\27\1\157\1\265\64\27\1\157\1\265"+
    "\42\27\55\23\1\24\22\27\14\23\1\47\63\27\5\23\1\24\72\27\7\23\1\130\4\27\1"+
    "\157\1\265\34\27\1\157\1\265\64\27\10\23\1\30\1\27\1\102\4\0\1\77\1\27\1\62"+
    "\1\231\1\23\14\27\1\26\153\27\1\314\1\315\2\0\1\316\1\2\3\27\1\317\22\27\1"+
    "\320\67\27\12\23\1\32\10\23\1\32\1\321\1\322\1\23\1\323\1\143\7\23\1\36\1"+
    "\324\2\32\3\23\1\325\1\173\1\40\1\75\51\23\1\226\3\23\1\75\2\23\1\214\3\23"+
    "\1\214\2\23\1\32\3\23\1\32\2\23\1\24\3\23\1\24\3\23\1\75\3\23\1\75\2\23\1"+
    "\214\1\326\6\5\1\143\3\23\1\165\1\41\1\214\1\327\1\246\1\330\1\165\1\236\1"+
    "\165\2\214\1\123\1\23\1\35\1\23\1\114\1\331\1\35\1\23\1\114\50\27\32\23\1"+
    "\24\5\27\106\23\1\30\1\27\33\23\1\226\74\27\1\122\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1744 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\73\1\3\1\74\2\0\1\1\6\73\4\0\1\2\1\75\1\40\1\0\1\43\1\53\1\0\1\41\1\32"+
    "\1\33\1\52\1\76\1\47\1\42\1\44\1\46\12\100\1\50\1\56\1\54\1\51\1\4\1\0\1\55"+
    "\1\43\1\70\1\43\1\65\1\72\1\66\2\43\1\63\5\43\1\60\2\43\1\62\1\67\1\71\2\43"+
    "\1\57\3\43\1\34\1\101\1\35\1\0\1\43\1\0\1\11\1\7\1\26\1\15\1\14\1\31\1\64"+
    "\1\10\1\20\1\61\1\43\1\16\1\30\1\22\1\24\1\27\1\43\1\13\1\5\1\21\1\6\1\12"+
    "\1\17\1\25\1\23\1\43\1\36\1\1\1\37\1\0\1\73\2\0\4\43\4\0\1\43\2\0\1\73\2\0"+
    "\1\53\4\0\1\43\1\0\1\45\2\0\1\43\5\0\17\43\1\0\2\43\4\0\4\43\16\0\5\43\7\0"+
    "\1\43\1\0\1\43\1\0\5\43\1\0\2\43\6\0\1\43\1\0\3\43\1\0\1\43\1\0\4\43\1\0\13"+
    "\43\1\0\3\43\1\0\5\73\2\0\6\43\1\0\7\43\1\0\1\43\15\0\1\43\1\0\15\73\1\0\1"+
    "\73\1\0\2\73\1\0\2\73\1\0\1\73\3\43\5\0\5\73\6\0\1\43\4\0\3\73\5\0\3\43\5"+
    "\73\2\100\4\0\2\43\1\73\13\43\1\0\1\43\7\73\2\43\2\73\1\0\4\73\2\43\2\100"+
    "\3\43\2\0\1\43\7\0\1\73\1\43\1\73\6\43\3\73\2\0\11\43\3\73\1\43\6\0\2\100"+
    "\6\43\4\73\2\43\2\0\2\73\1\43\11\73\1\43\3\73\1\43\5\73\2\0\1\43\3\73\4\0"+
    "\1\43\1\0\6\43\4\0\13\73\1\0\4\73\6\43\3\73\1\43\2\73\1\43\7\73\2\43\2\73"+
    "\2\0\2\100\1\0\3\73\1\0\10\43\2\0\2\43\2\0\6\43\1\0\1\43\3\0\4\43\2\0\1\73"+
    "\1\43\7\73\2\0\2\73\2\0\3\73\1\43\5\0\2\43\1\0\5\43\4\0\3\43\4\0\2\43\1\0"+
    "\2\43\1\0\2\43\1\0\2\43\2\0\1\73\1\0\5\73\4\0\2\73\2\0\3\73\3\0\1\73\7\0\4"+
    "\43\1\0\1\43\7\0\2\100\2\73\3\43\1\73\2\0\1\43\1\0\2\43\1\0\3\43\2\73\1\0"+
    "\3\73\2\0\1\43\15\0\2\73\2\0\1\73\1\43\1\0\6\43\3\0\3\43\1\0\4\43\3\0\2\43"+
    "\1\0\1\43\1\0\2\43\3\0\2\43\3\0\2\43\4\0\5\73\3\0\3\73\1\0\4\73\2\0\1\43\6"+
    "\0\1\73\4\43\1\0\5\43\3\0\1\43\7\73\1\0\2\73\5\0\2\73\3\0\2\73\1\0\3\43\1"+
    "\0\2\43\5\0\3\43\2\0\1\43\3\73\1\0\4\73\1\43\1\0\4\43\1\0\1\43\4\0\1\73\4"+
    "\0\6\73\1\0\1\73\7\0\12\77\2\0\2\73\4\0\1\43\1\73\2\43\7\73\4\0\10\43\1\73"+
    "\2\100\7\0\2\43\1\0\1\43\2\0\2\43\1\0\1\43\2\0\1\43\6\0\4\43\1\0\3\43\1\0"+
    "\1\43\1\0\1\43\2\0\2\43\1\0\3\43\2\73\1\0\2\73\1\43\2\0\5\43\1\0\1\43\1\0"+
    "\6\73\2\0\2\100\2\0\4\43\2\73\13\0\1\73\1\0\1\73\1\0\1\73\4\0\2\73\5\43\3"+
    "\73\6\0\1\73\1\0\7\73\1\43\2\73\4\43\3\73\1\43\3\73\2\43\7\73\3\43\4\73\5"+
    "\43\14\73\1\43\1\73\2\100\4\73\7\0\1\43\2\0\3\43\1\0\7\43\2\0\3\73\2\43\3"+
    "\73\3\0\2\43\2\73\4\0\1\43\1\0\2\73\4\0\4\43\10\73\3\0\1\43\3\0\2\43\1\73"+
    "\5\0\3\73\2\0\1\43\1\73\1\43\5\0\6\43\2\0\5\73\3\43\3\0\10\73\5\43\2\100\3"+
    "\0\3\43\3\73\1\0\5\73\4\43\1\73\4\43\3\73\2\43\2\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\2\0\3\43\1\0\6\43\2\0\2\43\2\0\5\73\5\0\1\43\5\0\6\73\1\0\1\73\3"+
    "\0\4\73\11\0\1\43\4\0\1\43\1\0\5\43\2\0\1\43\1\0\4\43\1\0\3\43\2\0\4\43\5"+
    "\0\5\43\4\0\1\43\4\0\4\43\3\73\2\43\5\0\2\73\2\0\3\43\2\100\2\43\4\0\6\73"+
    "\1\0\2\43\2\0\4\43\1\0\2\43\1\73\3\43\1\73\4\43\1\73\4\43\2\73\6\43\2\77\6"+
    "\0\4\43\2\73\4\0\1\43\1\73\4\0\1\73\5\43\2\73\3\0\3\43\4\0\3\43\2\73\2\0\6"+
    "\43\1\0\3\73\1\0\2\73\5\0\5\43\5\0\1\43\1\73\3\43\1\0\2\43\1\0\7\43\2\0\1"+
    "\73\6\0\2\43\2\0\3\43\3\0\2\43\3\0\2\43\2\0\3\73\4\0\3\43\1\0\2\43\1\0\1\43"+
    "\5\0\1\73\2\0\1\43\3\0\1\43\2\0\2\43\3\73\1\0\2\73\1\0\3\73\2\0\1\73\2\0\5"+
    "\73\1\0\2\100\1\73\4\43\10\0\5\73\3\0\6\73\2\0\3\73\2\0\4\73\4\0\3\73\5\0"+
    "\1\43\2\0\2\43\2\0\4\43\1\0\4\43\1\0\1\43\1\0\6\43\2\0\5\43\1\0\4\43\1\0\4"+
    "\43\2\0\2\100\1\0\1\43\1\0\1\43\5\0\1\43\1\0\1\43\1\0\3\43\1\0\3\43\1\0\3"+
    "\43");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\20\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\11\5\1\1\1\26\1\27\1\30\1\31\2\30\1\32"+
    "\3\30\1\2\1\0\1\5\1\0\2\5\1\33\13\5"+
    "\1\34\3\5\1\35\5\5\1\36\1\37\1\0\1\3"+
    "\1\40\1\0\12\5\2\0\1\31\1\32\1\41\1\0"+
    "\1\42\1\43\1\5\1\44\1\45\6\5\1\46\12\5"+
    "\1\47\1\50\13\5\1\51\1\52\1\53\1\0\7\5"+
    "\1\54\1\55\1\56\6\5\1\57\4\5\1\60\4\5"+
    "\1\61\2\0\6\5\1\62\5\5\1\63\10\5\1\0"+
    "\1\52\13\5\1\64\3\5\1\65\1\5\1\66\6\5"+
    "\1\67\1\5\1\70\1\5\1\71\1\72\1\5\1\73"+
    "\1\74\1\5\1\75\1\76\1\5\1\77\1\100\1\101"+
    "\1\102\1\5\1\103\1\104\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u014a"+
    "\0\u014a\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a"+
    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a"+
    "\0\u05ac\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u014a\0\u05ee\0\u0630\0\u0672\0\u014a\0\u014a\0\u06b4\0\u06f6"+
    "\0\u0738\0\u014a\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4"+
    "\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u014a"+
    "\0\u014a\0\u0ad4\0\u0b16\0\u014a\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e"+
    "\0\u0672\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0252\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u0252\0\u103e\0\u1080\0\u10c2\0\u0252\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u06b4"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u0b16\0\u0b9a\0\u0252"+
    "\0\u16b0\0\u0252\0\u0252\0\u16f2\0\u0252\0\u0252\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u0252\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u014a"+
    "\0\u014a\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u014a\0\u1e2a\0\u014a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u0252"+
    "\0\u0252\0\u0252\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6"+
    "\0\u0252\0\u2208\0\u224a\0\u228c\0\u22ce\0\u0252\0\u2310\0\u2352"+
    "\0\u2394\0\u23d6\0\u0252\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u2562\0\u25a4\0\u25e6\0\u0252\0\u2628\0\u266a\0\u26ac\0\u26ee"+
    "\0\u2730\0\u0252\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc"+
    "\0\u28fe\0\u2940\0\u2982\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u0252"+
    "\0\u2c9a\0\u2cdc\0\u2d1e\0\u0252\0\u2d60\0\u0252\0\u2da2\0\u2de4"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u0252\0\u2f2e\0\u0252\0\u2f70"+
    "\0\u0252\0\u0252\0\u2fb2\0\u0252\0\u0252\0\u2ff4\0\u0252\0\u0252"+
    "\0\u3036\0\u0252\0\u0252\0\u0252\0\u0252\0\u3078\0\u0252\0\u0252"+
    "\0\u0252\0\u0252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\14\1\23"+
    "\1\24\1\25\2\14\1\26\1\14\1\27\1\30\1\14"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\14\1\43\1\6\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\6\1\52\1\53\1\54\1\55"+
    "\1\14\1\56\1\57\1\14\1\60\1\61\1\62\1\63"+
    "\1\64\1\14\1\6\1\7\1\65\1\66\2\67\1\6"+
    "\40\70\1\71\40\70\1\72\51\70\1\73\27\70\1\72"+
    "\41\70\1\74\37\70\1\75\42\70\1\76\36\70\1\77"+
    "\103\0\1\7\2\100\42\0\1\101\25\0\1\7\12\0"+
    "\1\14\1\102\23\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\1\104\24\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\25\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\4\14"+
    "\1\105\20\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\1\106\1\14\1\107"+
    "\12\14\1\110\7\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\4\14\1\111"+
    "\2\14\1\112\7\14\1\113\5\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\7\14\1\114\15\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\15\14\1\115"+
    "\2\14\1\116\2\14\1\117\1\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\1\120\24\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\13\14\1\121\11\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\1\122\14\14\1\123\7\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\6\14\1\124\1\125\15\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\15\14\1\126\7\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\17\14"+
    "\1\127\5\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\6\14\1\130\16\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\4\14\1\131\2\14\1\132\3\14"+
    "\1\133\11\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\43\0\1\134\34\0\2\135"+
    "\45\0\1\136\103\0\1\137\104\0\1\140\35\0\25\141"+
    "\11\0\1\141\13\0\15\141\4\0\1\141\6\0\25\51"+
    "\10\0\2\51\1\0\2\51\10\0\15\51\4\0\1\51"+
    "\57\0\1\53\30\0\17\14\1\142\5\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\2\14\1\143\22\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\7\14"+
    "\1\144\15\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\15\14\1\145\7\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\4\14\1\146\12\14\1\147\5\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\1\14\1\150\23\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\14\14\1\151\10\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\17\14"+
    "\1\152\5\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\13\14\1\153\11\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\76\0\1\154\103\0\2\67\45\0\1\155"+
    "\32\0\2\67\14\0\1\70\5\0\2\70\15\0\1\70"+
    "\112\0\1\156\43\0\1\70\5\0\2\70\16\0\1\70"+
    "\102\0\1\157\52\0\1\70\5\0\2\70\61\0\2\100"+
    "\42\0\1\101\40\0\2\14\1\160\22\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\25\161\11\0\1\161\13\0\14\161\14\0\7\14"+
    "\1\162\15\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\1\163\24\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\1\164\24\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\16\14"+
    "\1\165\6\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\6\14\1\166\16\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\6\14\1\167\16\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\11\14\1\170\13\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\4\14"+
    "\1\171\20\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\21\14\1\172\3\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\14\14\1\173\10\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\22\14\1\174\2\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\11\14"+
    "\1\175\13\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\14\14\1\176\10\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\14\14\1\177\10\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\1\14\1\200\23\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\6\14"+
    "\1\201\16\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\15\14\1\202\5\14"+
    "\1\203\1\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\13\14\1\204\11\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\11\14\1\205\13\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\4\14\1\206\20\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\15\14"+
    "\1\207\7\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\43\0\1\134\103\0\1\155"+
    "\32\0\2\135\45\0\1\210\35\0\74\137\1\0\5\137"+
    "\5\0\25\141\11\0\1\141\6\0\1\211\4\0\15\141"+
    "\4\0\1\141\6\0\6\14\1\212\16\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\25\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\2\14\1\213\12\14\4\0\1\14\6\0\1\214"+
    "\24\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\1\215\13\14\1\216\10\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\14\14\1\217\10\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\1\14\1\220\23\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\15\14"+
    "\1\221\7\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\6\14\1\222\16\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\17\14\1\223\5\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\23\14\1\224\1\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\1\0\74\154"+
    "\1\225\5\154\77\0\2\226\5\0\1\227\25\161\10\0"+
    "\2\161\3\0\1\230\7\0\15\161\4\0\1\161\6\0"+
    "\14\14\1\231\10\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\1\232\24\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\4\14\1\233\20\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\21\14\1\234\3\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\11\14"+
    "\1\235\13\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\7\14\1\236\15\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\14\14\1\237\10\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\3\14\1\240\21\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\17\14"+
    "\1\241\5\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\7\14\1\242\15\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\23\14\1\243\1\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\21\14\1\244\3\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\22\14"+
    "\1\245\2\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\5\14\1\246\17\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\1\200\24\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\14\14\1\247\10\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\4\14\1\250"+
    "\20\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\10\14\1\251\14\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\7\14\1\252\15\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\17\14\1\253\5\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\14\14\1\254"+
    "\10\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\7\14\1\255\15\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\7\14\1\256\15\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\2\14\1\257\22\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\21\14\1\260"+
    "\3\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\13\14\1\261\11\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\11\14\1\262\13\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\7\14\1\263\15\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\73\0\1\264\4\0"+
    "\2\226\3\0\1\230\2\0\25\265\11\0\1\265\13\0"+
    "\14\265\14\0\6\14\1\266\16\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\13\14\1\267\11\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\14\14\1\270"+
    "\10\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\14\14\1\271\10\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\17\14\1\272\5\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\15\14\1\273\7\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\16\14\1\274"+
    "\6\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\13\14\1\275\11\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\7\14\1\276\15\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\17\14\1\277\5\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\4\14\1\300"+
    "\20\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\1\14\1\301\23\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\11\14\1\302\13\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\21\14\1\303\3\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\1\14\1\304"+
    "\23\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\4\14\1\305\20\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\25\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\5\14\1\306\7\14\4\0\1\14\6\0"+
    "\11\14\1\307\13\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\14\14\1\310"+
    "\10\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\15\14\1\311\7\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\7\14\1\312\15\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\43\0"+
    "\1\313\33\0\1\313\2\314\5\0\1\227\25\265\10\0"+
    "\2\265\13\0\15\265\4\0\1\265\6\0\4\14\1\315"+
    "\20\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\17\14\1\316\5\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\13\14\1\317\11\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\13\14\1\320\11\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\1\321\24\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\10\14\1\322\14\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\15\14\1\323\7\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\22\14"+
    "\1\324\2\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\15\14\1\325\7\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\14\14\1\326\10\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\6\14\1\327\16\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\14\14"+
    "\1\330\10\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\6\14\1\331\16\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\15\14\1\332\7\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\7\14\1\333\15\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\7\14"+
    "\1\334\15\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\13\14\1\335\11\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\25\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\5\14\1\336\7\14\4\0\1\14"+
    "\6\0\4\14\1\337\20\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\100\0\2\314"+
    "\6\0\21\14\1\340\3\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\15\14"+
    "\1\341\7\14\10\0\2\14\1\0\2\51\5\0\1\103"+
    "\2\0\15\14\4\0\1\14\6\0\11\14\1\342\13\14"+
    "\10\0\2\14\1\0\2\51\5\0\1\103\2\0\15\14"+
    "\4\0\1\14\6\0\5\14\1\343\17\14\10\0\2\14"+
    "\1\0\2\51\5\0\1\103\2\0\15\14\4\0\1\14"+
    "\6\0\7\14\1\344\15\14\10\0\2\14\1\0\2\51"+
    "\5\0\1\103\2\0\15\14\4\0\1\14\6\0\1\345"+
    "\24\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\4\14\1\346\20\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\14\14\1\347\10\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\7\14\1\350\15\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\7\14\1\351"+
    "\15\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\7\14\1\352\15\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\21\14\1\353\3\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\14\14\1\354\10\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\6\14\1\355"+
    "\16\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\17\14\1\356\5\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\15\14\1\357\7\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\14\14\1\360\10\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\7\14\1\361"+
    "\15\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\7\14\1\362\15\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\7\14\1\363\15\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\10\14\1\364\14\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\11\14\1\365"+
    "\13\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\15\14\1\366\7\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\6\0\7\14\1\367\15\14\10\0\2\14\1\0"+
    "\2\51\5\0\1\103\2\0\15\14\4\0\1\14\6\0"+
    "\15\14\1\370\7\14\10\0\2\14\1\0\2\51\5\0"+
    "\1\103\2\0\15\14\4\0\1\14\6\0\10\14\1\371"+
    "\14\14\10\0\2\14\1\0\2\51\5\0\1\103\2\0"+
    "\15\14\4\0\1\14\6\0\14\14\1\372\10\14\10\0"+
    "\2\14\1\0\2\51\5\0\1\103\2\0\15\14\4\0"+
    "\1\14\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12474];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\20\1\10\11\3\1\2\11"+
    "\3\1\1\11\15\1\2\11\2\1\1\11\4\1\1\0"+
    "\1\1\1\0\32\1\1\0\2\1\1\0\12\1\2\0"+
    "\3\1\1\0\26\1\2\11\13\1\1\11\1\1\1\11"+
    "\1\0\33\1\2\0\25\1\1\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof() {
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text) {
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon() {
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens() {
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 251: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 71: break;
          case 2: 
            { return newlineIndent();
            }
          case 72: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 73: break;
          case 4: 
            { return inline();
            }
          case 74: break;
          case 5: 
            { return TaraTypes.IDENTIFIER_KEY;
            }
          case 75: break;
          case 6: 
            { return TaraTypes.LEFT_PARENTHESIS;
            }
          case 76: break;
          case 7: 
            { return TaraTypes.RIGHT_PARENTHESIS;
            }
          case 77: break;
          case 8: 
            { return TaraTypes.LEFT_SQUARE;
            }
          case 78: break;
          case 9: 
            { return TaraTypes.RIGHT_SQUARE;
            }
          case 79: break;
          case 10: 
            { return TaraTypes.LEFT_CURLY;
            }
          case 80: break;
          case 11: 
            { return TaraTypes.RIGHT_CURLY;
            }
          case 81: break;
          case 12: 
            { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
            }
          case 82: break;
          case 13: 
            { yybegin(EXPRESSION); return TaraTypes.EXPRESSION_BEGIN;
            }
          case 83: break;
          case 14: 
            { return TaraTypes.DOT;
            }
          case 84: break;
          case 15: 
            { return TaraTypes.COMMA;
            }
          case 85: break;
          case 16: 
            { return TaraTypes.COLON;
            }
          case 86: break;
          case 17: 
            { return TaraTypes.EQUALS;
            }
          case 87: break;
          case 18: 
            { return TaraTypes.STAR;
            }
          case 88: break;
          case 19: 
            { return TaraTypes.METRIC_VALUE_KEY;
            }
          case 89: break;
          case 20: 
            { return TaraTypes.AT;
            }
          case 90: break;
          case 21: 
            { return semicolon();
            }
          case 91: break;
          case 22: 
            { return TaraTypes.PLUS;
            }
          case 92: break;
          case 23: 
            { return TaraTypes.NATURAL_VALUE_KEY;
            }
          case 93: break;
          case 24: 
            { return TaraTypes.CHARACTER;
            }
          case 94: break;
          case 25: 
            { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
            }
          case 95: break;
          case 26: 
            { yybegin(YYINITIAL); return TaraTypes.EXPRESSION_END;
            }
          case 96: break;
          case 27: 
            { return TaraTypes.AS;
            }
          case 97: break;
          case 28: 
            { return TaraTypes.IS;
            }
          case 98: break;
          case 29: 
            { return TaraTypes.ON;
            }
          case 99: break;
          case 30: 
            { yybegin(EXPRESSION_MULTILINE); return TaraTypes.EXPRESSION_BEGIN;
            }
          case 100: break;
          case 31: 
            { return TaraTypes.NEGATIVE_VALUE_KEY;
            }
          case 101: break;
          case 32: 
            { yybegin(MULTILINE); return TaraTypes.QUOTE_BEGIN;
            }
          case 102: break;
          case 33: 
            { return TaraTypes.SUB;
            }
          case 103: break;
          case 34: 
            { return TaraTypes.USE;
            }
          case 104: break;
          case 35: 
            { return TaraTypes.HAS;
            }
          case 105: break;
          case 36: 
            { return TaraTypes.ANY;
            }
          case 106: break;
          case 37: 
            { return TaraTypes.VAR;
            }
          case 107: break;
          case 38: 
            { return TaraTypes.DSL;
            }
          case 108: break;
          case 39: 
            { return TaraTypes.LIST;
            }
          case 109: break;
          case 40: 
            { return TaraTypes.ANCHOR_VALUE;
            }
          case 110: break;
          case 41: 
            { yypushback(1); return TaraTypes.DOC_LINE;
            }
          case 111: break;
          case 42: 
            { return TaraTypes.DOUBLE_VALUE_KEY;
            }
          case 112: break;
          case 43: 
            { return TaraTypes.CLASS_TYPE;
            }
          case 113: break;
          case 44: 
            { return TaraTypes.WITH;
            }
          case 114: break;
          case 45: 
            { return TaraTypes.INTO;
            }
          case 115: break;
          case 46: 
            { return TaraTypes.BOOLEAN_VALUE_KEY;
            }
          case 116: break;
          case 47: 
            { return TaraTypes.WORD_TYPE;
            }
          case 117: break;
          case 48: 
            { return TaraTypes.DATE_TYPE;
            }
          case 118: break;
          case 49: 
            { return TaraTypes.TIME_TYPE;
            }
          case 119: break;
          case 50: 
            { return TaraTypes.EMPTY_REF;
            }
          case 120: break;
          case 51: 
            { return TaraTypes.FINAL;
            }
          case 121: break;
          case 52: 
            { return TaraTypes.OBJECT_TYPE;
            }
          case 122: break;
          case 53: 
            { return TaraTypes.DOUBLE_TYPE;
            }
          case 123: break;
          case 54: 
            { return TaraTypes.STRING_TYPE;
            }
          case 124: break;
          case 55: 
            { return TaraTypes.EXTENDS;
            }
          case 125: break;
          case 56: 
            { return TaraTypes.CONCEPT;
            }
          case 126: break;
          case 57: 
            { return TaraTypes.PRIVATE;
            }
          case 127: break;
          case 58: 
            { return TaraTypes.FEATURE;
            }
          case 128: break;
          case 59: 
            { return TaraTypes.INSTANT_TYPE;
            }
          case 129: break;
          case 60: 
            { return TaraTypes.INT_TYPE;
            }
          case 130: break;
          case 61: 
            { return TaraTypes.BOOLEAN_TYPE;
            }
          case 131: break;
          case 62: 
            { return TaraTypes.ABSTRACT;
            }
          case 132: break;
          case 63: 
            { return TaraTypes.VOLATILE;
            }
          case 133: break;
          case 64: 
            { return TaraTypes.REACTIVE;
            }
          case 134: break;
          case 65: 
            { return TaraTypes.ENCLOSED;
            }
          case 135: break;
          case 66: 
            { return TaraTypes.TERMINAL;
            }
          case 136: break;
          case 67: 
            { return TaraTypes.RESOURCE_TYPE;
            }
          case 137: break;
          case 68: 
            { return TaraTypes.FUNCTION_TYPE;
            }
          case 138: break;
          case 69: 
            { return TaraTypes.VERSIONED;
            }
          case 139: break;
          case 70: 
            { return TaraTypes.COMPONENT;
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
