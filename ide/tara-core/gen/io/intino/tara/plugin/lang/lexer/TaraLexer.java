/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package io.intino.tara.plugin.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.intino.tara.plugin.lang.psi.TaraTypes;
import com.intellij.psi.TokenType;
import java.util.LinkedList;
import java.util.Queue;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Tara.flex</tt>
 */
class TaraLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTED = 2;
  public static final int MULTILINE = 4;
  public static final int EXPRESSION = 6;
  public static final int EXPRESSION_MULTILINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15360 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16"+
    "\1\17\1\20\1\21\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\25\1\26\1\27\2"+
    "\25\16\0\1\30\1\16\1\31\1\32\2\10\1\33\11\10\1\34\21\10\1\35\1\36\23\10\1"+
    "\25\1\37\3\10\1\22\1\40\1\37\4\10\1\41\1\42\4\0\1\43\1\44\1\25\3\10\2\45\1"+
    "\25\1\46\1\47\1\0\1\50\5\10\1\51\2\0\1\5\1\52\1\53\13\10\1\54\1\43\1\55\1"+
    "\56\1\5\1\57\1\25\1\60\1\61\3\10\3\0\1\62\12\10\1\63\1\0\1\64\1\25\1\5\1\65"+
    "\3\10\1\51\1\66\1\21\2\10\1\63\1\67\1\70\1\71\2\25\3\10\1\72\10\25\1\73\1"+
    "\26\6\25\1\74\2\0\1\75\1\76\6\10\1\77\2\0\1\100\1\10\1\101\1\5\2\37\1\102"+
    "\1\103\1\104\2\10\1\73\1\105\1\106\1\107\1\110\1\60\1\111\1\101\1\5\1\112"+
    "\1\47\1\102\1\113\1\104\2\10\1\73\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\5\1\123\1\25\1\102\1\34\1\33\2\10\1\73\1\124\1\106\1\43\1\125\1\126\1\25"+
    "\1\101\1\5\1\40\1\25\1\102\1\103\1\104\2\10\1\73\1\124\1\106\1\107\1\117\1"+
    "\127\1\111\1\101\1\5\1\40\1\25\1\130\1\131\1\132\1\133\1\134\1\131\1\10\1"+
    "\135\1\136\1\137\1\140\1\25\1\122\1\5\1\25\1\40\1\102\1\30\1\73\2\10\1\73"+
    "\1\141\1\142\1\143\1\137\1\144\1\24\1\101\1\5\2\25\1\145\1\30\1\73\2\10\1"+
    "\73\1\141\1\106\1\143\1\137\1\144\1\31\1\101\1\5\1\146\1\25\1\145\1\30\1\73"+
    "\4\10\1\147\1\143\1\150\1\60\1\25\1\101\1\5\1\25\1\36\1\145\1\10\1\22\1\36"+
    "\2\10\1\33\1\151\1\22\1\152\1\153\1\0\1\154\1\155\1\156\1\25\1\37\5\10\1\157"+
    "\1\160\1\161\1\75\1\5\1\162\4\25\1\163\1\164\1\165\1\37\1\166\1\167\1\157"+
    "\1\170\1\171\1\172\1\5\1\173\4\25\1\126\2\25\1\174\1\5\1\162\1\175\1\176\1"+
    "\10\1\37\3\10\1\26\1\42\1\0\1\143\1\177\1\0\1\42\3\0\1\46\1\200\7\25\5\10"+
    "\1\51\1\0\1\201\1\5\1\162\1\63\1\202\1\203\1\204\1\205\1\10\1\206\1\207\1"+
    "\5\1\210\4\10\1\34\1\211\5\10\1\212\51\10\1\132\1\22\1\132\5\10\1\132\4\10"+
    "\1\132\1\22\1\132\1\10\1\22\7\10\1\132\10\10\1\213\4\25\2\10\2\25\12\10\1"+
    "\26\1\25\1\37\114\10\1\103\2\10\1\37\2\10\1\45\11\10\1\131\1\126\1\25\1\10"+
    "\1\30\1\214\1\25\2\10\1\214\1\25\2\10\1\215\1\25\1\10\1\30\1\216\1\25\6\10"+
    "\1\217\3\0\1\220\1\221\1\5\1\162\3\25\1\222\1\5\1\162\13\10\1\25\5\10\1\223"+
    "\10\10\1\224\1\25\3\10\1\26\1\0\1\2\1\0\1\2\1\122\1\5\3\10\1\224\1\26\1\25"+
    "\5\10\1\112\2\0\1\53\1\174\1\5\1\162\4\25\2\10\1\161\1\2\6\10\1\177\1\75\3"+
    "\0\1\107\1\5\1\162\1\5\1\162\1\41\13\25\1\225\5\10\1\217\1\0\1\225\1\112\1"+
    "\5\1\162\1\25\1\226\1\2\1\25\1\227\3\10\1\100\1\204\1\5\1\65\4\10\1\63\1\0"+
    "\1\2\1\25\4\10\1\217\2\0\1\25\1\5\1\230\1\5\1\65\3\10\1\224\12\25\1\231\2"+
    "\0\1\232\1\233\1\25\30\10\4\0\1\75\2\25\1\74\42\10\2\224\4\10\2\224\1\10\1"+
    "\234\3\10\1\224\6\10\1\30\1\171\1\235\1\26\1\236\1\112\1\10\1\26\1\235\1\26"+
    "\1\25\1\226\3\25\1\237\1\25\1\41\1\126\1\25\1\240\1\25\1\46\1\241\1\40\1\41"+
    "\2\25\1\10\1\26\3\10\1\45\2\25\1\0\1\46\1\242\1\0\1\243\1\25\1\244\1\36\1"+
    "\151\1\245\1\27\1\246\1\10\1\247\1\250\1\251\2\25\5\10\1\126\116\25\5\10\1"+
    "\22\5\10\1\22\20\10\1\26\1\252\1\253\1\25\4\10\1\34\1\211\7\10\1\41\1\25\1"+
    "\60\2\10\1\22\1\25\10\22\4\0\5\25\1\41\72\25\1\250\3\25\1\37\1\206\1\245\1"+
    "\26\1\37\11\10\1\22\1\254\1\37\12\10\1\212\1\250\4\10\1\224\1\37\12\10\1\22"+
    "\2\25\3\10\1\45\6\25\170\10\1\224\11\25\71\10\1\26\6\25\21\10\1\26\10\25\5"+
    "\10\1\224\41\10\1\26\2\10\1\5\1\255\2\25\5\10\1\161\1\74\1\256\3\10\1\60\12"+
    "\10\1\174\3\25\1\41\1\10\1\36\14\10\1\257\1\112\1\25\1\10\1\45\11\25\1\10"+
    "\1\260\1\261\2\10\1\51\2\25\1\126\6\10\1\112\1\25\1\262\5\10\1\217\1\0\1\46"+
    "\1\25\1\5\1\162\2\0\1\262\1\47\1\5\1\65\2\10\1\63\1\172\2\10\1\161\1\0\1\2"+
    "\1\25\3\10\1\26\1\76\5\10\1\51\1\0\1\243\1\41\1\5\1\162\2\25\1\155\1\263\5"+
    "\10\1\100\1\75\1\25\1\261\1\264\1\5\1\162\2\10\1\22\1\265\6\10\1\203\1\266"+
    "\1\223\2\25\1\267\1\10\1\51\1\270\1\25\3\271\1\25\2\22\22\25\4\10\1\51\1\272"+
    "\1\5\1\162\64\10\1\112\1\25\2\10\1\22\1\273\5\10\1\112\40\25\55\10\1\224\15"+
    "\10\1\24\4\25\1\22\1\25\1\273\1\274\1\10\1\73\1\22\1\171\1\275\15\10\1\24"+
    "\3\25\1\273\54\10\1\224\2\25\10\10\1\36\6\10\5\25\1\10\1\26\2\0\2\25\1\75"+
    "\1\25\1\134\2\25\1\250\3\25\1\40\1\30\20\10\1\276\1\240\1\25\1\5\1\162\1\37"+
    "\2\10\1\113\1\37\2\10\1\45\1\277\12\10\1\22\3\36\1\300\1\301\2\25\1\302\1"+
    "\10\1\141\2\10\1\22\2\10\1\303\1\10\1\224\1\10\1\224\4\25\17\10\1\45\10\25"+
    "\6\10\1\26\20\25\1\304\20\25\3\10\1\26\6\10\1\126\5\25\3\10\1\22\2\25\3\10"+
    "\1\45\6\25\3\10\1\224\4\10\1\112\1\10\1\245\5\25\23\10\1\224\1\5\1\162\52"+
    "\25\1\224\1\73\4\10\1\34\1\305\2\10\1\224\25\25\2\10\1\224\1\25\3\10\1\24"+
    "\10\25\7\10\1\277\10\25\1\306\1\74\1\141\1\37\2\10\1\112\1\116\4\25\3\10\1"+
    "\26\20\25\6\10\1\224\1\25\2\10\1\224\1\25\2\10\1\45\21\25\11\10\1\126\66\25"+
    "\1\227\6\10\1\0\1\75\3\25\1\122\1\5\2\25\1\227\5\10\1\0\1\307\2\25\3\10\1"+
    "\126\1\5\1\162\1\227\3\10\1\161\1\0\1\310\1\5\10\25\1\227\5\10\1\51\1\0\1"+
    "\311\1\25\1\5\1\162\42\25\1\155\1\263\72\25\1\155\1\263\56\25\1\155\1\263"+
    "\4\25\5\10\1\51\1\0\1\25\1\5\1\162\14\25\1\155\1\263\64\25\1\155\1\263\42"+
    "\25\55\10\1\22\22\25\14\10\1\45\63\25\5\10\1\22\72\25\7\10\1\126\4\25\1\155"+
    "\1\263\34\25\1\155\1\263\64\25\10\10\1\26\1\25\1\100\4\0\1\75\1\25\1\60\1"+
    "\227\1\10\14\25\1\24\153\25\1\312\1\313\2\0\1\314\1\2\3\25\1\315\22\25\1\316"+
    "\67\25\12\10\1\30\10\10\1\30\1\317\1\320\1\10\1\321\1\141\7\10\1\34\1\322"+
    "\2\30\3\10\1\323\1\171\1\36\1\73\51\10\1\224\3\10\1\73\2\10\1\212\3\10\1\212"+
    "\2\10\1\30\3\10\1\30\2\10\1\22\3\10\1\22\3\10\1\73\3\10\1\73\2\10\1\212\1"+
    "\324\6\5\1\141\3\10\1\163\1\37\1\212\1\325\1\244\1\326\1\163\1\234\1\163\2"+
    "\212\1\121\1\10\1\33\1\10\1\112\1\327\1\33\1\10\1\112\50\25\32\10\1\22\5\25"+
    "\106\10\1\26\1\25\33\10\1\224\74\25\1\120\3\25\14\0\20\25\36\0\2\25");

  /* The ZZ_CMAP_A table has 1728 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\63\1\3\1\64\2\0\1\1\6\63\4\0\1\2\1\65\1\41\1\0\1\44\1\54\1\0\1\42\1\33"+
    "\1\34\1\53\1\66\1\50\1\43\1\45\1\47\12\70\1\51\1\57\1\55\1\52\1\4\1\0\1\56"+
    "\4\44\1\62\15\44\1\35\1\71\1\36\1\0\1\44\1\0\1\11\1\7\1\26\1\15\1\14\1\31"+
    "\1\61\1\10\1\20\1\60\1\44\1\16\1\30\1\22\1\24\1\27\1\32\1\13\1\5\1\21\1\6"+
    "\1\12\1\17\1\25\1\23\1\44\1\37\1\1\1\40\1\0\1\63\2\0\4\44\4\0\1\44\2\0\1\63"+
    "\2\0\1\54\4\0\1\44\1\0\1\46\2\0\1\44\5\0\7\44\1\0\2\44\4\0\4\44\16\0\5\44"+
    "\7\0\1\44\1\0\1\44\1\0\5\44\1\0\2\44\6\0\1\44\1\0\3\44\1\0\1\44\1\0\4\44\1"+
    "\0\13\44\1\0\3\44\1\0\5\63\2\0\6\44\1\0\7\44\1\0\1\44\15\0\1\44\1\0\15\63"+
    "\1\0\1\63\1\0\2\63\1\0\2\63\1\0\1\63\3\44\5\0\5\63\6\0\1\44\4\0\3\63\5\0\3"+
    "\44\5\63\2\70\4\0\2\44\1\63\13\44\1\0\1\44\7\63\2\44\2\63\1\0\4\63\2\44\2"+
    "\70\3\44\2\0\1\44\7\0\1\63\1\44\1\63\6\44\3\63\2\0\11\44\3\63\1\44\6\0\2\70"+
    "\6\44\4\63\2\44\2\0\2\63\1\44\11\63\1\44\3\63\1\44\5\63\2\0\1\44\3\63\4\0"+
    "\1\44\1\0\6\44\4\0\13\63\1\0\4\63\6\44\3\63\1\44\2\63\1\44\7\63\2\44\2\63"+
    "\2\0\2\70\1\0\3\63\1\0\10\44\2\0\2\44\2\0\6\44\1\0\1\44\3\0\4\44\2\0\1\63"+
    "\1\44\7\63\2\0\2\63\2\0\3\63\1\44\5\0\2\44\1\0\5\44\4\0\3\44\4\0\2\44\1\0"+
    "\2\44\1\0\2\44\1\0\2\44\2\0\1\63\1\0\5\63\4\0\2\63\2\0\3\63\3\0\1\63\7\0\4"+
    "\44\1\0\1\44\7\0\2\70\2\63\3\44\1\63\2\0\1\44\1\0\2\44\1\0\3\44\2\63\1\0\3"+
    "\63\2\0\1\44\15\0\2\63\2\0\1\63\1\44\1\0\6\44\3\0\3\44\1\0\4\44\3\0\2\44\1"+
    "\0\1\44\1\0\2\44\3\0\2\44\3\0\2\44\4\0\5\63\3\0\3\63\1\0\4\63\2\0\1\44\6\0"+
    "\1\63\4\44\1\0\5\44\3\0\1\44\7\63\1\0\2\63\5\0\2\63\3\0\2\63\1\0\3\44\1\0"+
    "\2\44\5\0\3\44\2\0\1\44\3\63\1\0\4\63\1\44\1\0\4\44\1\0\1\44\4\0\1\63\4\0"+
    "\6\63\1\0\1\63\7\0\12\67\2\0\2\63\4\0\1\44\1\63\2\44\7\63\4\0\10\44\1\63\2"+
    "\70\7\0\2\44\1\0\1\44\2\0\2\44\1\0\1\44\2\0\1\44\6\0\4\44\1\0\3\44\1\0\1\44"+
    "\1\0\1\44\2\0\2\44\1\0\3\44\2\63\1\0\2\63\1\44\2\0\5\44\1\0\1\44\1\0\6\63"+
    "\2\0\2\70\2\0\4\44\2\63\13\0\1\63\1\0\1\63\1\0\1\63\4\0\2\63\5\44\3\63\6\0"+
    "\1\63\1\0\7\63\1\44\2\63\4\44\3\63\1\44\3\63\2\44\7\63\3\44\4\63\5\44\14\63"+
    "\1\44\1\63\2\70\4\63\7\0\1\44\2\0\3\44\1\0\7\44\2\0\3\63\2\44\3\63\3\0\2\44"+
    "\2\63\4\0\1\44\1\0\2\63\4\0\4\44\10\63\3\0\1\44\3\0\2\44\1\63\5\0\3\63\2\0"+
    "\1\44\1\63\1\44\5\0\6\44\2\0\5\63\3\44\3\0\10\63\5\44\2\70\3\0\3\44\3\63\1"+
    "\0\5\63\4\44\1\63\4\44\3\63\2\44\2\0\1\44\1\0\1\44\1\0\1\44\1\0\1\44\2\0\3"+
    "\44\1\0\6\44\2\0\2\44\2\0\5\63\5\0\1\44\5\0\6\63\1\0\1\63\3\0\4\63\11\0\1"+
    "\44\4\0\1\44\1\0\5\44\2\0\1\44\1\0\4\44\1\0\3\44\2\0\4\44\5\0\5\44\4\0\1\44"+
    "\4\0\4\44\3\63\2\44\5\0\2\63\2\0\3\44\2\70\2\44\4\0\6\63\1\0\2\44\2\0\4\44"+
    "\1\0\2\44\1\63\3\44\1\63\4\44\1\63\4\44\2\63\6\44\2\67\6\0\4\44\2\63\4\0\1"+
    "\44\1\63\4\0\1\63\5\44\2\63\3\0\3\44\4\0\3\44\2\63\2\0\6\44\1\0\3\63\1\0\2"+
    "\63\5\0\5\44\5\0\1\44\1\63\3\44\1\0\2\44\1\0\7\44\2\0\1\63\6\0\2\44\2\0\3"+
    "\44\3\0\2\44\3\0\2\44\2\0\3\63\4\0\3\44\1\0\2\44\1\0\1\44\5\0\1\63\2\0\1\44"+
    "\3\0\1\44\2\0\2\44\3\63\1\0\2\63\1\0\3\63\2\0\1\63\2\0\5\63\1\0\2\70\1\63"+
    "\4\44\10\0\5\63\3\0\6\63\2\0\3\63\2\0\4\63\4\0\3\63\5\0\1\44\2\0\2\44\2\0"+
    "\4\44\1\0\4\44\1\0\1\44\1\0\6\44\2\0\5\44\1\0\4\44\1\0\4\44\2\0\2\70\1\0\1"+
    "\44\1\0\1\44\5\0\1\44\1\0\1\44\1\0\3\44\1\0\3\44\1\0\3\44");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\22\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\1\26\1\27\1\30\1\31\2\30\1\32\3\30"+
    "\1\2\1\0\2\5\1\0\3\5\1\33\17\5\1\34"+
    "\5\5\1\35\6\5\1\36\1\37\1\3\1\40\2\0"+
    "\1\31\1\32\1\41\1\5\1\0\1\42\1\5\1\43"+
    "\1\5\1\44\1\45\7\5\1\46\23\5\1\47\1\50"+
    "\1\5\1\51\1\0\14\5\1\52\1\53\1\54\2\5"+
    "\1\55\1\56\1\5\1\57\7\5\1\0\1\5\1\0"+
    "\10\5\1\60\1\61\13\5\1\62\1\0\1\50\1\63"+
    "\11\5\1\64\3\5\1\65\5\5\1\66\6\5\1\67"+
    "\1\5\1\70\1\71\1\5\1\72\1\5\1\73\1\5"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\5"+
    "\1\103\1\5\1\104\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0122"+
    "\0\u0122\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122"+
    "\0\u0122\0\u0122\0\u0122\0\u05aa\0\u0122\0\u05e4\0\u0122\0\u0122"+
    "\0\u061e\0\u0122\0\u0658\0\u0122\0\u0692\0\u06cc\0\u0706\0\u0740"+
    "\0\u0122\0\u0122\0\u077a\0\u07b4\0\u0122\0\u07ee\0\u0828\0\u0862"+
    "\0\u089c\0\u05e4\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0488\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0488\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0488\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u061e\0\u10c4\0\u10fe\0\u07b4\0\u0828\0\u0488\0\u1138\0\u1172"+
    "\0\u0488\0\u11ac\0\u0488\0\u11e6\0\u0488\0\u0488\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u0488\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u0122\0\u1804\0\u183e\0\u0122\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u0488\0\u0488\0\u0488\0\u1b6a\0\u1ba4\0\u0488"+
    "\0\u0488\0\u1bde\0\u0488\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00"+
    "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u0488\0\u0488\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc"+
    "\0\u2236\0\u2270\0\u0488\0\u22aa\0\u22aa\0\u0488\0\u22e4\0\u231e"+
    "\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u0488"+
    "\0\u24ee\0\u2528\0\u2562\0\u0488\0\u259c\0\u25d6\0\u2610\0\u264a"+
    "\0\u2684\0\u0488\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0"+
    "\0\u0488\0\u281a\0\u0488\0\u0488\0\u2854\0\u0488\0\u288e\0\u0488"+
    "\0\u28c8\0\u0488\0\u0488\0\u0488\0\u0488\0\u0488\0\u0488\0\u0488"+
    "\0\u2902\0\u0488\0\u293c\0\u0488\0\u0488\0\u0488";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\1\30\1\27\1\31\1\32\1\27"+
    "\1\33\1\27\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\27\1\45\1\6\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\6\1\54\1\55\3\27"+
    "\1\6\1\7\1\56\1\57\2\60\1\6\41\61\1\62"+
    "\27\61\1\63\52\61\1\64\16\61\1\63\42\61\1\65"+
    "\26\61\1\66\43\61\1\67\25\61\1\70\73\0\1\7"+
    "\2\71\43\0\1\72\14\0\1\7\12\0\1\27\1\73"+
    "\12\27\1\74\11\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\1\76\25\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\17\27\1\77\6\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\4\27\1\100\21\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\1\101"+
    "\1\27\1\102\12\27\1\103\10\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\4\27\1\104\12\27\1\105\6\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\7\27\1\106\16\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\15\27\1\107"+
    "\2\27\1\110\2\27\1\111\2\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\1\112\3\27\1\113\2\27\1\114\7\27\1\115\6\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\17\27\1\116\6\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\13\27\1\117\3\27\1\120\6\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\1\121\14\27\1\122\10\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\6\27\1\123\1\124\3\27\1\125\12\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\26\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\2\27\1\126\12\27"+
    "\1\127\10\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\17\27\1\130\6\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\6\27\1\131\17\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\1\27\1\132\2\27\1\133\2\27\1\134\3\27"+
    "\1\135\12\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\44\0\1\136\23\0\2\137"+
    "\50\0\1\140\74\0\1\141\24\0\26\53\10\0\2\53"+
    "\1\0\2\53\10\0\4\53\4\0\1\53\60\0\1\55"+
    "\77\0\1\142\73\0\2\60\46\0\1\143\21\0\2\60"+
    "\14\0\1\61\5\0\2\61\16\0\1\61\102\0\1\144"+
    "\32\0\1\61\5\0\2\61\17\0\1\61\72\0\1\145"+
    "\41\0\1\61\5\0\2\61\51\0\2\71\43\0\1\72"+
    "\27\0\2\27\1\146\23\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\6\27"+
    "\1\147\17\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\26\150\11\0\1\150"+
    "\13\0\3\150\14\0\7\27\1\151\16\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\17\27\1\152\6\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\1\153"+
    "\25\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\1\154\25\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\16\27\1\155\7\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\6\27"+
    "\1\156\17\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\11\27\1\157\14\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\1\160\3\27\1\161\20\27\1\162"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\21\27\1\163\4\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\14\27\1\164\11\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\22\27"+
    "\1\165\3\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\11\27\1\166\14\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\14\27\1\167\11\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\21\27\1\170\4\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\1\27"+
    "\1\171\24\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\15\27\1\172\10\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\14\27\1\173\11\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\6\27\1\174\17\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\1\175"+
    "\13\27\1\176\11\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\1\27\1\177"+
    "\24\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\6\27\1\200\17\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\23\27\1\201\2\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\26\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\1\202\3\27\4\0\1\27\6\0\15\27\1\203\5\27"+
    "\1\204\2\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\13\27\1\205\12\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\15\27\1\206\10\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\11\27\1\207\14\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\4\27"+
    "\1\210\21\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\15\27\1\211\10\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\44\0\1\136\73\0\1\143\21\0\2\137"+
    "\1\0\64\140\1\0\5\140\64\142\1\212\5\142\67\0"+
    "\2\213\6\0\13\27\1\214\12\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\5\0"+
    "\1\215\26\150\10\0\2\150\1\75\2\0\1\216\7\0"+
    "\4\150\4\0\1\150\6\0\11\27\1\217\14\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\14\27\1\220\11\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\4\27\1\221\21\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\17\27\1\222"+
    "\6\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\21\27\1\223\4\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\1\27\1\224\24\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\11\27\1\225\14\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\7\27\1\226"+
    "\16\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\14\27\1\227\11\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\7\27\1\230\16\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\17\27\1\231\6\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\2\27\1\232"+
    "\23\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\26\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\1\27\1\233\2\27\4\0"+
    "\1\27\6\0\3\27\1\234\22\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\10\27\1\235\15\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\14\27\1\236"+
    "\11\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\7\27\1\237\7\27\1\240"+
    "\6\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\7\27\1\241\16\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\23\27\1\242\2\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\7\27\1\243\16\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\7\27\1\244"+
    "\16\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\21\27\1\245\4\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\22\27\1\246\3\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\5\27\1\247\20\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\21\27\1\250"+
    "\4\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\1\177\25\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\14\27\1\251\11\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\4\27"+
    "\1\252\21\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\63\0\1\253\4\0\2\213"+
    "\6\0\15\27\1\254\10\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\3\0\1\216"+
    "\2\0\26\255\11\0\1\255\13\0\3\255\14\0\7\27"+
    "\1\256\16\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\6\27\1\257\17\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\14\27\1\260\11\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\1\27\1\261\24\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\14\27"+
    "\1\262\11\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\13\27\1\263\12\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\17\27\1\264\6\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\15\27\1\265\10\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\16\27"+
    "\1\266\7\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\20\27\1\267\5\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\6\27\1\270\17\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\11\27\1\271\14\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\4\27"+
    "\1\272\21\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\26\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\1\27\1\273\2\27"+
    "\4\0\1\27\6\0\13\27\1\274\12\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\21\27\1\275\4\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\7\27"+
    "\1\276\16\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\17\27\1\277\6\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\4\27\1\300\21\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\14\27\1\301\11\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\1\27"+
    "\1\302\24\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\11\27\1\303\14\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\44\0\1\304\22\0\1\304\2\305\6\0"+
    "\26\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\1\27\1\306\2\27\4\0\1\27\5\0\1\215\26\255"+
    "\10\0\2\255\13\0\4\255\4\0\1\255\6\0\4\27"+
    "\1\307\21\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\4\27\1\310\21\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\13\27\1\311\12\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\6\27\1\312\17\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\13\27"+
    "\1\313\12\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\6\27\1\314\17\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\1\315\25\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\10\27\1\316\15\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\4\27\1\317"+
    "\21\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\7\27\1\320\16\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\15\27\1\321\10\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\7\27\1\322\16\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\15\27\1\323"+
    "\10\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\14\27\1\324\11\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\22\27\1\325\3\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\15\27\1\326\10\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\14\27\1\327"+
    "\11\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\13\27\1\330\12\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\6\27\1\331\17\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\70\0"+
    "\2\305\6\0\15\27\1\332\10\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\21\27\1\333\4\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\11\27\1\334"+
    "\14\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\21\27\1\335\4\27\10\0"+
    "\2\27\1\0\2\53\5\0\1\75\2\0\4\27\4\0"+
    "\1\27\6\0\5\27\1\336\20\27\10\0\2\27\1\0"+
    "\2\53\5\0\1\75\2\0\4\27\4\0\1\27\6\0"+
    "\7\27\1\337\16\27\10\0\2\27\1\0\2\53\5\0"+
    "\1\75\2\0\4\27\4\0\1\27\6\0\7\27\1\340"+
    "\16\27\10\0\2\27\1\0\2\53\5\0\1\75\2\0"+
    "\4\27\4\0\1\27\6\0\1\341\25\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\2\27\1\342\23\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\14\27"+
    "\1\343\11\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\6\27\1\344\17\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\4\27\1\345\21\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\14\27\1\346\11\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\7\27"+
    "\1\347\16\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\7\27\1\350\16\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\17\27\1\351\6\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\7\27\1\352\16\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\14\27"+
    "\1\353\11\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\7\27\1\354\16\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\7\27\1\355\16\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\7\27\1\356\16\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\10\27"+
    "\1\357\15\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\10\27\1\360\15\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\11\27\1\361\14\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\11\27\1\362\14\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\6\0\15\27"+
    "\1\363\10\27\10\0\2\27\1\0\2\53\5\0\1\75"+
    "\2\0\4\27\4\0\1\27\6\0\15\27\1\364\10\27"+
    "\10\0\2\27\1\0\2\53\5\0\1\75\2\0\4\27"+
    "\4\0\1\27\6\0\7\27\1\365\16\27\10\0\2\27"+
    "\1\0\2\53\5\0\1\75\2\0\4\27\4\0\1\27"+
    "\6\0\14\27\1\366\11\27\10\0\2\27\1\0\2\53"+
    "\5\0\1\75\2\0\4\27\4\0\1\27\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\22\1\10\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\1\1\1\11\4\1\2\11"+
    "\2\1\1\11\4\1\1\0\2\1\1\0\44\1\2\0"+
    "\4\1\1\0\41\1\1\11\2\1\1\11\1\0\34\1"+
    "\1\0\1\1\1\0\26\1\1\0\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private BlockManager blockManager = new BlockManager();
	private Queue<IElementType> queue = new LinkedList<>();
	private boolean end = false;

	private IElementType sendToken() {
		IElementType token = (end)? null : TaraTypes.NEWLINE;
		if (!queue.isEmpty())
			token = queue.poll();
		if (!queue.isEmpty())
			yypushback(yylength());
		return token;
	}

	private IElementType eof() {
		if (queue.isEmpty() && !end) {
            blockManager.eof();
            storeTokens();
            end = true;
            queue.add(TaraTypes.NEWLINE);
        }
        return sendToken();
    }

	private String getTextSpaces(String text) {
        int index = (text.indexOf(' ') == -1)? text.indexOf('\t') : text.indexOf(' ');
        return (index == -1)? "" : text.substring(index);
    }

	private boolean isWhiteLineOrEOF() {
		return (zzMarkedPos >= zzBuffer.length()) || (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '\n');
	}

    private IElementType newlineIndent() {
		if (isWhiteLineOrEOF()) return TokenType.WHITE_SPACE;
        if (queue.isEmpty()) {
            String spaces = getTextSpaces(yytext().toString());
            blockManager.spaces(spaces);
            storeTokens();
        }
        return sendToken();
    }

    private IElementType inline() {
        blockManager.openBracket(yytext().length());
        storeTokens();
        return sendToken();
    }

	private IElementType semicolon() {
        blockManager.semicolon(yytext().length());
        storeTokens();
        return sendToken();
    }

    private void storeTokens() {
        blockManager.actions();
        for (IElementType token : blockManager.actions())
            queue.offer(token);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TaraLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case YYINITIAL: {
              return eof();
            }
            case 247: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 71: break;
          case 2: 
            { return newlineIndent();
            }
          case 72: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 73: break;
          case 4: 
            { return inline();
            }
          case 74: break;
          case 5: 
            { return TaraTypes.IDENTIFIER_KEY;
            }
          case 75: break;
          case 6: 
            { return TaraTypes.LEFT_PARENTHESIS;
            }
          case 76: break;
          case 7: 
            { return TaraTypes.RIGHT_PARENTHESIS;
            }
          case 77: break;
          case 8: 
            { return TaraTypes.LEFT_SQUARE;
            }
          case 78: break;
          case 9: 
            { return TaraTypes.RIGHT_SQUARE;
            }
          case 79: break;
          case 10: 
            { return TaraTypes.LEFT_CURLY;
            }
          case 80: break;
          case 11: 
            { return TaraTypes.RIGHT_CURLY;
            }
          case 81: break;
          case 12: 
            { yybegin(QUOTED); return TaraTypes.QUOTE_BEGIN;
            }
          case 82: break;
          case 13: 
            { yybegin(EXPRESSION); return TaraTypes.EXPRESSION_BEGIN;
            }
          case 83: break;
          case 14: 
            { return TaraTypes.DOT;
            }
          case 84: break;
          case 15: 
            { return TaraTypes.COMMA;
            }
          case 85: break;
          case 16: 
            { return TaraTypes.COLON;
            }
          case 86: break;
          case 17: 
            { return TaraTypes.EQUALS;
            }
          case 87: break;
          case 18: 
            { return TaraTypes.STAR;
            }
          case 88: break;
          case 19: 
            { return TaraTypes.METRIC_VALUE_KEY;
            }
          case 89: break;
          case 20: 
            { return TaraTypes.AT;
            }
          case 90: break;
          case 21: 
            { return semicolon();
            }
          case 91: break;
          case 22: 
            { return TaraTypes.PLUS;
            }
          case 92: break;
          case 23: 
            { return TaraTypes.NATURAL_VALUE_KEY;
            }
          case 93: break;
          case 24: 
            { return TaraTypes.CHARACTER;
            }
          case 94: break;
          case 25: 
            { yybegin(YYINITIAL); return TaraTypes.QUOTE_END;
            }
          case 95: break;
          case 26: 
            { yybegin(YYINITIAL); return TaraTypes.EXPRESSION_END;
            }
          case 96: break;
          case 27: 
            { return TaraTypes.AS;
            }
          case 97: break;
          case 28: 
            { return TaraTypes.IS;
            }
          case 98: break;
          case 29: 
            { return TaraTypes.ON;
            }
          case 99: break;
          case 30: 
            { yybegin(EXPRESSION_MULTILINE); return TaraTypes.EXPRESSION_BEGIN;
            }
          case 100: break;
          case 31: 
            { return TaraTypes.NEGATIVE_VALUE_KEY;
            }
          case 101: break;
          case 32: 
            { yybegin(MULTILINE); return TaraTypes.QUOTE_BEGIN;
            }
          case 102: break;
          case 33: 
            { return TaraTypes.SUB;
            }
          case 103: break;
          case 34: 
            { return TaraTypes.USE;
            }
          case 104: break;
          case 35: 
            { return TaraTypes.HAS;
            }
          case 105: break;
          case 36: 
            { return TaraTypes.ANY;
            }
          case 106: break;
          case 37: 
            { return TaraTypes.VAR;
            }
          case 107: break;
          case 38: 
            { return TaraTypes.DSL;
            }
          case 108: break;
          case 39: 
            { yypushback(1); return TaraTypes.DOC_LINE;
            }
          case 109: break;
          case 40: 
            { return TaraTypes.DOUBLE_VALUE_KEY;
            }
          case 110: break;
          case 41: 
            { return TaraTypes.CLASS_TYPE;
            }
          case 111: break;
          case 42: 
            { return TaraTypes.LONG_TYPE;
            }
          case 112: break;
          case 43: 
            { return TaraTypes.WITH;
            }
          case 113: break;
          case 44: 
            { return TaraTypes.WORD_TYPE;
            }
          case 114: break;
          case 45: 
            { return TaraTypes.INTO;
            }
          case 115: break;
          case 46: 
            { return TaraTypes.BOOLEAN_VALUE_KEY;
            }
          case 116: break;
          case 47: 
            { return TaraTypes.TIME_TYPE;
            }
          case 117: break;
          case 48: 
            { return TaraTypes.EMPTY_REF;
            }
          case 118: break;
          case 49: 
            { return TaraTypes.DATE_TYPE;
            }
          case 119: break;
          case 50: 
            { return TaraTypes.FINAL;
            }
          case 120: break;
          case 51: 
            { return TaraTypes.STRING_TYPE;
            }
          case 121: break;
          case 52: 
            { return TaraTypes.DOUBLE_TYPE;
            }
          case 122: break;
          case 53: 
            { return TaraTypes.OBJECT_TYPE;
            }
          case 123: break;
          case 54: 
            { return TaraTypes.BOOLEAN_TYPE;
            }
          case 124: break;
          case 55: 
            { return TaraTypes.EXTENDS;
            }
          case 125: break;
          case 56: 
            { return TaraTypes.INSTANT_TYPE;
            }
          case 126: break;
          case 57: 
            { return TaraTypes.INT_TYPE;
            }
          case 127: break;
          case 58: 
            { return TaraTypes.CONCEPT;
            }
          case 128: break;
          case 59: 
            { return TaraTypes.PRIVATE;
            }
          case 129: break;
          case 60: 
            { return TaraTypes.FEATURE;
            }
          case 130: break;
          case 61: 
            { return TaraTypes.ABSTRACT;
            }
          case 131: break;
          case 62: 
            { return TaraTypes.VOLATILE;
            }
          case 132: break;
          case 63: 
            { return TaraTypes.RESOURCE_TYPE;
            }
          case 133: break;
          case 64: 
            { return TaraTypes.REACTIVE;
            }
          case 134: break;
          case 65: 
            { return TaraTypes.REQUIRED;
            }
          case 135: break;
          case 66: 
            { return TaraTypes.ENCLOSED;
            }
          case 136: break;
          case 67: 
            { return TaraTypes.TERMINAL;
            }
          case 137: break;
          case 68: 
            { return TaraTypes.FUNCTION_TYPE;
            }
          case 138: break;
          case 69: 
            { return TaraTypes.DECORABLE;
            }
          case 139: break;
          case 70: 
            { return TaraTypes.COMPONENT;
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
