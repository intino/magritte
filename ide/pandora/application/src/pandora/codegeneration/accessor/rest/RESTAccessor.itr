def type(accessor)
	package $package+ValidPackage;

	import java.net.URL;
	import teseo.restful.core.Resource;
	import teseo.restful.core.RestfulAccessor;
	import teseo.restful.exceptions.RestfulFailure;
	import com.google.gson.Gson;
	import teseo.exceptions.*;
	$formatImport

	public class $name+firstUpperCase+SnakeCaseToCamelCase$~Accessor {

		private URL url;
		private RestfulAccessor accessor = new RestfulAccessor();[
		$certificate~private URL certificate;][
		$user~private String user;][
		$auth~private String password;]

		public $name+firstUpperCase+SnakeCaseToCamelCase$~Accessor(URL url[, $certificate~URL certificate][$user, String user][$auth, String password]) {
			this.url = url;[
			$certificate~this.certificate = certificate;][
			$user~this.user = user;][
			$auth~this.password = password;]
		}

		$resource...[$NL$NL]
	}
end

def type(resource)
	public $returnType+firstUpperCase+ReturnTypeFormatter $name($parameter+signature...[, ]) $exceptionResponses+declaration {
		try {
			[java.util.Map<String, String> parameters = new java.util.HashMap<String, String>() {{
				$parameter+declaration...[$NL]
			}};][
			$parameter+fileDeclaration...[$NL]]
			$invokeSentence
		} catch (RestfulFailure e) {
			$exceptionResponses+throws
		} $parameter+exception
	}
end

def type(parameter) trigger(signature)
	$parameterType $name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter) trigger(invoke)
	parameters
end

def type(parameter & required & fileData) trigger(fileDeclaration)
	Resource resource = new Resource(new java.io.FileInputStream($name), Resource.resolveContentType($name));
end

def type(parameter & query & required) type(dateTimeData | dateData)  trigger(declaration)
	put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase.toInstant(java.time.ZoneOffset.UTC).toEpochMilli()));
end

def type(parameter & query & required & textData) trigger(declaration)
	put("$name", $name+SnakeCaseToCamelCase+firstLowerCase);
end

def type(parameter & query & required) type(boolData | integerData | realData) trigger(declaration)
	put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase));
end

def type(parameter & query & required & objectData) trigger(declaration)
	put("$name", String.valueOf(new Gson().toJson($name+SnakeCaseToCamelCase+firstLowerCase)));
end

def type(parameter & query) type(dateTimeData | dateData) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase.toInstant(java.time.ZoneOffset.UTC).toEpochMilli()));
end

def type(parameter & query) type(textData) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", $name+SnakeCaseToCamelCase+firstLowerCase);
end

def type(parameter & query) type(boolData | integerData | realData) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase));
end

def type(parameter & query & objectData) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf(new Gson().toJson($name+SnakeCaseToCamelCase+firstLowerCase)));
end

def type(parameter) trigger(declaration)
end

def type(parameter) trigger(fileDeclaration)
end

def type(fileData) trigger(exception)
	catch (java.io.IOException e) {
		e.printStackTrace();
	}
end

def trigger(exception)
end

def type(invokeSentence & void)
	$doInvoke;
end

def type(invokeSentence & object)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & file)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & html)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & date)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & datetime)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & primitive & int)
	return Integer.valueOf($doInvoke.content());
end
def type(invokeSentence & primitive)
	return $returnType+firstUpperCase.valueOf($doInvoke.content());
end

def type(exceptionResponses & none) trigger(throws)
	throw new ErrorUnknown(e.label());
end

def type(exceptionResponses) trigger(throws)
	$exceptionResponse+throws...[$NLelse ]
	throw new ErrorUnknown(e.label());
end

def type(exceptionResponse) trigger(throws)
	if (e.code().equals("$code")) throw new $exceptionName(e.label());
end

def type(exceptionResponses) trigger(declaration)
	throws [$exceptionResponse+declaration...[, ], ]ErrorUnknown
end

def type(exceptionResponse) trigger(declaration)
	$exceptionName
end

def type(auth & cert & doInvoke)
	accessor.secure(this.url, $certificate~this.certificate, this.password).$type+firstLowerCase($relativePath[, $parameters])
end

def type(auth & doInvoke)
	accessor.secure(this.url, this.user, this.password).$type+firstLowerCase($relativePath[, $parameters])
end

def type(doInvoke)
	accessor.$type+firstLowerCase(this.url, $relativePath[, $parameters])
end

def type(schemaImport)
	import $package.schemas.*;
end