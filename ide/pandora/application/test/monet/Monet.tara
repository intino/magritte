dsl Pandora

Service (path = "", title = "Catalogs") Monet as REST
	Resource (title = "Get entire catalog", path = "", type = Get) getCatalog
		Parameter (in = path) catalog-name as Text
		Parameter (in = query, required = false) start as Integer
		Parameter (in = query, required = false) end as Integer
		Response as Object(catalogResponse)
		Exception(code = ErrorNotFound)
		Exception(code = ErrorUnauthorized)
	Resource (title = "Get number of elements under catalog", path = "catalog-count", type = Get) getCatalogCount
		Parameter (in = path) catalog-name as Text
		Response as Integer
		Exception (code = ErrorNotFound)
		Exception (code = ErrorUnauthorized)
	Resource (title = "Get full description of element under given catalog", path = "", type = Get) getEntity
		Parameter (in = path) catalog-name as Text
		Parameter (in = path) entity-id as Text
		Response as Object(entityResponse)
		Exception(code = ErrorNotFound)
		Exception(code = ErrorUnauthorized)
//
//Service (path = "", title = "Process management") as REST
//	Resource startProcess", title = "Start a process of the given name", path = "", method = Post)
//		Parameter process-name", in = path) as Text
//		Parameter requester-id", in = query) as Text
//		Parameter requester-uri", in = query, required = false) as Text
//		Response(code = SuccessOk) as Text
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource contextOf", title = "Context of the given process id", path = "context-of", method = Get)
//		Parameter id", in = path) as Text
//		Response(code = SuccessOk) as Object(schema = contextResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource notifyWorkItemEnding", title = "Communicated the end of a work item", path = "finished-work-item", method = Put)
//		Parameter id", in = path) as Text
//		Response(code = SuccessOk)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource prepareSignature", title = "Prepare signature for stamping", path = "prepare-signature", method = Get)
//		Parameter signature-id", in = path) as Text
//		Parameter certificate", in = query) as Text
//		Parameter label", in = query) as Text
//		Response(code = SuccessOk) as Text
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource stampSignature", title = "Stamp signature", path = "stamp-signature", method = Post)
//		Parameter signature-id", in = path) as Text
//		Parameter signature-content", in = query) as Text
//		Response(code = SuccessOk) as Text
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//Service(path = "", title = "Form management") as REST
//	Resource getForm", title = "Form data", path = "form", method = Get)
//		Parameter id", in = path) as Text
//		Response(code = SuccessOk) as Object(schema = formResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource validateField", title = "Field validation", path = "field-validation", method = Get)
//		Parameter form-id", in = query) as Text
//		Parameter field-label", in = query) as Text
//		Parameter field-value", in = query) as Text
//		Response(code = SuccessOk) as Object(fieldValidationResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource getFieldTypeAhead", title = "Field type ahead", path = "field-type-ahead", method = Get)
//		Parameter form-id", in = query) as Text
//		Parameter field-label", in = query) as Text
//		Parameter field-value", in = query) as Text
//		Response(code = SuccessOk) as Object(schema = fieldTypeAheadResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//Service(path = "", title = "File management") as REST //TODO
//	Resource getFieldTypeAhead", title = "Download file", path = "field-type-ahead", method = Get)
//		Parameter form-id", in = query) as Text
//		Parameter field-label", in = query) as Text
//		Response(code = SuccessOk) as Object(schema = fieldTypeAheadResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//
//Service(path= "", title = "Catalogs") as REST
//	Resource getCatalog", title = "Get entire catalog", path = "", method = Get)
//		Parameter catalog-name", in = path) as Text
//		Parameter start", in = query, required = false) as Integer
//		Parameter end", in = query, required = false) as Integer
//		Response(code = SuccessOk) as Object(catalogResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource getCatalogCount", title = "Get number of elements under catalog", path = "catalog-count", method = Get)
//		Parameter catalog-name", in = path) as Text
//		Response(code = SuccessOk) as Integer
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)

Schema catalogResponse
	Member catalogElement
		Attribute id as Text
		Attribute (multiple = true) types as Text
		Attribute created as Text
		Attribute active as Bool

Schema entityResponse
	Attribute id as Text
	Attribute created as Text
	Attribute active as Bool
	Member layer
		Attribute typeName as Text
		AttributeMap

Schema contextResponse
	Attribute label as Text(defaultValue = "")
	Attribute description as Text(defaultValue = "")
	Member file
		Attribute label as Text
		Attribute downloadFileId as Text
	Member record
		Attribute format as Text(defaultValue = "None")
		Attribute data as Text
	Member trace
		Attribute instant as Text
		Attribute message as Text

Schema formResponse
	Attribute id as Text
	Attribute title as Text
	Attribute description as Text
	Attribute helper as Text
	Member field
		Attribute type as Text
		AttributeMap
	Member display
		Attribute(multiple = true) forms as Text
		// TODO ARRAY OF FORMS RECURSIVENESS IN DEFINITIONS OF SCHEMAS

Schema fieldValidationResponse
	Attribute status as Bool
	Attribute message as Text
	Member field
		Attribute type as Text
		AttributeMap

Schema fieldTypeAheadResponse
	Member typeAheadElement
		Attribute label as Text
		Attribute id as Text
