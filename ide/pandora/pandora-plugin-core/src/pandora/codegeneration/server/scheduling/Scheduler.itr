def type(scheduler)
	package $package+ValidPackage;

	import tara.magritte.Graph;
	import org.siani.pandora.scheduling.PandoraScheduler;
	import $package+ValidPackage.scheduling.*;
	import org.quartz.*;
	import java.util.LinkedHashSet;
	import java.util.Map;
	import java.util.Set;

	import static org.quartz.JobBuilder.newJob;
	import static org.quartz.CronScheduleBuilder.*;
	import static org.quartz.TriggerBuilder.newTrigger;

	public class $name+firstUpperCase+SnakeCaseToCamelCase~Schedules {

		public static void init(PandoraScheduler scheduler, Graph graph) {
			JobDetail job;
			try {
				$schedule+init...[$NL]
				scheduler.start();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}

		private static Set<Trigger> newSet(Trigger... triggers) {
			LinkedHashSet<Trigger> set = new LinkedHashSet<>();
			java.util.Collections.addAll(set, triggers);
			return set;
		}
	}
end

def type(schedule) trigger(init)
	job = newJob($name+SnakeCaseToCamelCase~Task.class).withIdentity("$name").build();
	job.getJobDataMap().put("graph", graph);
	scheduler.scheduleJob(job, newSet($task...[, ]), true);
end

def type(cronTrigger) trigger(task)
	newTrigger().withIdentity("$name").withSchedule(cronSchedule("$pattern")).build()
end

def type(oneBoot) trigger(task)
	newTrigger().startNow().build()
end